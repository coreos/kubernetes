/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [24]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[21] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq101[23] = x.VolumeSource.CinderLocal != nil && x.CinderLocal != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(24)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.Cinder == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.CephFS == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.Flocker == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.FC == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.AzureFile == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.Quobyte == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.CinderLocal == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr101 || yy2arr101 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[23] {
						if x.CinderLocal == nil {
							r.EncodeNil()
						} else {
							x.CinderLocal.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinderLocal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.CinderLocal == nil {
							r.EncodeNil()
						} else {
							x.CinderLocal.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym128 := z.DecBinary()
	_ = yym128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct129 := r.ContainerType()
		if yyct129 == codecSelferValueTypeMap1234 {
			yyl129 := r.ReadMapStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl129, d)
			}
		} else if yyct129 == codecSelferValueTypeArray1234 {
			yyl129 := r.ReadArrayStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys130Slc
	var yyhl130 bool = l >= 0
	for yyj130 := 0; ; yyj130++ {
		if yyhl130 {
			if yyj130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys130Slc = r.DecodeBytes(yys130Slc, true, true)
		yys130 := string(yys130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys130 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "cinderLocal":
			if x.VolumeSource.CinderLocal == nil {
				x.VolumeSource.CinderLocal = new(CinderLocalVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CinderLocal != nil {
					x.CinderLocal = nil
				}
			} else {
				if x.CinderLocal == nil {
					x.CinderLocal = new(CinderLocalVolumeSource)
				}
				x.CinderLocal.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys130)
		} // end switch yys130
	} // end for yyj130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj155 int
	var yyb155 bool
	var yyhl155 bool = l >= 0
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CinderLocal == nil {
		x.VolumeSource.CinderLocal = new(CinderLocalVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CinderLocal != nil {
			x.CinderLocal = nil
		}
	} else {
		if x.CinderLocal == nil {
			x.CinderLocal = new(CinderLocalVolumeSource)
		}
		x.CinderLocal.CodecDecodeSelf(d)
	}
	for {
		yyj155++
		if yyhl155 {
			yyb155 = yyj155 > l
		} else {
			yyb155 = r.CheckBreak()
		}
		if yyb155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym180 := z.EncBinary()
		_ = yym180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep181 := !z.EncBinary()
			yy2arr181 := z.EncBasicHandle().StructToArray
			var yyq181 [23]bool
			_, _, _ = yysep181, yyq181, yy2arr181
			const yyr181 bool = false
			yyq181[0] = x.HostPath != nil
			yyq181[1] = x.EmptyDir != nil
			yyq181[2] = x.GCEPersistentDisk != nil
			yyq181[3] = x.AWSElasticBlockStore != nil
			yyq181[4] = x.GitRepo != nil
			yyq181[5] = x.Secret != nil
			yyq181[6] = x.NFS != nil
			yyq181[7] = x.ISCSI != nil
			yyq181[8] = x.Glusterfs != nil
			yyq181[9] = x.PersistentVolumeClaim != nil
			yyq181[10] = x.RBD != nil
			yyq181[11] = x.FlexVolume != nil
			yyq181[12] = x.Cinder != nil
			yyq181[13] = x.CephFS != nil
			yyq181[14] = x.Flocker != nil
			yyq181[15] = x.DownwardAPI != nil
			yyq181[16] = x.FC != nil
			yyq181[17] = x.AzureFile != nil
			yyq181[18] = x.ConfigMap != nil
			yyq181[19] = x.VsphereVolume != nil
			yyq181[20] = x.Quobyte != nil
			yyq181[21] = x.AzureDisk != nil
			yyq181[22] = x.CinderLocal != nil
			var yynn181 int
			if yyr181 || yy2arr181 {
				r.EncodeArrayStart(23)
			} else {
				yynn181 = 0
				for _, b := range yyq181 {
					if b {
						yynn181++
					}
				}
				r.EncodeMapStart(yynn181)
				yynn181 = 0
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[20] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[22] {
					if x.CinderLocal == nil {
						r.EncodeNil()
					} else {
						x.CinderLocal.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinderLocal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CinderLocal == nil {
						r.EncodeNil()
					} else {
						x.CinderLocal.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym205 := z.DecBinary()
	_ = yym205
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct206 := r.ContainerType()
		if yyct206 == codecSelferValueTypeMap1234 {
			yyl206 := r.ReadMapStart()
			if yyl206 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl206, d)
			}
		} else if yyct206 == codecSelferValueTypeArray1234 {
			yyl206 := r.ReadArrayStart()
			if yyl206 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl206, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys207Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys207Slc
	var yyhl207 bool = l >= 0
	for yyj207 := 0; ; yyj207++ {
		if yyhl207 {
			if yyj207 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys207Slc = r.DecodeBytes(yys207Slc, true, true)
		yys207 := string(yys207Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys207 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "cinderLocal":
			if r.TryDecodeAsNil() {
				if x.CinderLocal != nil {
					x.CinderLocal = nil
				}
			} else {
				if x.CinderLocal == nil {
					x.CinderLocal = new(CinderLocalVolumeSource)
				}
				x.CinderLocal.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys207)
		} // end switch yys207
	} // end for yyj207
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj231 int
	var yyb231 bool
	var yyhl231 bool = l >= 0
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CinderLocal != nil {
			x.CinderLocal = nil
		}
	} else {
		if x.CinderLocal == nil {
			x.CinderLocal = new(CinderLocalVolumeSource)
		}
		x.CinderLocal.CodecDecodeSelf(d)
	}
	for {
		yyj231++
		if yyhl231 {
			yyb231 = yyj231 > l
		} else {
			yyb231 = r.CheckBreak()
		}
		if yyb231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym255 := z.EncBinary()
		_ = yym255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep256 := !z.EncBinary()
			yy2arr256 := z.EncBasicHandle().StructToArray
			var yyq256 [2]bool
			_, _, _ = yysep256, yyq256, yy2arr256
			const yyr256 bool = false
			yyq256[1] = x.ReadOnly != false
			var yynn256 int
			if yyr256 || yy2arr256 {
				r.EncodeArrayStart(2)
			} else {
				yynn256 = 1
				for _, b := range yyq256 {
					if b {
						yynn256++
					}
				}
				r.EncodeMapStart(yynn256)
				yynn256 = 0
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym258 := z.EncBinary()
				_ = yym258
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym259 := z.EncBinary()
				_ = yym259
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[1] {
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq256[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym263 := z.DecBinary()
	_ = yym263
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct264 := r.ContainerType()
		if yyct264 == codecSelferValueTypeMap1234 {
			yyl264 := r.ReadMapStart()
			if yyl264 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl264, d)
			}
		} else if yyct264 == codecSelferValueTypeArray1234 {
			yyl264 := r.ReadArrayStart()
			if yyl264 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl264, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys265Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys265Slc
	var yyhl265 bool = l >= 0
	for yyj265 := 0; ; yyj265++ {
		if yyhl265 {
			if yyj265 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys265Slc = r.DecodeBytes(yys265Slc, true, true)
		yys265 := string(yys265Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys265 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys265)
		} // end switch yys265
	} // end for yyj265
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj268 int
	var yyb268 bool
	var yyhl268 bool = l >= 0
	yyj268++
	if yyhl268 {
		yyb268 = yyj268 > l
	} else {
		yyb268 = r.CheckBreak()
	}
	if yyb268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj268++
	if yyhl268 {
		yyb268 = yyj268 > l
	} else {
		yyb268 = r.CheckBreak()
	}
	if yyb268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj268++
		if yyhl268 {
			yyb268 = yyj268 > l
		} else {
			yyb268 = r.CheckBreak()
		}
		if yyb268 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj268-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym271 := z.EncBinary()
		_ = yym271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep272 := !z.EncBinary()
			yy2arr272 := z.EncBasicHandle().StructToArray
			var yyq272 [17]bool
			_, _, _ = yysep272, yyq272, yy2arr272
			const yyr272 bool = false
			yyq272[0] = x.GCEPersistentDisk != nil
			yyq272[1] = x.AWSElasticBlockStore != nil
			yyq272[2] = x.HostPath != nil
			yyq272[3] = x.Glusterfs != nil
			yyq272[4] = x.NFS != nil
			yyq272[5] = x.RBD != nil
			yyq272[6] = x.ISCSI != nil
			yyq272[7] = x.Cinder != nil
			yyq272[8] = x.CephFS != nil
			yyq272[9] = x.FC != nil
			yyq272[10] = x.Flocker != nil
			yyq272[11] = x.FlexVolume != nil
			yyq272[12] = x.AzureFile != nil
			yyq272[13] = x.VsphereVolume != nil
			yyq272[14] = x.Quobyte != nil
			yyq272[15] = x.AzureDisk != nil
			yyq272[16] = x.CinderLocal != nil
			var yynn272 int
			if yyr272 || yy2arr272 {
				r.EncodeArrayStart(17)
			} else {
				yynn272 = 0
				for _, b := range yyq272 {
					if b {
						yynn272++
					}
				}
				r.EncodeMapStart(yynn272)
				yynn272 = 0
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[14] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[16] {
					if x.CinderLocal == nil {
						r.EncodeNil()
					} else {
						x.CinderLocal.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinderLocal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CinderLocal == nil {
						r.EncodeNil()
					} else {
						x.CinderLocal.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym290 := z.DecBinary()
	_ = yym290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct291 := r.ContainerType()
		if yyct291 == codecSelferValueTypeMap1234 {
			yyl291 := r.ReadMapStart()
			if yyl291 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl291, d)
			}
		} else if yyct291 == codecSelferValueTypeArray1234 {
			yyl291 := r.ReadArrayStart()
			if yyl291 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl291, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys292Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys292Slc
	var yyhl292 bool = l >= 0
	for yyj292 := 0; ; yyj292++ {
		if yyhl292 {
			if yyj292 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys292Slc = r.DecodeBytes(yys292Slc, true, true)
		yys292 := string(yys292Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys292 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "cinderLocal":
			if r.TryDecodeAsNil() {
				if x.CinderLocal != nil {
					x.CinderLocal = nil
				}
			} else {
				if x.CinderLocal == nil {
					x.CinderLocal = new(CinderLocalVolumeSource)
				}
				x.CinderLocal.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys292)
		} // end switch yys292
	} // end for yyj292
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj310 int
	var yyb310 bool
	var yyhl310 bool = l >= 0
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CinderLocal != nil {
			x.CinderLocal = nil
		}
	} else {
		if x.CinderLocal == nil {
			x.CinderLocal = new(CinderLocalVolumeSource)
		}
		x.CinderLocal.CodecDecodeSelf(d)
	}
	for {
		yyj310++
		if yyhl310 {
			yyb310 = yyj310 > l
		} else {
			yyb310 = r.CheckBreak()
		}
		if yyb310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym328 := z.EncBinary()
		_ = yym328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep329 := !z.EncBinary()
			yy2arr329 := z.EncBasicHandle().StructToArray
			var yyq329 [5]bool
			_, _, _ = yysep329, yyq329, yy2arr329
			const yyr329 bool = false
			yyq329[0] = x.Kind != ""
			yyq329[1] = x.APIVersion != ""
			yyq329[2] = true
			yyq329[3] = true
			yyq329[4] = true
			var yynn329 int
			if yyr329 || yy2arr329 {
				r.EncodeArrayStart(5)
			} else {
				yynn329 = 0
				for _, b := range yyq329 {
					if b {
						yynn329++
					}
				}
				r.EncodeMapStart(yynn329)
				yynn329 = 0
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[0] {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[1] {
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[2] {
					yy337 := &x.ObjectMeta
					yy337.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy338 := &x.ObjectMeta
					yy338.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[3] {
					yy340 := &x.Spec
					yy340.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy341 := &x.Spec
					yy341.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[4] {
					yy343 := &x.Status
					yy343.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy344 := &x.Status
					yy344.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym345 := z.DecBinary()
	_ = yym345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct346 := r.ContainerType()
		if yyct346 == codecSelferValueTypeMap1234 {
			yyl346 := r.ReadMapStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl346, d)
			}
		} else if yyct346 == codecSelferValueTypeArray1234 {
			yyl346 := r.ReadArrayStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl346, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys347Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys347Slc
	var yyhl347 bool = l >= 0
	for yyj347 := 0; ; yyj347++ {
		if yyhl347 {
			if yyj347 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys347Slc = r.DecodeBytes(yys347Slc, true, true)
		yys347 := string(yys347Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys347 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv350 := &x.ObjectMeta
				yyv350.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv351 := &x.Spec
				yyv351.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv352 := &x.Status
				yyv352.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys347)
		} // end switch yys347
	} // end for yyj347
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj353 int
	var yyb353 bool
	var yyhl353 bool = l >= 0
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv356 := &x.ObjectMeta
		yyv356.CodecDecodeSelf(d)
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv357 := &x.Spec
		yyv357.CodecDecodeSelf(d)
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv358 := &x.Status
		yyv358.CodecDecodeSelf(d)
	}
	for {
		yyj353++
		if yyhl353 {
			yyb353 = yyj353 > l
		} else {
			yyb353 = r.CheckBreak()
		}
		if yyb353 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj353-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym359 := z.EncBinary()
		_ = yym359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep360 := !z.EncBinary()
			yy2arr360 := z.EncBasicHandle().StructToArray
			var yyq360 [21]bool
			_, _, _ = yysep360, yyq360, yy2arr360
			const yyr360 bool = false
			yyq360[0] = len(x.Capacity) != 0
			yyq360[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq360[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq360[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq360[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq360[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq360[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq360[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq360[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq360[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq360[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq360[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq360[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq360[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq360[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq360[15] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq360[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq360[17] = x.PersistentVolumeSource.CinderLocal != nil && x.CinderLocal != nil
			yyq360[18] = len(x.AccessModes) != 0
			yyq360[19] = x.ClaimRef != nil
			yyq360[20] = x.PersistentVolumeReclaimPolicy != ""
			var yynn360 int
			if yyr360 || yy2arr360 {
				r.EncodeArrayStart(21)
			} else {
				yynn360 = 0
				for _, b := range yyq360 {
					if b {
						yynn360++
					}
				}
				r.EncodeMapStart(yynn360)
				yynn360 = 0
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn362 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn362 = true
				goto LABEL362
			}
		LABEL362:
			if yyr360 || yy2arr360 {
				if yyn362 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn362 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn363 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn363 = true
				goto LABEL363
			}
		LABEL363:
			if yyr360 || yy2arr360 {
				if yyn363 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn363 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn364 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn364 = true
				goto LABEL364
			}
		LABEL364:
			if yyr360 || yy2arr360 {
				if yyn364 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn364 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn365 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn365 = true
				goto LABEL365
			}
		LABEL365:
			if yyr360 || yy2arr360 {
				if yyn365 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn365 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn366 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn366 = true
				goto LABEL366
			}
		LABEL366:
			if yyr360 || yy2arr360 {
				if yyn366 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn366 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn367 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn367 = true
				goto LABEL367
			}
		LABEL367:
			if yyr360 || yy2arr360 {
				if yyn367 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn367 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn368 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn368 = true
				goto LABEL368
			}
		LABEL368:
			if yyr360 || yy2arr360 {
				if yyn368 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn368 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn369 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn369 = true
				goto LABEL369
			}
		LABEL369:
			if yyr360 || yy2arr360 {
				if yyn369 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn369 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn370 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn370 = true
				goto LABEL370
			}
		LABEL370:
			if yyr360 || yy2arr360 {
				if yyn370 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn370 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn371 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn371 = true
				goto LABEL371
			}
		LABEL371:
			if yyr360 || yy2arr360 {
				if yyn371 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn371 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn372 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn372 = true
				goto LABEL372
			}
		LABEL372:
			if yyr360 || yy2arr360 {
				if yyn372 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn372 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn373 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn373 = true
				goto LABEL373
			}
		LABEL373:
			if yyr360 || yy2arr360 {
				if yyn373 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn373 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn374 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn374 = true
				goto LABEL374
			}
		LABEL374:
			if yyr360 || yy2arr360 {
				if yyn374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn374 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn375 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn375 = true
				goto LABEL375
			}
		LABEL375:
			if yyr360 || yy2arr360 {
				if yyn375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn375 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn376 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn376 = true
				goto LABEL376
			}
		LABEL376:
			if yyr360 || yy2arr360 {
				if yyn376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[15] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn376 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn377 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn377 = true
				goto LABEL377
			}
		LABEL377:
			if yyr360 || yy2arr360 {
				if yyn377 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn377 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn378 bool
			if x.PersistentVolumeSource.CinderLocal == nil {
				yyn378 = true
				goto LABEL378
			}
		LABEL378:
			if yyr360 || yy2arr360 {
				if yyn378 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[17] {
						if x.CinderLocal == nil {
							r.EncodeNil()
						} else {
							x.CinderLocal.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinderLocal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn378 {
						r.EncodeNil()
					} else {
						if x.CinderLocal == nil {
							r.EncodeNil()
						} else {
							x.CinderLocal.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[18] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym380 := z.EncBinary()
						_ = yym380
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym381 := z.EncBinary()
						_ = yym381
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[19] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[20] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym384 := z.DecBinary()
	_ = yym384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct385 := r.ContainerType()
		if yyct385 == codecSelferValueTypeMap1234 {
			yyl385 := r.ReadMapStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl385, d)
			}
		} else if yyct385 == codecSelferValueTypeArray1234 {
			yyl385 := r.ReadArrayStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys386Slc
	var yyhl386 bool = l >= 0
	for yyj386 := 0; ; yyj386++ {
		if yyhl386 {
			if yyj386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys386Slc = r.DecodeBytes(yys386Slc, true, true)
		yys386 := string(yys386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys386 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv387 := &x.Capacity
				yyv387.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "cinderLocal":
			if x.PersistentVolumeSource.CinderLocal == nil {
				x.PersistentVolumeSource.CinderLocal = new(CinderLocalVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CinderLocal != nil {
					x.CinderLocal = nil
				}
			} else {
				if x.CinderLocal == nil {
					x.CinderLocal = new(CinderLocalVolumeSource)
				}
				x.CinderLocal.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv405 := &x.AccessModes
				yym406 := z.DecBinary()
				_ = yym406
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv405), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys386)
		} // end switch yys386
	} // end for yyj386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj409 int
	var yyb409 bool
	var yyhl409 bool = l >= 0
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv410 := &x.Capacity
		yyv410.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CinderLocal == nil {
		x.PersistentVolumeSource.CinderLocal = new(CinderLocalVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CinderLocal != nil {
			x.CinderLocal = nil
		}
	} else {
		if x.CinderLocal == nil {
			x.CinderLocal = new(CinderLocalVolumeSource)
		}
		x.CinderLocal.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv428 := &x.AccessModes
		yym429 := z.DecBinary()
		_ = yym429
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv428), d)
		}
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj409++
		if yyhl409 {
			yyb409 = yyj409 > l
		} else {
			yyb409 = r.CheckBreak()
		}
		if yyb409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym432 := z.EncBinary()
	_ = yym432
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym433 := z.DecBinary()
	_ = yym433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym434 := z.EncBinary()
		_ = yym434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep435 := !z.EncBinary()
			yy2arr435 := z.EncBasicHandle().StructToArray
			var yyq435 [3]bool
			_, _, _ = yysep435, yyq435, yy2arr435
			const yyr435 bool = false
			yyq435[0] = x.Phase != ""
			yyq435[1] = x.Message != ""
			yyq435[2] = x.Reason != ""
			var yynn435 int
			if yyr435 || yy2arr435 {
				r.EncodeArrayStart(3)
			} else {
				yynn435 = 0
				for _, b := range yyq435 {
					if b {
						yynn435++
					}
				}
				r.EncodeMapStart(yynn435)
				yynn435 = 0
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[1] {
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[2] {
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym442 := z.EncBinary()
					_ = yym442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym443 := z.DecBinary()
	_ = yym443
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct444 := r.ContainerType()
		if yyct444 == codecSelferValueTypeMap1234 {
			yyl444 := r.ReadMapStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl444, d)
			}
		} else if yyct444 == codecSelferValueTypeArray1234 {
			yyl444 := r.ReadArrayStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl444, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys445Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys445Slc
	var yyhl445 bool = l >= 0
	for yyj445 := 0; ; yyj445++ {
		if yyhl445 {
			if yyj445 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys445Slc = r.DecodeBytes(yys445Slc, true, true)
		yys445 := string(yys445Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys445 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys445)
		} // end switch yys445
	} // end for yyj445
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj449 int
	var yyb449 bool
	var yyhl449 bool = l >= 0
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj449++
		if yyhl449 {
			yyb449 = yyj449 > l
		} else {
			yyb449 = r.CheckBreak()
		}
		if yyb449 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj449-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym453 := z.EncBinary()
		_ = yym453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep454 := !z.EncBinary()
			yy2arr454 := z.EncBasicHandle().StructToArray
			var yyq454 [4]bool
			_, _, _ = yysep454, yyq454, yy2arr454
			const yyr454 bool = false
			yyq454[0] = x.Kind != ""
			yyq454[1] = x.APIVersion != ""
			yyq454[2] = true
			var yynn454 int
			if yyr454 || yy2arr454 {
				r.EncodeArrayStart(4)
			} else {
				yynn454 = 1
				for _, b := range yyq454 {
					if b {
						yynn454++
					}
				}
				r.EncodeMapStart(yynn454)
				yynn454 = 0
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[0] {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq454[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym457 := z.EncBinary()
					_ = yym457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[1] {
					yym459 := z.EncBinary()
					_ = yym459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq454[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[2] {
					yy462 := &x.ListMeta
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else if z.HasExtensions() && z.EncExt(yy462) {
					} else {
						z.EncFallback(yy462)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq454[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy464 := &x.ListMeta
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else if z.HasExtensions() && z.EncExt(yy464) {
					} else {
						z.EncFallback(yy464)
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym469 := z.DecBinary()
	_ = yym469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct470 := r.ContainerType()
		if yyct470 == codecSelferValueTypeMap1234 {
			yyl470 := r.ReadMapStart()
			if yyl470 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl470, d)
			}
		} else if yyct470 == codecSelferValueTypeArray1234 {
			yyl470 := r.ReadArrayStart()
			if yyl470 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys471Slc
	var yyhl471 bool = l >= 0
	for yyj471 := 0; ; yyj471++ {
		if yyhl471 {
			if yyj471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys471Slc = r.DecodeBytes(yys471Slc, true, true)
		yys471 := string(yys471Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys471 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv474 := &x.ListMeta
				yym475 := z.DecBinary()
				_ = yym475
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv474) {
				} else {
					z.DecFallback(yyv474, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv476 := &x.Items
				yym477 := z.DecBinary()
				_ = yym477
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv476), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys471)
		} // end switch yys471
	} // end for yyj471
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj478 int
	var yyb478 bool
	var yyhl478 bool = l >= 0
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv481 := &x.ListMeta
		yym482 := z.DecBinary()
		_ = yym482
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv481) {
		} else {
			z.DecFallback(yyv481, false)
		}
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv483 := &x.Items
		yym484 := z.DecBinary()
		_ = yym484
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv483), d)
		}
	}
	for {
		yyj478++
		if yyhl478 {
			yyb478 = yyj478 > l
		} else {
			yyb478 = r.CheckBreak()
		}
		if yyb478 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj478-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym485 := z.EncBinary()
		_ = yym485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep486 := !z.EncBinary()
			yy2arr486 := z.EncBasicHandle().StructToArray
			var yyq486 [5]bool
			_, _, _ = yysep486, yyq486, yy2arr486
			const yyr486 bool = false
			yyq486[0] = x.Kind != ""
			yyq486[1] = x.APIVersion != ""
			yyq486[2] = true
			yyq486[3] = true
			yyq486[4] = true
			var yynn486 int
			if yyr486 || yy2arr486 {
				r.EncodeArrayStart(5)
			} else {
				yynn486 = 0
				for _, b := range yyq486 {
					if b {
						yynn486++
					}
				}
				r.EncodeMapStart(yynn486)
				yynn486 = 0
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[0] {
					yym488 := z.EncBinary()
					_ = yym488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq486[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[1] {
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq486[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[2] {
					yy494 := &x.ObjectMeta
					yy494.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy495 := &x.ObjectMeta
					yy495.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[3] {
					yy497 := &x.Spec
					yy497.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy498 := &x.Spec
					yy498.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[4] {
					yy500 := &x.Status
					yy500.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy501 := &x.Status
					yy501.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym502 := z.DecBinary()
	_ = yym502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct503 := r.ContainerType()
		if yyct503 == codecSelferValueTypeMap1234 {
			yyl503 := r.ReadMapStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl503, d)
			}
		} else if yyct503 == codecSelferValueTypeArray1234 {
			yyl503 := r.ReadArrayStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl503, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys504Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys504Slc
	var yyhl504 bool = l >= 0
	for yyj504 := 0; ; yyj504++ {
		if yyhl504 {
			if yyj504 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys504Slc = r.DecodeBytes(yys504Slc, true, true)
		yys504 := string(yys504Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys504 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv507 := &x.ObjectMeta
				yyv507.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv508 := &x.Spec
				yyv508.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv509 := &x.Status
				yyv509.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys504)
		} // end switch yys504
	} // end for yyj504
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj510 int
	var yyb510 bool
	var yyhl510 bool = l >= 0
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv513 := &x.ObjectMeta
		yyv513.CodecDecodeSelf(d)
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv514 := &x.Spec
		yyv514.CodecDecodeSelf(d)
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv515 := &x.Status
		yyv515.CodecDecodeSelf(d)
	}
	for {
		yyj510++
		if yyhl510 {
			yyb510 = yyj510 > l
		} else {
			yyb510 = r.CheckBreak()
		}
		if yyb510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym516 := z.EncBinary()
		_ = yym516
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep517 := !z.EncBinary()
			yy2arr517 := z.EncBasicHandle().StructToArray
			var yyq517 [4]bool
			_, _, _ = yysep517, yyq517, yy2arr517
			const yyr517 bool = false
			yyq517[0] = x.Kind != ""
			yyq517[1] = x.APIVersion != ""
			yyq517[2] = true
			var yynn517 int
			if yyr517 || yy2arr517 {
				r.EncodeArrayStart(4)
			} else {
				yynn517 = 1
				for _, b := range yyq517 {
					if b {
						yynn517++
					}
				}
				r.EncodeMapStart(yynn517)
				yynn517 = 0
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[0] {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[1] {
					yym522 := z.EncBinary()
					_ = yym522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym523 := z.EncBinary()
					_ = yym523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[2] {
					yy525 := &x.ListMeta
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else if z.HasExtensions() && z.EncExt(yy525) {
					} else {
						z.EncFallback(yy525)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq517[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy527 := &x.ListMeta
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else if z.HasExtensions() && z.EncExt(yy527) {
					} else {
						z.EncFallback(yy527)
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct533 := r.ContainerType()
		if yyct533 == codecSelferValueTypeMap1234 {
			yyl533 := r.ReadMapStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl533, d)
			}
		} else if yyct533 == codecSelferValueTypeArray1234 {
			yyl533 := r.ReadArrayStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys534Slc
	var yyhl534 bool = l >= 0
	for yyj534 := 0; ; yyj534++ {
		if yyhl534 {
			if yyj534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys534Slc = r.DecodeBytes(yys534Slc, true, true)
		yys534 := string(yys534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys534 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv537 := &x.ListMeta
				yym538 := z.DecBinary()
				_ = yym538
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv537) {
				} else {
					z.DecFallback(yyv537, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv539 := &x.Items
				yym540 := z.DecBinary()
				_ = yym540
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv539), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys534)
		} // end switch yys534
	} // end for yyj534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj541 int
	var yyb541 bool
	var yyhl541 bool = l >= 0
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv544 := &x.ListMeta
		yym545 := z.DecBinary()
		_ = yym545
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv544) {
		} else {
			z.DecFallback(yyv544, false)
		}
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv546 := &x.Items
		yym547 := z.DecBinary()
		_ = yym547
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv546), d)
		}
	}
	for {
		yyj541++
		if yyhl541 {
			yyb541 = yyj541 > l
		} else {
			yyb541 = r.CheckBreak()
		}
		if yyb541 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj541-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym548 := z.EncBinary()
		_ = yym548
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep549 := !z.EncBinary()
			yy2arr549 := z.EncBasicHandle().StructToArray
			var yyq549 [4]bool
			_, _, _ = yysep549, yyq549, yy2arr549
			const yyr549 bool = false
			yyq549[0] = len(x.AccessModes) != 0
			yyq549[1] = x.Selector != nil
			yyq549[2] = true
			yyq549[3] = x.VolumeName != ""
			var yynn549 int
			if yyr549 || yy2arr549 {
				r.EncodeArrayStart(4)
			} else {
				yynn549 = 0
				for _, b := range yyq549 {
					if b {
						yynn549++
					}
				}
				r.EncodeMapStart(yynn549)
				yynn549 = 0
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym551 := z.EncBinary()
						_ = yym551
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym552 := z.EncBinary()
						_ = yym552
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym554 := z.EncBinary()
						_ = yym554
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym555 := z.EncBinary()
						_ = yym555
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[2] {
					yy557 := &x.Resources
					yy557.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy558 := &x.Resources
					yy558.CodecEncodeSelf(e)
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[3] {
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq549[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym562 := z.DecBinary()
	_ = yym562
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct563 := r.ContainerType()
		if yyct563 == codecSelferValueTypeMap1234 {
			yyl563 := r.ReadMapStart()
			if yyl563 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl563, d)
			}
		} else if yyct563 == codecSelferValueTypeArray1234 {
			yyl563 := r.ReadArrayStart()
			if yyl563 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl563, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys564Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys564Slc
	var yyhl564 bool = l >= 0
	for yyj564 := 0; ; yyj564++ {
		if yyhl564 {
			if yyj564 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys564Slc = r.DecodeBytes(yys564Slc, true, true)
		yys564 := string(yys564Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys564 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv565 := &x.AccessModes
				yym566 := z.DecBinary()
				_ = yym566
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv565), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym568 := z.DecBinary()
				_ = yym568
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv569 := &x.Resources
				yyv569.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys564)
		} // end switch yys564
	} // end for yyj564
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj571 int
	var yyb571 bool
	var yyhl571 bool = l >= 0
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv572 := &x.AccessModes
		yym573 := z.DecBinary()
		_ = yym573
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv572), d)
		}
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym575 := z.DecBinary()
		_ = yym575
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv576 := &x.Resources
		yyv576.CodecDecodeSelf(d)
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj571++
		if yyhl571 {
			yyb571 = yyj571 > l
		} else {
			yyb571 = r.CheckBreak()
		}
		if yyb571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym578 := z.EncBinary()
		_ = yym578
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep579 := !z.EncBinary()
			yy2arr579 := z.EncBasicHandle().StructToArray
			var yyq579 [3]bool
			_, _, _ = yysep579, yyq579, yy2arr579
			const yyr579 bool = false
			yyq579[0] = x.Phase != ""
			yyq579[1] = len(x.AccessModes) != 0
			yyq579[2] = len(x.Capacity) != 0
			var yynn579 int
			if yyr579 || yy2arr579 {
				r.EncodeArrayStart(3)
			} else {
				yynn579 = 0
				for _, b := range yyq579 {
					if b {
						yynn579++
					}
				}
				r.EncodeMapStart(yynn579)
				yynn579 = 0
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq579[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym582 := z.EncBinary()
						_ = yym582
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym583 := z.EncBinary()
						_ = yym583
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym585 := z.DecBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct586 := r.ContainerType()
		if yyct586 == codecSelferValueTypeMap1234 {
			yyl586 := r.ReadMapStart()
			if yyl586 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl586, d)
			}
		} else if yyct586 == codecSelferValueTypeArray1234 {
			yyl586 := r.ReadArrayStart()
			if yyl586 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl586, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys587Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys587Slc
	var yyhl587 bool = l >= 0
	for yyj587 := 0; ; yyj587++ {
		if yyhl587 {
			if yyj587 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys587Slc = r.DecodeBytes(yys587Slc, true, true)
		yys587 := string(yys587Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys587 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv589 := &x.AccessModes
				yym590 := z.DecBinary()
				_ = yym590
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv589), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv591 := &x.Capacity
				yyv591.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys587)
		} // end switch yys587
	} // end for yyj587
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj592 int
	var yyb592 bool
	var yyhl592 bool = l >= 0
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv594 := &x.AccessModes
		yym595 := z.DecBinary()
		_ = yym595
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv594), d)
		}
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv596 := &x.Capacity
		yyv596.CodecDecodeSelf(d)
	}
	for {
		yyj592++
		if yyhl592 {
			yyb592 = yyj592 > l
		} else {
			yyb592 = r.CheckBreak()
		}
		if yyb592 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj592-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym597 := z.EncBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym598 := z.DecBinary()
	_ = yym598
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym599 := z.EncBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym600 := z.DecBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym601 := z.EncBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym602 := z.DecBinary()
	_ = yym602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym603 := z.EncBinary()
		_ = yym603
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep604 := !z.EncBinary()
			yy2arr604 := z.EncBasicHandle().StructToArray
			var yyq604 [1]bool
			_, _, _ = yysep604, yyq604, yy2arr604
			const yyr604 bool = false
			var yynn604 int
			if yyr604 || yy2arr604 {
				r.EncodeArrayStart(1)
			} else {
				yynn604 = 1
				for _, b := range yyq604 {
					if b {
						yynn604++
					}
				}
				r.EncodeMapStart(yynn604)
				yynn604 = 0
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym606 := z.EncBinary()
				_ = yym606
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym607 := z.EncBinary()
				_ = yym607
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym608 := z.DecBinary()
	_ = yym608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct609 := r.ContainerType()
		if yyct609 == codecSelferValueTypeMap1234 {
			yyl609 := r.ReadMapStart()
			if yyl609 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl609, d)
			}
		} else if yyct609 == codecSelferValueTypeArray1234 {
			yyl609 := r.ReadArrayStart()
			if yyl609 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys610Slc
	var yyhl610 bool = l >= 0
	for yyj610 := 0; ; yyj610++ {
		if yyhl610 {
			if yyj610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys610Slc = r.DecodeBytes(yys610Slc, true, true)
		yys610 := string(yys610Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys610 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys610)
		} // end switch yys610
	} // end for yyj610
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj612 int
	var yyb612 bool
	var yyhl612 bool = l >= 0
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj612++
		if yyhl612 {
			yyb612 = yyj612 > l
		} else {
			yyb612 = r.CheckBreak()
		}
		if yyb612 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj612-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym614 := z.EncBinary()
		_ = yym614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep615 := !z.EncBinary()
			yy2arr615 := z.EncBasicHandle().StructToArray
			var yyq615 [1]bool
			_, _, _ = yysep615, yyq615, yy2arr615
			const yyr615 bool = false
			yyq615[0] = x.Medium != ""
			var yynn615 int
			if yyr615 || yy2arr615 {
				r.EncodeArrayStart(1)
			} else {
				yynn615 = 0
				for _, b := range yyq615 {
					if b {
						yynn615++
					}
				}
				r.EncodeMapStart(yynn615)
				yynn615 = 0
			}
			if yyr615 || yy2arr615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq615[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq615[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr615 || yy2arr615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym617 := z.DecBinary()
	_ = yym617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct618 := r.ContainerType()
		if yyct618 == codecSelferValueTypeMap1234 {
			yyl618 := r.ReadMapStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl618, d)
			}
		} else if yyct618 == codecSelferValueTypeArray1234 {
			yyl618 := r.ReadArrayStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys619Slc
	var yyhl619 bool = l >= 0
	for yyj619 := 0; ; yyj619++ {
		if yyhl619 {
			if yyj619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys619Slc = r.DecodeBytes(yys619Slc, true, true)
		yys619 := string(yys619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys619 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys619)
		} // end switch yys619
	} // end for yyj619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj621 int
	var yyb621 bool
	var yyhl621 bool = l >= 0
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj621++
		if yyhl621 {
			yyb621 = yyj621 > l
		} else {
			yyb621 = r.CheckBreak()
		}
		if yyb621 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj621-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym623 := z.EncBinary()
		_ = yym623
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep624 := !z.EncBinary()
			yy2arr624 := z.EncBasicHandle().StructToArray
			var yyq624 [3]bool
			_, _, _ = yysep624, yyq624, yy2arr624
			const yyr624 bool = false
			yyq624[2] = x.ReadOnly != false
			var yynn624 int
			if yyr624 || yy2arr624 {
				r.EncodeArrayStart(3)
			} else {
				yynn624 = 2
				for _, b := range yyq624 {
					if b {
						yynn624++
					}
				}
				r.EncodeMapStart(yynn624)
				yynn624 = 0
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym626 := z.EncBinary()
				_ = yym626
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym627 := z.EncBinary()
				_ = yym627
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym629 := z.EncBinary()
				_ = yym629
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym630 := z.EncBinary()
				_ = yym630
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq624[2] {
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq624[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym634 := z.DecBinary()
	_ = yym634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct635 := r.ContainerType()
		if yyct635 == codecSelferValueTypeMap1234 {
			yyl635 := r.ReadMapStart()
			if yyl635 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl635, d)
			}
		} else if yyct635 == codecSelferValueTypeArray1234 {
			yyl635 := r.ReadArrayStart()
			if yyl635 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys636Slc
	var yyhl636 bool = l >= 0
	for yyj636 := 0; ; yyj636++ {
		if yyhl636 {
			if yyj636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys636Slc = r.DecodeBytes(yys636Slc, true, true)
		yys636 := string(yys636Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys636 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys636)
		} // end switch yys636
	} // end for yyj636
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj640 int
	var yyb640 bool
	var yyhl640 bool = l >= 0
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj640++
		if yyhl640 {
			yyb640 = yyj640 > l
		} else {
			yyb640 = r.CheckBreak()
		}
		if yyb640 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj640-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym644 := z.EncBinary()
		_ = yym644
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep645 := !z.EncBinary()
			yy2arr645 := z.EncBasicHandle().StructToArray
			var yyq645 [8]bool
			_, _, _ = yysep645, yyq645, yy2arr645
			const yyr645 bool = false
			yyq645[2] = x.FSType != ""
			yyq645[3] = x.RBDPool != ""
			yyq645[4] = x.RadosUser != ""
			yyq645[5] = x.Keyring != ""
			yyq645[6] = x.SecretRef != nil
			yyq645[7] = x.ReadOnly != false
			var yynn645 int
			if yyr645 || yy2arr645 {
				r.EncodeArrayStart(8)
			} else {
				yynn645 = 2
				for _, b := range yyq645 {
					if b {
						yynn645++
					}
				}
				r.EncodeMapStart(yynn645)
				yynn645 = 0
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym650 := z.EncBinary()
				_ = yym650
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym651 := z.EncBinary()
				_ = yym651
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[2] {
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[3] {
					yym656 := z.EncBinary()
					_ = yym656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[4] {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[5] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq645[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[7] {
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq645[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym668 := z.DecBinary()
	_ = yym668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct669 := r.ContainerType()
		if yyct669 == codecSelferValueTypeMap1234 {
			yyl669 := r.ReadMapStart()
			if yyl669 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl669, d)
			}
		} else if yyct669 == codecSelferValueTypeArray1234 {
			yyl669 := r.ReadArrayStart()
			if yyl669 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys670Slc
	var yyhl670 bool = l >= 0
	for yyj670 := 0; ; yyj670++ {
		if yyhl670 {
			if yyj670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys670Slc = r.DecodeBytes(yys670Slc, true, true)
		yys670 := string(yys670Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys670 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv671 := &x.CephMonitors
				yym672 := z.DecBinary()
				_ = yym672
				if false {
				} else {
					z.F.DecSliceStringX(yyv671, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys670)
		} // end switch yys670
	} // end for yyj670
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj680 int
	var yyb680 bool
	var yyhl680 bool = l >= 0
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv681 := &x.CephMonitors
		yym682 := z.DecBinary()
		_ = yym682
		if false {
		} else {
			z.F.DecSliceStringX(yyv681, false, d)
		}
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj680++
		if yyhl680 {
			yyb680 = yyj680 > l
		} else {
			yyb680 = r.CheckBreak()
		}
		if yyb680 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj680-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym690 := z.EncBinary()
		_ = yym690
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep691 := !z.EncBinary()
			yy2arr691 := z.EncBasicHandle().StructToArray
			var yyq691 [3]bool
			_, _, _ = yysep691, yyq691, yy2arr691
			const yyr691 bool = false
			yyq691[1] = x.FSType != ""
			yyq691[2] = x.ReadOnly != false
			var yynn691 int
			if yyr691 || yy2arr691 {
				r.EncodeArrayStart(3)
			} else {
				yynn691 = 1
				for _, b := range yyq691 {
					if b {
						yynn691++
					}
				}
				r.EncodeMapStart(yynn691)
				yynn691 = 0
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym693 := z.EncBinary()
				_ = yym693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym694 := z.EncBinary()
				_ = yym694
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq691[1] {
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq691[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym697 := z.EncBinary()
					_ = yym697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq691[2] {
					yym699 := z.EncBinary()
					_ = yym699
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq691[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym700 := z.EncBinary()
					_ = yym700
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym701 := z.DecBinary()
	_ = yym701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct702 := r.ContainerType()
		if yyct702 == codecSelferValueTypeMap1234 {
			yyl702 := r.ReadMapStart()
			if yyl702 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl702, d)
			}
		} else if yyct702 == codecSelferValueTypeArray1234 {
			yyl702 := r.ReadArrayStart()
			if yyl702 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl702, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys703Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys703Slc
	var yyhl703 bool = l >= 0
	for yyj703 := 0; ; yyj703++ {
		if yyhl703 {
			if yyj703 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys703Slc = r.DecodeBytes(yys703Slc, true, true)
		yys703 := string(yys703Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys703 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys703)
		} // end switch yys703
	} // end for yyj703
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj707 int
	var yyb707 bool
	var yyhl707 bool = l >= 0
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj707++
		if yyhl707 {
			yyb707 = yyj707 > l
		} else {
			yyb707 = r.CheckBreak()
		}
		if yyb707 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj707-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderLocalVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym711 := z.EncBinary()
		_ = yym711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep712 := !z.EncBinary()
			yy2arr712 := z.EncBasicHandle().StructToArray
			var yyq712 [4]bool
			_, _, _ = yysep712, yyq712, yy2arr712
			const yyr712 bool = false
			yyq712[1] = x.FSType != ""
			yyq712[2] = x.ReadOnly != false
			var yynn712 int
			if yyr712 || yy2arr712 {
				r.EncodeArrayStart(4)
			} else {
				yynn712 = 2
				for _, b := range yyq712 {
					if b {
						yynn712++
					}
				}
				r.EncodeMapStart(yynn712)
				yynn712 = 0
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym714 := z.EncBinary()
				_ = yym714
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym715 := z.EncBinary()
				_ = yym715
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[1] {
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[2] {
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq712[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym723 := z.EncBinary()
				_ = yym723
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretRef))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretRef))
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderLocalVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym725 := z.DecBinary()
	_ = yym725
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct726 := r.ContainerType()
		if yyct726 == codecSelferValueTypeMap1234 {
			yyl726 := r.ReadMapStart()
			if yyl726 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl726, d)
			}
		} else if yyct726 == codecSelferValueTypeArray1234 {
			yyl726 := r.ReadArrayStart()
			if yyl726 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl726, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderLocalVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys727Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys727Slc
	var yyhl727 bool = l >= 0
	for yyj727 := 0; ; yyj727++ {
		if yyhl727 {
			if yyj727 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys727Slc = r.DecodeBytes(yys727Slc, true, true)
		yys727 := string(yys727Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys727 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				x.SecretRef = ""
			} else {
				x.SecretRef = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys727)
		} // end switch yys727
	} // end for yyj727
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderLocalVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj732 int
	var yyb732 bool
	var yyhl732 bool = l >= 0
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretRef = ""
	} else {
		x.SecretRef = string(r.DecodeString())
	}
	for {
		yyj732++
		if yyhl732 {
			yyb732 = yyj732 > l
		} else {
			yyb732 = r.CheckBreak()
		}
		if yyb732 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj732-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym737 := z.EncBinary()
		_ = yym737
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep738 := !z.EncBinary()
			yy2arr738 := z.EncBasicHandle().StructToArray
			var yyq738 [6]bool
			_, _, _ = yysep738, yyq738, yy2arr738
			const yyr738 bool = false
			yyq738[1] = x.Path != ""
			yyq738[2] = x.User != ""
			yyq738[3] = x.SecretFile != ""
			yyq738[4] = x.SecretRef != nil
			yyq738[5] = x.ReadOnly != false
			var yynn738 int
			if yyr738 || yy2arr738 {
				r.EncodeArrayStart(6)
			} else {
				yynn738 = 1
				for _, b := range yyq738 {
					if b {
						yynn738++
					}
				}
				r.EncodeMapStart(yynn738)
				yynn738 = 0
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym740 := z.EncBinary()
					_ = yym740
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[1] {
					yym743 := z.EncBinary()
					_ = yym743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq738[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym744 := z.EncBinary()
					_ = yym744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[2] {
					yym746 := z.EncBinary()
					_ = yym746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq738[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym747 := z.EncBinary()
					_ = yym747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[3] {
					yym749 := z.EncBinary()
					_ = yym749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq738[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym750 := z.EncBinary()
					_ = yym750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq738[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq738[5] {
					yym753 := z.EncBinary()
					_ = yym753
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq738[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym754 := z.EncBinary()
					_ = yym754
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr738 || yy2arr738 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym755 := z.DecBinary()
	_ = yym755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct756 := r.ContainerType()
		if yyct756 == codecSelferValueTypeMap1234 {
			yyl756 := r.ReadMapStart()
			if yyl756 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl756, d)
			}
		} else if yyct756 == codecSelferValueTypeArray1234 {
			yyl756 := r.ReadArrayStart()
			if yyl756 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl756, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys757Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys757Slc
	var yyhl757 bool = l >= 0
	for yyj757 := 0; ; yyj757++ {
		if yyhl757 {
			if yyj757 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys757Slc = r.DecodeBytes(yys757Slc, true, true)
		yys757 := string(yys757Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys757 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv758 := &x.Monitors
				yym759 := z.DecBinary()
				_ = yym759
				if false {
				} else {
					z.F.DecSliceStringX(yyv758, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys757)
		} // end switch yys757
	} // end for yyj757
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj765 int
	var yyb765 bool
	var yyhl765 bool = l >= 0
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv766 := &x.Monitors
		yym767 := z.DecBinary()
		_ = yym767
		if false {
		} else {
			z.F.DecSliceStringX(yyv766, false, d)
		}
	}
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj765++
		if yyhl765 {
			yyb765 = yyj765 > l
		} else {
			yyb765 = r.CheckBreak()
		}
		if yyb765 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj765-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym773 := z.EncBinary()
		_ = yym773
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep774 := !z.EncBinary()
			yy2arr774 := z.EncBasicHandle().StructToArray
			var yyq774 [1]bool
			_, _, _ = yysep774, yyq774, yy2arr774
			const yyr774 bool = false
			var yynn774 int
			if yyr774 || yy2arr774 {
				r.EncodeArrayStart(1)
			} else {
				yynn774 = 1
				for _, b := range yyq774 {
					if b {
						yynn774++
					}
				}
				r.EncodeMapStart(yynn774)
				yynn774 = 0
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym776 := z.EncBinary()
				_ = yym776
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym777 := z.EncBinary()
				_ = yym777
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym778 := z.DecBinary()
	_ = yym778
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct779 := r.ContainerType()
		if yyct779 == codecSelferValueTypeMap1234 {
			yyl779 := r.ReadMapStart()
			if yyl779 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl779, d)
			}
		} else if yyct779 == codecSelferValueTypeArray1234 {
			yyl779 := r.ReadArrayStart()
			if yyl779 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl779, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys780Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys780Slc
	var yyhl780 bool = l >= 0
	for yyj780 := 0; ; yyj780++ {
		if yyhl780 {
			if yyj780 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys780Slc = r.DecodeBytes(yys780Slc, true, true)
		yys780 := string(yys780Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys780 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys780)
		} // end switch yys780
	} // end for yyj780
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj782 int
	var yyb782 bool
	var yyhl782 bool = l >= 0
	yyj782++
	if yyhl782 {
		yyb782 = yyj782 > l
	} else {
		yyb782 = r.CheckBreak()
	}
	if yyb782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj782++
		if yyhl782 {
			yyb782 = yyj782 > l
		} else {
			yyb782 = r.CheckBreak()
		}
		if yyb782 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj782-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym784 := z.EncBinary()
	_ = yym784
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym785 := z.DecBinary()
	_ = yym785
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym786 := z.EncBinary()
	_ = yym786
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym787 := z.DecBinary()
	_ = yym787
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym788 := z.EncBinary()
		_ = yym788
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep789 := !z.EncBinary()
			yy2arr789 := z.EncBasicHandle().StructToArray
			var yyq789 [4]bool
			_, _, _ = yysep789, yyq789, yy2arr789
			const yyr789 bool = false
			yyq789[1] = x.FSType != ""
			yyq789[2] = x.Partition != 0
			yyq789[3] = x.ReadOnly != false
			var yynn789 int
			if yyr789 || yy2arr789 {
				r.EncodeArrayStart(4)
			} else {
				yynn789 = 1
				for _, b := range yyq789 {
					if b {
						yynn789++
					}
				}
				r.EncodeMapStart(yynn789)
				yynn789 = 0
			}
			if yyr789 || yy2arr789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym791 := z.EncBinary()
				_ = yym791
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym792 := z.EncBinary()
				_ = yym792
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr789 || yy2arr789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq789[1] {
					yym794 := z.EncBinary()
					_ = yym794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq789[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym795 := z.EncBinary()
					_ = yym795
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr789 || yy2arr789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq789[2] {
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq789[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr789 || yy2arr789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq789[3] {
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq789[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym801 := z.EncBinary()
					_ = yym801
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr789 || yy2arr789 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym802 := z.DecBinary()
	_ = yym802
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct803 := r.ContainerType()
		if yyct803 == codecSelferValueTypeMap1234 {
			yyl803 := r.ReadMapStart()
			if yyl803 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl803, d)
			}
		} else if yyct803 == codecSelferValueTypeArray1234 {
			yyl803 := r.ReadArrayStart()
			if yyl803 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl803, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys804Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys804Slc
	var yyhl804 bool = l >= 0
	for yyj804 := 0; ; yyj804++ {
		if yyhl804 {
			if yyj804 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys804Slc = r.DecodeBytes(yys804Slc, true, true)
		yys804 := string(yys804Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys804 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys804)
		} // end switch yys804
	} // end for yyj804
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj809 int
	var yyb809 bool
	var yyhl809 bool = l >= 0
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj809++
		if yyhl809 {
			yyb809 = yyj809 > l
		} else {
			yyb809 = r.CheckBreak()
		}
		if yyb809 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj809-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym814 := z.EncBinary()
		_ = yym814
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep815 := !z.EncBinary()
			yy2arr815 := z.EncBasicHandle().StructToArray
			var yyq815 [5]bool
			_, _, _ = yysep815, yyq815, yy2arr815
			const yyr815 bool = false
			yyq815[2] = x.ReadOnly != false
			yyq815[3] = x.User != ""
			yyq815[4] = x.Group != ""
			var yynn815 int
			if yyr815 || yy2arr815 {
				r.EncodeArrayStart(5)
			} else {
				yynn815 = 2
				for _, b := range yyq815 {
					if b {
						yynn815++
					}
				}
				r.EncodeMapStart(yynn815)
				yynn815 = 0
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym817 := z.EncBinary()
				_ = yym817
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym818 := z.EncBinary()
				_ = yym818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym820 := z.EncBinary()
				_ = yym820
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym821 := z.EncBinary()
				_ = yym821
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq815[2] {
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq815[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym824 := z.EncBinary()
					_ = yym824
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq815[3] {
					yym826 := z.EncBinary()
					_ = yym826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq815[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym827 := z.EncBinary()
					_ = yym827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq815[4] {
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq815[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym831 := z.DecBinary()
	_ = yym831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct832 := r.ContainerType()
		if yyct832 == codecSelferValueTypeMap1234 {
			yyl832 := r.ReadMapStart()
			if yyl832 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl832, d)
			}
		} else if yyct832 == codecSelferValueTypeArray1234 {
			yyl832 := r.ReadArrayStart()
			if yyl832 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys833Slc
	var yyhl833 bool = l >= 0
	for yyj833 := 0; ; yyj833++ {
		if yyhl833 {
			if yyj833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys833Slc = r.DecodeBytes(yys833Slc, true, true)
		yys833 := string(yys833Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys833 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys833)
		} // end switch yys833
	} // end for yyj833
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj839 int
	var yyb839 bool
	var yyhl839 bool = l >= 0
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj839++
		if yyhl839 {
			yyb839 = yyj839 > l
		} else {
			yyb839 = r.CheckBreak()
		}
		if yyb839 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj839-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [5]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[1] = x.FSType != ""
			yyq846[2] = x.SecretRef != nil
			yyq846[3] = x.ReadOnly != false
			yyq846[4] = len(x.Options) != 0
			var yynn846 int
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(5)
			} else {
				yynn846 = 1
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
				yynn846 = 0
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym848 := z.EncBinary()
				_ = yym848
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq846[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[3] {
					yym855 := z.EncBinary()
					_ = yym855
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq846[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym858 := z.EncBinary()
						_ = yym858
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq846[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym859 := z.EncBinary()
						_ = yym859
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym860 := z.DecBinary()
	_ = yym860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct861 := r.ContainerType()
		if yyct861 == codecSelferValueTypeMap1234 {
			yyl861 := r.ReadMapStart()
			if yyl861 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl861, d)
			}
		} else if yyct861 == codecSelferValueTypeArray1234 {
			yyl861 := r.ReadArrayStart()
			if yyl861 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys862Slc
	var yyhl862 bool = l >= 0
	for yyj862 := 0; ; yyj862++ {
		if yyhl862 {
			if yyj862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys862Slc = r.DecodeBytes(yys862Slc, true, true)
		yys862 := string(yys862Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys862 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv867 := &x.Options
				yym868 := z.DecBinary()
				_ = yym868
				if false {
				} else {
					z.F.DecMapStringStringX(yyv867, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys862)
		} // end switch yys862
	} // end for yyj862
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj869 int
	var yyb869 bool
	var yyhl869 bool = l >= 0
	yyj869++
	if yyhl869 {
		yyb869 = yyj869 > l
	} else {
		yyb869 = r.CheckBreak()
	}
	if yyb869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj869++
	if yyhl869 {
		yyb869 = yyj869 > l
	} else {
		yyb869 = r.CheckBreak()
	}
	if yyb869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj869++
	if yyhl869 {
		yyb869 = yyj869 > l
	} else {
		yyb869 = r.CheckBreak()
	}
	if yyb869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj869++
	if yyhl869 {
		yyb869 = yyj869 > l
	} else {
		yyb869 = r.CheckBreak()
	}
	if yyb869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj869++
	if yyhl869 {
		yyb869 = yyj869 > l
	} else {
		yyb869 = r.CheckBreak()
	}
	if yyb869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv874 := &x.Options
		yym875 := z.DecBinary()
		_ = yym875
		if false {
		} else {
			z.F.DecMapStringStringX(yyv874, false, d)
		}
	}
	for {
		yyj869++
		if yyhl869 {
			yyb869 = yyj869 > l
		} else {
			yyb869 = r.CheckBreak()
		}
		if yyb869 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj869-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym876 := z.EncBinary()
		_ = yym876
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep877 := !z.EncBinary()
			yy2arr877 := z.EncBasicHandle().StructToArray
			var yyq877 [4]bool
			_, _, _ = yysep877, yyq877, yy2arr877
			const yyr877 bool = false
			yyq877[1] = x.FSType != ""
			yyq877[2] = x.Partition != 0
			yyq877[3] = x.ReadOnly != false
			var yynn877 int
			if yyr877 || yy2arr877 {
				r.EncodeArrayStart(4)
			} else {
				yynn877 = 1
				for _, b := range yyq877 {
					if b {
						yynn877++
					}
				}
				r.EncodeMapStart(yynn877)
				yynn877 = 0
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym879 := z.EncBinary()
				_ = yym879
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym880 := z.EncBinary()
				_ = yym880
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq877[1] {
					yym882 := z.EncBinary()
					_ = yym882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq877[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym883 := z.EncBinary()
					_ = yym883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq877[2] {
					yym885 := z.EncBinary()
					_ = yym885
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq877[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym886 := z.EncBinary()
					_ = yym886
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq877[3] {
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq877[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym889 := z.EncBinary()
					_ = yym889
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym890 := z.DecBinary()
	_ = yym890
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct891 := r.ContainerType()
		if yyct891 == codecSelferValueTypeMap1234 {
			yyl891 := r.ReadMapStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl891, d)
			}
		} else if yyct891 == codecSelferValueTypeArray1234 {
			yyl891 := r.ReadArrayStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl891, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys892Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys892Slc
	var yyhl892 bool = l >= 0
	for yyj892 := 0; ; yyj892++ {
		if yyhl892 {
			if yyj892 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys892Slc = r.DecodeBytes(yys892Slc, true, true)
		yys892 := string(yys892Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys892 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys892)
		} // end switch yys892
	} // end for yyj892
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj897 int
	var yyb897 bool
	var yyhl897 bool = l >= 0
	yyj897++
	if yyhl897 {
		yyb897 = yyj897 > l
	} else {
		yyb897 = r.CheckBreak()
	}
	if yyb897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj897++
	if yyhl897 {
		yyb897 = yyj897 > l
	} else {
		yyb897 = r.CheckBreak()
	}
	if yyb897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj897++
	if yyhl897 {
		yyb897 = yyj897 > l
	} else {
		yyb897 = r.CheckBreak()
	}
	if yyb897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj897++
	if yyhl897 {
		yyb897 = yyj897 > l
	} else {
		yyb897 = r.CheckBreak()
	}
	if yyb897 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj897++
		if yyhl897 {
			yyb897 = yyj897 > l
		} else {
			yyb897 = r.CheckBreak()
		}
		if yyb897 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj897-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym902 := z.EncBinary()
		_ = yym902
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep903 := !z.EncBinary()
			yy2arr903 := z.EncBasicHandle().StructToArray
			var yyq903 [3]bool
			_, _, _ = yysep903, yyq903, yy2arr903
			const yyr903 bool = false
			yyq903[1] = x.Revision != ""
			yyq903[2] = x.Directory != ""
			var yynn903 int
			if yyr903 || yy2arr903 {
				r.EncodeArrayStart(3)
			} else {
				yynn903 = 1
				for _, b := range yyq903 {
					if b {
						yynn903++
					}
				}
				r.EncodeMapStart(yynn903)
				yynn903 = 0
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym905 := z.EncBinary()
				_ = yym905
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym906 := z.EncBinary()
				_ = yym906
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[1] {
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq903[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[2] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq903[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym913 := z.DecBinary()
	_ = yym913
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct914 := r.ContainerType()
		if yyct914 == codecSelferValueTypeMap1234 {
			yyl914 := r.ReadMapStart()
			if yyl914 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl914, d)
			}
		} else if yyct914 == codecSelferValueTypeArray1234 {
			yyl914 := r.ReadArrayStart()
			if yyl914 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl914, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys915Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys915Slc
	var yyhl915 bool = l >= 0
	for yyj915 := 0; ; yyj915++ {
		if yyhl915 {
			if yyj915 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys915Slc = r.DecodeBytes(yys915Slc, true, true)
		yys915 := string(yys915Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys915 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys915)
		} // end switch yys915
	} // end for yyj915
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj919 int
	var yyb919 bool
	var yyhl919 bool = l >= 0
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj919++
		if yyhl919 {
			yyb919 = yyj919 > l
		} else {
			yyb919 = r.CheckBreak()
		}
		if yyb919 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj919-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym923 := z.EncBinary()
		_ = yym923
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep924 := !z.EncBinary()
			yy2arr924 := z.EncBasicHandle().StructToArray
			var yyq924 [3]bool
			_, _, _ = yysep924, yyq924, yy2arr924
			const yyr924 bool = false
			yyq924[0] = x.SecretName != ""
			yyq924[1] = len(x.Items) != 0
			yyq924[2] = x.DefaultMode != nil
			var yynn924 int
			if yyr924 || yy2arr924 {
				r.EncodeArrayStart(3)
			} else {
				yynn924 = 0
				for _, b := range yyq924 {
					if b {
						yynn924++
					}
				}
				r.EncodeMapStart(yynn924)
				yynn924 = 0
			}
			if yyr924 || yy2arr924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq924[0] {
					yym926 := z.EncBinary()
					_ = yym926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq924[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym927 := z.EncBinary()
					_ = yym927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr924 || yy2arr924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq924[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym929 := z.EncBinary()
						_ = yym929
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq924[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym930 := z.EncBinary()
						_ = yym930
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr924 || yy2arr924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq924[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy932 := *x.DefaultMode
						yym933 := z.EncBinary()
						_ = yym933
						if false {
						} else {
							r.EncodeInt(int64(yy932))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq924[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy934 := *x.DefaultMode
						yym935 := z.EncBinary()
						_ = yym935
						if false {
						} else {
							r.EncodeInt(int64(yy934))
						}
					}
				}
			}
			if yyr924 || yy2arr924 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym936 := z.DecBinary()
	_ = yym936
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct937 := r.ContainerType()
		if yyct937 == codecSelferValueTypeMap1234 {
			yyl937 := r.ReadMapStart()
			if yyl937 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl937, d)
			}
		} else if yyct937 == codecSelferValueTypeArray1234 {
			yyl937 := r.ReadArrayStart()
			if yyl937 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl937, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys938Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys938Slc
	var yyhl938 bool = l >= 0
	for yyj938 := 0; ; yyj938++ {
		if yyhl938 {
			if yyj938 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys938Slc = r.DecodeBytes(yys938Slc, true, true)
		yys938 := string(yys938Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys938 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv940 := &x.Items
				yym941 := z.DecBinary()
				_ = yym941
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv940), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym943 := z.DecBinary()
				_ = yym943
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys938)
		} // end switch yys938
	} // end for yyj938
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj944 int
	var yyb944 bool
	var yyhl944 bool = l >= 0
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv946 := &x.Items
		yym947 := z.DecBinary()
		_ = yym947
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv946), d)
		}
	}
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym949 := z.DecBinary()
		_ = yym949
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj944++
		if yyhl944 {
			yyb944 = yyj944 > l
		} else {
			yyb944 = r.CheckBreak()
		}
		if yyb944 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj944-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym950 := z.EncBinary()
		_ = yym950
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep951 := !z.EncBinary()
			yy2arr951 := z.EncBasicHandle().StructToArray
			var yyq951 [3]bool
			_, _, _ = yysep951, yyq951, yy2arr951
			const yyr951 bool = false
			yyq951[2] = x.ReadOnly != false
			var yynn951 int
			if yyr951 || yy2arr951 {
				r.EncodeArrayStart(3)
			} else {
				yynn951 = 2
				for _, b := range yyq951 {
					if b {
						yynn951++
					}
				}
				r.EncodeMapStart(yynn951)
				yynn951 = 0
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym953 := z.EncBinary()
				_ = yym953
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym954 := z.EncBinary()
				_ = yym954
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym956 := z.EncBinary()
				_ = yym956
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym957 := z.EncBinary()
				_ = yym957
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq951[2] {
					yym959 := z.EncBinary()
					_ = yym959
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq951[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym960 := z.EncBinary()
					_ = yym960
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym961 := z.DecBinary()
	_ = yym961
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct962 := r.ContainerType()
		if yyct962 == codecSelferValueTypeMap1234 {
			yyl962 := r.ReadMapStart()
			if yyl962 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl962, d)
			}
		} else if yyct962 == codecSelferValueTypeArray1234 {
			yyl962 := r.ReadArrayStart()
			if yyl962 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl962, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys963Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys963Slc
	var yyhl963 bool = l >= 0
	for yyj963 := 0; ; yyj963++ {
		if yyhl963 {
			if yyj963 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys963Slc = r.DecodeBytes(yys963Slc, true, true)
		yys963 := string(yys963Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys963 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys963)
		} // end switch yys963
	} // end for yyj963
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj967 int
	var yyb967 bool
	var yyhl967 bool = l >= 0
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj967++
		if yyhl967 {
			yyb967 = yyj967 > l
		} else {
			yyb967 = r.CheckBreak()
		}
		if yyb967 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj967-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym971 := z.EncBinary()
		_ = yym971
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep972 := !z.EncBinary()
			yy2arr972 := z.EncBasicHandle().StructToArray
			var yyq972 [6]bool
			_, _, _ = yysep972, yyq972, yy2arr972
			const yyr972 bool = false
			yyq972[3] = x.ISCSIInterface != ""
			yyq972[4] = x.FSType != ""
			yyq972[5] = x.ReadOnly != false
			var yynn972 int
			if yyr972 || yy2arr972 {
				r.EncodeArrayStart(6)
			} else {
				yynn972 = 3
				for _, b := range yyq972 {
					if b {
						yynn972++
					}
				}
				r.EncodeMapStart(yynn972)
				yynn972 = 0
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym974 := z.EncBinary()
				_ = yym974
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym975 := z.EncBinary()
				_ = yym975
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym977 := z.EncBinary()
				_ = yym977
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym978 := z.EncBinary()
				_ = yym978
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym980 := z.EncBinary()
				_ = yym980
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym981 := z.EncBinary()
				_ = yym981
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq972[3] {
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq972[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq972[4] {
					yym986 := z.EncBinary()
					_ = yym986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq972[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq972[5] {
					yym989 := z.EncBinary()
					_ = yym989
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq972[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym991 := z.DecBinary()
	_ = yym991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct992 := r.ContainerType()
		if yyct992 == codecSelferValueTypeMap1234 {
			yyl992 := r.ReadMapStart()
			if yyl992 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl992, d)
			}
		} else if yyct992 == codecSelferValueTypeArray1234 {
			yyl992 := r.ReadArrayStart()
			if yyl992 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys993Slc
	var yyhl993 bool = l >= 0
	for yyj993 := 0; ; yyj993++ {
		if yyhl993 {
			if yyj993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys993Slc = r.DecodeBytes(yys993Slc, true, true)
		yys993 := string(yys993Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys993 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys993)
		} // end switch yys993
	} // end for yyj993
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1000 int
	var yyb1000 bool
	var yyhl1000 bool = l >= 0
	yyj1000++
	if yyhl1000 {
		yyb1000 = yyj1000 > l
	} else {
		yyb1000 = r.CheckBreak()
	}
	if yyb1000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj1000++
	if yyhl1000 {
		yyb1000 = yyj1000 > l
	} else {
		yyb1000 = r.CheckBreak()
	}
	if yyb1000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj1000++
	if yyhl1000 {
		yyb1000 = yyj1000 > l
	} else {
		yyb1000 = r.CheckBreak()
	}
	if yyb1000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj1000++
	if yyhl1000 {
		yyb1000 = yyj1000 > l
	} else {
		yyb1000 = r.CheckBreak()
	}
	if yyb1000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj1000++
	if yyhl1000 {
		yyb1000 = yyj1000 > l
	} else {
		yyb1000 = r.CheckBreak()
	}
	if yyb1000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1000++
	if yyhl1000 {
		yyb1000 = yyj1000 > l
	} else {
		yyb1000 = r.CheckBreak()
	}
	if yyb1000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1000++
		if yyhl1000 {
			yyb1000 = yyj1000 > l
		} else {
			yyb1000 = r.CheckBreak()
		}
		if yyb1000 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1000-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1007 := z.EncBinary()
		_ = yym1007
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1008 := !z.EncBinary()
			yy2arr1008 := z.EncBasicHandle().StructToArray
			var yyq1008 [4]bool
			_, _, _ = yysep1008, yyq1008, yy2arr1008
			const yyr1008 bool = false
			yyq1008[2] = x.FSType != ""
			yyq1008[3] = x.ReadOnly != false
			var yynn1008 int
			if yyr1008 || yy2arr1008 {
				r.EncodeArrayStart(4)
			} else {
				yynn1008 = 2
				for _, b := range yyq1008 {
					if b {
						yynn1008++
					}
				}
				r.EncodeMapStart(yynn1008)
				yynn1008 = 0
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym1010 := z.EncBinary()
					_ = yym1010
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym1011 := z.EncBinary()
					_ = yym1011
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy1013 := *x.Lun
					yym1014 := z.EncBinary()
					_ = yym1014
					if false {
					} else {
						r.EncodeInt(int64(yy1013))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy1015 := *x.Lun
					yym1016 := z.EncBinary()
					_ = yym1016
					if false {
					} else {
						r.EncodeInt(int64(yy1015))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1008[2] {
					yym1018 := z.EncBinary()
					_ = yym1018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1008[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1019 := z.EncBinary()
					_ = yym1019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1008[3] {
					yym1021 := z.EncBinary()
					_ = yym1021
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1008[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1023 := z.DecBinary()
	_ = yym1023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1024 := r.ContainerType()
		if yyct1024 == codecSelferValueTypeMap1234 {
			yyl1024 := r.ReadMapStart()
			if yyl1024 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1024, d)
			}
		} else if yyct1024 == codecSelferValueTypeArray1234 {
			yyl1024 := r.ReadArrayStart()
			if yyl1024 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1024, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1025Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1025Slc
	var yyhl1025 bool = l >= 0
	for yyj1025 := 0; ; yyj1025++ {
		if yyhl1025 {
			if yyj1025 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1025Slc = r.DecodeBytes(yys1025Slc, true, true)
		yys1025 := string(yys1025Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1025 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv1026 := &x.TargetWWNs
				yym1027 := z.DecBinary()
				_ = yym1027
				if false {
				} else {
					z.F.DecSliceStringX(yyv1026, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym1029 := z.DecBinary()
				_ = yym1029
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1025)
		} // end switch yys1025
	} // end for yyj1025
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1032 int
	var yyb1032 bool
	var yyhl1032 bool = l >= 0
	yyj1032++
	if yyhl1032 {
		yyb1032 = yyj1032 > l
	} else {
		yyb1032 = r.CheckBreak()
	}
	if yyb1032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv1033 := &x.TargetWWNs
		yym1034 := z.DecBinary()
		_ = yym1034
		if false {
		} else {
			z.F.DecSliceStringX(yyv1033, false, d)
		}
	}
	yyj1032++
	if yyhl1032 {
		yyb1032 = yyj1032 > l
	} else {
		yyb1032 = r.CheckBreak()
	}
	if yyb1032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym1036 := z.DecBinary()
		_ = yym1036
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj1032++
	if yyhl1032 {
		yyb1032 = yyj1032 > l
	} else {
		yyb1032 = r.CheckBreak()
	}
	if yyb1032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1032++
	if yyhl1032 {
		yyb1032 = yyj1032 > l
	} else {
		yyb1032 = r.CheckBreak()
	}
	if yyb1032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1032++
		if yyhl1032 {
			yyb1032 = yyj1032 > l
		} else {
			yyb1032 = r.CheckBreak()
		}
		if yyb1032 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1032-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1039 := z.EncBinary()
		_ = yym1039
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1040 := !z.EncBinary()
			yy2arr1040 := z.EncBasicHandle().StructToArray
			var yyq1040 [3]bool
			_, _, _ = yysep1040, yyq1040, yy2arr1040
			const yyr1040 bool = false
			yyq1040[2] = x.ReadOnly != false
			var yynn1040 int
			if yyr1040 || yy2arr1040 {
				r.EncodeArrayStart(3)
			} else {
				yynn1040 = 2
				for _, b := range yyq1040 {
					if b {
						yynn1040++
					}
				}
				r.EncodeMapStart(yynn1040)
				yynn1040 = 0
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1042 := z.EncBinary()
				_ = yym1042
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1043 := z.EncBinary()
				_ = yym1043
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1045 := z.EncBinary()
				_ = yym1045
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1046 := z.EncBinary()
				_ = yym1046
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1040[2] {
					yym1048 := z.EncBinary()
					_ = yym1048
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1040[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1049 := z.EncBinary()
					_ = yym1049
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1050 := z.DecBinary()
	_ = yym1050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1051 := r.ContainerType()
		if yyct1051 == codecSelferValueTypeMap1234 {
			yyl1051 := r.ReadMapStart()
			if yyl1051 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1051, d)
			}
		} else if yyct1051 == codecSelferValueTypeArray1234 {
			yyl1051 := r.ReadArrayStart()
			if yyl1051 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1051, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1052Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1052Slc
	var yyhl1052 bool = l >= 0
	for yyj1052 := 0; ; yyj1052++ {
		if yyhl1052 {
			if yyj1052 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1052Slc = r.DecodeBytes(yys1052Slc, true, true)
		yys1052 := string(yys1052Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1052 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1052)
		} // end switch yys1052
	} // end for yyj1052
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1056 int
	var yyb1056 bool
	var yyhl1056 bool = l >= 0
	yyj1056++
	if yyhl1056 {
		yyb1056 = yyj1056 > l
	} else {
		yyb1056 = r.CheckBreak()
	}
	if yyb1056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1056++
	if yyhl1056 {
		yyb1056 = yyj1056 > l
	} else {
		yyb1056 = r.CheckBreak()
	}
	if yyb1056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1056++
	if yyhl1056 {
		yyb1056 = yyj1056 > l
	} else {
		yyb1056 = r.CheckBreak()
	}
	if yyb1056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1056++
		if yyhl1056 {
			yyb1056 = yyj1056 > l
		} else {
			yyb1056 = r.CheckBreak()
		}
		if yyb1056 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1056-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1060 := z.EncBinary()
		_ = yym1060
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1061 := !z.EncBinary()
			yy2arr1061 := z.EncBasicHandle().StructToArray
			var yyq1061 [2]bool
			_, _, _ = yysep1061, yyq1061, yy2arr1061
			const yyr1061 bool = false
			yyq1061[1] = x.FSType != ""
			var yynn1061 int
			if yyr1061 || yy2arr1061 {
				r.EncodeArrayStart(2)
			} else {
				yynn1061 = 1
				for _, b := range yyq1061 {
					if b {
						yynn1061++
					}
				}
				r.EncodeMapStart(yynn1061)
				yynn1061 = 0
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1063 := z.EncBinary()
				_ = yym1063
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1064 := z.EncBinary()
				_ = yym1064
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1061[1] {
					yym1066 := z.EncBinary()
					_ = yym1066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1061[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1061 || yy2arr1061 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1068 := z.DecBinary()
	_ = yym1068
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1069 := r.ContainerType()
		if yyct1069 == codecSelferValueTypeMap1234 {
			yyl1069 := r.ReadMapStart()
			if yyl1069 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1069, d)
			}
		} else if yyct1069 == codecSelferValueTypeArray1234 {
			yyl1069 := r.ReadArrayStart()
			if yyl1069 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1069, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1070Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1070Slc
	var yyhl1070 bool = l >= 0
	for yyj1070 := 0; ; yyj1070++ {
		if yyhl1070 {
			if yyj1070 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1070Slc = r.DecodeBytes(yys1070Slc, true, true)
		yys1070 := string(yys1070Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1070 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1070)
		} // end switch yys1070
	} // end for yyj1070
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1073 int
	var yyb1073 bool
	var yyhl1073 bool = l >= 0
	yyj1073++
	if yyhl1073 {
		yyb1073 = yyj1073 > l
	} else {
		yyb1073 = r.CheckBreak()
	}
	if yyb1073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1073++
	if yyhl1073 {
		yyb1073 = yyj1073 > l
	} else {
		yyb1073 = r.CheckBreak()
	}
	if yyb1073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1073++
		if yyhl1073 {
			yyb1073 = yyj1073 > l
		} else {
			yyb1073 = r.CheckBreak()
		}
		if yyb1073 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1073-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1076 := z.EncBinary()
	_ = yym1076
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1077 := z.DecBinary()
	_ = yym1077
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1078 := z.EncBinary()
		_ = yym1078
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1079 := !z.EncBinary()
			yy2arr1079 := z.EncBasicHandle().StructToArray
			var yyq1079 [5]bool
			_, _, _ = yysep1079, yyq1079, yy2arr1079
			const yyr1079 bool = false
			yyq1079[2] = x.CachingMode != nil
			yyq1079[3] = x.FSType != nil
			yyq1079[4] = x.ReadOnly != nil
			var yynn1079 int
			if yyr1079 || yy2arr1079 {
				r.EncodeArrayStart(5)
			} else {
				yynn1079 = 2
				for _, b := range yyq1079 {
					if b {
						yynn1079++
					}
				}
				r.EncodeMapStart(yynn1079)
				yynn1079 = 0
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1081 := z.EncBinary()
				_ = yym1081
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1082 := z.EncBinary()
				_ = yym1082
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1084 := z.EncBinary()
				_ = yym1084
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1085 := z.EncBinary()
				_ = yym1085
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1087 := *x.CachingMode
						yy1087.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1079[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1088 := *x.CachingMode
						yy1088.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1090 := *x.FSType
						yym1091 := z.EncBinary()
						_ = yym1091
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1090))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1079[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1092 := *x.FSType
						yym1093 := z.EncBinary()
						_ = yym1093
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1092))
						}
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1095 := *x.ReadOnly
						yym1096 := z.EncBinary()
						_ = yym1096
						if false {
						} else {
							r.EncodeBool(bool(yy1095))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1079[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1097 := *x.ReadOnly
						yym1098 := z.EncBinary()
						_ = yym1098
						if false {
						} else {
							r.EncodeBool(bool(yy1097))
						}
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1099 := z.DecBinary()
	_ = yym1099
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1100 := r.ContainerType()
		if yyct1100 == codecSelferValueTypeMap1234 {
			yyl1100 := r.ReadMapStart()
			if yyl1100 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1100, d)
			}
		} else if yyct1100 == codecSelferValueTypeArray1234 {
			yyl1100 := r.ReadArrayStart()
			if yyl1100 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1100, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1101Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1101Slc
	var yyhl1101 bool = l >= 0
	for yyj1101 := 0; ; yyj1101++ {
		if yyhl1101 {
			if yyj1101 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1101Slc = r.DecodeBytes(yys1101Slc, true, true)
		yys1101 := string(yys1101Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1101 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1106 := z.DecBinary()
				_ = yym1106
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1108 := z.DecBinary()
				_ = yym1108
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1101)
		} // end switch yys1101
	} // end for yyj1101
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1109 int
	var yyb1109 bool
	var yyhl1109 bool = l >= 0
	yyj1109++
	if yyhl1109 {
		yyb1109 = yyj1109 > l
	} else {
		yyb1109 = r.CheckBreak()
	}
	if yyb1109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1109++
	if yyhl1109 {
		yyb1109 = yyj1109 > l
	} else {
		yyb1109 = r.CheckBreak()
	}
	if yyb1109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1109++
	if yyhl1109 {
		yyb1109 = yyj1109 > l
	} else {
		yyb1109 = r.CheckBreak()
	}
	if yyb1109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1109++
	if yyhl1109 {
		yyb1109 = yyj1109 > l
	} else {
		yyb1109 = r.CheckBreak()
	}
	if yyb1109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1114 := z.DecBinary()
		_ = yym1114
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1109++
	if yyhl1109 {
		yyb1109 = yyj1109 > l
	} else {
		yyb1109 = r.CheckBreak()
	}
	if yyb1109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1116 := z.DecBinary()
		_ = yym1116
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1109++
		if yyhl1109 {
			yyb1109 = yyj1109 > l
		} else {
			yyb1109 = r.CheckBreak()
		}
		if yyb1109 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1109-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1117 := z.EncBinary()
		_ = yym1117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1118 := !z.EncBinary()
			yy2arr1118 := z.EncBasicHandle().StructToArray
			var yyq1118 [3]bool
			_, _, _ = yysep1118, yyq1118, yy2arr1118
			const yyr1118 bool = false
			yyq1118[0] = x.Name != ""
			yyq1118[1] = len(x.Items) != 0
			yyq1118[2] = x.DefaultMode != nil
			var yynn1118 int
			if yyr1118 || yy2arr1118 {
				r.EncodeArrayStart(3)
			} else {
				yynn1118 = 0
				for _, b := range yyq1118 {
					if b {
						yynn1118++
					}
				}
				r.EncodeMapStart(yynn1118)
				yynn1118 = 0
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1118[0] {
					yym1120 := z.EncBinary()
					_ = yym1120
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1118[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1118[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1123 := z.EncBinary()
						_ = yym1123
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1118[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1124 := z.EncBinary()
						_ = yym1124
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1118[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1126 := *x.DefaultMode
						yym1127 := z.EncBinary()
						_ = yym1127
						if false {
						} else {
							r.EncodeInt(int64(yy1126))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1118[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1128 := *x.DefaultMode
						yym1129 := z.EncBinary()
						_ = yym1129
						if false {
						} else {
							r.EncodeInt(int64(yy1128))
						}
					}
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1130 := z.DecBinary()
	_ = yym1130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1131 := r.ContainerType()
		if yyct1131 == codecSelferValueTypeMap1234 {
			yyl1131 := r.ReadMapStart()
			if yyl1131 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1131, d)
			}
		} else if yyct1131 == codecSelferValueTypeArray1234 {
			yyl1131 := r.ReadArrayStart()
			if yyl1131 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1132Slc
	var yyhl1132 bool = l >= 0
	for yyj1132 := 0; ; yyj1132++ {
		if yyhl1132 {
			if yyj1132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1132Slc = r.DecodeBytes(yys1132Slc, true, true)
		yys1132 := string(yys1132Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1132 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1134 := &x.Items
				yym1135 := z.DecBinary()
				_ = yym1135
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1134), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1137 := z.DecBinary()
				_ = yym1137
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1132)
		} // end switch yys1132
	} // end for yyj1132
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1138 int
	var yyb1138 bool
	var yyhl1138 bool = l >= 0
	yyj1138++
	if yyhl1138 {
		yyb1138 = yyj1138 > l
	} else {
		yyb1138 = r.CheckBreak()
	}
	if yyb1138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1138++
	if yyhl1138 {
		yyb1138 = yyj1138 > l
	} else {
		yyb1138 = r.CheckBreak()
	}
	if yyb1138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1140 := &x.Items
		yym1141 := z.DecBinary()
		_ = yym1141
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1140), d)
		}
	}
	yyj1138++
	if yyhl1138 {
		yyb1138 = yyj1138 > l
	} else {
		yyb1138 = r.CheckBreak()
	}
	if yyb1138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1143 := z.DecBinary()
		_ = yym1143
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1138++
		if yyhl1138 {
			yyb1138 = yyj1138 > l
		} else {
			yyb1138 = r.CheckBreak()
		}
		if yyb1138 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1138-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1144 := z.EncBinary()
		_ = yym1144
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1145 := !z.EncBinary()
			yy2arr1145 := z.EncBasicHandle().StructToArray
			var yyq1145 [3]bool
			_, _, _ = yysep1145, yyq1145, yy2arr1145
			const yyr1145 bool = false
			yyq1145[2] = x.Mode != nil
			var yynn1145 int
			if yyr1145 || yy2arr1145 {
				r.EncodeArrayStart(3)
			} else {
				yynn1145 = 2
				for _, b := range yyq1145 {
					if b {
						yynn1145++
					}
				}
				r.EncodeMapStart(yynn1145)
				yynn1145 = 0
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1147 := z.EncBinary()
				_ = yym1147
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1148 := z.EncBinary()
				_ = yym1148
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1150 := z.EncBinary()
				_ = yym1150
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1151 := z.EncBinary()
				_ = yym1151
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1145[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1153 := *x.Mode
						yym1154 := z.EncBinary()
						_ = yym1154
						if false {
						} else {
							r.EncodeInt(int64(yy1153))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1145[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1155 := *x.Mode
						yym1156 := z.EncBinary()
						_ = yym1156
						if false {
						} else {
							r.EncodeInt(int64(yy1155))
						}
					}
				}
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1157 := z.DecBinary()
	_ = yym1157
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1158 := r.ContainerType()
		if yyct1158 == codecSelferValueTypeMap1234 {
			yyl1158 := r.ReadMapStart()
			if yyl1158 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1158, d)
			}
		} else if yyct1158 == codecSelferValueTypeArray1234 {
			yyl1158 := r.ReadArrayStart()
			if yyl1158 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1158, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1159Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1159Slc
	var yyhl1159 bool = l >= 0
	for yyj1159 := 0; ; yyj1159++ {
		if yyhl1159 {
			if yyj1159 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1159Slc = r.DecodeBytes(yys1159Slc, true, true)
		yys1159 := string(yys1159Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1159 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1163 := z.DecBinary()
				_ = yym1163
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1159)
		} // end switch yys1159
	} // end for yyj1159
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1164 int
	var yyb1164 bool
	var yyhl1164 bool = l >= 0
	yyj1164++
	if yyhl1164 {
		yyb1164 = yyj1164 > l
	} else {
		yyb1164 = r.CheckBreak()
	}
	if yyb1164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1164++
	if yyhl1164 {
		yyb1164 = yyj1164 > l
	} else {
		yyb1164 = r.CheckBreak()
	}
	if yyb1164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1164++
	if yyhl1164 {
		yyb1164 = yyj1164 > l
	} else {
		yyb1164 = r.CheckBreak()
	}
	if yyb1164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1168 := z.DecBinary()
		_ = yym1168
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1164++
		if yyhl1164 {
			yyb1164 = yyj1164 > l
		} else {
			yyb1164 = r.CheckBreak()
		}
		if yyb1164 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1164-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1169 := z.EncBinary()
		_ = yym1169
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1170 := !z.EncBinary()
			yy2arr1170 := z.EncBasicHandle().StructToArray
			var yyq1170 [5]bool
			_, _, _ = yysep1170, yyq1170, yy2arr1170
			const yyr1170 bool = false
			yyq1170[0] = x.Name != ""
			yyq1170[1] = x.HostPort != 0
			yyq1170[3] = x.Protocol != ""
			yyq1170[4] = x.HostIP != ""
			var yynn1170 int
			if yyr1170 || yy2arr1170 {
				r.EncodeArrayStart(5)
			} else {
				yynn1170 = 1
				for _, b := range yyq1170 {
					if b {
						yynn1170++
					}
				}
				r.EncodeMapStart(yynn1170)
				yynn1170 = 0
			}
			if yyr1170 || yy2arr1170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1170[0] {
					yym1172 := z.EncBinary()
					_ = yym1172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1170[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1173 := z.EncBinary()
					_ = yym1173
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1170 || yy2arr1170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1170[1] {
					yym1175 := z.EncBinary()
					_ = yym1175
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1170[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1176 := z.EncBinary()
					_ = yym1176
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1170 || yy2arr1170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1178 := z.EncBinary()
				_ = yym1178
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1179 := z.EncBinary()
				_ = yym1179
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1170 || yy2arr1170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1170[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1170[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1170 || yy2arr1170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1170[4] {
					yym1182 := z.EncBinary()
					_ = yym1182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1170[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1183 := z.EncBinary()
					_ = yym1183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1170 || yy2arr1170 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1184 := z.DecBinary()
	_ = yym1184
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1185 := r.ContainerType()
		if yyct1185 == codecSelferValueTypeMap1234 {
			yyl1185 := r.ReadMapStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1185, d)
			}
		} else if yyct1185 == codecSelferValueTypeArray1234 {
			yyl1185 := r.ReadArrayStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1185, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1186Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1186Slc
	var yyhl1186 bool = l >= 0
	for yyj1186 := 0; ; yyj1186++ {
		if yyhl1186 {
			if yyj1186 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1186Slc = r.DecodeBytes(yys1186Slc, true, true)
		yys1186 := string(yys1186Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1186 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1186)
		} // end switch yys1186
	} // end for yyj1186
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1192 int
	var yyb1192 bool
	var yyhl1192 bool = l >= 0
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1192++
		if yyhl1192 {
			yyb1192 = yyj1192 > l
		} else {
			yyb1192 = r.CheckBreak()
		}
		if yyb1192 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1192-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1198 := z.EncBinary()
		_ = yym1198
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1199 := !z.EncBinary()
			yy2arr1199 := z.EncBasicHandle().StructToArray
			var yyq1199 [4]bool
			_, _, _ = yysep1199, yyq1199, yy2arr1199
			const yyr1199 bool = false
			yyq1199[1] = x.ReadOnly != false
			yyq1199[3] = x.SubPath != ""
			var yynn1199 int
			if yyr1199 || yy2arr1199 {
				r.EncodeArrayStart(4)
			} else {
				yynn1199 = 2
				for _, b := range yyq1199 {
					if b {
						yynn1199++
					}
				}
				r.EncodeMapStart(yynn1199)
				yynn1199 = 0
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1201 := z.EncBinary()
				_ = yym1201
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1202 := z.EncBinary()
				_ = yym1202
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1199[1] {
					yym1204 := z.EncBinary()
					_ = yym1204
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1199[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1205 := z.EncBinary()
					_ = yym1205
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1207 := z.EncBinary()
				_ = yym1207
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1208 := z.EncBinary()
				_ = yym1208
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1199[3] {
					yym1210 := z.EncBinary()
					_ = yym1210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1199[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1212 := z.DecBinary()
	_ = yym1212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1213 := r.ContainerType()
		if yyct1213 == codecSelferValueTypeMap1234 {
			yyl1213 := r.ReadMapStart()
			if yyl1213 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1213, d)
			}
		} else if yyct1213 == codecSelferValueTypeArray1234 {
			yyl1213 := r.ReadArrayStart()
			if yyl1213 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1214Slc
	var yyhl1214 bool = l >= 0
	for yyj1214 := 0; ; yyj1214++ {
		if yyhl1214 {
			if yyj1214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1214Slc = r.DecodeBytes(yys1214Slc, true, true)
		yys1214 := string(yys1214Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1214 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1214)
		} // end switch yys1214
	} // end for yyj1214
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1219 int
	var yyb1219 bool
	var yyhl1219 bool = l >= 0
	yyj1219++
	if yyhl1219 {
		yyb1219 = yyj1219 > l
	} else {
		yyb1219 = r.CheckBreak()
	}
	if yyb1219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1219++
	if yyhl1219 {
		yyb1219 = yyj1219 > l
	} else {
		yyb1219 = r.CheckBreak()
	}
	if yyb1219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1219++
	if yyhl1219 {
		yyb1219 = yyj1219 > l
	} else {
		yyb1219 = r.CheckBreak()
	}
	if yyb1219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1219++
	if yyhl1219 {
		yyb1219 = yyj1219 > l
	} else {
		yyb1219 = r.CheckBreak()
	}
	if yyb1219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1219++
		if yyhl1219 {
			yyb1219 = yyj1219 > l
		} else {
			yyb1219 = r.CheckBreak()
		}
		if yyb1219 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1219-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1224 := z.EncBinary()
		_ = yym1224
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1225 := !z.EncBinary()
			yy2arr1225 := z.EncBasicHandle().StructToArray
			var yyq1225 [3]bool
			_, _, _ = yysep1225, yyq1225, yy2arr1225
			const yyr1225 bool = false
			yyq1225[1] = x.Value != ""
			yyq1225[2] = x.ValueFrom != nil
			var yynn1225 int
			if yyr1225 || yy2arr1225 {
				r.EncodeArrayStart(3)
			} else {
				yynn1225 = 1
				for _, b := range yyq1225 {
					if b {
						yynn1225++
					}
				}
				r.EncodeMapStart(yynn1225)
				yynn1225 = 0
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1227 := z.EncBinary()
				_ = yym1227
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1228 := z.EncBinary()
				_ = yym1228
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1225[1] {
					yym1230 := z.EncBinary()
					_ = yym1230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1225[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1231 := z.EncBinary()
					_ = yym1231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1225[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1225[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1233 := z.DecBinary()
	_ = yym1233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1234 := r.ContainerType()
		if yyct1234 == codecSelferValueTypeMap1234 {
			yyl1234 := r.ReadMapStart()
			if yyl1234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1234, d)
			}
		} else if yyct1234 == codecSelferValueTypeArray1234 {
			yyl1234 := r.ReadArrayStart()
			if yyl1234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1235Slc
	var yyhl1235 bool = l >= 0
	for yyj1235 := 0; ; yyj1235++ {
		if yyhl1235 {
			if yyj1235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1235Slc = r.DecodeBytes(yys1235Slc, true, true)
		yys1235 := string(yys1235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1235 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1235)
		} // end switch yys1235
	} // end for yyj1235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1239 int
	var yyb1239 bool
	var yyhl1239 bool = l >= 0
	yyj1239++
	if yyhl1239 {
		yyb1239 = yyj1239 > l
	} else {
		yyb1239 = r.CheckBreak()
	}
	if yyb1239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1239++
	if yyhl1239 {
		yyb1239 = yyj1239 > l
	} else {
		yyb1239 = r.CheckBreak()
	}
	if yyb1239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1239++
	if yyhl1239 {
		yyb1239 = yyj1239 > l
	} else {
		yyb1239 = r.CheckBreak()
	}
	if yyb1239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1239++
		if yyhl1239 {
			yyb1239 = yyj1239 > l
		} else {
			yyb1239 = r.CheckBreak()
		}
		if yyb1239 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1239-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1243 := z.EncBinary()
		_ = yym1243
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1244 := !z.EncBinary()
			yy2arr1244 := z.EncBasicHandle().StructToArray
			var yyq1244 [4]bool
			_, _, _ = yysep1244, yyq1244, yy2arr1244
			const yyr1244 bool = false
			yyq1244[0] = x.FieldRef != nil
			yyq1244[1] = x.ResourceFieldRef != nil
			yyq1244[2] = x.ConfigMapKeyRef != nil
			yyq1244[3] = x.SecretKeyRef != nil
			var yynn1244 int
			if yyr1244 || yy2arr1244 {
				r.EncodeArrayStart(4)
			} else {
				yynn1244 = 0
				for _, b := range yyq1244 {
					if b {
						yynn1244++
					}
				}
				r.EncodeMapStart(yynn1244)
				yynn1244 = 0
			}
			if yyr1244 || yy2arr1244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1244[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1244[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1244 || yy2arr1244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1244[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1244[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1244 || yy2arr1244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1244[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1244[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1244 || yy2arr1244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1244[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1244[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1244 || yy2arr1244 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1249 := z.DecBinary()
	_ = yym1249
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1250 := r.ContainerType()
		if yyct1250 == codecSelferValueTypeMap1234 {
			yyl1250 := r.ReadMapStart()
			if yyl1250 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1250, d)
			}
		} else if yyct1250 == codecSelferValueTypeArray1234 {
			yyl1250 := r.ReadArrayStart()
			if yyl1250 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1250, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1251Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1251Slc
	var yyhl1251 bool = l >= 0
	for yyj1251 := 0; ; yyj1251++ {
		if yyhl1251 {
			if yyj1251 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1251Slc = r.DecodeBytes(yys1251Slc, true, true)
		yys1251 := string(yys1251Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1251 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1251)
		} // end switch yys1251
	} // end for yyj1251
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1256 int
	var yyb1256 bool
	var yyhl1256 bool = l >= 0
	yyj1256++
	if yyhl1256 {
		yyb1256 = yyj1256 > l
	} else {
		yyb1256 = r.CheckBreak()
	}
	if yyb1256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1256++
	if yyhl1256 {
		yyb1256 = yyj1256 > l
	} else {
		yyb1256 = r.CheckBreak()
	}
	if yyb1256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1256++
	if yyhl1256 {
		yyb1256 = yyj1256 > l
	} else {
		yyb1256 = r.CheckBreak()
	}
	if yyb1256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1256++
	if yyhl1256 {
		yyb1256 = yyj1256 > l
	} else {
		yyb1256 = r.CheckBreak()
	}
	if yyb1256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1256++
		if yyhl1256 {
			yyb1256 = yyj1256 > l
		} else {
			yyb1256 = r.CheckBreak()
		}
		if yyb1256 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1256-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1261 := z.EncBinary()
		_ = yym1261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1262 := !z.EncBinary()
			yy2arr1262 := z.EncBasicHandle().StructToArray
			var yyq1262 [2]bool
			_, _, _ = yysep1262, yyq1262, yy2arr1262
			const yyr1262 bool = false
			yyq1262[0] = x.APIVersion != ""
			var yynn1262 int
			if yyr1262 || yy2arr1262 {
				r.EncodeArrayStart(2)
			} else {
				yynn1262 = 1
				for _, b := range yyq1262 {
					if b {
						yynn1262++
					}
				}
				r.EncodeMapStart(yynn1262)
				yynn1262 = 0
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[0] {
					yym1264 := z.EncBinary()
					_ = yym1264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1262[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1265 := z.EncBinary()
					_ = yym1265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1267 := z.EncBinary()
				_ = yym1267
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1268 := z.EncBinary()
				_ = yym1268
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1269 := z.DecBinary()
	_ = yym1269
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1270 := r.ContainerType()
		if yyct1270 == codecSelferValueTypeMap1234 {
			yyl1270 := r.ReadMapStart()
			if yyl1270 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1270, d)
			}
		} else if yyct1270 == codecSelferValueTypeArray1234 {
			yyl1270 := r.ReadArrayStart()
			if yyl1270 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1270, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1271Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1271Slc
	var yyhl1271 bool = l >= 0
	for yyj1271 := 0; ; yyj1271++ {
		if yyhl1271 {
			if yyj1271 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1271Slc = r.DecodeBytes(yys1271Slc, true, true)
		yys1271 := string(yys1271Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1271 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1271)
		} // end switch yys1271
	} // end for yyj1271
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1274 int
	var yyb1274 bool
	var yyhl1274 bool = l >= 0
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1274++
		if yyhl1274 {
			yyb1274 = yyj1274 > l
		} else {
			yyb1274 = r.CheckBreak()
		}
		if yyb1274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1277 := z.EncBinary()
		_ = yym1277
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1278 := !z.EncBinary()
			yy2arr1278 := z.EncBasicHandle().StructToArray
			var yyq1278 [3]bool
			_, _, _ = yysep1278, yyq1278, yy2arr1278
			const yyr1278 bool = false
			yyq1278[0] = x.ContainerName != ""
			yyq1278[2] = true
			var yynn1278 int
			if yyr1278 || yy2arr1278 {
				r.EncodeArrayStart(3)
			} else {
				yynn1278 = 1
				for _, b := range yyq1278 {
					if b {
						yynn1278++
					}
				}
				r.EncodeMapStart(yynn1278)
				yynn1278 = 0
			}
			if yyr1278 || yy2arr1278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1278[0] {
					yym1280 := z.EncBinary()
					_ = yym1280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1278[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1281 := z.EncBinary()
					_ = yym1281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1278 || yy2arr1278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1283 := z.EncBinary()
				_ = yym1283
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1284 := z.EncBinary()
				_ = yym1284
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1278 || yy2arr1278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1278[2] {
					yy1286 := &x.Divisor
					yym1287 := z.EncBinary()
					_ = yym1287
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1286) {
					} else if !yym1287 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1286)
					} else {
						z.EncFallback(yy1286)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1278[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1288 := &x.Divisor
					yym1289 := z.EncBinary()
					_ = yym1289
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1288) {
					} else if !yym1289 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1288)
					} else {
						z.EncFallback(yy1288)
					}
				}
			}
			if yyr1278 || yy2arr1278 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1290 := z.DecBinary()
	_ = yym1290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1291 := r.ContainerType()
		if yyct1291 == codecSelferValueTypeMap1234 {
			yyl1291 := r.ReadMapStart()
			if yyl1291 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1291, d)
			}
		} else if yyct1291 == codecSelferValueTypeArray1234 {
			yyl1291 := r.ReadArrayStart()
			if yyl1291 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1291, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1292Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1292Slc
	var yyhl1292 bool = l >= 0
	for yyj1292 := 0; ; yyj1292++ {
		if yyhl1292 {
			if yyj1292 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1292Slc = r.DecodeBytes(yys1292Slc, true, true)
		yys1292 := string(yys1292Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1292 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1295 := &x.Divisor
				yym1296 := z.DecBinary()
				_ = yym1296
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1295) {
				} else if !yym1296 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1295)
				} else {
					z.DecFallback(yyv1295, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1292)
		} // end switch yys1292
	} // end for yyj1292
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1297 int
	var yyb1297 bool
	var yyhl1297 bool = l >= 0
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1297++
	if yyhl1297 {
		yyb1297 = yyj1297 > l
	} else {
		yyb1297 = r.CheckBreak()
	}
	if yyb1297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1300 := &x.Divisor
		yym1301 := z.DecBinary()
		_ = yym1301
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1300) {
		} else if !yym1301 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1300)
		} else {
			z.DecFallback(yyv1300, false)
		}
	}
	for {
		yyj1297++
		if yyhl1297 {
			yyb1297 = yyj1297 > l
		} else {
			yyb1297 = r.CheckBreak()
		}
		if yyb1297 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1297-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1302 := z.EncBinary()
		_ = yym1302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1303 := !z.EncBinary()
			yy2arr1303 := z.EncBasicHandle().StructToArray
			var yyq1303 [2]bool
			_, _, _ = yysep1303, yyq1303, yy2arr1303
			const yyr1303 bool = false
			yyq1303[0] = x.Name != ""
			var yynn1303 int
			if yyr1303 || yy2arr1303 {
				r.EncodeArrayStart(2)
			} else {
				yynn1303 = 1
				for _, b := range yyq1303 {
					if b {
						yynn1303++
					}
				}
				r.EncodeMapStart(yynn1303)
				yynn1303 = 0
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[0] {
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1303[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1306 := z.EncBinary()
					_ = yym1306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1308 := z.EncBinary()
				_ = yym1308
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1309 := z.EncBinary()
				_ = yym1309
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1310 := z.DecBinary()
	_ = yym1310
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1311 := r.ContainerType()
		if yyct1311 == codecSelferValueTypeMap1234 {
			yyl1311 := r.ReadMapStart()
			if yyl1311 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1311, d)
			}
		} else if yyct1311 == codecSelferValueTypeArray1234 {
			yyl1311 := r.ReadArrayStart()
			if yyl1311 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1311, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1312Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1312Slc
	var yyhl1312 bool = l >= 0
	for yyj1312 := 0; ; yyj1312++ {
		if yyhl1312 {
			if yyj1312 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1312Slc = r.DecodeBytes(yys1312Slc, true, true)
		yys1312 := string(yys1312Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1312 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1312)
		} // end switch yys1312
	} // end for yyj1312
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1315 int
	var yyb1315 bool
	var yyhl1315 bool = l >= 0
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1315++
		if yyhl1315 {
			yyb1315 = yyj1315 > l
		} else {
			yyb1315 = r.CheckBreak()
		}
		if yyb1315 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1315-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1318 := z.EncBinary()
		_ = yym1318
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1319 := !z.EncBinary()
			yy2arr1319 := z.EncBasicHandle().StructToArray
			var yyq1319 [2]bool
			_, _, _ = yysep1319, yyq1319, yy2arr1319
			const yyr1319 bool = false
			yyq1319[0] = x.Name != ""
			var yynn1319 int
			if yyr1319 || yy2arr1319 {
				r.EncodeArrayStart(2)
			} else {
				yynn1319 = 1
				for _, b := range yyq1319 {
					if b {
						yynn1319++
					}
				}
				r.EncodeMapStart(yynn1319)
				yynn1319 = 0
			}
			if yyr1319 || yy2arr1319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1319[0] {
					yym1321 := z.EncBinary()
					_ = yym1321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1319[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1322 := z.EncBinary()
					_ = yym1322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1319 || yy2arr1319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1324 := z.EncBinary()
				_ = yym1324
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1325 := z.EncBinary()
				_ = yym1325
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1319 || yy2arr1319 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1326 := z.DecBinary()
	_ = yym1326
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1327 := r.ContainerType()
		if yyct1327 == codecSelferValueTypeMap1234 {
			yyl1327 := r.ReadMapStart()
			if yyl1327 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1327, d)
			}
		} else if yyct1327 == codecSelferValueTypeArray1234 {
			yyl1327 := r.ReadArrayStart()
			if yyl1327 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1327, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1328Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1328Slc
	var yyhl1328 bool = l >= 0
	for yyj1328 := 0; ; yyj1328++ {
		if yyhl1328 {
			if yyj1328 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1328Slc = r.DecodeBytes(yys1328Slc, true, true)
		yys1328 := string(yys1328Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1328 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1328)
		} // end switch yys1328
	} // end for yyj1328
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1331 int
	var yyb1331 bool
	var yyhl1331 bool = l >= 0
	yyj1331++
	if yyhl1331 {
		yyb1331 = yyj1331 > l
	} else {
		yyb1331 = r.CheckBreak()
	}
	if yyb1331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1331++
	if yyhl1331 {
		yyb1331 = yyj1331 > l
	} else {
		yyb1331 = r.CheckBreak()
	}
	if yyb1331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1331++
		if yyhl1331 {
			yyb1331 = yyj1331 > l
		} else {
			yyb1331 = r.CheckBreak()
		}
		if yyb1331 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1331-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1334 := z.EncBinary()
		_ = yym1334
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1335 := !z.EncBinary()
			yy2arr1335 := z.EncBasicHandle().StructToArray
			var yyq1335 [2]bool
			_, _, _ = yysep1335, yyq1335, yy2arr1335
			const yyr1335 bool = false
			var yynn1335 int
			if yyr1335 || yy2arr1335 {
				r.EncodeArrayStart(2)
			} else {
				yynn1335 = 2
				for _, b := range yyq1335 {
					if b {
						yynn1335++
					}
				}
				r.EncodeMapStart(yynn1335)
				yynn1335 = 0
			}
			if yyr1335 || yy2arr1335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1337 := z.EncBinary()
				_ = yym1337
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1338 := z.EncBinary()
				_ = yym1338
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1335 || yy2arr1335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1340 := z.EncBinary()
				_ = yym1340
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1341 := z.EncBinary()
				_ = yym1341
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1335 || yy2arr1335 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1342 := z.DecBinary()
	_ = yym1342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1343 := r.ContainerType()
		if yyct1343 == codecSelferValueTypeMap1234 {
			yyl1343 := r.ReadMapStart()
			if yyl1343 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1343, d)
			}
		} else if yyct1343 == codecSelferValueTypeArray1234 {
			yyl1343 := r.ReadArrayStart()
			if yyl1343 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1343, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1344Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1344Slc
	var yyhl1344 bool = l >= 0
	for yyj1344 := 0; ; yyj1344++ {
		if yyhl1344 {
			if yyj1344 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1344Slc = r.DecodeBytes(yys1344Slc, true, true)
		yys1344 := string(yys1344Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1344 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1344)
		} // end switch yys1344
	} // end for yyj1344
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1347 int
	var yyb1347 bool
	var yyhl1347 bool = l >= 0
	yyj1347++
	if yyhl1347 {
		yyb1347 = yyj1347 > l
	} else {
		yyb1347 = r.CheckBreak()
	}
	if yyb1347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1347++
	if yyhl1347 {
		yyb1347 = yyj1347 > l
	} else {
		yyb1347 = r.CheckBreak()
	}
	if yyb1347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1347++
		if yyhl1347 {
			yyb1347 = yyj1347 > l
		} else {
			yyb1347 = r.CheckBreak()
		}
		if yyb1347 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1347-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1350 := z.EncBinary()
		_ = yym1350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1351 := !z.EncBinary()
			yy2arr1351 := z.EncBasicHandle().StructToArray
			var yyq1351 [5]bool
			_, _, _ = yysep1351, yyq1351, yy2arr1351
			const yyr1351 bool = false
			yyq1351[0] = x.Path != ""
			yyq1351[2] = x.Host != ""
			yyq1351[3] = x.Scheme != ""
			yyq1351[4] = len(x.HTTPHeaders) != 0
			var yynn1351 int
			if yyr1351 || yy2arr1351 {
				r.EncodeArrayStart(5)
			} else {
				yynn1351 = 1
				for _, b := range yyq1351 {
					if b {
						yynn1351++
					}
				}
				r.EncodeMapStart(yynn1351)
				yynn1351 = 0
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1351[0] {
					yym1353 := z.EncBinary()
					_ = yym1353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1351[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1354 := z.EncBinary()
					_ = yym1354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1356 := &x.Port
				yym1357 := z.EncBinary()
				_ = yym1357
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1356) {
				} else if !yym1357 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1356)
				} else {
					z.EncFallback(yy1356)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1358 := &x.Port
				yym1359 := z.EncBinary()
				_ = yym1359
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1358) {
				} else if !yym1359 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1358)
				} else {
					z.EncFallback(yy1358)
				}
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1351[2] {
					yym1361 := z.EncBinary()
					_ = yym1361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1351[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1362 := z.EncBinary()
					_ = yym1362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1351[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1351[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1351[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1365 := z.EncBinary()
						_ = yym1365
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1351[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1366 := z.EncBinary()
						_ = yym1366
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1367 := z.DecBinary()
	_ = yym1367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1368 := r.ContainerType()
		if yyct1368 == codecSelferValueTypeMap1234 {
			yyl1368 := r.ReadMapStart()
			if yyl1368 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1368, d)
			}
		} else if yyct1368 == codecSelferValueTypeArray1234 {
			yyl1368 := r.ReadArrayStart()
			if yyl1368 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1369Slc
	var yyhl1369 bool = l >= 0
	for yyj1369 := 0; ; yyj1369++ {
		if yyhl1369 {
			if yyj1369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1369Slc = r.DecodeBytes(yys1369Slc, true, true)
		yys1369 := string(yys1369Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1369 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1371 := &x.Port
				yym1372 := z.DecBinary()
				_ = yym1372
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1371) {
				} else if !yym1372 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1371)
				} else {
					z.DecFallback(yyv1371, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1375 := &x.HTTPHeaders
				yym1376 := z.DecBinary()
				_ = yym1376
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1375), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1369)
		} // end switch yys1369
	} // end for yyj1369
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1377 int
	var yyb1377 bool
	var yyhl1377 bool = l >= 0
	yyj1377++
	if yyhl1377 {
		yyb1377 = yyj1377 > l
	} else {
		yyb1377 = r.CheckBreak()
	}
	if yyb1377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1377++
	if yyhl1377 {
		yyb1377 = yyj1377 > l
	} else {
		yyb1377 = r.CheckBreak()
	}
	if yyb1377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1379 := &x.Port
		yym1380 := z.DecBinary()
		_ = yym1380
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1379) {
		} else if !yym1380 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1379)
		} else {
			z.DecFallback(yyv1379, false)
		}
	}
	yyj1377++
	if yyhl1377 {
		yyb1377 = yyj1377 > l
	} else {
		yyb1377 = r.CheckBreak()
	}
	if yyb1377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1377++
	if yyhl1377 {
		yyb1377 = yyj1377 > l
	} else {
		yyb1377 = r.CheckBreak()
	}
	if yyb1377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1377++
	if yyhl1377 {
		yyb1377 = yyj1377 > l
	} else {
		yyb1377 = r.CheckBreak()
	}
	if yyb1377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1383 := &x.HTTPHeaders
		yym1384 := z.DecBinary()
		_ = yym1384
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1383), d)
		}
	}
	for {
		yyj1377++
		if yyhl1377 {
			yyb1377 = yyj1377 > l
		} else {
			yyb1377 = r.CheckBreak()
		}
		if yyb1377 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1377-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1385 := z.EncBinary()
	_ = yym1385
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1386 := z.DecBinary()
	_ = yym1386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1387 := z.EncBinary()
		_ = yym1387
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1388 := !z.EncBinary()
			yy2arr1388 := z.EncBasicHandle().StructToArray
			var yyq1388 [1]bool
			_, _, _ = yysep1388, yyq1388, yy2arr1388
			const yyr1388 bool = false
			var yynn1388 int
			if yyr1388 || yy2arr1388 {
				r.EncodeArrayStart(1)
			} else {
				yynn1388 = 1
				for _, b := range yyq1388 {
					if b {
						yynn1388++
					}
				}
				r.EncodeMapStart(yynn1388)
				yynn1388 = 0
			}
			if yyr1388 || yy2arr1388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1390 := &x.Port
				yym1391 := z.EncBinary()
				_ = yym1391
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1390) {
				} else if !yym1391 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1390)
				} else {
					z.EncFallback(yy1390)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1392 := &x.Port
				yym1393 := z.EncBinary()
				_ = yym1393
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1392) {
				} else if !yym1393 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1392)
				} else {
					z.EncFallback(yy1392)
				}
			}
			if yyr1388 || yy2arr1388 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1394 := z.DecBinary()
	_ = yym1394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1395 := r.ContainerType()
		if yyct1395 == codecSelferValueTypeMap1234 {
			yyl1395 := r.ReadMapStart()
			if yyl1395 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1395, d)
			}
		} else if yyct1395 == codecSelferValueTypeArray1234 {
			yyl1395 := r.ReadArrayStart()
			if yyl1395 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1395, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1396Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1396Slc
	var yyhl1396 bool = l >= 0
	for yyj1396 := 0; ; yyj1396++ {
		if yyhl1396 {
			if yyj1396 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1396Slc = r.DecodeBytes(yys1396Slc, true, true)
		yys1396 := string(yys1396Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1396 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1397 := &x.Port
				yym1398 := z.DecBinary()
				_ = yym1398
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1397) {
				} else if !yym1398 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1397)
				} else {
					z.DecFallback(yyv1397, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1396)
		} // end switch yys1396
	} // end for yyj1396
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1399 int
	var yyb1399 bool
	var yyhl1399 bool = l >= 0
	yyj1399++
	if yyhl1399 {
		yyb1399 = yyj1399 > l
	} else {
		yyb1399 = r.CheckBreak()
	}
	if yyb1399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1400 := &x.Port
		yym1401 := z.DecBinary()
		_ = yym1401
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1400) {
		} else if !yym1401 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1400)
		} else {
			z.DecFallback(yyv1400, false)
		}
	}
	for {
		yyj1399++
		if yyhl1399 {
			yyb1399 = yyj1399 > l
		} else {
			yyb1399 = r.CheckBreak()
		}
		if yyb1399 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1399-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1402 := z.EncBinary()
		_ = yym1402
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1403 := !z.EncBinary()
			yy2arr1403 := z.EncBasicHandle().StructToArray
			var yyq1403 [1]bool
			_, _, _ = yysep1403, yyq1403, yy2arr1403
			const yyr1403 bool = false
			yyq1403[0] = len(x.Command) != 0
			var yynn1403 int
			if yyr1403 || yy2arr1403 {
				r.EncodeArrayStart(1)
			} else {
				yynn1403 = 0
				for _, b := range yyq1403 {
					if b {
						yynn1403++
					}
				}
				r.EncodeMapStart(yynn1403)
				yynn1403 = 0
			}
			if yyr1403 || yy2arr1403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1403[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1405 := z.EncBinary()
						_ = yym1405
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1403[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1406 := z.EncBinary()
						_ = yym1406
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1403 || yy2arr1403 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1407 := z.DecBinary()
	_ = yym1407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1408 := r.ContainerType()
		if yyct1408 == codecSelferValueTypeMap1234 {
			yyl1408 := r.ReadMapStart()
			if yyl1408 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1408, d)
			}
		} else if yyct1408 == codecSelferValueTypeArray1234 {
			yyl1408 := r.ReadArrayStart()
			if yyl1408 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1408, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1409Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1409Slc
	var yyhl1409 bool = l >= 0
	for yyj1409 := 0; ; yyj1409++ {
		if yyhl1409 {
			if yyj1409 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1409Slc = r.DecodeBytes(yys1409Slc, true, true)
		yys1409 := string(yys1409Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1409 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1410 := &x.Command
				yym1411 := z.DecBinary()
				_ = yym1411
				if false {
				} else {
					z.F.DecSliceStringX(yyv1410, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1409)
		} // end switch yys1409
	} // end for yyj1409
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1412 int
	var yyb1412 bool
	var yyhl1412 bool = l >= 0
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1413 := &x.Command
		yym1414 := z.DecBinary()
		_ = yym1414
		if false {
		} else {
			z.F.DecSliceStringX(yyv1413, false, d)
		}
	}
	for {
		yyj1412++
		if yyhl1412 {
			yyb1412 = yyj1412 > l
		} else {
			yyb1412 = r.CheckBreak()
		}
		if yyb1412 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1412-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1415 := z.EncBinary()
		_ = yym1415
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1416 := !z.EncBinary()
			yy2arr1416 := z.EncBasicHandle().StructToArray
			var yyq1416 [8]bool
			_, _, _ = yysep1416, yyq1416, yy2arr1416
			const yyr1416 bool = false
			yyq1416[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1416[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1416[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1416[3] = x.InitialDelaySeconds != 0
			yyq1416[4] = x.TimeoutSeconds != 0
			yyq1416[5] = x.PeriodSeconds != 0
			yyq1416[6] = x.SuccessThreshold != 0
			yyq1416[7] = x.FailureThreshold != 0
			var yynn1416 int
			if yyr1416 || yy2arr1416 {
				r.EncodeArrayStart(8)
			} else {
				yynn1416 = 0
				for _, b := range yyq1416 {
					if b {
						yynn1416++
					}
				}
				r.EncodeMapStart(yynn1416)
				yynn1416 = 0
			}
			var yyn1417 bool
			if x.Handler.Exec == nil {
				yyn1417 = true
				goto LABEL1417
			}
		LABEL1417:
			if yyr1416 || yy2arr1416 {
				if yyn1417 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1416[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1416[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1417 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1418 bool
			if x.Handler.HTTPGet == nil {
				yyn1418 = true
				goto LABEL1418
			}
		LABEL1418:
			if yyr1416 || yy2arr1416 {
				if yyn1418 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1416[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1416[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1418 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1419 bool
			if x.Handler.TCPSocket == nil {
				yyn1419 = true
				goto LABEL1419
			}
		LABEL1419:
			if yyr1416 || yy2arr1416 {
				if yyn1419 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1416[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1416[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1419 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1416 || yy2arr1416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1416[3] {
					yym1421 := z.EncBinary()
					_ = yym1421
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1416[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1422 := z.EncBinary()
					_ = yym1422
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1416 || yy2arr1416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1416[4] {
					yym1424 := z.EncBinary()
					_ = yym1424
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1416[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1425 := z.EncBinary()
					_ = yym1425
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1416 || yy2arr1416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1416[5] {
					yym1427 := z.EncBinary()
					_ = yym1427
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1416[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1428 := z.EncBinary()
					_ = yym1428
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1416 || yy2arr1416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1416[6] {
					yym1430 := z.EncBinary()
					_ = yym1430
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1416[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1431 := z.EncBinary()
					_ = yym1431
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1416 || yy2arr1416 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1416[7] {
					yym1433 := z.EncBinary()
					_ = yym1433
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1416[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1434 := z.EncBinary()
					_ = yym1434
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1416 || yy2arr1416 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1435 := z.DecBinary()
	_ = yym1435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1436 := r.ContainerType()
		if yyct1436 == codecSelferValueTypeMap1234 {
			yyl1436 := r.ReadMapStart()
			if yyl1436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1436, d)
			}
		} else if yyct1436 == codecSelferValueTypeArray1234 {
			yyl1436 := r.ReadArrayStart()
			if yyl1436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1437Slc
	var yyhl1437 bool = l >= 0
	for yyj1437 := 0; ; yyj1437++ {
		if yyhl1437 {
			if yyj1437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1437Slc = r.DecodeBytes(yys1437Slc, true, true)
		yys1437 := string(yys1437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1437 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1437)
		} // end switch yys1437
	} // end for yyj1437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1446 int
	var yyb1446 bool
	var yyhl1446 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1446++
	if yyhl1446 {
		yyb1446 = yyj1446 > l
	} else {
		yyb1446 = r.CheckBreak()
	}
	if yyb1446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1446++
		if yyhl1446 {
			yyb1446 = yyj1446 > l
		} else {
			yyb1446 = r.CheckBreak()
		}
		if yyb1446 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1446-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1455 := z.EncBinary()
	_ = yym1455
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1456 := z.DecBinary()
	_ = yym1456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1457 := z.EncBinary()
	_ = yym1457
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1458 := z.DecBinary()
	_ = yym1458
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1459 := z.EncBinary()
		_ = yym1459
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1460 := !z.EncBinary()
			yy2arr1460 := z.EncBasicHandle().StructToArray
			var yyq1460 [2]bool
			_, _, _ = yysep1460, yyq1460, yy2arr1460
			const yyr1460 bool = false
			yyq1460[0] = len(x.Add) != 0
			yyq1460[1] = len(x.Drop) != 0
			var yynn1460 int
			if yyr1460 || yy2arr1460 {
				r.EncodeArrayStart(2)
			} else {
				yynn1460 = 0
				for _, b := range yyq1460 {
					if b {
						yynn1460++
					}
				}
				r.EncodeMapStart(yynn1460)
				yynn1460 = 0
			}
			if yyr1460 || yy2arr1460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1460[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1462 := z.EncBinary()
						_ = yym1462
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1460[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1463 := z.EncBinary()
						_ = yym1463
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1460 || yy2arr1460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1460[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1465 := z.EncBinary()
						_ = yym1465
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1460[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1466 := z.EncBinary()
						_ = yym1466
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1460 || yy2arr1460 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1467 := z.DecBinary()
	_ = yym1467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1468 := r.ContainerType()
		if yyct1468 == codecSelferValueTypeMap1234 {
			yyl1468 := r.ReadMapStart()
			if yyl1468 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1468, d)
			}
		} else if yyct1468 == codecSelferValueTypeArray1234 {
			yyl1468 := r.ReadArrayStart()
			if yyl1468 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1468, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1469Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1469Slc
	var yyhl1469 bool = l >= 0
	for yyj1469 := 0; ; yyj1469++ {
		if yyhl1469 {
			if yyj1469 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1469Slc = r.DecodeBytes(yys1469Slc, true, true)
		yys1469 := string(yys1469Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1469 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1470 := &x.Add
				yym1471 := z.DecBinary()
				_ = yym1471
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1470), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1472 := &x.Drop
				yym1473 := z.DecBinary()
				_ = yym1473
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1472), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1469)
		} // end switch yys1469
	} // end for yyj1469
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1474 int
	var yyb1474 bool
	var yyhl1474 bool = l >= 0
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1475 := &x.Add
		yym1476 := z.DecBinary()
		_ = yym1476
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1475), d)
		}
	}
	yyj1474++
	if yyhl1474 {
		yyb1474 = yyj1474 > l
	} else {
		yyb1474 = r.CheckBreak()
	}
	if yyb1474 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1477 := &x.Drop
		yym1478 := z.DecBinary()
		_ = yym1478
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1477), d)
		}
	}
	for {
		yyj1474++
		if yyhl1474 {
			yyb1474 = yyj1474 > l
		} else {
			yyb1474 = r.CheckBreak()
		}
		if yyb1474 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1474-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1479 := z.EncBinary()
		_ = yym1479
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1480 := !z.EncBinary()
			yy2arr1480 := z.EncBasicHandle().StructToArray
			var yyq1480 [2]bool
			_, _, _ = yysep1480, yyq1480, yy2arr1480
			const yyr1480 bool = false
			yyq1480[0] = len(x.Limits) != 0
			yyq1480[1] = len(x.Requests) != 0
			var yynn1480 int
			if yyr1480 || yy2arr1480 {
				r.EncodeArrayStart(2)
			} else {
				yynn1480 = 0
				for _, b := range yyq1480 {
					if b {
						yynn1480++
					}
				}
				r.EncodeMapStart(yynn1480)
				yynn1480 = 0
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1480[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1480[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1480[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1480[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1480 || yy2arr1480 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1483 := z.DecBinary()
	_ = yym1483
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1484 := r.ContainerType()
		if yyct1484 == codecSelferValueTypeMap1234 {
			yyl1484 := r.ReadMapStart()
			if yyl1484 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1484, d)
			}
		} else if yyct1484 == codecSelferValueTypeArray1234 {
			yyl1484 := r.ReadArrayStart()
			if yyl1484 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1484, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1485Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1485Slc
	var yyhl1485 bool = l >= 0
	for yyj1485 := 0; ; yyj1485++ {
		if yyhl1485 {
			if yyj1485 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1485Slc = r.DecodeBytes(yys1485Slc, true, true)
		yys1485 := string(yys1485Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1485 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1486 := &x.Limits
				yyv1486.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1487 := &x.Requests
				yyv1487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1485)
		} // end switch yys1485
	} // end for yyj1485
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1488 int
	var yyb1488 bool
	var yyhl1488 bool = l >= 0
	yyj1488++
	if yyhl1488 {
		yyb1488 = yyj1488 > l
	} else {
		yyb1488 = r.CheckBreak()
	}
	if yyb1488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1489 := &x.Limits
		yyv1489.CodecDecodeSelf(d)
	}
	yyj1488++
	if yyhl1488 {
		yyb1488 = yyj1488 > l
	} else {
		yyb1488 = r.CheckBreak()
	}
	if yyb1488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1490 := &x.Requests
		yyv1490.CodecDecodeSelf(d)
	}
	for {
		yyj1488++
		if yyhl1488 {
			yyb1488 = yyj1488 > l
		} else {
			yyb1488 = r.CheckBreak()
		}
		if yyb1488 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1488-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1491 := z.EncBinary()
		_ = yym1491
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1492 := !z.EncBinary()
			yy2arr1492 := z.EncBasicHandle().StructToArray
			var yyq1492 [18]bool
			_, _, _ = yysep1492, yyq1492, yy2arr1492
			const yyr1492 bool = false
			yyq1492[1] = x.Image != ""
			yyq1492[2] = len(x.Command) != 0
			yyq1492[3] = len(x.Args) != 0
			yyq1492[4] = x.WorkingDir != ""
			yyq1492[5] = len(x.Ports) != 0
			yyq1492[6] = len(x.Env) != 0
			yyq1492[7] = true
			yyq1492[8] = len(x.VolumeMounts) != 0
			yyq1492[9] = x.LivenessProbe != nil
			yyq1492[10] = x.ReadinessProbe != nil
			yyq1492[11] = x.Lifecycle != nil
			yyq1492[12] = x.TerminationMessagePath != ""
			yyq1492[13] = x.ImagePullPolicy != ""
			yyq1492[14] = x.SecurityContext != nil
			yyq1492[15] = x.Stdin != false
			yyq1492[16] = x.StdinOnce != false
			yyq1492[17] = x.TTY != false
			var yynn1492 int
			if yyr1492 || yy2arr1492 {
				r.EncodeArrayStart(18)
			} else {
				yynn1492 = 1
				for _, b := range yyq1492 {
					if b {
						yynn1492++
					}
				}
				r.EncodeMapStart(yynn1492)
				yynn1492 = 0
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1494 := z.EncBinary()
				_ = yym1494
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1495 := z.EncBinary()
				_ = yym1495
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[1] {
					yym1497 := z.EncBinary()
					_ = yym1497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1492[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1498 := z.EncBinary()
					_ = yym1498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1500 := z.EncBinary()
						_ = yym1500
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1492[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1501 := z.EncBinary()
						_ = yym1501
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1503 := z.EncBinary()
						_ = yym1503
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1492[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1504 := z.EncBinary()
						_ = yym1504
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[4] {
					yym1506 := z.EncBinary()
					_ = yym1506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1492[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1507 := z.EncBinary()
					_ = yym1507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1509 := z.EncBinary()
						_ = yym1509
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1492[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1510 := z.EncBinary()
						_ = yym1510
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1512 := z.EncBinary()
						_ = yym1512
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1492[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1513 := z.EncBinary()
						_ = yym1513
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[7] {
					yy1515 := &x.Resources
					yy1515.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1492[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1516 := &x.Resources
					yy1516.CodecEncodeSelf(e)
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1518 := z.EncBinary()
						_ = yym1518
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1492[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1519 := z.EncBinary()
						_ = yym1519
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1492[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1492[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1492[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[12] {
					yym1524 := z.EncBinary()
					_ = yym1524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1492[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1525 := z.EncBinary()
					_ = yym1525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1492[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1492[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[15] {
					yym1529 := z.EncBinary()
					_ = yym1529
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1492[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1530 := z.EncBinary()
					_ = yym1530
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[16] {
					yym1532 := z.EncBinary()
					_ = yym1532
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1492[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1533 := z.EncBinary()
					_ = yym1533
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1492[17] {
					yym1535 := z.EncBinary()
					_ = yym1535
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1492[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1536 := z.EncBinary()
					_ = yym1536
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1492 || yy2arr1492 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1537 := z.DecBinary()
	_ = yym1537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1538 := r.ContainerType()
		if yyct1538 == codecSelferValueTypeMap1234 {
			yyl1538 := r.ReadMapStart()
			if yyl1538 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1538, d)
			}
		} else if yyct1538 == codecSelferValueTypeArray1234 {
			yyl1538 := r.ReadArrayStart()
			if yyl1538 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1539Slc
	var yyhl1539 bool = l >= 0
	for yyj1539 := 0; ; yyj1539++ {
		if yyhl1539 {
			if yyj1539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1539Slc = r.DecodeBytes(yys1539Slc, true, true)
		yys1539 := string(yys1539Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1539 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1542 := &x.Command
				yym1543 := z.DecBinary()
				_ = yym1543
				if false {
				} else {
					z.F.DecSliceStringX(yyv1542, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1544 := &x.Args
				yym1545 := z.DecBinary()
				_ = yym1545
				if false {
				} else {
					z.F.DecSliceStringX(yyv1544, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1547 := &x.Ports
				yym1548 := z.DecBinary()
				_ = yym1548
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1547), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1549 := &x.Env
				yym1550 := z.DecBinary()
				_ = yym1550
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1549), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1551 := &x.Resources
				yyv1551.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1552 := &x.VolumeMounts
				yym1553 := z.DecBinary()
				_ = yym1553
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1552), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1539)
		} // end switch yys1539
	} // end for yyj1539
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1563 int
	var yyb1563 bool
	var yyhl1563 bool = l >= 0
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1566 := &x.Command
		yym1567 := z.DecBinary()
		_ = yym1567
		if false {
		} else {
			z.F.DecSliceStringX(yyv1566, false, d)
		}
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1568 := &x.Args
		yym1569 := z.DecBinary()
		_ = yym1569
		if false {
		} else {
			z.F.DecSliceStringX(yyv1568, false, d)
		}
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1571 := &x.Ports
		yym1572 := z.DecBinary()
		_ = yym1572
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1571), d)
		}
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1573 := &x.Env
		yym1574 := z.DecBinary()
		_ = yym1574
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1573), d)
		}
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1575 := &x.Resources
		yyv1575.CodecDecodeSelf(d)
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1576 := &x.VolumeMounts
		yym1577 := z.DecBinary()
		_ = yym1577
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1576), d)
		}
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1563++
		if yyhl1563 {
			yyb1563 = yyj1563 > l
		} else {
			yyb1563 = r.CheckBreak()
		}
		if yyb1563 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1563-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1587 := z.EncBinary()
		_ = yym1587
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1588 := !z.EncBinary()
			yy2arr1588 := z.EncBasicHandle().StructToArray
			var yyq1588 [3]bool
			_, _, _ = yysep1588, yyq1588, yy2arr1588
			const yyr1588 bool = false
			yyq1588[0] = x.Exec != nil
			yyq1588[1] = x.HTTPGet != nil
			yyq1588[2] = x.TCPSocket != nil
			var yynn1588 int
			if yyr1588 || yy2arr1588 {
				r.EncodeArrayStart(3)
			} else {
				yynn1588 = 0
				for _, b := range yyq1588 {
					if b {
						yynn1588++
					}
				}
				r.EncodeMapStart(yynn1588)
				yynn1588 = 0
			}
			if yyr1588 || yy2arr1588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1588[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1588[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1588 || yy2arr1588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1588[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1588[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1588 || yy2arr1588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1588[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1588[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1588 || yy2arr1588 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1592 := z.DecBinary()
	_ = yym1592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1593 := r.ContainerType()
		if yyct1593 == codecSelferValueTypeMap1234 {
			yyl1593 := r.ReadMapStart()
			if yyl1593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1593, d)
			}
		} else if yyct1593 == codecSelferValueTypeArray1234 {
			yyl1593 := r.ReadArrayStart()
			if yyl1593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1594Slc
	var yyhl1594 bool = l >= 0
	for yyj1594 := 0; ; yyj1594++ {
		if yyhl1594 {
			if yyj1594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1594Slc = r.DecodeBytes(yys1594Slc, true, true)
		yys1594 := string(yys1594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1594 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1594)
		} // end switch yys1594
	} // end for yyj1594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1598 int
	var yyb1598 bool
	var yyhl1598 bool = l >= 0
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1598++
		if yyhl1598 {
			yyb1598 = yyj1598 > l
		} else {
			yyb1598 = r.CheckBreak()
		}
		if yyb1598 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1598-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1602 := z.EncBinary()
		_ = yym1602
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1603 := !z.EncBinary()
			yy2arr1603 := z.EncBasicHandle().StructToArray
			var yyq1603 [2]bool
			_, _, _ = yysep1603, yyq1603, yy2arr1603
			const yyr1603 bool = false
			yyq1603[0] = x.PostStart != nil
			yyq1603[1] = x.PreStop != nil
			var yynn1603 int
			if yyr1603 || yy2arr1603 {
				r.EncodeArrayStart(2)
			} else {
				yynn1603 = 0
				for _, b := range yyq1603 {
					if b {
						yynn1603++
					}
				}
				r.EncodeMapStart(yynn1603)
				yynn1603 = 0
			}
			if yyr1603 || yy2arr1603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1603[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1603[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1603 || yy2arr1603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1603[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1603[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1603 || yy2arr1603 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1606 := z.DecBinary()
	_ = yym1606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1607 := r.ContainerType()
		if yyct1607 == codecSelferValueTypeMap1234 {
			yyl1607 := r.ReadMapStart()
			if yyl1607 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1607, d)
			}
		} else if yyct1607 == codecSelferValueTypeArray1234 {
			yyl1607 := r.ReadArrayStart()
			if yyl1607 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1607, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1608Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1608Slc
	var yyhl1608 bool = l >= 0
	for yyj1608 := 0; ; yyj1608++ {
		if yyhl1608 {
			if yyj1608 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1608Slc = r.DecodeBytes(yys1608Slc, true, true)
		yys1608 := string(yys1608Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1608 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1608)
		} // end switch yys1608
	} // end for yyj1608
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1611 int
	var yyb1611 bool
	var yyhl1611 bool = l >= 0
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1611++
		if yyhl1611 {
			yyb1611 = yyj1611 > l
		} else {
			yyb1611 = r.CheckBreak()
		}
		if yyb1611 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1611-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1614 := z.EncBinary()
	_ = yym1614
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1615 := z.DecBinary()
	_ = yym1615
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1616 := z.EncBinary()
		_ = yym1616
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1617 := !z.EncBinary()
			yy2arr1617 := z.EncBasicHandle().StructToArray
			var yyq1617 [2]bool
			_, _, _ = yysep1617, yyq1617, yy2arr1617
			const yyr1617 bool = false
			yyq1617[0] = x.Reason != ""
			yyq1617[1] = x.Message != ""
			var yynn1617 int
			if yyr1617 || yy2arr1617 {
				r.EncodeArrayStart(2)
			} else {
				yynn1617 = 0
				for _, b := range yyq1617 {
					if b {
						yynn1617++
					}
				}
				r.EncodeMapStart(yynn1617)
				yynn1617 = 0
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1617[0] {
					yym1619 := z.EncBinary()
					_ = yym1619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1617[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1617[1] {
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1617[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1624 := z.DecBinary()
	_ = yym1624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1625 := r.ContainerType()
		if yyct1625 == codecSelferValueTypeMap1234 {
			yyl1625 := r.ReadMapStart()
			if yyl1625 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1625, d)
			}
		} else if yyct1625 == codecSelferValueTypeArray1234 {
			yyl1625 := r.ReadArrayStart()
			if yyl1625 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1626Slc
	var yyhl1626 bool = l >= 0
	for yyj1626 := 0; ; yyj1626++ {
		if yyhl1626 {
			if yyj1626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1626Slc = r.DecodeBytes(yys1626Slc, true, true)
		yys1626 := string(yys1626Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1626 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1626)
		} // end switch yys1626
	} // end for yyj1626
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1629 int
	var yyb1629 bool
	var yyhl1629 bool = l >= 0
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1629++
		if yyhl1629 {
			yyb1629 = yyj1629 > l
		} else {
			yyb1629 = r.CheckBreak()
		}
		if yyb1629 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1629-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1632 := z.EncBinary()
		_ = yym1632
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1633 := !z.EncBinary()
			yy2arr1633 := z.EncBasicHandle().StructToArray
			var yyq1633 [1]bool
			_, _, _ = yysep1633, yyq1633, yy2arr1633
			const yyr1633 bool = false
			yyq1633[0] = true
			var yynn1633 int
			if yyr1633 || yy2arr1633 {
				r.EncodeArrayStart(1)
			} else {
				yynn1633 = 0
				for _, b := range yyq1633 {
					if b {
						yynn1633++
					}
				}
				r.EncodeMapStart(yynn1633)
				yynn1633 = 0
			}
			if yyr1633 || yy2arr1633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1633[0] {
					yy1635 := &x.StartedAt
					yym1636 := z.EncBinary()
					_ = yym1636
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1635) {
					} else if yym1636 {
						z.EncBinaryMarshal(yy1635)
					} else if !yym1636 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1635)
					} else {
						z.EncFallback(yy1635)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1633[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1637 := &x.StartedAt
					yym1638 := z.EncBinary()
					_ = yym1638
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1637) {
					} else if yym1638 {
						z.EncBinaryMarshal(yy1637)
					} else if !yym1638 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1637)
					} else {
						z.EncFallback(yy1637)
					}
				}
			}
			if yyr1633 || yy2arr1633 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1639 := z.DecBinary()
	_ = yym1639
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1640 := r.ContainerType()
		if yyct1640 == codecSelferValueTypeMap1234 {
			yyl1640 := r.ReadMapStart()
			if yyl1640 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1640, d)
			}
		} else if yyct1640 == codecSelferValueTypeArray1234 {
			yyl1640 := r.ReadArrayStart()
			if yyl1640 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1640, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1641Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1641Slc
	var yyhl1641 bool = l >= 0
	for yyj1641 := 0; ; yyj1641++ {
		if yyhl1641 {
			if yyj1641 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1641Slc = r.DecodeBytes(yys1641Slc, true, true)
		yys1641 := string(yys1641Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1641 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1642 := &x.StartedAt
				yym1643 := z.DecBinary()
				_ = yym1643
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1642) {
				} else if yym1643 {
					z.DecBinaryUnmarshal(yyv1642)
				} else if !yym1643 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1642)
				} else {
					z.DecFallback(yyv1642, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1641)
		} // end switch yys1641
	} // end for yyj1641
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1644 int
	var yyb1644 bool
	var yyhl1644 bool = l >= 0
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1645 := &x.StartedAt
		yym1646 := z.DecBinary()
		_ = yym1646
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1645) {
		} else if yym1646 {
			z.DecBinaryUnmarshal(yyv1645)
		} else if !yym1646 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1645)
		} else {
			z.DecFallback(yyv1645, false)
		}
	}
	for {
		yyj1644++
		if yyhl1644 {
			yyb1644 = yyj1644 > l
		} else {
			yyb1644 = r.CheckBreak()
		}
		if yyb1644 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1644-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1647 := z.EncBinary()
		_ = yym1647
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1648 := !z.EncBinary()
			yy2arr1648 := z.EncBasicHandle().StructToArray
			var yyq1648 [7]bool
			_, _, _ = yysep1648, yyq1648, yy2arr1648
			const yyr1648 bool = false
			yyq1648[1] = x.Signal != 0
			yyq1648[2] = x.Reason != ""
			yyq1648[3] = x.Message != ""
			yyq1648[4] = true
			yyq1648[5] = true
			yyq1648[6] = x.ContainerID != ""
			var yynn1648 int
			if yyr1648 || yy2arr1648 {
				r.EncodeArrayStart(7)
			} else {
				yynn1648 = 1
				for _, b := range yyq1648 {
					if b {
						yynn1648++
					}
				}
				r.EncodeMapStart(yynn1648)
				yynn1648 = 0
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1650 := z.EncBinary()
				_ = yym1650
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1651 := z.EncBinary()
				_ = yym1651
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[1] {
					yym1653 := z.EncBinary()
					_ = yym1653
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1648[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1654 := z.EncBinary()
					_ = yym1654
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[2] {
					yym1656 := z.EncBinary()
					_ = yym1656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1648[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1657 := z.EncBinary()
					_ = yym1657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[3] {
					yym1659 := z.EncBinary()
					_ = yym1659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1648[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1660 := z.EncBinary()
					_ = yym1660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[4] {
					yy1662 := &x.StartedAt
					yym1663 := z.EncBinary()
					_ = yym1663
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1662) {
					} else if yym1663 {
						z.EncBinaryMarshal(yy1662)
					} else if !yym1663 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1662)
					} else {
						z.EncFallback(yy1662)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1648[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1664 := &x.StartedAt
					yym1665 := z.EncBinary()
					_ = yym1665
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1664) {
					} else if yym1665 {
						z.EncBinaryMarshal(yy1664)
					} else if !yym1665 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1664)
					} else {
						z.EncFallback(yy1664)
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[5] {
					yy1667 := &x.FinishedAt
					yym1668 := z.EncBinary()
					_ = yym1668
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1667) {
					} else if yym1668 {
						z.EncBinaryMarshal(yy1667)
					} else if !yym1668 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1667)
					} else {
						z.EncFallback(yy1667)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1648[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1669 := &x.FinishedAt
					yym1670 := z.EncBinary()
					_ = yym1670
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1669) {
					} else if yym1670 {
						z.EncBinaryMarshal(yy1669)
					} else if !yym1670 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1669)
					} else {
						z.EncFallback(yy1669)
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[6] {
					yym1672 := z.EncBinary()
					_ = yym1672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1648[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1673 := z.EncBinary()
					_ = yym1673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1674 := z.DecBinary()
	_ = yym1674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1675 := r.ContainerType()
		if yyct1675 == codecSelferValueTypeMap1234 {
			yyl1675 := r.ReadMapStart()
			if yyl1675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1675, d)
			}
		} else if yyct1675 == codecSelferValueTypeArray1234 {
			yyl1675 := r.ReadArrayStart()
			if yyl1675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1676Slc
	var yyhl1676 bool = l >= 0
	for yyj1676 := 0; ; yyj1676++ {
		if yyhl1676 {
			if yyj1676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1676Slc = r.DecodeBytes(yys1676Slc, true, true)
		yys1676 := string(yys1676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1676 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1681 := &x.StartedAt
				yym1682 := z.DecBinary()
				_ = yym1682
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1681) {
				} else if yym1682 {
					z.DecBinaryUnmarshal(yyv1681)
				} else if !yym1682 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1681)
				} else {
					z.DecFallback(yyv1681, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1683 := &x.FinishedAt
				yym1684 := z.DecBinary()
				_ = yym1684
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1683) {
				} else if yym1684 {
					z.DecBinaryUnmarshal(yyv1683)
				} else if !yym1684 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1683)
				} else {
					z.DecFallback(yyv1683, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1676)
		} // end switch yys1676
	} // end for yyj1676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1686 int
	var yyb1686 bool
	var yyhl1686 bool = l >= 0
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1691 := &x.StartedAt
		yym1692 := z.DecBinary()
		_ = yym1692
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1691) {
		} else if yym1692 {
			z.DecBinaryUnmarshal(yyv1691)
		} else if !yym1692 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1691)
		} else {
			z.DecFallback(yyv1691, false)
		}
	}
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1693 := &x.FinishedAt
		yym1694 := z.DecBinary()
		_ = yym1694
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1693) {
		} else if yym1694 {
			z.DecBinaryUnmarshal(yyv1693)
		} else if !yym1694 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1693)
		} else {
			z.DecFallback(yyv1693, false)
		}
	}
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1686++
		if yyhl1686 {
			yyb1686 = yyj1686 > l
		} else {
			yyb1686 = r.CheckBreak()
		}
		if yyb1686 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1686-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1696 := z.EncBinary()
		_ = yym1696
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1697 := !z.EncBinary()
			yy2arr1697 := z.EncBasicHandle().StructToArray
			var yyq1697 [3]bool
			_, _, _ = yysep1697, yyq1697, yy2arr1697
			const yyr1697 bool = false
			yyq1697[0] = x.Waiting != nil
			yyq1697[1] = x.Running != nil
			yyq1697[2] = x.Terminated != nil
			var yynn1697 int
			if yyr1697 || yy2arr1697 {
				r.EncodeArrayStart(3)
			} else {
				yynn1697 = 0
				for _, b := range yyq1697 {
					if b {
						yynn1697++
					}
				}
				r.EncodeMapStart(yynn1697)
				yynn1697 = 0
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1697[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1697[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1697[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1697[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1697[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1697[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1701 := z.DecBinary()
	_ = yym1701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1702 := r.ContainerType()
		if yyct1702 == codecSelferValueTypeMap1234 {
			yyl1702 := r.ReadMapStart()
			if yyl1702 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1702, d)
			}
		} else if yyct1702 == codecSelferValueTypeArray1234 {
			yyl1702 := r.ReadArrayStart()
			if yyl1702 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1702, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1703Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1703Slc
	var yyhl1703 bool = l >= 0
	for yyj1703 := 0; ; yyj1703++ {
		if yyhl1703 {
			if yyj1703 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1703Slc = r.DecodeBytes(yys1703Slc, true, true)
		yys1703 := string(yys1703Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1703 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1703)
		} // end switch yys1703
	} // end for yyj1703
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1707 int
	var yyb1707 bool
	var yyhl1707 bool = l >= 0
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1707++
		if yyhl1707 {
			yyb1707 = yyj1707 > l
		} else {
			yyb1707 = r.CheckBreak()
		}
		if yyb1707 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1707-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1711 := z.EncBinary()
		_ = yym1711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1712 := !z.EncBinary()
			yy2arr1712 := z.EncBasicHandle().StructToArray
			var yyq1712 [8]bool
			_, _, _ = yysep1712, yyq1712, yy2arr1712
			const yyr1712 bool = false
			yyq1712[1] = true
			yyq1712[2] = true
			yyq1712[7] = x.ContainerID != ""
			var yynn1712 int
			if yyr1712 || yy2arr1712 {
				r.EncodeArrayStart(8)
			} else {
				yynn1712 = 5
				for _, b := range yyq1712 {
					if b {
						yynn1712++
					}
				}
				r.EncodeMapStart(yynn1712)
				yynn1712 = 0
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1714 := z.EncBinary()
				_ = yym1714
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1715 := z.EncBinary()
				_ = yym1715
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1712[1] {
					yy1717 := &x.State
					yy1717.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1712[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1718 := &x.State
					yy1718.CodecEncodeSelf(e)
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1712[2] {
					yy1720 := &x.LastTerminationState
					yy1720.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1712[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1721 := &x.LastTerminationState
					yy1721.CodecEncodeSelf(e)
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1723 := z.EncBinary()
				_ = yym1723
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1724 := z.EncBinary()
				_ = yym1724
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1726 := z.EncBinary()
				_ = yym1726
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1727 := z.EncBinary()
				_ = yym1727
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1729 := z.EncBinary()
				_ = yym1729
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1730 := z.EncBinary()
				_ = yym1730
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1732 := z.EncBinary()
				_ = yym1732
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1733 := z.EncBinary()
				_ = yym1733
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1712[7] {
					yym1735 := z.EncBinary()
					_ = yym1735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1712[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1737 := z.DecBinary()
	_ = yym1737
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1738 := r.ContainerType()
		if yyct1738 == codecSelferValueTypeMap1234 {
			yyl1738 := r.ReadMapStart()
			if yyl1738 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1738, d)
			}
		} else if yyct1738 == codecSelferValueTypeArray1234 {
			yyl1738 := r.ReadArrayStart()
			if yyl1738 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1738, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1739Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1739Slc
	var yyhl1739 bool = l >= 0
	for yyj1739 := 0; ; yyj1739++ {
		if yyhl1739 {
			if yyj1739 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1739Slc = r.DecodeBytes(yys1739Slc, true, true)
		yys1739 := string(yys1739Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1739 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1741 := &x.State
				yyv1741.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1742 := &x.LastTerminationState
				yyv1742.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1739)
		} // end switch yys1739
	} // end for yyj1739
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1748 int
	var yyb1748 bool
	var yyhl1748 bool = l >= 0
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1750 := &x.State
		yyv1750.CodecDecodeSelf(d)
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1751 := &x.LastTerminationState
		yyv1751.CodecDecodeSelf(d)
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1748++
		if yyhl1748 {
			yyb1748 = yyj1748 > l
		} else {
			yyb1748 = r.CheckBreak()
		}
		if yyb1748 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1748-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1757 := z.EncBinary()
	_ = yym1757
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1758 := z.DecBinary()
	_ = yym1758
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1759 := z.EncBinary()
	_ = yym1759
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1760 := z.DecBinary()
	_ = yym1760
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1761 := z.EncBinary()
		_ = yym1761
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1762 := !z.EncBinary()
			yy2arr1762 := z.EncBasicHandle().StructToArray
			var yyq1762 [6]bool
			_, _, _ = yysep1762, yyq1762, yy2arr1762
			const yyr1762 bool = false
			yyq1762[2] = true
			yyq1762[3] = true
			yyq1762[4] = x.Reason != ""
			yyq1762[5] = x.Message != ""
			var yynn1762 int
			if yyr1762 || yy2arr1762 {
				r.EncodeArrayStart(6)
			} else {
				yynn1762 = 2
				for _, b := range yyq1762 {
					if b {
						yynn1762++
					}
				}
				r.EncodeMapStart(yynn1762)
				yynn1762 = 0
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1762[2] {
					yy1766 := &x.LastProbeTime
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1766) {
					} else if yym1767 {
						z.EncBinaryMarshal(yy1766)
					} else if !yym1767 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1766)
					} else {
						z.EncFallback(yy1766)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1762[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1768 := &x.LastProbeTime
					yym1769 := z.EncBinary()
					_ = yym1769
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1768) {
					} else if yym1769 {
						z.EncBinaryMarshal(yy1768)
					} else if !yym1769 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1768)
					} else {
						z.EncFallback(yy1768)
					}
				}
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1762[3] {
					yy1771 := &x.LastTransitionTime
					yym1772 := z.EncBinary()
					_ = yym1772
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1771) {
					} else if yym1772 {
						z.EncBinaryMarshal(yy1771)
					} else if !yym1772 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1771)
					} else {
						z.EncFallback(yy1771)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1762[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1773 := &x.LastTransitionTime
					yym1774 := z.EncBinary()
					_ = yym1774
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1773) {
					} else if yym1774 {
						z.EncBinaryMarshal(yy1773)
					} else if !yym1774 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1773)
					} else {
						z.EncFallback(yy1773)
					}
				}
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1762[4] {
					yym1776 := z.EncBinary()
					_ = yym1776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1762[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1777 := z.EncBinary()
					_ = yym1777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1762[5] {
					yym1779 := z.EncBinary()
					_ = yym1779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1762[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1780 := z.EncBinary()
					_ = yym1780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1781 := z.DecBinary()
	_ = yym1781
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1782 := r.ContainerType()
		if yyct1782 == codecSelferValueTypeMap1234 {
			yyl1782 := r.ReadMapStart()
			if yyl1782 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1782, d)
			}
		} else if yyct1782 == codecSelferValueTypeArray1234 {
			yyl1782 := r.ReadArrayStart()
			if yyl1782 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1782, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1783Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1783Slc
	var yyhl1783 bool = l >= 0
	for yyj1783 := 0; ; yyj1783++ {
		if yyhl1783 {
			if yyj1783 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1783Slc = r.DecodeBytes(yys1783Slc, true, true)
		yys1783 := string(yys1783Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1783 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1786 := &x.LastProbeTime
				yym1787 := z.DecBinary()
				_ = yym1787
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1786) {
				} else if yym1787 {
					z.DecBinaryUnmarshal(yyv1786)
				} else if !yym1787 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1786)
				} else {
					z.DecFallback(yyv1786, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1788 := &x.LastTransitionTime
				yym1789 := z.DecBinary()
				_ = yym1789
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1788) {
				} else if yym1789 {
					z.DecBinaryUnmarshal(yyv1788)
				} else if !yym1789 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1788)
				} else {
					z.DecFallback(yyv1788, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1783)
		} // end switch yys1783
	} // end for yyj1783
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1792 int
	var yyb1792 bool
	var yyhl1792 bool = l >= 0
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1795 := &x.LastProbeTime
		yym1796 := z.DecBinary()
		_ = yym1796
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1795) {
		} else if yym1796 {
			z.DecBinaryUnmarshal(yyv1795)
		} else if !yym1796 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1795)
		} else {
			z.DecFallback(yyv1795, false)
		}
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1797 := &x.LastTransitionTime
		yym1798 := z.DecBinary()
		_ = yym1798
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1797) {
		} else if yym1798 {
			z.DecBinaryUnmarshal(yyv1797)
		} else if !yym1798 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1797)
		} else {
			z.DecFallback(yyv1797, false)
		}
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1792++
		if yyhl1792 {
			yyb1792 = yyj1792 > l
		} else {
			yyb1792 = r.CheckBreak()
		}
		if yyb1792 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1792-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1801 := z.EncBinary()
	_ = yym1801
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1802 := z.DecBinary()
	_ = yym1802
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1803 := z.EncBinary()
	_ = yym1803
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1804 := z.DecBinary()
	_ = yym1804
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1805 := z.EncBinary()
		_ = yym1805
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1806 := !z.EncBinary()
			yy2arr1806 := z.EncBasicHandle().StructToArray
			var yyq1806 [1]bool
			_, _, _ = yysep1806, yyq1806, yy2arr1806
			const yyr1806 bool = false
			var yynn1806 int
			if yyr1806 || yy2arr1806 {
				r.EncodeArrayStart(1)
			} else {
				yynn1806 = 1
				for _, b := range yyq1806 {
					if b {
						yynn1806++
					}
				}
				r.EncodeMapStart(yynn1806)
				yynn1806 = 0
			}
			if yyr1806 || yy2arr1806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1808 := z.EncBinary()
					_ = yym1808
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1809 := z.EncBinary()
					_ = yym1809
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1806 || yy2arr1806 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1810 := z.DecBinary()
	_ = yym1810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1811 := r.ContainerType()
		if yyct1811 == codecSelferValueTypeMap1234 {
			yyl1811 := r.ReadMapStart()
			if yyl1811 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1811, d)
			}
		} else if yyct1811 == codecSelferValueTypeArray1234 {
			yyl1811 := r.ReadArrayStart()
			if yyl1811 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1812Slc
	var yyhl1812 bool = l >= 0
	for yyj1812 := 0; ; yyj1812++ {
		if yyhl1812 {
			if yyj1812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1812Slc = r.DecodeBytes(yys1812Slc, true, true)
		yys1812 := string(yys1812Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1812 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1813 := &x.NodeSelectorTerms
				yym1814 := z.DecBinary()
				_ = yym1814
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1813), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1812)
		} // end switch yys1812
	} // end for yyj1812
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1815 int
	var yyb1815 bool
	var yyhl1815 bool = l >= 0
	yyj1815++
	if yyhl1815 {
		yyb1815 = yyj1815 > l
	} else {
		yyb1815 = r.CheckBreak()
	}
	if yyb1815 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1816 := &x.NodeSelectorTerms
		yym1817 := z.DecBinary()
		_ = yym1817
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1816), d)
		}
	}
	for {
		yyj1815++
		if yyhl1815 {
			yyb1815 = yyj1815 > l
		} else {
			yyb1815 = r.CheckBreak()
		}
		if yyb1815 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1815-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1818 := z.EncBinary()
		_ = yym1818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1819 := !z.EncBinary()
			yy2arr1819 := z.EncBasicHandle().StructToArray
			var yyq1819 [1]bool
			_, _, _ = yysep1819, yyq1819, yy2arr1819
			const yyr1819 bool = false
			var yynn1819 int
			if yyr1819 || yy2arr1819 {
				r.EncodeArrayStart(1)
			} else {
				yynn1819 = 1
				for _, b := range yyq1819 {
					if b {
						yynn1819++
					}
				}
				r.EncodeMapStart(yynn1819)
				yynn1819 = 0
			}
			if yyr1819 || yy2arr1819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1821 := z.EncBinary()
					_ = yym1821
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1819 || yy2arr1819 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1823 := z.DecBinary()
	_ = yym1823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1824 := r.ContainerType()
		if yyct1824 == codecSelferValueTypeMap1234 {
			yyl1824 := r.ReadMapStart()
			if yyl1824 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1824, d)
			}
		} else if yyct1824 == codecSelferValueTypeArray1234 {
			yyl1824 := r.ReadArrayStart()
			if yyl1824 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1825Slc
	var yyhl1825 bool = l >= 0
	for yyj1825 := 0; ; yyj1825++ {
		if yyhl1825 {
			if yyj1825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1825Slc = r.DecodeBytes(yys1825Slc, true, true)
		yys1825 := string(yys1825Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1825 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1826 := &x.MatchExpressions
				yym1827 := z.DecBinary()
				_ = yym1827
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1826), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1825)
		} // end switch yys1825
	} // end for yyj1825
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1828 int
	var yyb1828 bool
	var yyhl1828 bool = l >= 0
	yyj1828++
	if yyhl1828 {
		yyb1828 = yyj1828 > l
	} else {
		yyb1828 = r.CheckBreak()
	}
	if yyb1828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1829 := &x.MatchExpressions
		yym1830 := z.DecBinary()
		_ = yym1830
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1829), d)
		}
	}
	for {
		yyj1828++
		if yyhl1828 {
			yyb1828 = yyj1828 > l
		} else {
			yyb1828 = r.CheckBreak()
		}
		if yyb1828 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1828-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1831 := z.EncBinary()
		_ = yym1831
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1832 := !z.EncBinary()
			yy2arr1832 := z.EncBasicHandle().StructToArray
			var yyq1832 [3]bool
			_, _, _ = yysep1832, yyq1832, yy2arr1832
			const yyr1832 bool = false
			yyq1832[2] = len(x.Values) != 0
			var yynn1832 int
			if yyr1832 || yy2arr1832 {
				r.EncodeArrayStart(3)
			} else {
				yynn1832 = 2
				for _, b := range yyq1832 {
					if b {
						yynn1832++
					}
				}
				r.EncodeMapStart(yynn1832)
				yynn1832 = 0
			}
			if yyr1832 || yy2arr1832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1834 := z.EncBinary()
				_ = yym1834
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1835 := z.EncBinary()
				_ = yym1835
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1832 || yy2arr1832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1832 || yy2arr1832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1832[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1838 := z.EncBinary()
						_ = yym1838
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1832[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1839 := z.EncBinary()
						_ = yym1839
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1832 || yy2arr1832 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1840 := z.DecBinary()
	_ = yym1840
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1841 := r.ContainerType()
		if yyct1841 == codecSelferValueTypeMap1234 {
			yyl1841 := r.ReadMapStart()
			if yyl1841 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1841, d)
			}
		} else if yyct1841 == codecSelferValueTypeArray1234 {
			yyl1841 := r.ReadArrayStart()
			if yyl1841 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1841, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1842Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1842Slc
	var yyhl1842 bool = l >= 0
	for yyj1842 := 0; ; yyj1842++ {
		if yyhl1842 {
			if yyj1842 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1842Slc = r.DecodeBytes(yys1842Slc, true, true)
		yys1842 := string(yys1842Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1842 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1845 := &x.Values
				yym1846 := z.DecBinary()
				_ = yym1846
				if false {
				} else {
					z.F.DecSliceStringX(yyv1845, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1842)
		} // end switch yys1842
	} // end for yyj1842
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1847 int
	var yyb1847 bool
	var yyhl1847 bool = l >= 0
	yyj1847++
	if yyhl1847 {
		yyb1847 = yyj1847 > l
	} else {
		yyb1847 = r.CheckBreak()
	}
	if yyb1847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1847++
	if yyhl1847 {
		yyb1847 = yyj1847 > l
	} else {
		yyb1847 = r.CheckBreak()
	}
	if yyb1847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1847++
	if yyhl1847 {
		yyb1847 = yyj1847 > l
	} else {
		yyb1847 = r.CheckBreak()
	}
	if yyb1847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1850 := &x.Values
		yym1851 := z.DecBinary()
		_ = yym1851
		if false {
		} else {
			z.F.DecSliceStringX(yyv1850, false, d)
		}
	}
	for {
		yyj1847++
		if yyhl1847 {
			yyb1847 = yyj1847 > l
		} else {
			yyb1847 = r.CheckBreak()
		}
		if yyb1847 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1847-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1852 := z.EncBinary()
	_ = yym1852
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1853 := z.DecBinary()
	_ = yym1853
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1854 := z.EncBinary()
		_ = yym1854
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1855 := !z.EncBinary()
			yy2arr1855 := z.EncBasicHandle().StructToArray
			var yyq1855 [3]bool
			_, _, _ = yysep1855, yyq1855, yy2arr1855
			const yyr1855 bool = false
			yyq1855[0] = x.NodeAffinity != nil
			yyq1855[1] = x.PodAffinity != nil
			yyq1855[2] = x.PodAntiAffinity != nil
			var yynn1855 int
			if yyr1855 || yy2arr1855 {
				r.EncodeArrayStart(3)
			} else {
				yynn1855 = 0
				for _, b := range yyq1855 {
					if b {
						yynn1855++
					}
				}
				r.EncodeMapStart(yynn1855)
				yynn1855 = 0
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1855[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1855[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1855[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1855[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1855[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1855[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1859 := z.DecBinary()
	_ = yym1859
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1860 := r.ContainerType()
		if yyct1860 == codecSelferValueTypeMap1234 {
			yyl1860 := r.ReadMapStart()
			if yyl1860 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1860, d)
			}
		} else if yyct1860 == codecSelferValueTypeArray1234 {
			yyl1860 := r.ReadArrayStart()
			if yyl1860 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1860, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1861Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1861Slc
	var yyhl1861 bool = l >= 0
	for yyj1861 := 0; ; yyj1861++ {
		if yyhl1861 {
			if yyj1861 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1861Slc = r.DecodeBytes(yys1861Slc, true, true)
		yys1861 := string(yys1861Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1861 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1861)
		} // end switch yys1861
	} // end for yyj1861
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1865 int
	var yyb1865 bool
	var yyhl1865 bool = l >= 0
	yyj1865++
	if yyhl1865 {
		yyb1865 = yyj1865 > l
	} else {
		yyb1865 = r.CheckBreak()
	}
	if yyb1865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1865++
	if yyhl1865 {
		yyb1865 = yyj1865 > l
	} else {
		yyb1865 = r.CheckBreak()
	}
	if yyb1865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1865++
	if yyhl1865 {
		yyb1865 = yyj1865 > l
	} else {
		yyb1865 = r.CheckBreak()
	}
	if yyb1865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1865++
		if yyhl1865 {
			yyb1865 = yyj1865 > l
		} else {
			yyb1865 = r.CheckBreak()
		}
		if yyb1865 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1865-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1869 := z.EncBinary()
		_ = yym1869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1870 := !z.EncBinary()
			yy2arr1870 := z.EncBasicHandle().StructToArray
			var yyq1870 [2]bool
			_, _, _ = yysep1870, yyq1870, yy2arr1870
			const yyr1870 bool = false
			yyq1870[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1870[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1870 int
			if yyr1870 || yy2arr1870 {
				r.EncodeArrayStart(2)
			} else {
				yynn1870 = 0
				for _, b := range yyq1870 {
					if b {
						yynn1870++
					}
				}
				r.EncodeMapStart(yynn1870)
				yynn1870 = 0
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1870[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1872 := z.EncBinary()
						_ = yym1872
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1870[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1873 := z.EncBinary()
						_ = yym1873
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1870[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1875 := z.EncBinary()
						_ = yym1875
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1870[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1876 := z.EncBinary()
						_ = yym1876
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1877 := z.DecBinary()
	_ = yym1877
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1878 := r.ContainerType()
		if yyct1878 == codecSelferValueTypeMap1234 {
			yyl1878 := r.ReadMapStart()
			if yyl1878 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1878, d)
			}
		} else if yyct1878 == codecSelferValueTypeArray1234 {
			yyl1878 := r.ReadArrayStart()
			if yyl1878 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1878, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1879Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1879Slc
	var yyhl1879 bool = l >= 0
	for yyj1879 := 0; ; yyj1879++ {
		if yyhl1879 {
			if yyj1879 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1879Slc = r.DecodeBytes(yys1879Slc, true, true)
		yys1879 := string(yys1879Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1879 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1880 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1881 := z.DecBinary()
				_ = yym1881
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1880), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1882 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1883 := z.DecBinary()
				_ = yym1883
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1882), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1879)
		} // end switch yys1879
	} // end for yyj1879
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1884 int
	var yyb1884 bool
	var yyhl1884 bool = l >= 0
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1885 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1886 := z.DecBinary()
		_ = yym1886
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1885), d)
		}
	}
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1887 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1888 := z.DecBinary()
		_ = yym1888
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1887), d)
		}
	}
	for {
		yyj1884++
		if yyhl1884 {
			yyb1884 = yyj1884 > l
		} else {
			yyb1884 = r.CheckBreak()
		}
		if yyb1884 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1884-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1889 := z.EncBinary()
		_ = yym1889
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1890 := !z.EncBinary()
			yy2arr1890 := z.EncBasicHandle().StructToArray
			var yyq1890 [2]bool
			_, _, _ = yysep1890, yyq1890, yy2arr1890
			const yyr1890 bool = false
			yyq1890[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1890[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1890 int
			if yyr1890 || yy2arr1890 {
				r.EncodeArrayStart(2)
			} else {
				yynn1890 = 0
				for _, b := range yyq1890 {
					if b {
						yynn1890++
					}
				}
				r.EncodeMapStart(yynn1890)
				yynn1890 = 0
			}
			if yyr1890 || yy2arr1890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1890[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1892 := z.EncBinary()
						_ = yym1892
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1890[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1893 := z.EncBinary()
						_ = yym1893
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1890 || yy2arr1890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1890[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1895 := z.EncBinary()
						_ = yym1895
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1890[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1896 := z.EncBinary()
						_ = yym1896
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1890 || yy2arr1890 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1897 := z.DecBinary()
	_ = yym1897
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1898 := r.ContainerType()
		if yyct1898 == codecSelferValueTypeMap1234 {
			yyl1898 := r.ReadMapStart()
			if yyl1898 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1898, d)
			}
		} else if yyct1898 == codecSelferValueTypeArray1234 {
			yyl1898 := r.ReadArrayStart()
			if yyl1898 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1898, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1899Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1899Slc
	var yyhl1899 bool = l >= 0
	for yyj1899 := 0; ; yyj1899++ {
		if yyhl1899 {
			if yyj1899 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1899Slc = r.DecodeBytes(yys1899Slc, true, true)
		yys1899 := string(yys1899Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1899 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1900 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1901 := z.DecBinary()
				_ = yym1901
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1900), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1902 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1903 := z.DecBinary()
				_ = yym1903
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1902), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1899)
		} // end switch yys1899
	} // end for yyj1899
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1904 int
	var yyb1904 bool
	var yyhl1904 bool = l >= 0
	yyj1904++
	if yyhl1904 {
		yyb1904 = yyj1904 > l
	} else {
		yyb1904 = r.CheckBreak()
	}
	if yyb1904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1905 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1906 := z.DecBinary()
		_ = yym1906
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1905), d)
		}
	}
	yyj1904++
	if yyhl1904 {
		yyb1904 = yyj1904 > l
	} else {
		yyb1904 = r.CheckBreak()
	}
	if yyb1904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1907 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1908 := z.DecBinary()
		_ = yym1908
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1907), d)
		}
	}
	for {
		yyj1904++
		if yyhl1904 {
			yyb1904 = yyj1904 > l
		} else {
			yyb1904 = r.CheckBreak()
		}
		if yyb1904 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1904-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1909 := z.EncBinary()
		_ = yym1909
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1910 := !z.EncBinary()
			yy2arr1910 := z.EncBasicHandle().StructToArray
			var yyq1910 [2]bool
			_, _, _ = yysep1910, yyq1910, yy2arr1910
			const yyr1910 bool = false
			var yynn1910 int
			if yyr1910 || yy2arr1910 {
				r.EncodeArrayStart(2)
			} else {
				yynn1910 = 2
				for _, b := range yyq1910 {
					if b {
						yynn1910++
					}
				}
				r.EncodeMapStart(yynn1910)
				yynn1910 = 0
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1912 := z.EncBinary()
				_ = yym1912
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1913 := z.EncBinary()
				_ = yym1913
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1915 := &x.PodAffinityTerm
				yy1915.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1916 := &x.PodAffinityTerm
				yy1916.CodecEncodeSelf(e)
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1917 := z.DecBinary()
	_ = yym1917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1918 := r.ContainerType()
		if yyct1918 == codecSelferValueTypeMap1234 {
			yyl1918 := r.ReadMapStart()
			if yyl1918 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1918, d)
			}
		} else if yyct1918 == codecSelferValueTypeArray1234 {
			yyl1918 := r.ReadArrayStart()
			if yyl1918 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1918, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1919Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1919Slc
	var yyhl1919 bool = l >= 0
	for yyj1919 := 0; ; yyj1919++ {
		if yyhl1919 {
			if yyj1919 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1919Slc = r.DecodeBytes(yys1919Slc, true, true)
		yys1919 := string(yys1919Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1919 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1921 := &x.PodAffinityTerm
				yyv1921.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1919)
		} // end switch yys1919
	} // end for yyj1919
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1922 int
	var yyb1922 bool
	var yyhl1922 bool = l >= 0
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1924 := &x.PodAffinityTerm
		yyv1924.CodecDecodeSelf(d)
	}
	for {
		yyj1922++
		if yyhl1922 {
			yyb1922 = yyj1922 > l
		} else {
			yyb1922 = r.CheckBreak()
		}
		if yyb1922 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1922-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1925 := z.EncBinary()
		_ = yym1925
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1926 := !z.EncBinary()
			yy2arr1926 := z.EncBasicHandle().StructToArray
			var yyq1926 [3]bool
			_, _, _ = yysep1926, yyq1926, yy2arr1926
			const yyr1926 bool = false
			yyq1926[0] = x.LabelSelector != nil
			yyq1926[2] = x.TopologyKey != ""
			var yynn1926 int
			if yyr1926 || yy2arr1926 {
				r.EncodeArrayStart(3)
			} else {
				yynn1926 = 1
				for _, b := range yyq1926 {
					if b {
						yynn1926++
					}
				}
				r.EncodeMapStart(yynn1926)
				yynn1926 = 0
			}
			if yyr1926 || yy2arr1926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1926[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1928 := z.EncBinary()
						_ = yym1928
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1926[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1929 := z.EncBinary()
						_ = yym1929
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1926 || yy2arr1926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1931 := z.EncBinary()
					_ = yym1931
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1932 := z.EncBinary()
					_ = yym1932
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1926 || yy2arr1926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1926[2] {
					yym1934 := z.EncBinary()
					_ = yym1934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1926[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1935 := z.EncBinary()
					_ = yym1935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1926 || yy2arr1926 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1936 := z.DecBinary()
	_ = yym1936
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1937 := r.ContainerType()
		if yyct1937 == codecSelferValueTypeMap1234 {
			yyl1937 := r.ReadMapStart()
			if yyl1937 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1937, d)
			}
		} else if yyct1937 == codecSelferValueTypeArray1234 {
			yyl1937 := r.ReadArrayStart()
			if yyl1937 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1937, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1938Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1938Slc
	var yyhl1938 bool = l >= 0
	for yyj1938 := 0; ; yyj1938++ {
		if yyhl1938 {
			if yyj1938 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1938Slc = r.DecodeBytes(yys1938Slc, true, true)
		yys1938 := string(yys1938Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1938 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1940 := z.DecBinary()
				_ = yym1940
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1941 := &x.Namespaces
				yym1942 := z.DecBinary()
				_ = yym1942
				if false {
				} else {
					z.F.DecSliceStringX(yyv1941, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1938)
		} // end switch yys1938
	} // end for yyj1938
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1944 int
	var yyb1944 bool
	var yyhl1944 bool = l >= 0
	yyj1944++
	if yyhl1944 {
		yyb1944 = yyj1944 > l
	} else {
		yyb1944 = r.CheckBreak()
	}
	if yyb1944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1946 := z.DecBinary()
		_ = yym1946
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1944++
	if yyhl1944 {
		yyb1944 = yyj1944 > l
	} else {
		yyb1944 = r.CheckBreak()
	}
	if yyb1944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1947 := &x.Namespaces
		yym1948 := z.DecBinary()
		_ = yym1948
		if false {
		} else {
			z.F.DecSliceStringX(yyv1947, false, d)
		}
	}
	yyj1944++
	if yyhl1944 {
		yyb1944 = yyj1944 > l
	} else {
		yyb1944 = r.CheckBreak()
	}
	if yyb1944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1944++
		if yyhl1944 {
			yyb1944 = yyj1944 > l
		} else {
			yyb1944 = r.CheckBreak()
		}
		if yyb1944 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1944-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1950 := z.EncBinary()
		_ = yym1950
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1951 := !z.EncBinary()
			yy2arr1951 := z.EncBasicHandle().StructToArray
			var yyq1951 [2]bool
			_, _, _ = yysep1951, yyq1951, yy2arr1951
			const yyr1951 bool = false
			yyq1951[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1951[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1951 int
			if yyr1951 || yy2arr1951 {
				r.EncodeArrayStart(2)
			} else {
				yynn1951 = 0
				for _, b := range yyq1951 {
					if b {
						yynn1951++
					}
				}
				r.EncodeMapStart(yynn1951)
				yynn1951 = 0
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1951[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1951[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1951[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1954 := z.EncBinary()
						_ = yym1954
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1951[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1955 := z.EncBinary()
						_ = yym1955
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1956 := z.DecBinary()
	_ = yym1956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1957 := r.ContainerType()
		if yyct1957 == codecSelferValueTypeMap1234 {
			yyl1957 := r.ReadMapStart()
			if yyl1957 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1957, d)
			}
		} else if yyct1957 == codecSelferValueTypeArray1234 {
			yyl1957 := r.ReadArrayStart()
			if yyl1957 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1958Slc
	var yyhl1958 bool = l >= 0
	for yyj1958 := 0; ; yyj1958++ {
		if yyhl1958 {
			if yyj1958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1958Slc = r.DecodeBytes(yys1958Slc, true, true)
		yys1958 := string(yys1958Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1958 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1960 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1961 := z.DecBinary()
				_ = yym1961
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1960), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1958)
		} // end switch yys1958
	} // end for yyj1958
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1962 int
	var yyb1962 bool
	var yyhl1962 bool = l >= 0
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1964 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1965 := z.DecBinary()
		_ = yym1965
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1964), d)
		}
	}
	for {
		yyj1962++
		if yyhl1962 {
			yyb1962 = yyj1962 > l
		} else {
			yyb1962 = r.CheckBreak()
		}
		if yyb1962 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1962-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1966 := z.EncBinary()
		_ = yym1966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1967 := !z.EncBinary()
			yy2arr1967 := z.EncBasicHandle().StructToArray
			var yyq1967 [2]bool
			_, _, _ = yysep1967, yyq1967, yy2arr1967
			const yyr1967 bool = false
			var yynn1967 int
			if yyr1967 || yy2arr1967 {
				r.EncodeArrayStart(2)
			} else {
				yynn1967 = 2
				for _, b := range yyq1967 {
					if b {
						yynn1967++
					}
				}
				r.EncodeMapStart(yynn1967)
				yynn1967 = 0
			}
			if yyr1967 || yy2arr1967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1969 := z.EncBinary()
				_ = yym1969
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1970 := z.EncBinary()
				_ = yym1970
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1967 || yy2arr1967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1972 := &x.Preference
				yy1972.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1973 := &x.Preference
				yy1973.CodecEncodeSelf(e)
			}
			if yyr1967 || yy2arr1967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1974 := z.DecBinary()
	_ = yym1974
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1975 := r.ContainerType()
		if yyct1975 == codecSelferValueTypeMap1234 {
			yyl1975 := r.ReadMapStart()
			if yyl1975 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1975, d)
			}
		} else if yyct1975 == codecSelferValueTypeArray1234 {
			yyl1975 := r.ReadArrayStart()
			if yyl1975 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1975, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1976Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1976Slc
	var yyhl1976 bool = l >= 0
	for yyj1976 := 0; ; yyj1976++ {
		if yyhl1976 {
			if yyj1976 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1976Slc = r.DecodeBytes(yys1976Slc, true, true)
		yys1976 := string(yys1976Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1976 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1978 := &x.Preference
				yyv1978.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1976)
		} // end switch yys1976
	} // end for yyj1976
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1979 int
	var yyb1979 bool
	var yyhl1979 bool = l >= 0
	yyj1979++
	if yyhl1979 {
		yyb1979 = yyj1979 > l
	} else {
		yyb1979 = r.CheckBreak()
	}
	if yyb1979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1979++
	if yyhl1979 {
		yyb1979 = yyj1979 > l
	} else {
		yyb1979 = r.CheckBreak()
	}
	if yyb1979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1981 := &x.Preference
		yyv1981.CodecDecodeSelf(d)
	}
	for {
		yyj1979++
		if yyhl1979 {
			yyb1979 = yyj1979 > l
		} else {
			yyb1979 = r.CheckBreak()
		}
		if yyb1979 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1979-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1982 := z.EncBinary()
		_ = yym1982
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1983 := !z.EncBinary()
			yy2arr1983 := z.EncBasicHandle().StructToArray
			var yyq1983 [3]bool
			_, _, _ = yysep1983, yyq1983, yy2arr1983
			const yyr1983 bool = false
			yyq1983[1] = x.Value != ""
			var yynn1983 int
			if yyr1983 || yy2arr1983 {
				r.EncodeArrayStart(3)
			} else {
				yynn1983 = 2
				for _, b := range yyq1983 {
					if b {
						yynn1983++
					}
				}
				r.EncodeMapStart(yynn1983)
				yynn1983 = 0
			}
			if yyr1983 || yy2arr1983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1985 := z.EncBinary()
				_ = yym1985
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1986 := z.EncBinary()
				_ = yym1986
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1983 || yy2arr1983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1983[1] {
					yym1988 := z.EncBinary()
					_ = yym1988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1983[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1989 := z.EncBinary()
					_ = yym1989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1983 || yy2arr1983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1983 || yy2arr1983 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1991 := z.DecBinary()
	_ = yym1991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1992 := r.ContainerType()
		if yyct1992 == codecSelferValueTypeMap1234 {
			yyl1992 := r.ReadMapStart()
			if yyl1992 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1992, d)
			}
		} else if yyct1992 == codecSelferValueTypeArray1234 {
			yyl1992 := r.ReadArrayStart()
			if yyl1992 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1993Slc
	var yyhl1993 bool = l >= 0
	for yyj1993 := 0; ; yyj1993++ {
		if yyhl1993 {
			if yyj1993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1993Slc = r.DecodeBytes(yys1993Slc, true, true)
		yys1993 := string(yys1993Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1993 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1993)
		} // end switch yys1993
	} // end for yyj1993
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1997 int
	var yyb1997 bool
	var yyhl1997 bool = l >= 0
	yyj1997++
	if yyhl1997 {
		yyb1997 = yyj1997 > l
	} else {
		yyb1997 = r.CheckBreak()
	}
	if yyb1997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1997++
	if yyhl1997 {
		yyb1997 = yyj1997 > l
	} else {
		yyb1997 = r.CheckBreak()
	}
	if yyb1997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1997++
	if yyhl1997 {
		yyb1997 = yyj1997 > l
	} else {
		yyb1997 = r.CheckBreak()
	}
	if yyb1997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1997++
		if yyhl1997 {
			yyb1997 = yyj1997 > l
		} else {
			yyb1997 = r.CheckBreak()
		}
		if yyb1997 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1997-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2001 := z.EncBinary()
	_ = yym2001
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2002 := z.DecBinary()
	_ = yym2002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2003 := z.EncBinary()
		_ = yym2003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2004 := !z.EncBinary()
			yy2arr2004 := z.EncBasicHandle().StructToArray
			var yyq2004 [4]bool
			_, _, _ = yysep2004, yyq2004, yy2arr2004
			const yyr2004 bool = false
			yyq2004[0] = x.Key != ""
			yyq2004[1] = x.Operator != ""
			yyq2004[2] = x.Value != ""
			yyq2004[3] = x.Effect != ""
			var yynn2004 int
			if yyr2004 || yy2arr2004 {
				r.EncodeArrayStart(4)
			} else {
				yynn2004 = 0
				for _, b := range yyq2004 {
					if b {
						yynn2004++
					}
				}
				r.EncodeMapStart(yynn2004)
				yynn2004 = 0
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[0] {
					yym2006 := z.EncBinary()
					_ = yym2006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2007 := z.EncBinary()
					_ = yym2007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[2] {
					yym2010 := z.EncBinary()
					_ = yym2010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2011 := z.EncBinary()
					_ = yym2011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2013 := z.DecBinary()
	_ = yym2013
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2014 := r.ContainerType()
		if yyct2014 == codecSelferValueTypeMap1234 {
			yyl2014 := r.ReadMapStart()
			if yyl2014 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2014, d)
			}
		} else if yyct2014 == codecSelferValueTypeArray1234 {
			yyl2014 := r.ReadArrayStart()
			if yyl2014 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2014, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2015Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2015Slc
	var yyhl2015 bool = l >= 0
	for yyj2015 := 0; ; yyj2015++ {
		if yyhl2015 {
			if yyj2015 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2015Slc = r.DecodeBytes(yys2015Slc, true, true)
		yys2015 := string(yys2015Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2015 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2015)
		} // end switch yys2015
	} // end for yyj2015
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2020 int
	var yyb2020 bool
	var yyhl2020 bool = l >= 0
	yyj2020++
	if yyhl2020 {
		yyb2020 = yyj2020 > l
	} else {
		yyb2020 = r.CheckBreak()
	}
	if yyb2020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2020++
	if yyhl2020 {
		yyb2020 = yyj2020 > l
	} else {
		yyb2020 = r.CheckBreak()
	}
	if yyb2020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2020++
	if yyhl2020 {
		yyb2020 = yyj2020 > l
	} else {
		yyb2020 = r.CheckBreak()
	}
	if yyb2020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2020++
	if yyhl2020 {
		yyb2020 = yyj2020 > l
	} else {
		yyb2020 = r.CheckBreak()
	}
	if yyb2020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2020++
		if yyhl2020 {
			yyb2020 = yyj2020 > l
		} else {
			yyb2020 = r.CheckBreak()
		}
		if yyb2020 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2020-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2025 := z.EncBinary()
	_ = yym2025
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2026 := z.DecBinary()
	_ = yym2026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2027 := z.EncBinary()
		_ = yym2027
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2028 := !z.EncBinary()
			yy2arr2028 := z.EncBasicHandle().StructToArray
			var yyq2028 [17]bool
			_, _, _ = yysep2028, yyq2028, yy2arr2028
			const yyr2028 bool = false
			yyq2028[0] = len(x.Volumes) != 0
			yyq2028[2] = x.RestartPolicy != ""
			yyq2028[3] = x.TerminationGracePeriodSeconds != nil
			yyq2028[4] = x.ActiveDeadlineSeconds != nil
			yyq2028[5] = x.DNSPolicy != ""
			yyq2028[6] = len(x.NodeSelector) != 0
			yyq2028[7] = x.ServiceAccountName != ""
			yyq2028[8] = x.DeprecatedServiceAccount != ""
			yyq2028[9] = x.NodeName != ""
			yyq2028[10] = x.HostNetwork != false
			yyq2028[11] = x.HostPID != false
			yyq2028[12] = x.HostIPC != false
			yyq2028[13] = x.SecurityContext != nil
			yyq2028[14] = len(x.ImagePullSecrets) != 0
			yyq2028[15] = x.Hostname != ""
			yyq2028[16] = x.Subdomain != ""
			var yynn2028 int
			if yyr2028 || yy2arr2028 {
				r.EncodeArrayStart(17)
			} else {
				yynn2028 = 1
				for _, b := range yyq2028 {
					if b {
						yynn2028++
					}
				}
				r.EncodeMapStart(yynn2028)
				yynn2028 = 0
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2030 := z.EncBinary()
						_ = yym2030
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2031 := z.EncBinary()
						_ = yym2031
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2033 := z.EncBinary()
					_ = yym2033
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2037 := *x.TerminationGracePeriodSeconds
						yym2038 := z.EncBinary()
						_ = yym2038
						if false {
						} else {
							r.EncodeInt(int64(yy2037))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2039 := *x.TerminationGracePeriodSeconds
						yym2040 := z.EncBinary()
						_ = yym2040
						if false {
						} else {
							r.EncodeInt(int64(yy2039))
						}
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2042 := *x.ActiveDeadlineSeconds
						yym2043 := z.EncBinary()
						_ = yym2043
						if false {
						} else {
							r.EncodeInt(int64(yy2042))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2044 := *x.ActiveDeadlineSeconds
						yym2045 := z.EncBinary()
						_ = yym2045
						if false {
						} else {
							r.EncodeInt(int64(yy2044))
						}
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2048 := z.EncBinary()
						_ = yym2048
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2049 := z.EncBinary()
						_ = yym2049
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[7] {
					yym2051 := z.EncBinary()
					_ = yym2051
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2052 := z.EncBinary()
					_ = yym2052
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[8] {
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2055 := z.EncBinary()
					_ = yym2055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[9] {
					yym2057 := z.EncBinary()
					_ = yym2057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2058 := z.EncBinary()
					_ = yym2058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[10] {
					yym2060 := z.EncBinary()
					_ = yym2060
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2028[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2061 := z.EncBinary()
					_ = yym2061
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[11] {
					yym2063 := z.EncBinary()
					_ = yym2063
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2028[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2064 := z.EncBinary()
					_ = yym2064
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[12] {
					yym2066 := z.EncBinary()
					_ = yym2066
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2028[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2067 := z.EncBinary()
					_ = yym2067
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2070 := z.EncBinary()
						_ = yym2070
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2071 := z.EncBinary()
						_ = yym2071
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[15] {
					yym2073 := z.EncBinary()
					_ = yym2073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2074 := z.EncBinary()
					_ = yym2074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[16] {
					yym2076 := z.EncBinary()
					_ = yym2076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2077 := z.EncBinary()
					_ = yym2077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2078 := z.DecBinary()
	_ = yym2078
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2079 := r.ContainerType()
		if yyct2079 == codecSelferValueTypeMap1234 {
			yyl2079 := r.ReadMapStart()
			if yyl2079 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2079, d)
			}
		} else if yyct2079 == codecSelferValueTypeArray1234 {
			yyl2079 := r.ReadArrayStart()
			if yyl2079 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2079, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2080Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2080Slc
	var yyhl2080 bool = l >= 0
	for yyj2080 := 0; ; yyj2080++ {
		if yyhl2080 {
			if yyj2080 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2080Slc = r.DecodeBytes(yys2080Slc, true, true)
		yys2080 := string(yys2080Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2080 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2081 := &x.Volumes
				yym2082 := z.DecBinary()
				_ = yym2082
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2081), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2083 := &x.Containers
				yym2084 := z.DecBinary()
				_ = yym2084
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2083), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2087 := z.DecBinary()
				_ = yym2087
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2089 := z.DecBinary()
				_ = yym2089
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2091 := &x.NodeSelector
				yym2092 := z.DecBinary()
				_ = yym2092
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2091, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2100 := &x.ImagePullSecrets
				yym2101 := z.DecBinary()
				_ = yym2101
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2100), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2080)
		} // end switch yys2080
	} // end for yyj2080
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2104 int
	var yyb2104 bool
	var yyhl2104 bool = l >= 0
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2105 := &x.Volumes
		yym2106 := z.DecBinary()
		_ = yym2106
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2105), d)
		}
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2107 := &x.Containers
		yym2108 := z.DecBinary()
		_ = yym2108
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2107), d)
		}
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2111 := z.DecBinary()
		_ = yym2111
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2113 := z.DecBinary()
		_ = yym2113
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2115 := &x.NodeSelector
		yym2116 := z.DecBinary()
		_ = yym2116
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2115, false, d)
		}
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2124 := &x.ImagePullSecrets
		yym2125 := z.DecBinary()
		_ = yym2125
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2124), d)
		}
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2104++
		if yyhl2104 {
			yyb2104 = yyj2104 > l
		} else {
			yyb2104 = r.CheckBreak()
		}
		if yyb2104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2128 := z.EncBinary()
		_ = yym2128
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2129 := !z.EncBinary()
			yy2arr2129 := z.EncBasicHandle().StructToArray
			var yyq2129 [5]bool
			_, _, _ = yysep2129, yyq2129, yy2arr2129
			const yyr2129 bool = false
			yyq2129[0] = x.SELinuxOptions != nil
			yyq2129[1] = x.RunAsUser != nil
			yyq2129[2] = x.RunAsNonRoot != nil
			yyq2129[3] = len(x.SupplementalGroups) != 0
			yyq2129[4] = x.FSGroup != nil
			var yynn2129 int
			if yyr2129 || yy2arr2129 {
				r.EncodeArrayStart(5)
			} else {
				yynn2129 = 0
				for _, b := range yyq2129 {
					if b {
						yynn2129++
					}
				}
				r.EncodeMapStart(yynn2129)
				yynn2129 = 0
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2129[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2132 := *x.RunAsUser
						yym2133 := z.EncBinary()
						_ = yym2133
						if false {
						} else {
							r.EncodeInt(int64(yy2132))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2129[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2134 := *x.RunAsUser
						yym2135 := z.EncBinary()
						_ = yym2135
						if false {
						} else {
							r.EncodeInt(int64(yy2134))
						}
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2137 := *x.RunAsNonRoot
						yym2138 := z.EncBinary()
						_ = yym2138
						if false {
						} else {
							r.EncodeBool(bool(yy2137))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2129[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2139 := *x.RunAsNonRoot
						yym2140 := z.EncBinary()
						_ = yym2140
						if false {
						} else {
							r.EncodeBool(bool(yy2139))
						}
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2142 := z.EncBinary()
						_ = yym2142
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2129[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2143 := z.EncBinary()
						_ = yym2143
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2145 := *x.FSGroup
						yym2146 := z.EncBinary()
						_ = yym2146
						if false {
						} else {
							r.EncodeInt(int64(yy2145))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2129[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2147 := *x.FSGroup
						yym2148 := z.EncBinary()
						_ = yym2148
						if false {
						} else {
							r.EncodeInt(int64(yy2147))
						}
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2149 := z.DecBinary()
	_ = yym2149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2150 := r.ContainerType()
		if yyct2150 == codecSelferValueTypeMap1234 {
			yyl2150 := r.ReadMapStart()
			if yyl2150 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2150, d)
			}
		} else if yyct2150 == codecSelferValueTypeArray1234 {
			yyl2150 := r.ReadArrayStart()
			if yyl2150 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2150, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2151Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2151Slc
	var yyhl2151 bool = l >= 0
	for yyj2151 := 0; ; yyj2151++ {
		if yyhl2151 {
			if yyj2151 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2151Slc = r.DecodeBytes(yys2151Slc, true, true)
		yys2151 := string(yys2151Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2151 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2154 := z.DecBinary()
				_ = yym2154
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2156 := z.DecBinary()
				_ = yym2156
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2157 := &x.SupplementalGroups
				yym2158 := z.DecBinary()
				_ = yym2158
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2157, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2160 := z.DecBinary()
				_ = yym2160
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2151)
		} // end switch yys2151
	} // end for yyj2151
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2161 int
	var yyb2161 bool
	var yyhl2161 bool = l >= 0
	yyj2161++
	if yyhl2161 {
		yyb2161 = yyj2161 > l
	} else {
		yyb2161 = r.CheckBreak()
	}
	if yyb2161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2161++
	if yyhl2161 {
		yyb2161 = yyj2161 > l
	} else {
		yyb2161 = r.CheckBreak()
	}
	if yyb2161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2164 := z.DecBinary()
		_ = yym2164
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2161++
	if yyhl2161 {
		yyb2161 = yyj2161 > l
	} else {
		yyb2161 = r.CheckBreak()
	}
	if yyb2161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2166 := z.DecBinary()
		_ = yym2166
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2161++
	if yyhl2161 {
		yyb2161 = yyj2161 > l
	} else {
		yyb2161 = r.CheckBreak()
	}
	if yyb2161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2167 := &x.SupplementalGroups
		yym2168 := z.DecBinary()
		_ = yym2168
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2167, false, d)
		}
	}
	yyj2161++
	if yyhl2161 {
		yyb2161 = yyj2161 > l
	} else {
		yyb2161 = r.CheckBreak()
	}
	if yyb2161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2170 := z.DecBinary()
		_ = yym2170
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2161++
		if yyhl2161 {
			yyb2161 = yyj2161 > l
		} else {
			yyb2161 = r.CheckBreak()
		}
		if yyb2161 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2161-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2171 := z.EncBinary()
		_ = yym2171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2172 := !z.EncBinary()
			yy2arr2172 := z.EncBasicHandle().StructToArray
			var yyq2172 [8]bool
			_, _, _ = yysep2172, yyq2172, yy2arr2172
			const yyr2172 bool = false
			yyq2172[0] = x.Phase != ""
			yyq2172[1] = len(x.Conditions) != 0
			yyq2172[2] = x.Message != ""
			yyq2172[3] = x.Reason != ""
			yyq2172[4] = x.HostIP != ""
			yyq2172[5] = x.PodIP != ""
			yyq2172[6] = x.StartTime != nil
			yyq2172[7] = len(x.ContainerStatuses) != 0
			var yynn2172 int
			if yyr2172 || yy2arr2172 {
				r.EncodeArrayStart(8)
			} else {
				yynn2172 = 0
				for _, b := range yyq2172 {
					if b {
						yynn2172++
					}
				}
				r.EncodeMapStart(yynn2172)
				yynn2172 = 0
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2175 := z.EncBinary()
						_ = yym2175
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2172[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2176 := z.EncBinary()
						_ = yym2176
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[2] {
					yym2178 := z.EncBinary()
					_ = yym2178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2179 := z.EncBinary()
					_ = yym2179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[3] {
					yym2181 := z.EncBinary()
					_ = yym2181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2182 := z.EncBinary()
					_ = yym2182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[4] {
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2185 := z.EncBinary()
					_ = yym2185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[5] {
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2188 := z.EncBinary()
					_ = yym2188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2190 := z.EncBinary()
						_ = yym2190
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2190 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2190 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2172[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2191 := z.EncBinary()
						_ = yym2191
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2191 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2191 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2172[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2193 := z.EncBinary()
						_ = yym2193
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2172[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2194 := z.EncBinary()
						_ = yym2194
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2195 := z.DecBinary()
	_ = yym2195
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2196 := r.ContainerType()
		if yyct2196 == codecSelferValueTypeMap1234 {
			yyl2196 := r.ReadMapStart()
			if yyl2196 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2196, d)
			}
		} else if yyct2196 == codecSelferValueTypeArray1234 {
			yyl2196 := r.ReadArrayStart()
			if yyl2196 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2196, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2197Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2197Slc
	var yyhl2197 bool = l >= 0
	for yyj2197 := 0; ; yyj2197++ {
		if yyhl2197 {
			if yyj2197 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2197Slc = r.DecodeBytes(yys2197Slc, true, true)
		yys2197 := string(yys2197Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2197 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2199 := &x.Conditions
				yym2200 := z.DecBinary()
				_ = yym2200
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2199), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2206 := z.DecBinary()
				_ = yym2206
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2206 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2206 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2207 := &x.ContainerStatuses
				yym2208 := z.DecBinary()
				_ = yym2208
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2207), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2197)
		} // end switch yys2197
	} // end for yyj2197
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2209 int
	var yyb2209 bool
	var yyhl2209 bool = l >= 0
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2211 := &x.Conditions
		yym2212 := z.DecBinary()
		_ = yym2212
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2211), d)
		}
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2218 := z.DecBinary()
		_ = yym2218
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2218 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2218 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2219 := &x.ContainerStatuses
		yym2220 := z.DecBinary()
		_ = yym2220
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2219), d)
		}
	}
	for {
		yyj2209++
		if yyhl2209 {
			yyb2209 = yyj2209 > l
		} else {
			yyb2209 = r.CheckBreak()
		}
		if yyb2209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2221 := z.EncBinary()
		_ = yym2221
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2222 := !z.EncBinary()
			yy2arr2222 := z.EncBasicHandle().StructToArray
			var yyq2222 [4]bool
			_, _, _ = yysep2222, yyq2222, yy2arr2222
			const yyr2222 bool = false
			yyq2222[0] = x.Kind != ""
			yyq2222[1] = x.APIVersion != ""
			yyq2222[2] = true
			yyq2222[3] = true
			var yynn2222 int
			if yyr2222 || yy2arr2222 {
				r.EncodeArrayStart(4)
			} else {
				yynn2222 = 0
				for _, b := range yyq2222 {
					if b {
						yynn2222++
					}
				}
				r.EncodeMapStart(yynn2222)
				yynn2222 = 0
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[0] {
					yym2224 := z.EncBinary()
					_ = yym2224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2222[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2225 := z.EncBinary()
					_ = yym2225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[1] {
					yym2227 := z.EncBinary()
					_ = yym2227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2222[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2228 := z.EncBinary()
					_ = yym2228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[2] {
					yy2230 := &x.ObjectMeta
					yy2230.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2222[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2231 := &x.ObjectMeta
					yy2231.CodecEncodeSelf(e)
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2222[3] {
					yy2233 := &x.Status
					yy2233.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2222[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2234 := &x.Status
					yy2234.CodecEncodeSelf(e)
				}
			}
			if yyr2222 || yy2arr2222 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2235 := z.DecBinary()
	_ = yym2235
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2236 := r.ContainerType()
		if yyct2236 == codecSelferValueTypeMap1234 {
			yyl2236 := r.ReadMapStart()
			if yyl2236 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2236, d)
			}
		} else if yyct2236 == codecSelferValueTypeArray1234 {
			yyl2236 := r.ReadArrayStart()
			if yyl2236 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2236, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2237Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2237Slc
	var yyhl2237 bool = l >= 0
	for yyj2237 := 0; ; yyj2237++ {
		if yyhl2237 {
			if yyj2237 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2237Slc = r.DecodeBytes(yys2237Slc, true, true)
		yys2237 := string(yys2237Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2237 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2240 := &x.ObjectMeta
				yyv2240.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2241 := &x.Status
				yyv2241.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2237)
		} // end switch yys2237
	} // end for yyj2237
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2242 int
	var yyb2242 bool
	var yyhl2242 bool = l >= 0
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2245 := &x.ObjectMeta
		yyv2245.CodecDecodeSelf(d)
	}
	yyj2242++
	if yyhl2242 {
		yyb2242 = yyj2242 > l
	} else {
		yyb2242 = r.CheckBreak()
	}
	if yyb2242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2246 := &x.Status
		yyv2246.CodecDecodeSelf(d)
	}
	for {
		yyj2242++
		if yyhl2242 {
			yyb2242 = yyj2242 > l
		} else {
			yyb2242 = r.CheckBreak()
		}
		if yyb2242 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2242-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2247 := z.EncBinary()
		_ = yym2247
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2248 := !z.EncBinary()
			yy2arr2248 := z.EncBasicHandle().StructToArray
			var yyq2248 [5]bool
			_, _, _ = yysep2248, yyq2248, yy2arr2248
			const yyr2248 bool = false
			yyq2248[0] = x.Kind != ""
			yyq2248[1] = x.APIVersion != ""
			yyq2248[2] = true
			yyq2248[3] = true
			yyq2248[4] = true
			var yynn2248 int
			if yyr2248 || yy2arr2248 {
				r.EncodeArrayStart(5)
			} else {
				yynn2248 = 0
				for _, b := range yyq2248 {
					if b {
						yynn2248++
					}
				}
				r.EncodeMapStart(yynn2248)
				yynn2248 = 0
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[0] {
					yym2250 := z.EncBinary()
					_ = yym2250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2248[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2251 := z.EncBinary()
					_ = yym2251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[1] {
					yym2253 := z.EncBinary()
					_ = yym2253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2248[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2254 := z.EncBinary()
					_ = yym2254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[2] {
					yy2256 := &x.ObjectMeta
					yy2256.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2248[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2257 := &x.ObjectMeta
					yy2257.CodecEncodeSelf(e)
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[3] {
					yy2259 := &x.Spec
					yy2259.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2248[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2260 := &x.Spec
					yy2260.CodecEncodeSelf(e)
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[4] {
					yy2262 := &x.Status
					yy2262.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2248[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2263 := &x.Status
					yy2263.CodecEncodeSelf(e)
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2264 := z.DecBinary()
	_ = yym2264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2265 := r.ContainerType()
		if yyct2265 == codecSelferValueTypeMap1234 {
			yyl2265 := r.ReadMapStart()
			if yyl2265 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2265, d)
			}
		} else if yyct2265 == codecSelferValueTypeArray1234 {
			yyl2265 := r.ReadArrayStart()
			if yyl2265 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2266Slc
	var yyhl2266 bool = l >= 0
	for yyj2266 := 0; ; yyj2266++ {
		if yyhl2266 {
			if yyj2266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2266Slc = r.DecodeBytes(yys2266Slc, true, true)
		yys2266 := string(yys2266Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2266 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2269 := &x.ObjectMeta
				yyv2269.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2270 := &x.Spec
				yyv2270.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2271 := &x.Status
				yyv2271.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2266)
		} // end switch yys2266
	} // end for yyj2266
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2272 int
	var yyb2272 bool
	var yyhl2272 bool = l >= 0
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2275 := &x.ObjectMeta
		yyv2275.CodecDecodeSelf(d)
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2276 := &x.Spec
		yyv2276.CodecDecodeSelf(d)
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2277 := &x.Status
		yyv2277.CodecDecodeSelf(d)
	}
	for {
		yyj2272++
		if yyhl2272 {
			yyb2272 = yyj2272 > l
		} else {
			yyb2272 = r.CheckBreak()
		}
		if yyb2272 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2272-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2278 := z.EncBinary()
		_ = yym2278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2279 := !z.EncBinary()
			yy2arr2279 := z.EncBasicHandle().StructToArray
			var yyq2279 [4]bool
			_, _, _ = yysep2279, yyq2279, yy2arr2279
			const yyr2279 bool = false
			yyq2279[0] = x.Kind != ""
			yyq2279[1] = x.APIVersion != ""
			yyq2279[2] = true
			var yynn2279 int
			if yyr2279 || yy2arr2279 {
				r.EncodeArrayStart(4)
			} else {
				yynn2279 = 1
				for _, b := range yyq2279 {
					if b {
						yynn2279++
					}
				}
				r.EncodeMapStart(yynn2279)
				yynn2279 = 0
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[0] {
					yym2281 := z.EncBinary()
					_ = yym2281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2279[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2282 := z.EncBinary()
					_ = yym2282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[1] {
					yym2284 := z.EncBinary()
					_ = yym2284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2279[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2285 := z.EncBinary()
					_ = yym2285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[2] {
					yy2287 := &x.ListMeta
					yym2288 := z.EncBinary()
					_ = yym2288
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2287) {
					} else {
						z.EncFallback(yy2287)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2279[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2289 := &x.ListMeta
					yym2290 := z.EncBinary()
					_ = yym2290
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2289) {
					} else {
						z.EncFallback(yy2289)
					}
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2292 := z.EncBinary()
					_ = yym2292
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2293 := z.EncBinary()
					_ = yym2293
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2294 := z.DecBinary()
	_ = yym2294
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2295 := r.ContainerType()
		if yyct2295 == codecSelferValueTypeMap1234 {
			yyl2295 := r.ReadMapStart()
			if yyl2295 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2295, d)
			}
		} else if yyct2295 == codecSelferValueTypeArray1234 {
			yyl2295 := r.ReadArrayStart()
			if yyl2295 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2295, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2296Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2296Slc
	var yyhl2296 bool = l >= 0
	for yyj2296 := 0; ; yyj2296++ {
		if yyhl2296 {
			if yyj2296 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2296Slc = r.DecodeBytes(yys2296Slc, true, true)
		yys2296 := string(yys2296Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2296 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2299 := &x.ListMeta
				yym2300 := z.DecBinary()
				_ = yym2300
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2299) {
				} else {
					z.DecFallback(yyv2299, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2301 := &x.Items
				yym2302 := z.DecBinary()
				_ = yym2302
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2301), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2296)
		} // end switch yys2296
	} // end for yyj2296
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2303 int
	var yyb2303 bool
	var yyhl2303 bool = l >= 0
	yyj2303++
	if yyhl2303 {
		yyb2303 = yyj2303 > l
	} else {
		yyb2303 = r.CheckBreak()
	}
	if yyb2303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2303++
	if yyhl2303 {
		yyb2303 = yyj2303 > l
	} else {
		yyb2303 = r.CheckBreak()
	}
	if yyb2303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2303++
	if yyhl2303 {
		yyb2303 = yyj2303 > l
	} else {
		yyb2303 = r.CheckBreak()
	}
	if yyb2303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2306 := &x.ListMeta
		yym2307 := z.DecBinary()
		_ = yym2307
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2306) {
		} else {
			z.DecFallback(yyv2306, false)
		}
	}
	yyj2303++
	if yyhl2303 {
		yyb2303 = yyj2303 > l
	} else {
		yyb2303 = r.CheckBreak()
	}
	if yyb2303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2308 := &x.Items
		yym2309 := z.DecBinary()
		_ = yym2309
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2308), d)
		}
	}
	for {
		yyj2303++
		if yyhl2303 {
			yyb2303 = yyj2303 > l
		} else {
			yyb2303 = r.CheckBreak()
		}
		if yyb2303 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2303-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2310 := z.EncBinary()
		_ = yym2310
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2311 := !z.EncBinary()
			yy2arr2311 := z.EncBasicHandle().StructToArray
			var yyq2311 [2]bool
			_, _, _ = yysep2311, yyq2311, yy2arr2311
			const yyr2311 bool = false
			yyq2311[0] = true
			yyq2311[1] = true
			var yynn2311 int
			if yyr2311 || yy2arr2311 {
				r.EncodeArrayStart(2)
			} else {
				yynn2311 = 0
				for _, b := range yyq2311 {
					if b {
						yynn2311++
					}
				}
				r.EncodeMapStart(yynn2311)
				yynn2311 = 0
			}
			if yyr2311 || yy2arr2311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2311[0] {
					yy2313 := &x.ObjectMeta
					yy2313.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2311[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2314 := &x.ObjectMeta
					yy2314.CodecEncodeSelf(e)
				}
			}
			if yyr2311 || yy2arr2311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2311[1] {
					yy2316 := &x.Spec
					yy2316.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2311[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2317 := &x.Spec
					yy2317.CodecEncodeSelf(e)
				}
			}
			if yyr2311 || yy2arr2311 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2318 := z.DecBinary()
	_ = yym2318
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2319 := r.ContainerType()
		if yyct2319 == codecSelferValueTypeMap1234 {
			yyl2319 := r.ReadMapStart()
			if yyl2319 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2319, d)
			}
		} else if yyct2319 == codecSelferValueTypeArray1234 {
			yyl2319 := r.ReadArrayStart()
			if yyl2319 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2319, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2320Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2320Slc
	var yyhl2320 bool = l >= 0
	for yyj2320 := 0; ; yyj2320++ {
		if yyhl2320 {
			if yyj2320 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2320Slc = r.DecodeBytes(yys2320Slc, true, true)
		yys2320 := string(yys2320Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2320 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2321 := &x.ObjectMeta
				yyv2321.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2322 := &x.Spec
				yyv2322.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2320)
		} // end switch yys2320
	} // end for yyj2320
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2323 int
	var yyb2323 bool
	var yyhl2323 bool = l >= 0
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2324 := &x.ObjectMeta
		yyv2324.CodecDecodeSelf(d)
	}
	yyj2323++
	if yyhl2323 {
		yyb2323 = yyj2323 > l
	} else {
		yyb2323 = r.CheckBreak()
	}
	if yyb2323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2325 := &x.Spec
		yyv2325.CodecDecodeSelf(d)
	}
	for {
		yyj2323++
		if yyhl2323 {
			yyb2323 = yyj2323 > l
		} else {
			yyb2323 = r.CheckBreak()
		}
		if yyb2323 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2323-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2326 := z.EncBinary()
		_ = yym2326
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2327 := !z.EncBinary()
			yy2arr2327 := z.EncBasicHandle().StructToArray
			var yyq2327 [4]bool
			_, _, _ = yysep2327, yyq2327, yy2arr2327
			const yyr2327 bool = false
			yyq2327[0] = x.Kind != ""
			yyq2327[1] = x.APIVersion != ""
			yyq2327[2] = true
			yyq2327[3] = true
			var yynn2327 int
			if yyr2327 || yy2arr2327 {
				r.EncodeArrayStart(4)
			} else {
				yynn2327 = 0
				for _, b := range yyq2327 {
					if b {
						yynn2327++
					}
				}
				r.EncodeMapStart(yynn2327)
				yynn2327 = 0
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2327[0] {
					yym2329 := z.EncBinary()
					_ = yym2329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2327[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2330 := z.EncBinary()
					_ = yym2330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2327[1] {
					yym2332 := z.EncBinary()
					_ = yym2332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2327[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2333 := z.EncBinary()
					_ = yym2333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2327[2] {
					yy2335 := &x.ObjectMeta
					yy2335.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2327[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2336 := &x.ObjectMeta
					yy2336.CodecEncodeSelf(e)
				}
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2327[3] {
					yy2338 := &x.Template
					yy2338.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2327[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2339 := &x.Template
					yy2339.CodecEncodeSelf(e)
				}
			}
			if yyr2327 || yy2arr2327 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2340 := z.DecBinary()
	_ = yym2340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2341 := r.ContainerType()
		if yyct2341 == codecSelferValueTypeMap1234 {
			yyl2341 := r.ReadMapStart()
			if yyl2341 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2341, d)
			}
		} else if yyct2341 == codecSelferValueTypeArray1234 {
			yyl2341 := r.ReadArrayStart()
			if yyl2341 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2341, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2342Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2342Slc
	var yyhl2342 bool = l >= 0
	for yyj2342 := 0; ; yyj2342++ {
		if yyhl2342 {
			if yyj2342 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2342Slc = r.DecodeBytes(yys2342Slc, true, true)
		yys2342 := string(yys2342Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2342 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2345 := &x.ObjectMeta
				yyv2345.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2346 := &x.Template
				yyv2346.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2342)
		} // end switch yys2342
	} // end for yyj2342
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2347 int
	var yyb2347 bool
	var yyhl2347 bool = l >= 0
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2350 := &x.ObjectMeta
		yyv2350.CodecDecodeSelf(d)
	}
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2351 := &x.Template
		yyv2351.CodecDecodeSelf(d)
	}
	for {
		yyj2347++
		if yyhl2347 {
			yyb2347 = yyj2347 > l
		} else {
			yyb2347 = r.CheckBreak()
		}
		if yyb2347 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2347-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2352 := z.EncBinary()
		_ = yym2352
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2353 := !z.EncBinary()
			yy2arr2353 := z.EncBasicHandle().StructToArray
			var yyq2353 [4]bool
			_, _, _ = yysep2353, yyq2353, yy2arr2353
			const yyr2353 bool = false
			yyq2353[0] = x.Kind != ""
			yyq2353[1] = x.APIVersion != ""
			yyq2353[2] = true
			var yynn2353 int
			if yyr2353 || yy2arr2353 {
				r.EncodeArrayStart(4)
			} else {
				yynn2353 = 1
				for _, b := range yyq2353 {
					if b {
						yynn2353++
					}
				}
				r.EncodeMapStart(yynn2353)
				yynn2353 = 0
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2353[0] {
					yym2355 := z.EncBinary()
					_ = yym2355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2353[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2356 := z.EncBinary()
					_ = yym2356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2353[1] {
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2353[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2353[2] {
					yy2361 := &x.ListMeta
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2361) {
					} else {
						z.EncFallback(yy2361)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2353[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2363 := &x.ListMeta
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2363) {
					} else {
						z.EncFallback(yy2363)
					}
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2366 := z.EncBinary()
					_ = yym2366
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2367 := z.EncBinary()
					_ = yym2367
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2368 := z.DecBinary()
	_ = yym2368
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2369 := r.ContainerType()
		if yyct2369 == codecSelferValueTypeMap1234 {
			yyl2369 := r.ReadMapStart()
			if yyl2369 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2369, d)
			}
		} else if yyct2369 == codecSelferValueTypeArray1234 {
			yyl2369 := r.ReadArrayStart()
			if yyl2369 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2369, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2370Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2370Slc
	var yyhl2370 bool = l >= 0
	for yyj2370 := 0; ; yyj2370++ {
		if yyhl2370 {
			if yyj2370 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2370Slc = r.DecodeBytes(yys2370Slc, true, true)
		yys2370 := string(yys2370Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2370 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2373 := &x.ListMeta
				yym2374 := z.DecBinary()
				_ = yym2374
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2373) {
				} else {
					z.DecFallback(yyv2373, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2375 := &x.Items
				yym2376 := z.DecBinary()
				_ = yym2376
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2375), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2370)
		} // end switch yys2370
	} // end for yyj2370
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2377 int
	var yyb2377 bool
	var yyhl2377 bool = l >= 0
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2380 := &x.ListMeta
		yym2381 := z.DecBinary()
		_ = yym2381
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2380) {
		} else {
			z.DecFallback(yyv2380, false)
		}
	}
	yyj2377++
	if yyhl2377 {
		yyb2377 = yyj2377 > l
	} else {
		yyb2377 = r.CheckBreak()
	}
	if yyb2377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2382 := &x.Items
		yym2383 := z.DecBinary()
		_ = yym2383
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2382), d)
		}
	}
	for {
		yyj2377++
		if yyhl2377 {
			yyb2377 = yyj2377 > l
		} else {
			yyb2377 = r.CheckBreak()
		}
		if yyb2377 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2377-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2384 := z.EncBinary()
		_ = yym2384
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2385 := !z.EncBinary()
			yy2arr2385 := z.EncBasicHandle().StructToArray
			var yyq2385 [3]bool
			_, _, _ = yysep2385, yyq2385, yy2arr2385
			const yyr2385 bool = false
			yyq2385[0] = x.Replicas != nil
			yyq2385[1] = len(x.Selector) != 0
			yyq2385[2] = x.Template != nil
			var yynn2385 int
			if yyr2385 || yy2arr2385 {
				r.EncodeArrayStart(3)
			} else {
				yynn2385 = 0
				for _, b := range yyq2385 {
					if b {
						yynn2385++
					}
				}
				r.EncodeMapStart(yynn2385)
				yynn2385 = 0
			}
			if yyr2385 || yy2arr2385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2385[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2387 := *x.Replicas
						yym2388 := z.EncBinary()
						_ = yym2388
						if false {
						} else {
							r.EncodeInt(int64(yy2387))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2385[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2389 := *x.Replicas
						yym2390 := z.EncBinary()
						_ = yym2390
						if false {
						} else {
							r.EncodeInt(int64(yy2389))
						}
					}
				}
			}
			if yyr2385 || yy2arr2385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2385[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2392 := z.EncBinary()
						_ = yym2392
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2385[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2393 := z.EncBinary()
						_ = yym2393
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2385 || yy2arr2385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2385[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2385[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2385 || yy2arr2385 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2395 := z.DecBinary()
	_ = yym2395
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2396 := r.ContainerType()
		if yyct2396 == codecSelferValueTypeMap1234 {
			yyl2396 := r.ReadMapStart()
			if yyl2396 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2396, d)
			}
		} else if yyct2396 == codecSelferValueTypeArray1234 {
			yyl2396 := r.ReadArrayStart()
			if yyl2396 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2396, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2397Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2397Slc
	var yyhl2397 bool = l >= 0
	for yyj2397 := 0; ; yyj2397++ {
		if yyhl2397 {
			if yyj2397 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2397Slc = r.DecodeBytes(yys2397Slc, true, true)
		yys2397 := string(yys2397Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2397 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2399 := z.DecBinary()
				_ = yym2399
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2400 := &x.Selector
				yym2401 := z.DecBinary()
				_ = yym2401
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2400, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2397)
		} // end switch yys2397
	} // end for yyj2397
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2403 int
	var yyb2403 bool
	var yyhl2403 bool = l >= 0
	yyj2403++
	if yyhl2403 {
		yyb2403 = yyj2403 > l
	} else {
		yyb2403 = r.CheckBreak()
	}
	if yyb2403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2405 := z.DecBinary()
		_ = yym2405
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2403++
	if yyhl2403 {
		yyb2403 = yyj2403 > l
	} else {
		yyb2403 = r.CheckBreak()
	}
	if yyb2403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2406 := &x.Selector
		yym2407 := z.DecBinary()
		_ = yym2407
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2406, false, d)
		}
	}
	yyj2403++
	if yyhl2403 {
		yyb2403 = yyj2403 > l
	} else {
		yyb2403 = r.CheckBreak()
	}
	if yyb2403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2403++
		if yyhl2403 {
			yyb2403 = yyj2403 > l
		} else {
			yyb2403 = r.CheckBreak()
		}
		if yyb2403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2409 := z.EncBinary()
		_ = yym2409
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2410 := !z.EncBinary()
			yy2arr2410 := z.EncBasicHandle().StructToArray
			var yyq2410 [4]bool
			_, _, _ = yysep2410, yyq2410, yy2arr2410
			const yyr2410 bool = false
			yyq2410[1] = x.FullyLabeledReplicas != 0
			yyq2410[2] = x.ReadyReplicas != 0
			yyq2410[3] = x.ObservedGeneration != 0
			var yynn2410 int
			if yyr2410 || yy2arr2410 {
				r.EncodeArrayStart(4)
			} else {
				yynn2410 = 1
				for _, b := range yyq2410 {
					if b {
						yynn2410++
					}
				}
				r.EncodeMapStart(yynn2410)
				yynn2410 = 0
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2412 := z.EncBinary()
				_ = yym2412
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2413 := z.EncBinary()
				_ = yym2413
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2410[1] {
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2410[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2416 := z.EncBinary()
					_ = yym2416
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2410[2] {
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2410[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2410[3] {
					yym2421 := z.EncBinary()
					_ = yym2421
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2410[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2422 := z.EncBinary()
					_ = yym2422
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2423 := z.DecBinary()
	_ = yym2423
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2424 := r.ContainerType()
		if yyct2424 == codecSelferValueTypeMap1234 {
			yyl2424 := r.ReadMapStart()
			if yyl2424 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2424, d)
			}
		} else if yyct2424 == codecSelferValueTypeArray1234 {
			yyl2424 := r.ReadArrayStart()
			if yyl2424 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2424, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2425Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2425Slc
	var yyhl2425 bool = l >= 0
	for yyj2425 := 0; ; yyj2425++ {
		if yyhl2425 {
			if yyj2425 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2425Slc = r.DecodeBytes(yys2425Slc, true, true)
		yys2425 := string(yys2425Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2425 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2425)
		} // end switch yys2425
	} // end for yyj2425
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2430 int
	var yyb2430 bool
	var yyhl2430 bool = l >= 0
	yyj2430++
	if yyhl2430 {
		yyb2430 = yyj2430 > l
	} else {
		yyb2430 = r.CheckBreak()
	}
	if yyb2430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2430++
	if yyhl2430 {
		yyb2430 = yyj2430 > l
	} else {
		yyb2430 = r.CheckBreak()
	}
	if yyb2430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2430++
	if yyhl2430 {
		yyb2430 = yyj2430 > l
	} else {
		yyb2430 = r.CheckBreak()
	}
	if yyb2430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2430++
	if yyhl2430 {
		yyb2430 = yyj2430 > l
	} else {
		yyb2430 = r.CheckBreak()
	}
	if yyb2430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2430++
		if yyhl2430 {
			yyb2430 = yyj2430 > l
		} else {
			yyb2430 = r.CheckBreak()
		}
		if yyb2430 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2430-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2435 := z.EncBinary()
		_ = yym2435
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2436 := !z.EncBinary()
			yy2arr2436 := z.EncBasicHandle().StructToArray
			var yyq2436 [5]bool
			_, _, _ = yysep2436, yyq2436, yy2arr2436
			const yyr2436 bool = false
			yyq2436[0] = x.Kind != ""
			yyq2436[1] = x.APIVersion != ""
			yyq2436[2] = true
			yyq2436[3] = true
			yyq2436[4] = true
			var yynn2436 int
			if yyr2436 || yy2arr2436 {
				r.EncodeArrayStart(5)
			} else {
				yynn2436 = 0
				for _, b := range yyq2436 {
					if b {
						yynn2436++
					}
				}
				r.EncodeMapStart(yynn2436)
				yynn2436 = 0
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2436[0] {
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2436[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2439 := z.EncBinary()
					_ = yym2439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2436[1] {
					yym2441 := z.EncBinary()
					_ = yym2441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2436[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2442 := z.EncBinary()
					_ = yym2442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2436[2] {
					yy2444 := &x.ObjectMeta
					yy2444.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2436[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2445 := &x.ObjectMeta
					yy2445.CodecEncodeSelf(e)
				}
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2436[3] {
					yy2447 := &x.Spec
					yy2447.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2436[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2448 := &x.Spec
					yy2448.CodecEncodeSelf(e)
				}
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2436[4] {
					yy2450 := &x.Status
					yy2450.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2436[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2451 := &x.Status
					yy2451.CodecEncodeSelf(e)
				}
			}
			if yyr2436 || yy2arr2436 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2452 := z.DecBinary()
	_ = yym2452
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2453 := r.ContainerType()
		if yyct2453 == codecSelferValueTypeMap1234 {
			yyl2453 := r.ReadMapStart()
			if yyl2453 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2453, d)
			}
		} else if yyct2453 == codecSelferValueTypeArray1234 {
			yyl2453 := r.ReadArrayStart()
			if yyl2453 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2453, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2454Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2454Slc
	var yyhl2454 bool = l >= 0
	for yyj2454 := 0; ; yyj2454++ {
		if yyhl2454 {
			if yyj2454 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2454Slc = r.DecodeBytes(yys2454Slc, true, true)
		yys2454 := string(yys2454Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2454 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2457 := &x.ObjectMeta
				yyv2457.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2458 := &x.Spec
				yyv2458.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2459 := &x.Status
				yyv2459.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2454)
		} // end switch yys2454
	} // end for yyj2454
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2460 int
	var yyb2460 bool
	var yyhl2460 bool = l >= 0
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2463 := &x.ObjectMeta
		yyv2463.CodecDecodeSelf(d)
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2464 := &x.Spec
		yyv2464.CodecDecodeSelf(d)
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2465 := &x.Status
		yyv2465.CodecDecodeSelf(d)
	}
	for {
		yyj2460++
		if yyhl2460 {
			yyb2460 = yyj2460 > l
		} else {
			yyb2460 = r.CheckBreak()
		}
		if yyb2460 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2460-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2466 := z.EncBinary()
		_ = yym2466
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2467 := !z.EncBinary()
			yy2arr2467 := z.EncBasicHandle().StructToArray
			var yyq2467 [4]bool
			_, _, _ = yysep2467, yyq2467, yy2arr2467
			const yyr2467 bool = false
			yyq2467[0] = x.Kind != ""
			yyq2467[1] = x.APIVersion != ""
			yyq2467[2] = true
			var yynn2467 int
			if yyr2467 || yy2arr2467 {
				r.EncodeArrayStart(4)
			} else {
				yynn2467 = 1
				for _, b := range yyq2467 {
					if b {
						yynn2467++
					}
				}
				r.EncodeMapStart(yynn2467)
				yynn2467 = 0
			}
			if yyr2467 || yy2arr2467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2467[0] {
					yym2469 := z.EncBinary()
					_ = yym2469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2467[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2470 := z.EncBinary()
					_ = yym2470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2467 || yy2arr2467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2467[1] {
					yym2472 := z.EncBinary()
					_ = yym2472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2467[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2473 := z.EncBinary()
					_ = yym2473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2467 || yy2arr2467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2467[2] {
					yy2475 := &x.ListMeta
					yym2476 := z.EncBinary()
					_ = yym2476
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2475) {
					} else {
						z.EncFallback(yy2475)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2467[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2477 := &x.ListMeta
					yym2478 := z.EncBinary()
					_ = yym2478
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2477) {
					} else {
						z.EncFallback(yy2477)
					}
				}
			}
			if yyr2467 || yy2arr2467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2480 := z.EncBinary()
					_ = yym2480
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2481 := z.EncBinary()
					_ = yym2481
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2467 || yy2arr2467 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2482 := z.DecBinary()
	_ = yym2482
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2483 := r.ContainerType()
		if yyct2483 == codecSelferValueTypeMap1234 {
			yyl2483 := r.ReadMapStart()
			if yyl2483 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2483, d)
			}
		} else if yyct2483 == codecSelferValueTypeArray1234 {
			yyl2483 := r.ReadArrayStart()
			if yyl2483 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2483, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2484Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2484Slc
	var yyhl2484 bool = l >= 0
	for yyj2484 := 0; ; yyj2484++ {
		if yyhl2484 {
			if yyj2484 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2484Slc = r.DecodeBytes(yys2484Slc, true, true)
		yys2484 := string(yys2484Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2484 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2487 := &x.ListMeta
				yym2488 := z.DecBinary()
				_ = yym2488
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2487) {
				} else {
					z.DecFallback(yyv2487, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2489 := &x.Items
				yym2490 := z.DecBinary()
				_ = yym2490
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2489), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2484)
		} // end switch yys2484
	} // end for yyj2484
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2491 int
	var yyb2491 bool
	var yyhl2491 bool = l >= 0
	yyj2491++
	if yyhl2491 {
		yyb2491 = yyj2491 > l
	} else {
		yyb2491 = r.CheckBreak()
	}
	if yyb2491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2491++
	if yyhl2491 {
		yyb2491 = yyj2491 > l
	} else {
		yyb2491 = r.CheckBreak()
	}
	if yyb2491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2491++
	if yyhl2491 {
		yyb2491 = yyj2491 > l
	} else {
		yyb2491 = r.CheckBreak()
	}
	if yyb2491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2494 := &x.ListMeta
		yym2495 := z.DecBinary()
		_ = yym2495
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2494) {
		} else {
			z.DecFallback(yyv2494, false)
		}
	}
	yyj2491++
	if yyhl2491 {
		yyb2491 = yyj2491 > l
	} else {
		yyb2491 = r.CheckBreak()
	}
	if yyb2491 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2496 := &x.Items
		yym2497 := z.DecBinary()
		_ = yym2497
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2496), d)
		}
	}
	for {
		yyj2491++
		if yyhl2491 {
			yyb2491 = yyj2491 > l
		} else {
			yyb2491 = r.CheckBreak()
		}
		if yyb2491 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2491-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2498 := z.EncBinary()
	_ = yym2498
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2499 := z.DecBinary()
	_ = yym2499
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2500 := z.EncBinary()
	_ = yym2500
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2501 := z.DecBinary()
	_ = yym2501
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2502 := z.EncBinary()
		_ = yym2502
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2503 := !z.EncBinary()
			yy2arr2503 := z.EncBasicHandle().StructToArray
			var yyq2503 [1]bool
			_, _, _ = yysep2503, yyq2503, yy2arr2503
			const yyr2503 bool = false
			yyq2503[0] = true
			var yynn2503 int
			if yyr2503 || yy2arr2503 {
				r.EncodeArrayStart(1)
			} else {
				yynn2503 = 0
				for _, b := range yyq2503 {
					if b {
						yynn2503++
					}
				}
				r.EncodeMapStart(yynn2503)
				yynn2503 = 0
			}
			if yyr2503 || yy2arr2503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2503[0] {
					yy2505 := &x.LoadBalancer
					yy2505.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2503[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2506 := &x.LoadBalancer
					yy2506.CodecEncodeSelf(e)
				}
			}
			if yyr2503 || yy2arr2503 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2507 := z.DecBinary()
	_ = yym2507
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2508 := r.ContainerType()
		if yyct2508 == codecSelferValueTypeMap1234 {
			yyl2508 := r.ReadMapStart()
			if yyl2508 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2508, d)
			}
		} else if yyct2508 == codecSelferValueTypeArray1234 {
			yyl2508 := r.ReadArrayStart()
			if yyl2508 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2508, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2509Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2509Slc
	var yyhl2509 bool = l >= 0
	for yyj2509 := 0; ; yyj2509++ {
		if yyhl2509 {
			if yyj2509 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2509Slc = r.DecodeBytes(yys2509Slc, true, true)
		yys2509 := string(yys2509Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2509 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2510 := &x.LoadBalancer
				yyv2510.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2509)
		} // end switch yys2509
	} // end for yyj2509
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2511 int
	var yyb2511 bool
	var yyhl2511 bool = l >= 0
	yyj2511++
	if yyhl2511 {
		yyb2511 = yyj2511 > l
	} else {
		yyb2511 = r.CheckBreak()
	}
	if yyb2511 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2512 := &x.LoadBalancer
		yyv2512.CodecDecodeSelf(d)
	}
	for {
		yyj2511++
		if yyhl2511 {
			yyb2511 = yyj2511 > l
		} else {
			yyb2511 = r.CheckBreak()
		}
		if yyb2511 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2511-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2513 := z.EncBinary()
		_ = yym2513
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2514 := !z.EncBinary()
			yy2arr2514 := z.EncBasicHandle().StructToArray
			var yyq2514 [1]bool
			_, _, _ = yysep2514, yyq2514, yy2arr2514
			const yyr2514 bool = false
			yyq2514[0] = len(x.Ingress) != 0
			var yynn2514 int
			if yyr2514 || yy2arr2514 {
				r.EncodeArrayStart(1)
			} else {
				yynn2514 = 0
				for _, b := range yyq2514 {
					if b {
						yynn2514++
					}
				}
				r.EncodeMapStart(yynn2514)
				yynn2514 = 0
			}
			if yyr2514 || yy2arr2514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2514[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2516 := z.EncBinary()
						_ = yym2516
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2514[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2517 := z.EncBinary()
						_ = yym2517
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2514 || yy2arr2514 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2518 := z.DecBinary()
	_ = yym2518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2519 := r.ContainerType()
		if yyct2519 == codecSelferValueTypeMap1234 {
			yyl2519 := r.ReadMapStart()
			if yyl2519 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2519, d)
			}
		} else if yyct2519 == codecSelferValueTypeArray1234 {
			yyl2519 := r.ReadArrayStart()
			if yyl2519 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2519, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2520Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2520Slc
	var yyhl2520 bool = l >= 0
	for yyj2520 := 0; ; yyj2520++ {
		if yyhl2520 {
			if yyj2520 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2520Slc = r.DecodeBytes(yys2520Slc, true, true)
		yys2520 := string(yys2520Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2520 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2521 := &x.Ingress
				yym2522 := z.DecBinary()
				_ = yym2522
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2521), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2520)
		} // end switch yys2520
	} // end for yyj2520
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2523 int
	var yyb2523 bool
	var yyhl2523 bool = l >= 0
	yyj2523++
	if yyhl2523 {
		yyb2523 = yyj2523 > l
	} else {
		yyb2523 = r.CheckBreak()
	}
	if yyb2523 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2524 := &x.Ingress
		yym2525 := z.DecBinary()
		_ = yym2525
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2524), d)
		}
	}
	for {
		yyj2523++
		if yyhl2523 {
			yyb2523 = yyj2523 > l
		} else {
			yyb2523 = r.CheckBreak()
		}
		if yyb2523 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2523-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2526 := z.EncBinary()
		_ = yym2526
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2527 := !z.EncBinary()
			yy2arr2527 := z.EncBasicHandle().StructToArray
			var yyq2527 [2]bool
			_, _, _ = yysep2527, yyq2527, yy2arr2527
			const yyr2527 bool = false
			yyq2527[0] = x.IP != ""
			yyq2527[1] = x.Hostname != ""
			var yynn2527 int
			if yyr2527 || yy2arr2527 {
				r.EncodeArrayStart(2)
			} else {
				yynn2527 = 0
				for _, b := range yyq2527 {
					if b {
						yynn2527++
					}
				}
				r.EncodeMapStart(yynn2527)
				yynn2527 = 0
			}
			if yyr2527 || yy2arr2527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2527[0] {
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2527[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2530 := z.EncBinary()
					_ = yym2530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2527 || yy2arr2527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2527[1] {
					yym2532 := z.EncBinary()
					_ = yym2532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2527[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2533 := z.EncBinary()
					_ = yym2533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2527 || yy2arr2527 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2534 := z.DecBinary()
	_ = yym2534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2535 := r.ContainerType()
		if yyct2535 == codecSelferValueTypeMap1234 {
			yyl2535 := r.ReadMapStart()
			if yyl2535 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2535, d)
			}
		} else if yyct2535 == codecSelferValueTypeArray1234 {
			yyl2535 := r.ReadArrayStart()
			if yyl2535 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2535, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2536Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2536Slc
	var yyhl2536 bool = l >= 0
	for yyj2536 := 0; ; yyj2536++ {
		if yyhl2536 {
			if yyj2536 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2536Slc = r.DecodeBytes(yys2536Slc, true, true)
		yys2536 := string(yys2536Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2536 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2536)
		} // end switch yys2536
	} // end for yyj2536
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2539 int
	var yyb2539 bool
	var yyhl2539 bool = l >= 0
	yyj2539++
	if yyhl2539 {
		yyb2539 = yyj2539 > l
	} else {
		yyb2539 = r.CheckBreak()
	}
	if yyb2539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2539++
	if yyhl2539 {
		yyb2539 = yyj2539 > l
	} else {
		yyb2539 = r.CheckBreak()
	}
	if yyb2539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2539++
		if yyhl2539 {
			yyb2539 = yyj2539 > l
		} else {
			yyb2539 = r.CheckBreak()
		}
		if yyb2539 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2539-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2542 := z.EncBinary()
		_ = yym2542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2543 := !z.EncBinary()
			yy2arr2543 := z.EncBasicHandle().StructToArray
			var yyq2543 [10]bool
			_, _, _ = yysep2543, yyq2543, yy2arr2543
			const yyr2543 bool = false
			yyq2543[1] = len(x.Selector) != 0
			yyq2543[2] = x.ClusterIP != ""
			yyq2543[3] = x.Type != ""
			yyq2543[4] = len(x.ExternalIPs) != 0
			yyq2543[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2543[6] = x.SessionAffinity != ""
			yyq2543[7] = x.LoadBalancerIP != ""
			yyq2543[8] = len(x.LoadBalancerSourceRanges) != 0
			yyq2543[9] = x.ExternalName != ""
			var yynn2543 int
			if yyr2543 || yy2arr2543 {
				r.EncodeArrayStart(10)
			} else {
				yynn2543 = 1
				for _, b := range yyq2543 {
					if b {
						yynn2543++
					}
				}
				r.EncodeMapStart(yynn2543)
				yynn2543 = 0
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2545 := z.EncBinary()
					_ = yym2545
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2546 := z.EncBinary()
					_ = yym2546
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2543[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2548 := z.EncBinary()
						_ = yym2548
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2543[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2549 := z.EncBinary()
						_ = yym2549
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2543[2] {
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2543[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2552 := z.EncBinary()
					_ = yym2552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2543[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2543[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2543[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2555 := z.EncBinary()
						_ = yym2555
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2543[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2556 := z.EncBinary()
						_ = yym2556
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2543[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2558 := z.EncBinary()
						_ = yym2558
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2543[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2559 := z.EncBinary()
						_ = yym2559
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2543[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2543[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2543[7] {
					yym2562 := z.EncBinary()
					_ = yym2562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2543[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2543[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2565 := z.EncBinary()
						_ = yym2565
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2543[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2566 := z.EncBinary()
						_ = yym2566
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2543[9] {
					yym2568 := z.EncBinary()
					_ = yym2568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2543[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2569 := z.EncBinary()
					_ = yym2569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				}
			}
			if yyr2543 || yy2arr2543 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2570 := z.DecBinary()
	_ = yym2570
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2571 := r.ContainerType()
		if yyct2571 == codecSelferValueTypeMap1234 {
			yyl2571 := r.ReadMapStart()
			if yyl2571 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2571, d)
			}
		} else if yyct2571 == codecSelferValueTypeArray1234 {
			yyl2571 := r.ReadArrayStart()
			if yyl2571 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2571, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2572Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2572Slc
	var yyhl2572 bool = l >= 0
	for yyj2572 := 0; ; yyj2572++ {
		if yyhl2572 {
			if yyj2572 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2572Slc = r.DecodeBytes(yys2572Slc, true, true)
		yys2572 := string(yys2572Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2572 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2573 := &x.Ports
				yym2574 := z.DecBinary()
				_ = yym2574
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2573), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2575 := &x.Selector
				yym2576 := z.DecBinary()
				_ = yym2576
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2575, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2579 := &x.ExternalIPs
				yym2580 := z.DecBinary()
				_ = yym2580
				if false {
				} else {
					z.F.DecSliceStringX(yyv2579, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2581 := &x.DeprecatedPublicIPs
				yym2582 := z.DecBinary()
				_ = yym2582
				if false {
				} else {
					z.F.DecSliceStringX(yyv2581, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2585 := &x.LoadBalancerSourceRanges
				yym2586 := z.DecBinary()
				_ = yym2586
				if false {
				} else {
					z.F.DecSliceStringX(yyv2585, false, d)
				}
			}
		case "externalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2572)
		} // end switch yys2572
	} // end for yyj2572
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2588 int
	var yyb2588 bool
	var yyhl2588 bool = l >= 0
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2589 := &x.Ports
		yym2590 := z.DecBinary()
		_ = yym2590
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2589), d)
		}
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2591 := &x.Selector
		yym2592 := z.DecBinary()
		_ = yym2592
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2591, false, d)
		}
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2595 := &x.ExternalIPs
		yym2596 := z.DecBinary()
		_ = yym2596
		if false {
		} else {
			z.F.DecSliceStringX(yyv2595, false, d)
		}
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2597 := &x.DeprecatedPublicIPs
		yym2598 := z.DecBinary()
		_ = yym2598
		if false {
		} else {
			z.F.DecSliceStringX(yyv2597, false, d)
		}
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2601 := &x.LoadBalancerSourceRanges
		yym2602 := z.DecBinary()
		_ = yym2602
		if false {
		} else {
			z.F.DecSliceStringX(yyv2601, false, d)
		}
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	for {
		yyj2588++
		if yyhl2588 {
			yyb2588 = yyj2588 > l
		} else {
			yyb2588 = r.CheckBreak()
		}
		if yyb2588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2604 := z.EncBinary()
		_ = yym2604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2605 := !z.EncBinary()
			yy2arr2605 := z.EncBasicHandle().StructToArray
			var yyq2605 [5]bool
			_, _, _ = yysep2605, yyq2605, yy2arr2605
			const yyr2605 bool = false
			yyq2605[0] = x.Name != ""
			yyq2605[1] = x.Protocol != ""
			yyq2605[3] = true
			yyq2605[4] = x.NodePort != 0
			var yynn2605 int
			if yyr2605 || yy2arr2605 {
				r.EncodeArrayStart(5)
			} else {
				yynn2605 = 1
				for _, b := range yyq2605 {
					if b {
						yynn2605++
					}
				}
				r.EncodeMapStart(yynn2605)
				yynn2605 = 0
			}
			if yyr2605 || yy2arr2605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2605[0] {
					yym2607 := z.EncBinary()
					_ = yym2607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2605[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2608 := z.EncBinary()
					_ = yym2608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2605 || yy2arr2605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2605[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2605[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2605 || yy2arr2605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2611 := z.EncBinary()
				_ = yym2611
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2612 := z.EncBinary()
				_ = yym2612
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2605 || yy2arr2605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2605[3] {
					yy2614 := &x.TargetPort
					yym2615 := z.EncBinary()
					_ = yym2615
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2614) {
					} else if !yym2615 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2614)
					} else {
						z.EncFallback(yy2614)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2605[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2616 := &x.TargetPort
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2616) {
					} else if !yym2617 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2616)
					} else {
						z.EncFallback(yy2616)
					}
				}
			}
			if yyr2605 || yy2arr2605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2605[4] {
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2605[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2605 || yy2arr2605 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2621 := z.DecBinary()
	_ = yym2621
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2622 := r.ContainerType()
		if yyct2622 == codecSelferValueTypeMap1234 {
			yyl2622 := r.ReadMapStart()
			if yyl2622 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2622, d)
			}
		} else if yyct2622 == codecSelferValueTypeArray1234 {
			yyl2622 := r.ReadArrayStart()
			if yyl2622 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2622, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2623Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2623Slc
	var yyhl2623 bool = l >= 0
	for yyj2623 := 0; ; yyj2623++ {
		if yyhl2623 {
			if yyj2623 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2623Slc = r.DecodeBytes(yys2623Slc, true, true)
		yys2623 := string(yys2623Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2623 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2627 := &x.TargetPort
				yym2628 := z.DecBinary()
				_ = yym2628
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2627) {
				} else if !yym2628 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2627)
				} else {
					z.DecFallback(yyv2627, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2623)
		} // end switch yys2623
	} // end for yyj2623
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2630 int
	var yyb2630 bool
	var yyhl2630 bool = l >= 0
	yyj2630++
	if yyhl2630 {
		yyb2630 = yyj2630 > l
	} else {
		yyb2630 = r.CheckBreak()
	}
	if yyb2630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2630++
	if yyhl2630 {
		yyb2630 = yyj2630 > l
	} else {
		yyb2630 = r.CheckBreak()
	}
	if yyb2630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2630++
	if yyhl2630 {
		yyb2630 = yyj2630 > l
	} else {
		yyb2630 = r.CheckBreak()
	}
	if yyb2630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2630++
	if yyhl2630 {
		yyb2630 = yyj2630 > l
	} else {
		yyb2630 = r.CheckBreak()
	}
	if yyb2630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2634 := &x.TargetPort
		yym2635 := z.DecBinary()
		_ = yym2635
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2634) {
		} else if !yym2635 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2634)
		} else {
			z.DecFallback(yyv2634, false)
		}
	}
	yyj2630++
	if yyhl2630 {
		yyb2630 = yyj2630 > l
	} else {
		yyb2630 = r.CheckBreak()
	}
	if yyb2630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2630++
		if yyhl2630 {
			yyb2630 = yyj2630 > l
		} else {
			yyb2630 = r.CheckBreak()
		}
		if yyb2630 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2630-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2637 := z.EncBinary()
		_ = yym2637
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2638 := !z.EncBinary()
			yy2arr2638 := z.EncBasicHandle().StructToArray
			var yyq2638 [5]bool
			_, _, _ = yysep2638, yyq2638, yy2arr2638
			const yyr2638 bool = false
			yyq2638[0] = x.Kind != ""
			yyq2638[1] = x.APIVersion != ""
			yyq2638[2] = true
			yyq2638[3] = true
			yyq2638[4] = true
			var yynn2638 int
			if yyr2638 || yy2arr2638 {
				r.EncodeArrayStart(5)
			} else {
				yynn2638 = 0
				for _, b := range yyq2638 {
					if b {
						yynn2638++
					}
				}
				r.EncodeMapStart(yynn2638)
				yynn2638 = 0
			}
			if yyr2638 || yy2arr2638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2638[0] {
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2638[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2641 := z.EncBinary()
					_ = yym2641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2638 || yy2arr2638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2638[1] {
					yym2643 := z.EncBinary()
					_ = yym2643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2638[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2644 := z.EncBinary()
					_ = yym2644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2638 || yy2arr2638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2638[2] {
					yy2646 := &x.ObjectMeta
					yy2646.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2638[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2647 := &x.ObjectMeta
					yy2647.CodecEncodeSelf(e)
				}
			}
			if yyr2638 || yy2arr2638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2638[3] {
					yy2649 := &x.Spec
					yy2649.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2638[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2650 := &x.Spec
					yy2650.CodecEncodeSelf(e)
				}
			}
			if yyr2638 || yy2arr2638 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2638[4] {
					yy2652 := &x.Status
					yy2652.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2638[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2653 := &x.Status
					yy2653.CodecEncodeSelf(e)
				}
			}
			if yyr2638 || yy2arr2638 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2654 := z.DecBinary()
	_ = yym2654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2655 := r.ContainerType()
		if yyct2655 == codecSelferValueTypeMap1234 {
			yyl2655 := r.ReadMapStart()
			if yyl2655 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2655, d)
			}
		} else if yyct2655 == codecSelferValueTypeArray1234 {
			yyl2655 := r.ReadArrayStart()
			if yyl2655 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2656Slc
	var yyhl2656 bool = l >= 0
	for yyj2656 := 0; ; yyj2656++ {
		if yyhl2656 {
			if yyj2656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2656Slc = r.DecodeBytes(yys2656Slc, true, true)
		yys2656 := string(yys2656Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2656 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2659 := &x.ObjectMeta
				yyv2659.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2660 := &x.Spec
				yyv2660.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2661 := &x.Status
				yyv2661.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2656)
		} // end switch yys2656
	} // end for yyj2656
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2662 int
	var yyb2662 bool
	var yyhl2662 bool = l >= 0
	yyj2662++
	if yyhl2662 {
		yyb2662 = yyj2662 > l
	} else {
		yyb2662 = r.CheckBreak()
	}
	if yyb2662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2662++
	if yyhl2662 {
		yyb2662 = yyj2662 > l
	} else {
		yyb2662 = r.CheckBreak()
	}
	if yyb2662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2662++
	if yyhl2662 {
		yyb2662 = yyj2662 > l
	} else {
		yyb2662 = r.CheckBreak()
	}
	if yyb2662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2665 := &x.ObjectMeta
		yyv2665.CodecDecodeSelf(d)
	}
	yyj2662++
	if yyhl2662 {
		yyb2662 = yyj2662 > l
	} else {
		yyb2662 = r.CheckBreak()
	}
	if yyb2662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2666 := &x.Spec
		yyv2666.CodecDecodeSelf(d)
	}
	yyj2662++
	if yyhl2662 {
		yyb2662 = yyj2662 > l
	} else {
		yyb2662 = r.CheckBreak()
	}
	if yyb2662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2667 := &x.Status
		yyv2667.CodecDecodeSelf(d)
	}
	for {
		yyj2662++
		if yyhl2662 {
			yyb2662 = yyj2662 > l
		} else {
			yyb2662 = r.CheckBreak()
		}
		if yyb2662 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2662-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2668 := z.EncBinary()
		_ = yym2668
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2669 := !z.EncBinary()
			yy2arr2669 := z.EncBasicHandle().StructToArray
			var yyq2669 [4]bool
			_, _, _ = yysep2669, yyq2669, yy2arr2669
			const yyr2669 bool = false
			yyq2669[0] = x.Kind != ""
			yyq2669[1] = x.APIVersion != ""
			yyq2669[2] = true
			var yynn2669 int
			if yyr2669 || yy2arr2669 {
				r.EncodeArrayStart(4)
			} else {
				yynn2669 = 1
				for _, b := range yyq2669 {
					if b {
						yynn2669++
					}
				}
				r.EncodeMapStart(yynn2669)
				yynn2669 = 0
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2669[0] {
					yym2671 := z.EncBinary()
					_ = yym2671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2669[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2672 := z.EncBinary()
					_ = yym2672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2669[1] {
					yym2674 := z.EncBinary()
					_ = yym2674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2669[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2675 := z.EncBinary()
					_ = yym2675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2669[2] {
					yy2677 := &x.ListMeta
					yym2678 := z.EncBinary()
					_ = yym2678
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2677) {
					} else {
						z.EncFallback(yy2677)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2669[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2679 := &x.ListMeta
					yym2680 := z.EncBinary()
					_ = yym2680
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2679) {
					} else {
						z.EncFallback(yy2679)
					}
				}
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2682 := z.EncBinary()
					_ = yym2682
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2683 := z.EncBinary()
					_ = yym2683
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2669 || yy2arr2669 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2684 := z.DecBinary()
	_ = yym2684
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2685 := r.ContainerType()
		if yyct2685 == codecSelferValueTypeMap1234 {
			yyl2685 := r.ReadMapStart()
			if yyl2685 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2685, d)
			}
		} else if yyct2685 == codecSelferValueTypeArray1234 {
			yyl2685 := r.ReadArrayStart()
			if yyl2685 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2685, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2686Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2686Slc
	var yyhl2686 bool = l >= 0
	for yyj2686 := 0; ; yyj2686++ {
		if yyhl2686 {
			if yyj2686 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2686Slc = r.DecodeBytes(yys2686Slc, true, true)
		yys2686 := string(yys2686Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2686 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2689 := &x.ListMeta
				yym2690 := z.DecBinary()
				_ = yym2690
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2689) {
				} else {
					z.DecFallback(yyv2689, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2691 := &x.Items
				yym2692 := z.DecBinary()
				_ = yym2692
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2691), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2686)
		} // end switch yys2686
	} // end for yyj2686
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2693 int
	var yyb2693 bool
	var yyhl2693 bool = l >= 0
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2696 := &x.ListMeta
		yym2697 := z.DecBinary()
		_ = yym2697
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2696) {
		} else {
			z.DecFallback(yyv2696, false)
		}
	}
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2698 := &x.Items
		yym2699 := z.DecBinary()
		_ = yym2699
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2698), d)
		}
	}
	for {
		yyj2693++
		if yyhl2693 {
			yyb2693 = yyj2693 > l
		} else {
			yyb2693 = r.CheckBreak()
		}
		if yyb2693 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2693-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2700 := z.EncBinary()
		_ = yym2700
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2701 := !z.EncBinary()
			yy2arr2701 := z.EncBasicHandle().StructToArray
			var yyq2701 [5]bool
			_, _, _ = yysep2701, yyq2701, yy2arr2701
			const yyr2701 bool = false
			yyq2701[0] = x.Kind != ""
			yyq2701[1] = x.APIVersion != ""
			yyq2701[2] = true
			yyq2701[3] = len(x.Secrets) != 0
			yyq2701[4] = len(x.ImagePullSecrets) != 0
			var yynn2701 int
			if yyr2701 || yy2arr2701 {
				r.EncodeArrayStart(5)
			} else {
				yynn2701 = 0
				for _, b := range yyq2701 {
					if b {
						yynn2701++
					}
				}
				r.EncodeMapStart(yynn2701)
				yynn2701 = 0
			}
			if yyr2701 || yy2arr2701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2701[0] {
					yym2703 := z.EncBinary()
					_ = yym2703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2701[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2704 := z.EncBinary()
					_ = yym2704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2701 || yy2arr2701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2701[1] {
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2701[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2707 := z.EncBinary()
					_ = yym2707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2701 || yy2arr2701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2701[2] {
					yy2709 := &x.ObjectMeta
					yy2709.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2701[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2710 := &x.ObjectMeta
					yy2710.CodecEncodeSelf(e)
				}
			}
			if yyr2701 || yy2arr2701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2701[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2712 := z.EncBinary()
						_ = yym2712
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2701[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2713 := z.EncBinary()
						_ = yym2713
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2701 || yy2arr2701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2701[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2715 := z.EncBinary()
						_ = yym2715
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2701[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2716 := z.EncBinary()
						_ = yym2716
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2701 || yy2arr2701 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2717 := z.DecBinary()
	_ = yym2717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2718 := r.ContainerType()
		if yyct2718 == codecSelferValueTypeMap1234 {
			yyl2718 := r.ReadMapStart()
			if yyl2718 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2718, d)
			}
		} else if yyct2718 == codecSelferValueTypeArray1234 {
			yyl2718 := r.ReadArrayStart()
			if yyl2718 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2718, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2719Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2719Slc
	var yyhl2719 bool = l >= 0
	for yyj2719 := 0; ; yyj2719++ {
		if yyhl2719 {
			if yyj2719 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2719Slc = r.DecodeBytes(yys2719Slc, true, true)
		yys2719 := string(yys2719Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2719 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2722 := &x.ObjectMeta
				yyv2722.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2723 := &x.Secrets
				yym2724 := z.DecBinary()
				_ = yym2724
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2723), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2725 := &x.ImagePullSecrets
				yym2726 := z.DecBinary()
				_ = yym2726
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2725), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2719)
		} // end switch yys2719
	} // end for yyj2719
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2727 int
	var yyb2727 bool
	var yyhl2727 bool = l >= 0
	yyj2727++
	if yyhl2727 {
		yyb2727 = yyj2727 > l
	} else {
		yyb2727 = r.CheckBreak()
	}
	if yyb2727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2727++
	if yyhl2727 {
		yyb2727 = yyj2727 > l
	} else {
		yyb2727 = r.CheckBreak()
	}
	if yyb2727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2727++
	if yyhl2727 {
		yyb2727 = yyj2727 > l
	} else {
		yyb2727 = r.CheckBreak()
	}
	if yyb2727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2730 := &x.ObjectMeta
		yyv2730.CodecDecodeSelf(d)
	}
	yyj2727++
	if yyhl2727 {
		yyb2727 = yyj2727 > l
	} else {
		yyb2727 = r.CheckBreak()
	}
	if yyb2727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2731 := &x.Secrets
		yym2732 := z.DecBinary()
		_ = yym2732
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2731), d)
		}
	}
	yyj2727++
	if yyhl2727 {
		yyb2727 = yyj2727 > l
	} else {
		yyb2727 = r.CheckBreak()
	}
	if yyb2727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2733 := &x.ImagePullSecrets
		yym2734 := z.DecBinary()
		_ = yym2734
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2733), d)
		}
	}
	for {
		yyj2727++
		if yyhl2727 {
			yyb2727 = yyj2727 > l
		} else {
			yyb2727 = r.CheckBreak()
		}
		if yyb2727 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2727-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2735 := z.EncBinary()
		_ = yym2735
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2736 := !z.EncBinary()
			yy2arr2736 := z.EncBasicHandle().StructToArray
			var yyq2736 [4]bool
			_, _, _ = yysep2736, yyq2736, yy2arr2736
			const yyr2736 bool = false
			yyq2736[0] = x.Kind != ""
			yyq2736[1] = x.APIVersion != ""
			yyq2736[2] = true
			var yynn2736 int
			if yyr2736 || yy2arr2736 {
				r.EncodeArrayStart(4)
			} else {
				yynn2736 = 1
				for _, b := range yyq2736 {
					if b {
						yynn2736++
					}
				}
				r.EncodeMapStart(yynn2736)
				yynn2736 = 0
			}
			if yyr2736 || yy2arr2736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2736[0] {
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2736[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2739 := z.EncBinary()
					_ = yym2739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2736 || yy2arr2736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2736[1] {
					yym2741 := z.EncBinary()
					_ = yym2741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2736[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2742 := z.EncBinary()
					_ = yym2742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2736 || yy2arr2736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2736[2] {
					yy2744 := &x.ListMeta
					yym2745 := z.EncBinary()
					_ = yym2745
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2744) {
					} else {
						z.EncFallback(yy2744)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2736[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2746 := &x.ListMeta
					yym2747 := z.EncBinary()
					_ = yym2747
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2746) {
					} else {
						z.EncFallback(yy2746)
					}
				}
			}
			if yyr2736 || yy2arr2736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2750 := z.EncBinary()
					_ = yym2750
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2736 || yy2arr2736 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2751 := z.DecBinary()
	_ = yym2751
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2752 := r.ContainerType()
		if yyct2752 == codecSelferValueTypeMap1234 {
			yyl2752 := r.ReadMapStart()
			if yyl2752 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2752, d)
			}
		} else if yyct2752 == codecSelferValueTypeArray1234 {
			yyl2752 := r.ReadArrayStart()
			if yyl2752 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2752, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2753Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2753Slc
	var yyhl2753 bool = l >= 0
	for yyj2753 := 0; ; yyj2753++ {
		if yyhl2753 {
			if yyj2753 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2753Slc = r.DecodeBytes(yys2753Slc, true, true)
		yys2753 := string(yys2753Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2753 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2756 := &x.ListMeta
				yym2757 := z.DecBinary()
				_ = yym2757
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2756) {
				} else {
					z.DecFallback(yyv2756, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2758 := &x.Items
				yym2759 := z.DecBinary()
				_ = yym2759
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2758), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2753)
		} // end switch yys2753
	} // end for yyj2753
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2760 int
	var yyb2760 bool
	var yyhl2760 bool = l >= 0
	yyj2760++
	if yyhl2760 {
		yyb2760 = yyj2760 > l
	} else {
		yyb2760 = r.CheckBreak()
	}
	if yyb2760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2760++
	if yyhl2760 {
		yyb2760 = yyj2760 > l
	} else {
		yyb2760 = r.CheckBreak()
	}
	if yyb2760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2760++
	if yyhl2760 {
		yyb2760 = yyj2760 > l
	} else {
		yyb2760 = r.CheckBreak()
	}
	if yyb2760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2763 := &x.ListMeta
		yym2764 := z.DecBinary()
		_ = yym2764
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2763) {
		} else {
			z.DecFallback(yyv2763, false)
		}
	}
	yyj2760++
	if yyhl2760 {
		yyb2760 = yyj2760 > l
	} else {
		yyb2760 = r.CheckBreak()
	}
	if yyb2760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2765 := &x.Items
		yym2766 := z.DecBinary()
		_ = yym2766
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2765), d)
		}
	}
	for {
		yyj2760++
		if yyhl2760 {
			yyb2760 = yyj2760 > l
		} else {
			yyb2760 = r.CheckBreak()
		}
		if yyb2760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2767 := z.EncBinary()
		_ = yym2767
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2768 := !z.EncBinary()
			yy2arr2768 := z.EncBasicHandle().StructToArray
			var yyq2768 [4]bool
			_, _, _ = yysep2768, yyq2768, yy2arr2768
			const yyr2768 bool = false
			yyq2768[0] = x.Kind != ""
			yyq2768[1] = x.APIVersion != ""
			yyq2768[2] = true
			var yynn2768 int
			if yyr2768 || yy2arr2768 {
				r.EncodeArrayStart(4)
			} else {
				yynn2768 = 1
				for _, b := range yyq2768 {
					if b {
						yynn2768++
					}
				}
				r.EncodeMapStart(yynn2768)
				yynn2768 = 0
			}
			if yyr2768 || yy2arr2768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2768[0] {
					yym2770 := z.EncBinary()
					_ = yym2770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2768[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2771 := z.EncBinary()
					_ = yym2771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2768 || yy2arr2768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2768[1] {
					yym2773 := z.EncBinary()
					_ = yym2773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2768[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2774 := z.EncBinary()
					_ = yym2774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2768 || yy2arr2768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2768[2] {
					yy2776 := &x.ObjectMeta
					yy2776.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2768[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2777 := &x.ObjectMeta
					yy2777.CodecEncodeSelf(e)
				}
			}
			if yyr2768 || yy2arr2768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2779 := z.EncBinary()
					_ = yym2779
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2780 := z.EncBinary()
					_ = yym2780
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2768 || yy2arr2768 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2781 := z.DecBinary()
	_ = yym2781
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2782 := r.ContainerType()
		if yyct2782 == codecSelferValueTypeMap1234 {
			yyl2782 := r.ReadMapStart()
			if yyl2782 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2782, d)
			}
		} else if yyct2782 == codecSelferValueTypeArray1234 {
			yyl2782 := r.ReadArrayStart()
			if yyl2782 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2782, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2783Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2783Slc
	var yyhl2783 bool = l >= 0
	for yyj2783 := 0; ; yyj2783++ {
		if yyhl2783 {
			if yyj2783 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2783Slc = r.DecodeBytes(yys2783Slc, true, true)
		yys2783 := string(yys2783Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2783 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2786 := &x.ObjectMeta
				yyv2786.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2787 := &x.Subsets
				yym2788 := z.DecBinary()
				_ = yym2788
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2787), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2783)
		} // end switch yys2783
	} // end for yyj2783
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2789 int
	var yyb2789 bool
	var yyhl2789 bool = l >= 0
	yyj2789++
	if yyhl2789 {
		yyb2789 = yyj2789 > l
	} else {
		yyb2789 = r.CheckBreak()
	}
	if yyb2789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2789++
	if yyhl2789 {
		yyb2789 = yyj2789 > l
	} else {
		yyb2789 = r.CheckBreak()
	}
	if yyb2789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2789++
	if yyhl2789 {
		yyb2789 = yyj2789 > l
	} else {
		yyb2789 = r.CheckBreak()
	}
	if yyb2789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2792 := &x.ObjectMeta
		yyv2792.CodecDecodeSelf(d)
	}
	yyj2789++
	if yyhl2789 {
		yyb2789 = yyj2789 > l
	} else {
		yyb2789 = r.CheckBreak()
	}
	if yyb2789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2793 := &x.Subsets
		yym2794 := z.DecBinary()
		_ = yym2794
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2793), d)
		}
	}
	for {
		yyj2789++
		if yyhl2789 {
			yyb2789 = yyj2789 > l
		} else {
			yyb2789 = r.CheckBreak()
		}
		if yyb2789 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2789-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2795 := z.EncBinary()
		_ = yym2795
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2796 := !z.EncBinary()
			yy2arr2796 := z.EncBasicHandle().StructToArray
			var yyq2796 [3]bool
			_, _, _ = yysep2796, yyq2796, yy2arr2796
			const yyr2796 bool = false
			yyq2796[0] = len(x.Addresses) != 0
			yyq2796[1] = len(x.NotReadyAddresses) != 0
			yyq2796[2] = len(x.Ports) != 0
			var yynn2796 int
			if yyr2796 || yy2arr2796 {
				r.EncodeArrayStart(3)
			} else {
				yynn2796 = 0
				for _, b := range yyq2796 {
					if b {
						yynn2796++
					}
				}
				r.EncodeMapStart(yynn2796)
				yynn2796 = 0
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2798 := z.EncBinary()
						_ = yym2798
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2796[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2799 := z.EncBinary()
						_ = yym2799
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2801 := z.EncBinary()
						_ = yym2801
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2796[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2802 := z.EncBinary()
						_ = yym2802
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2804 := z.EncBinary()
						_ = yym2804
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2796[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2805 := z.EncBinary()
						_ = yym2805
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2806 := z.DecBinary()
	_ = yym2806
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2807 := r.ContainerType()
		if yyct2807 == codecSelferValueTypeMap1234 {
			yyl2807 := r.ReadMapStart()
			if yyl2807 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2807, d)
			}
		} else if yyct2807 == codecSelferValueTypeArray1234 {
			yyl2807 := r.ReadArrayStart()
			if yyl2807 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2807, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2808Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2808Slc
	var yyhl2808 bool = l >= 0
	for yyj2808 := 0; ; yyj2808++ {
		if yyhl2808 {
			if yyj2808 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2808Slc = r.DecodeBytes(yys2808Slc, true, true)
		yys2808 := string(yys2808Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2808 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2809 := &x.Addresses
				yym2810 := z.DecBinary()
				_ = yym2810
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2809), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2811 := &x.NotReadyAddresses
				yym2812 := z.DecBinary()
				_ = yym2812
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2811), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2813 := &x.Ports
				yym2814 := z.DecBinary()
				_ = yym2814
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2813), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2808)
		} // end switch yys2808
	} // end for yyj2808
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2815 int
	var yyb2815 bool
	var yyhl2815 bool = l >= 0
	yyj2815++
	if yyhl2815 {
		yyb2815 = yyj2815 > l
	} else {
		yyb2815 = r.CheckBreak()
	}
	if yyb2815 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2816 := &x.Addresses
		yym2817 := z.DecBinary()
		_ = yym2817
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2816), d)
		}
	}
	yyj2815++
	if yyhl2815 {
		yyb2815 = yyj2815 > l
	} else {
		yyb2815 = r.CheckBreak()
	}
	if yyb2815 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2818 := &x.NotReadyAddresses
		yym2819 := z.DecBinary()
		_ = yym2819
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2818), d)
		}
	}
	yyj2815++
	if yyhl2815 {
		yyb2815 = yyj2815 > l
	} else {
		yyb2815 = r.CheckBreak()
	}
	if yyb2815 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2820 := &x.Ports
		yym2821 := z.DecBinary()
		_ = yym2821
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2820), d)
		}
	}
	for {
		yyj2815++
		if yyhl2815 {
			yyb2815 = yyj2815 > l
		} else {
			yyb2815 = r.CheckBreak()
		}
		if yyb2815 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2815-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2822 := z.EncBinary()
		_ = yym2822
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2823 := !z.EncBinary()
			yy2arr2823 := z.EncBasicHandle().StructToArray
			var yyq2823 [4]bool
			_, _, _ = yysep2823, yyq2823, yy2arr2823
			const yyr2823 bool = false
			yyq2823[1] = x.Hostname != ""
			yyq2823[2] = x.NodeName != nil
			yyq2823[3] = x.TargetRef != nil
			var yynn2823 int
			if yyr2823 || yy2arr2823 {
				r.EncodeArrayStart(4)
			} else {
				yynn2823 = 1
				for _, b := range yyq2823 {
					if b {
						yynn2823++
					}
				}
				r.EncodeMapStart(yynn2823)
				yynn2823 = 0
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2825 := z.EncBinary()
				_ = yym2825
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2826 := z.EncBinary()
				_ = yym2826
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2823[1] {
					yym2828 := z.EncBinary()
					_ = yym2828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2823[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2829 := z.EncBinary()
					_ = yym2829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2823[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2831 := *x.NodeName
						yym2832 := z.EncBinary()
						_ = yym2832
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2831))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2823[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2833 := *x.NodeName
						yym2834 := z.EncBinary()
						_ = yym2834
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2833))
						}
					}
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2823[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2823[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2823 || yy2arr2823 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2836 := z.DecBinary()
	_ = yym2836
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2837 := r.ContainerType()
		if yyct2837 == codecSelferValueTypeMap1234 {
			yyl2837 := r.ReadMapStart()
			if yyl2837 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2837, d)
			}
		} else if yyct2837 == codecSelferValueTypeArray1234 {
			yyl2837 := r.ReadArrayStart()
			if yyl2837 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2837, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2838Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2838Slc
	var yyhl2838 bool = l >= 0
	for yyj2838 := 0; ; yyj2838++ {
		if yyhl2838 {
			if yyj2838 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2838Slc = r.DecodeBytes(yys2838Slc, true, true)
		yys2838 := string(yys2838Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2838 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2842 := z.DecBinary()
				_ = yym2842
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2838)
		} // end switch yys2838
	} // end for yyj2838
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2844 int
	var yyb2844 bool
	var yyhl2844 bool = l >= 0
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2848 := z.DecBinary()
		_ = yym2848
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2844++
		if yyhl2844 {
			yyb2844 = yyj2844 > l
		} else {
			yyb2844 = r.CheckBreak()
		}
		if yyb2844 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2844-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2850 := z.EncBinary()
		_ = yym2850
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2851 := !z.EncBinary()
			yy2arr2851 := z.EncBasicHandle().StructToArray
			var yyq2851 [3]bool
			_, _, _ = yysep2851, yyq2851, yy2arr2851
			const yyr2851 bool = false
			yyq2851[0] = x.Name != ""
			yyq2851[2] = x.Protocol != ""
			var yynn2851 int
			if yyr2851 || yy2arr2851 {
				r.EncodeArrayStart(3)
			} else {
				yynn2851 = 1
				for _, b := range yyq2851 {
					if b {
						yynn2851++
					}
				}
				r.EncodeMapStart(yynn2851)
				yynn2851 = 0
			}
			if yyr2851 || yy2arr2851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2851[0] {
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2851[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2851 || yy2arr2851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2856 := z.EncBinary()
				_ = yym2856
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2857 := z.EncBinary()
				_ = yym2857
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2851 || yy2arr2851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2851[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2851[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2851 || yy2arr2851 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2859 := z.DecBinary()
	_ = yym2859
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2860 := r.ContainerType()
		if yyct2860 == codecSelferValueTypeMap1234 {
			yyl2860 := r.ReadMapStart()
			if yyl2860 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2860, d)
			}
		} else if yyct2860 == codecSelferValueTypeArray1234 {
			yyl2860 := r.ReadArrayStart()
			if yyl2860 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2860, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2861Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2861Slc
	var yyhl2861 bool = l >= 0
	for yyj2861 := 0; ; yyj2861++ {
		if yyhl2861 {
			if yyj2861 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2861Slc = r.DecodeBytes(yys2861Slc, true, true)
		yys2861 := string(yys2861Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2861 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2861)
		} // end switch yys2861
	} // end for yyj2861
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2865 int
	var yyb2865 bool
	var yyhl2865 bool = l >= 0
	yyj2865++
	if yyhl2865 {
		yyb2865 = yyj2865 > l
	} else {
		yyb2865 = r.CheckBreak()
	}
	if yyb2865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2865++
	if yyhl2865 {
		yyb2865 = yyj2865 > l
	} else {
		yyb2865 = r.CheckBreak()
	}
	if yyb2865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2865++
	if yyhl2865 {
		yyb2865 = yyj2865 > l
	} else {
		yyb2865 = r.CheckBreak()
	}
	if yyb2865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2865++
		if yyhl2865 {
			yyb2865 = yyj2865 > l
		} else {
			yyb2865 = r.CheckBreak()
		}
		if yyb2865 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2865-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2869 := z.EncBinary()
		_ = yym2869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2870 := !z.EncBinary()
			yy2arr2870 := z.EncBasicHandle().StructToArray
			var yyq2870 [4]bool
			_, _, _ = yysep2870, yyq2870, yy2arr2870
			const yyr2870 bool = false
			yyq2870[0] = x.Kind != ""
			yyq2870[1] = x.APIVersion != ""
			yyq2870[2] = true
			var yynn2870 int
			if yyr2870 || yy2arr2870 {
				r.EncodeArrayStart(4)
			} else {
				yynn2870 = 1
				for _, b := range yyq2870 {
					if b {
						yynn2870++
					}
				}
				r.EncodeMapStart(yynn2870)
				yynn2870 = 0
			}
			if yyr2870 || yy2arr2870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2870[0] {
					yym2872 := z.EncBinary()
					_ = yym2872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2870[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2873 := z.EncBinary()
					_ = yym2873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2870 || yy2arr2870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2870[1] {
					yym2875 := z.EncBinary()
					_ = yym2875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2870[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2870 || yy2arr2870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2870[2] {
					yy2878 := &x.ListMeta
					yym2879 := z.EncBinary()
					_ = yym2879
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2878) {
					} else {
						z.EncFallback(yy2878)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2870[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2880 := &x.ListMeta
					yym2881 := z.EncBinary()
					_ = yym2881
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2880) {
					} else {
						z.EncFallback(yy2880)
					}
				}
			}
			if yyr2870 || yy2arr2870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2883 := z.EncBinary()
					_ = yym2883
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2884 := z.EncBinary()
					_ = yym2884
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2870 || yy2arr2870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2885 := z.DecBinary()
	_ = yym2885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2886 := r.ContainerType()
		if yyct2886 == codecSelferValueTypeMap1234 {
			yyl2886 := r.ReadMapStart()
			if yyl2886 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2886, d)
			}
		} else if yyct2886 == codecSelferValueTypeArray1234 {
			yyl2886 := r.ReadArrayStart()
			if yyl2886 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2887Slc
	var yyhl2887 bool = l >= 0
	for yyj2887 := 0; ; yyj2887++ {
		if yyhl2887 {
			if yyj2887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2887Slc = r.DecodeBytes(yys2887Slc, true, true)
		yys2887 := string(yys2887Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2887 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2890 := &x.ListMeta
				yym2891 := z.DecBinary()
				_ = yym2891
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2890) {
				} else {
					z.DecFallback(yyv2890, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2892 := &x.Items
				yym2893 := z.DecBinary()
				_ = yym2893
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2892), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2887)
		} // end switch yys2887
	} // end for yyj2887
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2894 int
	var yyb2894 bool
	var yyhl2894 bool = l >= 0
	yyj2894++
	if yyhl2894 {
		yyb2894 = yyj2894 > l
	} else {
		yyb2894 = r.CheckBreak()
	}
	if yyb2894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2894++
	if yyhl2894 {
		yyb2894 = yyj2894 > l
	} else {
		yyb2894 = r.CheckBreak()
	}
	if yyb2894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2894++
	if yyhl2894 {
		yyb2894 = yyj2894 > l
	} else {
		yyb2894 = r.CheckBreak()
	}
	if yyb2894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2897 := &x.ListMeta
		yym2898 := z.DecBinary()
		_ = yym2898
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2897) {
		} else {
			z.DecFallback(yyv2897, false)
		}
	}
	yyj2894++
	if yyhl2894 {
		yyb2894 = yyj2894 > l
	} else {
		yyb2894 = r.CheckBreak()
	}
	if yyb2894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2899 := &x.Items
		yym2900 := z.DecBinary()
		_ = yym2900
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2899), d)
		}
	}
	for {
		yyj2894++
		if yyhl2894 {
			yyb2894 = yyj2894 > l
		} else {
			yyb2894 = r.CheckBreak()
		}
		if yyb2894 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2894-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2901 := z.EncBinary()
		_ = yym2901
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2902 := !z.EncBinary()
			yy2arr2902 := z.EncBasicHandle().StructToArray
			var yyq2902 [4]bool
			_, _, _ = yysep2902, yyq2902, yy2arr2902
			const yyr2902 bool = false
			yyq2902[0] = x.PodCIDR != ""
			yyq2902[1] = x.ExternalID != ""
			yyq2902[2] = x.ProviderID != ""
			yyq2902[3] = x.Unschedulable != false
			var yynn2902 int
			if yyr2902 || yy2arr2902 {
				r.EncodeArrayStart(4)
			} else {
				yynn2902 = 0
				for _, b := range yyq2902 {
					if b {
						yynn2902++
					}
				}
				r.EncodeMapStart(yynn2902)
				yynn2902 = 0
			}
			if yyr2902 || yy2arr2902 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2902[0] {
					yym2904 := z.EncBinary()
					_ = yym2904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2902[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2905 := z.EncBinary()
					_ = yym2905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2902 || yy2arr2902 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2902[1] {
					yym2907 := z.EncBinary()
					_ = yym2907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2902[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2908 := z.EncBinary()
					_ = yym2908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2902 || yy2arr2902 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2902[2] {
					yym2910 := z.EncBinary()
					_ = yym2910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2902[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2911 := z.EncBinary()
					_ = yym2911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2902 || yy2arr2902 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2902[3] {
					yym2913 := z.EncBinary()
					_ = yym2913
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2902[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2902 || yy2arr2902 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2915 := z.DecBinary()
	_ = yym2915
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2916 := r.ContainerType()
		if yyct2916 == codecSelferValueTypeMap1234 {
			yyl2916 := r.ReadMapStart()
			if yyl2916 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2916, d)
			}
		} else if yyct2916 == codecSelferValueTypeArray1234 {
			yyl2916 := r.ReadArrayStart()
			if yyl2916 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2916, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2917Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2917Slc
	var yyhl2917 bool = l >= 0
	for yyj2917 := 0; ; yyj2917++ {
		if yyhl2917 {
			if yyj2917 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2917Slc = r.DecodeBytes(yys2917Slc, true, true)
		yys2917 := string(yys2917Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2917 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2917)
		} // end switch yys2917
	} // end for yyj2917
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2922 int
	var yyb2922 bool
	var yyhl2922 bool = l >= 0
	yyj2922++
	if yyhl2922 {
		yyb2922 = yyj2922 > l
	} else {
		yyb2922 = r.CheckBreak()
	}
	if yyb2922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2922++
	if yyhl2922 {
		yyb2922 = yyj2922 > l
	} else {
		yyb2922 = r.CheckBreak()
	}
	if yyb2922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2922++
	if yyhl2922 {
		yyb2922 = yyj2922 > l
	} else {
		yyb2922 = r.CheckBreak()
	}
	if yyb2922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2922++
	if yyhl2922 {
		yyb2922 = yyj2922 > l
	} else {
		yyb2922 = r.CheckBreak()
	}
	if yyb2922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2922++
		if yyhl2922 {
			yyb2922 = yyj2922 > l
		} else {
			yyb2922 = r.CheckBreak()
		}
		if yyb2922 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2922-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2927 := z.EncBinary()
		_ = yym2927
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2928 := !z.EncBinary()
			yy2arr2928 := z.EncBasicHandle().StructToArray
			var yyq2928 [1]bool
			_, _, _ = yysep2928, yyq2928, yy2arr2928
			const yyr2928 bool = false
			var yynn2928 int
			if yyr2928 || yy2arr2928 {
				r.EncodeArrayStart(1)
			} else {
				yynn2928 = 1
				for _, b := range yyq2928 {
					if b {
						yynn2928++
					}
				}
				r.EncodeMapStart(yynn2928)
				yynn2928 = 0
			}
			if yyr2928 || yy2arr2928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2930 := z.EncBinary()
				_ = yym2930
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2931 := z.EncBinary()
				_ = yym2931
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2928 || yy2arr2928 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2932 := z.DecBinary()
	_ = yym2932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2933 := r.ContainerType()
		if yyct2933 == codecSelferValueTypeMap1234 {
			yyl2933 := r.ReadMapStart()
			if yyl2933 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2933, d)
			}
		} else if yyct2933 == codecSelferValueTypeArray1234 {
			yyl2933 := r.ReadArrayStart()
			if yyl2933 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2934Slc
	var yyhl2934 bool = l >= 0
	for yyj2934 := 0; ; yyj2934++ {
		if yyhl2934 {
			if yyj2934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2934Slc = r.DecodeBytes(yys2934Slc, true, true)
		yys2934 := string(yys2934Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2934 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2934)
		} // end switch yys2934
	} // end for yyj2934
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2936 int
	var yyb2936 bool
	var yyhl2936 bool = l >= 0
	yyj2936++
	if yyhl2936 {
		yyb2936 = yyj2936 > l
	} else {
		yyb2936 = r.CheckBreak()
	}
	if yyb2936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2936++
		if yyhl2936 {
			yyb2936 = yyj2936 > l
		} else {
			yyb2936 = r.CheckBreak()
		}
		if yyb2936 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2936-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2938 := z.EncBinary()
		_ = yym2938
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2939 := !z.EncBinary()
			yy2arr2939 := z.EncBasicHandle().StructToArray
			var yyq2939 [1]bool
			_, _, _ = yysep2939, yyq2939, yy2arr2939
			const yyr2939 bool = false
			yyq2939[0] = true
			var yynn2939 int
			if yyr2939 || yy2arr2939 {
				r.EncodeArrayStart(1)
			} else {
				yynn2939 = 0
				for _, b := range yyq2939 {
					if b {
						yynn2939++
					}
				}
				r.EncodeMapStart(yynn2939)
				yynn2939 = 0
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2939[0] {
					yy2941 := &x.KubeletEndpoint
					yy2941.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2939[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2942 := &x.KubeletEndpoint
					yy2942.CodecEncodeSelf(e)
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2943 := z.DecBinary()
	_ = yym2943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2944 := r.ContainerType()
		if yyct2944 == codecSelferValueTypeMap1234 {
			yyl2944 := r.ReadMapStart()
			if yyl2944 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2944, d)
			}
		} else if yyct2944 == codecSelferValueTypeArray1234 {
			yyl2944 := r.ReadArrayStart()
			if yyl2944 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2945Slc
	var yyhl2945 bool = l >= 0
	for yyj2945 := 0; ; yyj2945++ {
		if yyhl2945 {
			if yyj2945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2945Slc = r.DecodeBytes(yys2945Slc, true, true)
		yys2945 := string(yys2945Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2945 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2946 := &x.KubeletEndpoint
				yyv2946.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2945)
		} // end switch yys2945
	} // end for yyj2945
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2947 int
	var yyb2947 bool
	var yyhl2947 bool = l >= 0
	yyj2947++
	if yyhl2947 {
		yyb2947 = yyj2947 > l
	} else {
		yyb2947 = r.CheckBreak()
	}
	if yyb2947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2948 := &x.KubeletEndpoint
		yyv2948.CodecDecodeSelf(d)
	}
	for {
		yyj2947++
		if yyhl2947 {
			yyb2947 = yyj2947 > l
		} else {
			yyb2947 = r.CheckBreak()
		}
		if yyb2947 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2947-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2949 := z.EncBinary()
		_ = yym2949
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2950 := !z.EncBinary()
			yy2arr2950 := z.EncBasicHandle().StructToArray
			var yyq2950 [10]bool
			_, _, _ = yysep2950, yyq2950, yy2arr2950
			const yyr2950 bool = false
			var yynn2950 int
			if yyr2950 || yy2arr2950 {
				r.EncodeArrayStart(10)
			} else {
				yynn2950 = 10
				for _, b := range yyq2950 {
					if b {
						yynn2950++
					}
				}
				r.EncodeMapStart(yynn2950)
				yynn2950 = 0
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2952 := z.EncBinary()
				_ = yym2952
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2953 := z.EncBinary()
				_ = yym2953
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2955 := z.EncBinary()
				_ = yym2955
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2956 := z.EncBinary()
				_ = yym2956
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2958 := z.EncBinary()
				_ = yym2958
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2959 := z.EncBinary()
				_ = yym2959
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2961 := z.EncBinary()
				_ = yym2961
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2962 := z.EncBinary()
				_ = yym2962
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2964 := z.EncBinary()
				_ = yym2964
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2965 := z.EncBinary()
				_ = yym2965
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2967 := z.EncBinary()
				_ = yym2967
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2968 := z.EncBinary()
				_ = yym2968
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2970 := z.EncBinary()
				_ = yym2970
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2971 := z.EncBinary()
				_ = yym2971
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2973 := z.EncBinary()
				_ = yym2973
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2974 := z.EncBinary()
				_ = yym2974
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2976 := z.EncBinary()
				_ = yym2976
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2977 := z.EncBinary()
				_ = yym2977
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2979 := z.EncBinary()
				_ = yym2979
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2980 := z.EncBinary()
				_ = yym2980
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2981 := z.DecBinary()
	_ = yym2981
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2982 := r.ContainerType()
		if yyct2982 == codecSelferValueTypeMap1234 {
			yyl2982 := r.ReadMapStart()
			if yyl2982 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2982, d)
			}
		} else if yyct2982 == codecSelferValueTypeArray1234 {
			yyl2982 := r.ReadArrayStart()
			if yyl2982 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2982, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2983Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2983Slc
	var yyhl2983 bool = l >= 0
	for yyj2983 := 0; ; yyj2983++ {
		if yyhl2983 {
			if yyj2983 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2983Slc = r.DecodeBytes(yys2983Slc, true, true)
		yys2983 := string(yys2983Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2983 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2983)
		} // end switch yys2983
	} // end for yyj2983
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2994 int
	var yyb2994 bool
	var yyhl2994 bool = l >= 0
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2994++
		if yyhl2994 {
			yyb2994 = yyj2994 > l
		} else {
			yyb2994 = r.CheckBreak()
		}
		if yyb2994 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2994-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3005 := z.EncBinary()
		_ = yym3005
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3006 := !z.EncBinary()
			yy2arr3006 := z.EncBasicHandle().StructToArray
			var yyq3006 [10]bool
			_, _, _ = yysep3006, yyq3006, yy2arr3006
			const yyr3006 bool = false
			yyq3006[0] = len(x.Capacity) != 0
			yyq3006[1] = len(x.Allocatable) != 0
			yyq3006[2] = x.Phase != ""
			yyq3006[3] = len(x.Conditions) != 0
			yyq3006[4] = len(x.Addresses) != 0
			yyq3006[5] = true
			yyq3006[6] = true
			yyq3006[7] = len(x.Images) != 0
			yyq3006[8] = len(x.VolumesInUse) != 0
			yyq3006[9] = len(x.VolumesAttached) != 0
			var yynn3006 int
			if yyr3006 || yy2arr3006 {
				r.EncodeArrayStart(10)
			} else {
				yynn3006 = 0
				for _, b := range yyq3006 {
					if b {
						yynn3006++
					}
				}
				r.EncodeMapStart(yynn3006)
				yynn3006 = 0
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3006[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3006[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3006[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3006[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3006[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3006[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3006[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3011 := z.EncBinary()
						_ = yym3011
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3006[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3012 := z.EncBinary()
						_ = yym3012
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3006[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3014 := z.EncBinary()
						_ = yym3014
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3006[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3015 := z.EncBinary()
						_ = yym3015
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3006[5] {
					yy3017 := &x.DaemonEndpoints
					yy3017.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3006[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3018 := &x.DaemonEndpoints
					yy3018.CodecEncodeSelf(e)
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3006[6] {
					yy3020 := &x.NodeInfo
					yy3020.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3006[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3021 := &x.NodeInfo
					yy3021.CodecEncodeSelf(e)
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3006[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3023 := z.EncBinary()
						_ = yym3023
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3006[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3024 := z.EncBinary()
						_ = yym3024
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3006[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3026 := z.EncBinary()
						_ = yym3026
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3006[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3027 := z.EncBinary()
						_ = yym3027
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3006[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3029 := z.EncBinary()
						_ = yym3029
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3006[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3030 := z.EncBinary()
						_ = yym3030
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3006 || yy2arr3006 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3031 := z.DecBinary()
	_ = yym3031
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3032 := r.ContainerType()
		if yyct3032 == codecSelferValueTypeMap1234 {
			yyl3032 := r.ReadMapStart()
			if yyl3032 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3032, d)
			}
		} else if yyct3032 == codecSelferValueTypeArray1234 {
			yyl3032 := r.ReadArrayStart()
			if yyl3032 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3032, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3033Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3033Slc
	var yyhl3033 bool = l >= 0
	for yyj3033 := 0; ; yyj3033++ {
		if yyhl3033 {
			if yyj3033 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3033Slc = r.DecodeBytes(yys3033Slc, true, true)
		yys3033 := string(yys3033Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3033 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3034 := &x.Capacity
				yyv3034.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3035 := &x.Allocatable
				yyv3035.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3037 := &x.Conditions
				yym3038 := z.DecBinary()
				_ = yym3038
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3037), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3039 := &x.Addresses
				yym3040 := z.DecBinary()
				_ = yym3040
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3039), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3041 := &x.DaemonEndpoints
				yyv3041.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3042 := &x.NodeInfo
				yyv3042.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3043 := &x.Images
				yym3044 := z.DecBinary()
				_ = yym3044
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3043), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3045 := &x.VolumesInUse
				yym3046 := z.DecBinary()
				_ = yym3046
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3045), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3047 := &x.VolumesAttached
				yym3048 := z.DecBinary()
				_ = yym3048
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3047), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3033)
		} // end switch yys3033
	} // end for yyj3033
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3049 int
	var yyb3049 bool
	var yyhl3049 bool = l >= 0
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3050 := &x.Capacity
		yyv3050.CodecDecodeSelf(d)
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3051 := &x.Allocatable
		yyv3051.CodecDecodeSelf(d)
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3053 := &x.Conditions
		yym3054 := z.DecBinary()
		_ = yym3054
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3053), d)
		}
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3055 := &x.Addresses
		yym3056 := z.DecBinary()
		_ = yym3056
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3055), d)
		}
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3057 := &x.DaemonEndpoints
		yyv3057.CodecDecodeSelf(d)
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3058 := &x.NodeInfo
		yyv3058.CodecDecodeSelf(d)
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3059 := &x.Images
		yym3060 := z.DecBinary()
		_ = yym3060
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3059), d)
		}
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3061 := &x.VolumesInUse
		yym3062 := z.DecBinary()
		_ = yym3062
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3061), d)
		}
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3063 := &x.VolumesAttached
		yym3064 := z.DecBinary()
		_ = yym3064
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3063), d)
		}
	}
	for {
		yyj3049++
		if yyhl3049 {
			yyb3049 = yyj3049 > l
		} else {
			yyb3049 = r.CheckBreak()
		}
		if yyb3049 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3049-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3065 := z.EncBinary()
	_ = yym3065
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3066 := z.DecBinary()
	_ = yym3066
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3067 := z.EncBinary()
		_ = yym3067
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3068 := !z.EncBinary()
			yy2arr3068 := z.EncBasicHandle().StructToArray
			var yyq3068 [2]bool
			_, _, _ = yysep3068, yyq3068, yy2arr3068
			const yyr3068 bool = false
			var yynn3068 int
			if yyr3068 || yy2arr3068 {
				r.EncodeArrayStart(2)
			} else {
				yynn3068 = 2
				for _, b := range yyq3068 {
					if b {
						yynn3068++
					}
				}
				r.EncodeMapStart(yynn3068)
				yynn3068 = 0
			}
			if yyr3068 || yy2arr3068 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3068 || yy2arr3068 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3071 := z.EncBinary()
				_ = yym3071
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3072 := z.EncBinary()
				_ = yym3072
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3068 || yy2arr3068 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3073 := z.DecBinary()
	_ = yym3073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3074 := r.ContainerType()
		if yyct3074 == codecSelferValueTypeMap1234 {
			yyl3074 := r.ReadMapStart()
			if yyl3074 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3074, d)
			}
		} else if yyct3074 == codecSelferValueTypeArray1234 {
			yyl3074 := r.ReadArrayStart()
			if yyl3074 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3075Slc
	var yyhl3075 bool = l >= 0
	for yyj3075 := 0; ; yyj3075++ {
		if yyhl3075 {
			if yyj3075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3075Slc = r.DecodeBytes(yys3075Slc, true, true)
		yys3075 := string(yys3075Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3075 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3075)
		} // end switch yys3075
	} // end for yyj3075
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3078 int
	var yyb3078 bool
	var yyhl3078 bool = l >= 0
	yyj3078++
	if yyhl3078 {
		yyb3078 = yyj3078 > l
	} else {
		yyb3078 = r.CheckBreak()
	}
	if yyb3078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3078++
	if yyhl3078 {
		yyb3078 = yyj3078 > l
	} else {
		yyb3078 = r.CheckBreak()
	}
	if yyb3078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3078++
		if yyhl3078 {
			yyb3078 = yyj3078 > l
		} else {
			yyb3078 = r.CheckBreak()
		}
		if yyb3078 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3078-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3081 := z.EncBinary()
		_ = yym3081
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3082 := !z.EncBinary()
			yy2arr3082 := z.EncBasicHandle().StructToArray
			var yyq3082 [1]bool
			_, _, _ = yysep3082, yyq3082, yy2arr3082
			const yyr3082 bool = false
			yyq3082[0] = len(x.PreferAvoidPods) != 0
			var yynn3082 int
			if yyr3082 || yy2arr3082 {
				r.EncodeArrayStart(1)
			} else {
				yynn3082 = 0
				for _, b := range yyq3082 {
					if b {
						yynn3082++
					}
				}
				r.EncodeMapStart(yynn3082)
				yynn3082 = 0
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3082[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3084 := z.EncBinary()
						_ = yym3084
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3082[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3085 := z.EncBinary()
						_ = yym3085
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3086 := z.DecBinary()
	_ = yym3086
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3087 := r.ContainerType()
		if yyct3087 == codecSelferValueTypeMap1234 {
			yyl3087 := r.ReadMapStart()
			if yyl3087 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3087, d)
			}
		} else if yyct3087 == codecSelferValueTypeArray1234 {
			yyl3087 := r.ReadArrayStart()
			if yyl3087 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3087, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3088Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3088Slc
	var yyhl3088 bool = l >= 0
	for yyj3088 := 0; ; yyj3088++ {
		if yyhl3088 {
			if yyj3088 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3088Slc = r.DecodeBytes(yys3088Slc, true, true)
		yys3088 := string(yys3088Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3088 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3089 := &x.PreferAvoidPods
				yym3090 := z.DecBinary()
				_ = yym3090
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3089), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3088)
		} // end switch yys3088
	} // end for yyj3088
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3091 int
	var yyb3091 bool
	var yyhl3091 bool = l >= 0
	yyj3091++
	if yyhl3091 {
		yyb3091 = yyj3091 > l
	} else {
		yyb3091 = r.CheckBreak()
	}
	if yyb3091 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3092 := &x.PreferAvoidPods
		yym3093 := z.DecBinary()
		_ = yym3093
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3092), d)
		}
	}
	for {
		yyj3091++
		if yyhl3091 {
			yyb3091 = yyj3091 > l
		} else {
			yyb3091 = r.CheckBreak()
		}
		if yyb3091 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3091-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3094 := z.EncBinary()
		_ = yym3094
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3095 := !z.EncBinary()
			yy2arr3095 := z.EncBasicHandle().StructToArray
			var yyq3095 [4]bool
			_, _, _ = yysep3095, yyq3095, yy2arr3095
			const yyr3095 bool = false
			yyq3095[1] = true
			yyq3095[2] = x.Reason != ""
			yyq3095[3] = x.Message != ""
			var yynn3095 int
			if yyr3095 || yy2arr3095 {
				r.EncodeArrayStart(4)
			} else {
				yynn3095 = 1
				for _, b := range yyq3095 {
					if b {
						yynn3095++
					}
				}
				r.EncodeMapStart(yynn3095)
				yynn3095 = 0
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3097 := &x.PodSignature
				yy3097.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3098 := &x.PodSignature
				yy3098.CodecEncodeSelf(e)
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3095[1] {
					yy3100 := &x.EvictionTime
					yym3101 := z.EncBinary()
					_ = yym3101
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3100) {
					} else if yym3101 {
						z.EncBinaryMarshal(yy3100)
					} else if !yym3101 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3100)
					} else {
						z.EncFallback(yy3100)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3095[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3102 := &x.EvictionTime
					yym3103 := z.EncBinary()
					_ = yym3103
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3102) {
					} else if yym3103 {
						z.EncBinaryMarshal(yy3102)
					} else if !yym3103 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3102)
					} else {
						z.EncFallback(yy3102)
					}
				}
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3095[2] {
					yym3105 := z.EncBinary()
					_ = yym3105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3095[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3106 := z.EncBinary()
					_ = yym3106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3095[3] {
					yym3108 := z.EncBinary()
					_ = yym3108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3095[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3109 := z.EncBinary()
					_ = yym3109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3095 || yy2arr3095 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3110 := z.DecBinary()
	_ = yym3110
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3111 := r.ContainerType()
		if yyct3111 == codecSelferValueTypeMap1234 {
			yyl3111 := r.ReadMapStart()
			if yyl3111 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3111, d)
			}
		} else if yyct3111 == codecSelferValueTypeArray1234 {
			yyl3111 := r.ReadArrayStart()
			if yyl3111 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3111, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3112Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3112Slc
	var yyhl3112 bool = l >= 0
	for yyj3112 := 0; ; yyj3112++ {
		if yyhl3112 {
			if yyj3112 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3112Slc = r.DecodeBytes(yys3112Slc, true, true)
		yys3112 := string(yys3112Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3112 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3113 := &x.PodSignature
				yyv3113.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3114 := &x.EvictionTime
				yym3115 := z.DecBinary()
				_ = yym3115
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3114) {
				} else if yym3115 {
					z.DecBinaryUnmarshal(yyv3114)
				} else if !yym3115 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3114)
				} else {
					z.DecFallback(yyv3114, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3112)
		} // end switch yys3112
	} // end for yyj3112
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3118 int
	var yyb3118 bool
	var yyhl3118 bool = l >= 0
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3119 := &x.PodSignature
		yyv3119.CodecDecodeSelf(d)
	}
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3120 := &x.EvictionTime
		yym3121 := z.DecBinary()
		_ = yym3121
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3120) {
		} else if yym3121 {
			z.DecBinaryUnmarshal(yyv3120)
		} else if !yym3121 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3120)
		} else {
			z.DecFallback(yyv3120, false)
		}
	}
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3118++
	if yyhl3118 {
		yyb3118 = yyj3118 > l
	} else {
		yyb3118 = r.CheckBreak()
	}
	if yyb3118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3118++
		if yyhl3118 {
			yyb3118 = yyj3118 > l
		} else {
			yyb3118 = r.CheckBreak()
		}
		if yyb3118 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3118-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3124 := z.EncBinary()
		_ = yym3124
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3125 := !z.EncBinary()
			yy2arr3125 := z.EncBasicHandle().StructToArray
			var yyq3125 [1]bool
			_, _, _ = yysep3125, yyq3125, yy2arr3125
			const yyr3125 bool = false
			yyq3125[0] = x.PodController != nil
			var yynn3125 int
			if yyr3125 || yy2arr3125 {
				r.EncodeArrayStart(1)
			} else {
				yynn3125 = 0
				for _, b := range yyq3125 {
					if b {
						yynn3125++
					}
				}
				r.EncodeMapStart(yynn3125)
				yynn3125 = 0
			}
			if yyr3125 || yy2arr3125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3125[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3125[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3125 || yy2arr3125 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3127 := z.DecBinary()
	_ = yym3127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3128 := r.ContainerType()
		if yyct3128 == codecSelferValueTypeMap1234 {
			yyl3128 := r.ReadMapStart()
			if yyl3128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3128, d)
			}
		} else if yyct3128 == codecSelferValueTypeArray1234 {
			yyl3128 := r.ReadArrayStart()
			if yyl3128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3129Slc
	var yyhl3129 bool = l >= 0
	for yyj3129 := 0; ; yyj3129++ {
		if yyhl3129 {
			if yyj3129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3129Slc = r.DecodeBytes(yys3129Slc, true, true)
		yys3129 := string(yys3129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3129 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3129)
		} // end switch yys3129
	} // end for yyj3129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3131 int
	var yyb3131 bool
	var yyhl3131 bool = l >= 0
	yyj3131++
	if yyhl3131 {
		yyb3131 = yyj3131 > l
	} else {
		yyb3131 = r.CheckBreak()
	}
	if yyb3131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3131++
		if yyhl3131 {
			yyb3131 = yyj3131 > l
		} else {
			yyb3131 = r.CheckBreak()
		}
		if yyb3131 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3131-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3133 := z.EncBinary()
		_ = yym3133
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3134 := !z.EncBinary()
			yy2arr3134 := z.EncBasicHandle().StructToArray
			var yyq3134 [2]bool
			_, _, _ = yysep3134, yyq3134, yy2arr3134
			const yyr3134 bool = false
			yyq3134[1] = x.SizeBytes != 0
			var yynn3134 int
			if yyr3134 || yy2arr3134 {
				r.EncodeArrayStart(2)
			} else {
				yynn3134 = 1
				for _, b := range yyq3134 {
					if b {
						yynn3134++
					}
				}
				r.EncodeMapStart(yynn3134)
				yynn3134 = 0
			}
			if yyr3134 || yy2arr3134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3136 := z.EncBinary()
					_ = yym3136
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3137 := z.EncBinary()
					_ = yym3137
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3134 || yy2arr3134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3134[1] {
					yym3139 := z.EncBinary()
					_ = yym3139
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3134[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3140 := z.EncBinary()
					_ = yym3140
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3134 || yy2arr3134 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3141 := z.DecBinary()
	_ = yym3141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3142 := r.ContainerType()
		if yyct3142 == codecSelferValueTypeMap1234 {
			yyl3142 := r.ReadMapStart()
			if yyl3142 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3142, d)
			}
		} else if yyct3142 == codecSelferValueTypeArray1234 {
			yyl3142 := r.ReadArrayStart()
			if yyl3142 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3142, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3143Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3143Slc
	var yyhl3143 bool = l >= 0
	for yyj3143 := 0; ; yyj3143++ {
		if yyhl3143 {
			if yyj3143 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3143Slc = r.DecodeBytes(yys3143Slc, true, true)
		yys3143 := string(yys3143Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3143 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3144 := &x.Names
				yym3145 := z.DecBinary()
				_ = yym3145
				if false {
				} else {
					z.F.DecSliceStringX(yyv3144, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3143)
		} // end switch yys3143
	} // end for yyj3143
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3147 int
	var yyb3147 bool
	var yyhl3147 bool = l >= 0
	yyj3147++
	if yyhl3147 {
		yyb3147 = yyj3147 > l
	} else {
		yyb3147 = r.CheckBreak()
	}
	if yyb3147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3148 := &x.Names
		yym3149 := z.DecBinary()
		_ = yym3149
		if false {
		} else {
			z.F.DecSliceStringX(yyv3148, false, d)
		}
	}
	yyj3147++
	if yyhl3147 {
		yyb3147 = yyj3147 > l
	} else {
		yyb3147 = r.CheckBreak()
	}
	if yyb3147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3147++
		if yyhl3147 {
			yyb3147 = yyj3147 > l
		} else {
			yyb3147 = r.CheckBreak()
		}
		if yyb3147 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3147-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3151 := z.EncBinary()
	_ = yym3151
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3152 := z.DecBinary()
	_ = yym3152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3153 := z.EncBinary()
	_ = yym3153
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3154 := z.DecBinary()
	_ = yym3154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3155 := z.EncBinary()
		_ = yym3155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3156 := !z.EncBinary()
			yy2arr3156 := z.EncBasicHandle().StructToArray
			var yyq3156 [6]bool
			_, _, _ = yysep3156, yyq3156, yy2arr3156
			const yyr3156 bool = false
			yyq3156[2] = true
			yyq3156[3] = true
			yyq3156[4] = x.Reason != ""
			yyq3156[5] = x.Message != ""
			var yynn3156 int
			if yyr3156 || yy2arr3156 {
				r.EncodeArrayStart(6)
			} else {
				yynn3156 = 2
				for _, b := range yyq3156 {
					if b {
						yynn3156++
					}
				}
				r.EncodeMapStart(yynn3156)
				yynn3156 = 0
			}
			if yyr3156 || yy2arr3156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3156 || yy2arr3156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3156 || yy2arr3156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3156[2] {
					yy3160 := &x.LastHeartbeatTime
					yym3161 := z.EncBinary()
					_ = yym3161
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3160) {
					} else if yym3161 {
						z.EncBinaryMarshal(yy3160)
					} else if !yym3161 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3160)
					} else {
						z.EncFallback(yy3160)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3156[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3162 := &x.LastHeartbeatTime
					yym3163 := z.EncBinary()
					_ = yym3163
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3162) {
					} else if yym3163 {
						z.EncBinaryMarshal(yy3162)
					} else if !yym3163 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3162)
					} else {
						z.EncFallback(yy3162)
					}
				}
			}
			if yyr3156 || yy2arr3156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3156[3] {
					yy3165 := &x.LastTransitionTime
					yym3166 := z.EncBinary()
					_ = yym3166
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3165) {
					} else if yym3166 {
						z.EncBinaryMarshal(yy3165)
					} else if !yym3166 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3165)
					} else {
						z.EncFallback(yy3165)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3156[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3167 := &x.LastTransitionTime
					yym3168 := z.EncBinary()
					_ = yym3168
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3167) {
					} else if yym3168 {
						z.EncBinaryMarshal(yy3167)
					} else if !yym3168 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3167)
					} else {
						z.EncFallback(yy3167)
					}
				}
			}
			if yyr3156 || yy2arr3156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3156[4] {
					yym3170 := z.EncBinary()
					_ = yym3170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3156[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3171 := z.EncBinary()
					_ = yym3171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3156 || yy2arr3156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3156[5] {
					yym3173 := z.EncBinary()
					_ = yym3173
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3156[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3174 := z.EncBinary()
					_ = yym3174
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3156 || yy2arr3156 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3175 := z.DecBinary()
	_ = yym3175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3176 := r.ContainerType()
		if yyct3176 == codecSelferValueTypeMap1234 {
			yyl3176 := r.ReadMapStart()
			if yyl3176 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3176, d)
			}
		} else if yyct3176 == codecSelferValueTypeArray1234 {
			yyl3176 := r.ReadArrayStart()
			if yyl3176 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3176, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3177Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3177Slc
	var yyhl3177 bool = l >= 0
	for yyj3177 := 0; ; yyj3177++ {
		if yyhl3177 {
			if yyj3177 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3177Slc = r.DecodeBytes(yys3177Slc, true, true)
		yys3177 := string(yys3177Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3177 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3180 := &x.LastHeartbeatTime
				yym3181 := z.DecBinary()
				_ = yym3181
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3180) {
				} else if yym3181 {
					z.DecBinaryUnmarshal(yyv3180)
				} else if !yym3181 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3180)
				} else {
					z.DecFallback(yyv3180, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3182 := &x.LastTransitionTime
				yym3183 := z.DecBinary()
				_ = yym3183
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3182) {
				} else if yym3183 {
					z.DecBinaryUnmarshal(yyv3182)
				} else if !yym3183 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3182)
				} else {
					z.DecFallback(yyv3182, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3177)
		} // end switch yys3177
	} // end for yyj3177
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3186 int
	var yyb3186 bool
	var yyhl3186 bool = l >= 0
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3189 := &x.LastHeartbeatTime
		yym3190 := z.DecBinary()
		_ = yym3190
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3189) {
		} else if yym3190 {
			z.DecBinaryUnmarshal(yyv3189)
		} else if !yym3190 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3189)
		} else {
			z.DecFallback(yyv3189, false)
		}
	}
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3191 := &x.LastTransitionTime
		yym3192 := z.DecBinary()
		_ = yym3192
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3191) {
		} else if yym3192 {
			z.DecBinaryUnmarshal(yyv3191)
		} else if !yym3192 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3191)
		} else {
			z.DecFallback(yyv3191, false)
		}
	}
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3186++
		if yyhl3186 {
			yyb3186 = yyj3186 > l
		} else {
			yyb3186 = r.CheckBreak()
		}
		if yyb3186 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3186-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3195 := z.EncBinary()
	_ = yym3195
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3196 := z.DecBinary()
	_ = yym3196
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3197 := z.EncBinary()
		_ = yym3197
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3198 := !z.EncBinary()
			yy2arr3198 := z.EncBasicHandle().StructToArray
			var yyq3198 [2]bool
			_, _, _ = yysep3198, yyq3198, yy2arr3198
			const yyr3198 bool = false
			var yynn3198 int
			if yyr3198 || yy2arr3198 {
				r.EncodeArrayStart(2)
			} else {
				yynn3198 = 2
				for _, b := range yyq3198 {
					if b {
						yynn3198++
					}
				}
				r.EncodeMapStart(yynn3198)
				yynn3198 = 0
			}
			if yyr3198 || yy2arr3198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3198 || yy2arr3198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3201 := z.EncBinary()
				_ = yym3201
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3202 := z.EncBinary()
				_ = yym3202
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3198 || yy2arr3198 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3203 := z.DecBinary()
	_ = yym3203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3204 := r.ContainerType()
		if yyct3204 == codecSelferValueTypeMap1234 {
			yyl3204 := r.ReadMapStart()
			if yyl3204 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3204, d)
			}
		} else if yyct3204 == codecSelferValueTypeArray1234 {
			yyl3204 := r.ReadArrayStart()
			if yyl3204 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3205Slc
	var yyhl3205 bool = l >= 0
	for yyj3205 := 0; ; yyj3205++ {
		if yyhl3205 {
			if yyj3205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3205Slc = r.DecodeBytes(yys3205Slc, true, true)
		yys3205 := string(yys3205Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3205 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3205)
		} // end switch yys3205
	} // end for yyj3205
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3208 int
	var yyb3208 bool
	var yyhl3208 bool = l >= 0
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3208++
	if yyhl3208 {
		yyb3208 = yyj3208 > l
	} else {
		yyb3208 = r.CheckBreak()
	}
	if yyb3208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3208++
		if yyhl3208 {
			yyb3208 = yyj3208 > l
		} else {
			yyb3208 = r.CheckBreak()
		}
		if yyb3208 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3208-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3211 := z.EncBinary()
	_ = yym3211
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3212 := z.DecBinary()
	_ = yym3212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3213 := z.EncBinary()
		_ = yym3213
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3214 := z.DecBinary()
	_ = yym3214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3215 := z.EncBinary()
		_ = yym3215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3216 := !z.EncBinary()
			yy2arr3216 := z.EncBasicHandle().StructToArray
			var yyq3216 [5]bool
			_, _, _ = yysep3216, yyq3216, yy2arr3216
			const yyr3216 bool = false
			yyq3216[0] = x.Kind != ""
			yyq3216[1] = x.APIVersion != ""
			yyq3216[2] = true
			yyq3216[3] = true
			yyq3216[4] = true
			var yynn3216 int
			if yyr3216 || yy2arr3216 {
				r.EncodeArrayStart(5)
			} else {
				yynn3216 = 0
				for _, b := range yyq3216 {
					if b {
						yynn3216++
					}
				}
				r.EncodeMapStart(yynn3216)
				yynn3216 = 0
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[0] {
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3219 := z.EncBinary()
					_ = yym3219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[1] {
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[2] {
					yy3224 := &x.ObjectMeta
					yy3224.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3216[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3225 := &x.ObjectMeta
					yy3225.CodecEncodeSelf(e)
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[3] {
					yy3227 := &x.Spec
					yy3227.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3216[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3228 := &x.Spec
					yy3228.CodecEncodeSelf(e)
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[4] {
					yy3230 := &x.Status
					yy3230.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3216[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3231 := &x.Status
					yy3231.CodecEncodeSelf(e)
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3232 := z.DecBinary()
	_ = yym3232
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3233 := r.ContainerType()
		if yyct3233 == codecSelferValueTypeMap1234 {
			yyl3233 := r.ReadMapStart()
			if yyl3233 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3233, d)
			}
		} else if yyct3233 == codecSelferValueTypeArray1234 {
			yyl3233 := r.ReadArrayStart()
			if yyl3233 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3233, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3234Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3234Slc
	var yyhl3234 bool = l >= 0
	for yyj3234 := 0; ; yyj3234++ {
		if yyhl3234 {
			if yyj3234 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3234Slc = r.DecodeBytes(yys3234Slc, true, true)
		yys3234 := string(yys3234Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3234 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3237 := &x.ObjectMeta
				yyv3237.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3238 := &x.Spec
				yyv3238.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3239 := &x.Status
				yyv3239.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3234)
		} // end switch yys3234
	} // end for yyj3234
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3240 int
	var yyb3240 bool
	var yyhl3240 bool = l >= 0
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3243 := &x.ObjectMeta
		yyv3243.CodecDecodeSelf(d)
	}
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3244 := &x.Spec
		yyv3244.CodecDecodeSelf(d)
	}
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3245 := &x.Status
		yyv3245.CodecDecodeSelf(d)
	}
	for {
		yyj3240++
		if yyhl3240 {
			yyb3240 = yyj3240 > l
		} else {
			yyb3240 = r.CheckBreak()
		}
		if yyb3240 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3240-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3246 := z.EncBinary()
		_ = yym3246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3247 := !z.EncBinary()
			yy2arr3247 := z.EncBasicHandle().StructToArray
			var yyq3247 [4]bool
			_, _, _ = yysep3247, yyq3247, yy2arr3247
			const yyr3247 bool = false
			yyq3247[0] = x.Kind != ""
			yyq3247[1] = x.APIVersion != ""
			yyq3247[2] = true
			var yynn3247 int
			if yyr3247 || yy2arr3247 {
				r.EncodeArrayStart(4)
			} else {
				yynn3247 = 1
				for _, b := range yyq3247 {
					if b {
						yynn3247++
					}
				}
				r.EncodeMapStart(yynn3247)
				yynn3247 = 0
			}
			if yyr3247 || yy2arr3247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3247[0] {
					yym3249 := z.EncBinary()
					_ = yym3249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3247[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3250 := z.EncBinary()
					_ = yym3250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3247 || yy2arr3247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3247[1] {
					yym3252 := z.EncBinary()
					_ = yym3252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3247[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3253 := z.EncBinary()
					_ = yym3253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3247 || yy2arr3247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3247[2] {
					yy3255 := &x.ListMeta
					yym3256 := z.EncBinary()
					_ = yym3256
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3255) {
					} else {
						z.EncFallback(yy3255)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3247[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3257 := &x.ListMeta
					yym3258 := z.EncBinary()
					_ = yym3258
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3257) {
					} else {
						z.EncFallback(yy3257)
					}
				}
			}
			if yyr3247 || yy2arr3247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3261 := z.EncBinary()
					_ = yym3261
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3247 || yy2arr3247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3262 := z.DecBinary()
	_ = yym3262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3263 := r.ContainerType()
		if yyct3263 == codecSelferValueTypeMap1234 {
			yyl3263 := r.ReadMapStart()
			if yyl3263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3263, d)
			}
		} else if yyct3263 == codecSelferValueTypeArray1234 {
			yyl3263 := r.ReadArrayStart()
			if yyl3263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3264Slc
	var yyhl3264 bool = l >= 0
	for yyj3264 := 0; ; yyj3264++ {
		if yyhl3264 {
			if yyj3264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3264Slc = r.DecodeBytes(yys3264Slc, true, true)
		yys3264 := string(yys3264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3264 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3267 := &x.ListMeta
				yym3268 := z.DecBinary()
				_ = yym3268
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3267) {
				} else {
					z.DecFallback(yyv3267, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3269 := &x.Items
				yym3270 := z.DecBinary()
				_ = yym3270
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3269), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3264)
		} // end switch yys3264
	} // end for yyj3264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3271 int
	var yyb3271 bool
	var yyhl3271 bool = l >= 0
	yyj3271++
	if yyhl3271 {
		yyb3271 = yyj3271 > l
	} else {
		yyb3271 = r.CheckBreak()
	}
	if yyb3271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3271++
	if yyhl3271 {
		yyb3271 = yyj3271 > l
	} else {
		yyb3271 = r.CheckBreak()
	}
	if yyb3271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3271++
	if yyhl3271 {
		yyb3271 = yyj3271 > l
	} else {
		yyb3271 = r.CheckBreak()
	}
	if yyb3271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3274 := &x.ListMeta
		yym3275 := z.DecBinary()
		_ = yym3275
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3274) {
		} else {
			z.DecFallback(yyv3274, false)
		}
	}
	yyj3271++
	if yyhl3271 {
		yyb3271 = yyj3271 > l
	} else {
		yyb3271 = r.CheckBreak()
	}
	if yyb3271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3276 := &x.Items
		yym3277 := z.DecBinary()
		_ = yym3277
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3276), d)
		}
	}
	for {
		yyj3271++
		if yyhl3271 {
			yyb3271 = yyj3271 > l
		} else {
			yyb3271 = r.CheckBreak()
		}
		if yyb3271 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3271-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3278 := z.EncBinary()
	_ = yym3278
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3279 := z.DecBinary()
	_ = yym3279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3280 := z.EncBinary()
		_ = yym3280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3281 := !z.EncBinary()
			yy2arr3281 := z.EncBasicHandle().StructToArray
			var yyq3281 [1]bool
			_, _, _ = yysep3281, yyq3281, yy2arr3281
			const yyr3281 bool = false
			yyq3281[0] = len(x.Finalizers) != 0
			var yynn3281 int
			if yyr3281 || yy2arr3281 {
				r.EncodeArrayStart(1)
			} else {
				yynn3281 = 0
				for _, b := range yyq3281 {
					if b {
						yynn3281++
					}
				}
				r.EncodeMapStart(yynn3281)
				yynn3281 = 0
			}
			if yyr3281 || yy2arr3281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3281[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3283 := z.EncBinary()
						_ = yym3283
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3281[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3284 := z.EncBinary()
						_ = yym3284
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3281 || yy2arr3281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3285 := z.DecBinary()
	_ = yym3285
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3286 := r.ContainerType()
		if yyct3286 == codecSelferValueTypeMap1234 {
			yyl3286 := r.ReadMapStart()
			if yyl3286 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3286, d)
			}
		} else if yyct3286 == codecSelferValueTypeArray1234 {
			yyl3286 := r.ReadArrayStart()
			if yyl3286 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3286, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3287Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3287Slc
	var yyhl3287 bool = l >= 0
	for yyj3287 := 0; ; yyj3287++ {
		if yyhl3287 {
			if yyj3287 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3287Slc = r.DecodeBytes(yys3287Slc, true, true)
		yys3287 := string(yys3287Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3287 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3288 := &x.Finalizers
				yym3289 := z.DecBinary()
				_ = yym3289
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3288), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3287)
		} // end switch yys3287
	} // end for yyj3287
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3290 int
	var yyb3290 bool
	var yyhl3290 bool = l >= 0
	yyj3290++
	if yyhl3290 {
		yyb3290 = yyj3290 > l
	} else {
		yyb3290 = r.CheckBreak()
	}
	if yyb3290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3291 := &x.Finalizers
		yym3292 := z.DecBinary()
		_ = yym3292
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3291), d)
		}
	}
	for {
		yyj3290++
		if yyhl3290 {
			yyb3290 = yyj3290 > l
		} else {
			yyb3290 = r.CheckBreak()
		}
		if yyb3290 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3290-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3293 := z.EncBinary()
		_ = yym3293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3294 := !z.EncBinary()
			yy2arr3294 := z.EncBasicHandle().StructToArray
			var yyq3294 [1]bool
			_, _, _ = yysep3294, yyq3294, yy2arr3294
			const yyr3294 bool = false
			yyq3294[0] = x.Phase != ""
			var yynn3294 int
			if yyr3294 || yy2arr3294 {
				r.EncodeArrayStart(1)
			} else {
				yynn3294 = 0
				for _, b := range yyq3294 {
					if b {
						yynn3294++
					}
				}
				r.EncodeMapStart(yynn3294)
				yynn3294 = 0
			}
			if yyr3294 || yy2arr3294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3294[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3294[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3294 || yy2arr3294 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3296 := z.DecBinary()
	_ = yym3296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3297 := r.ContainerType()
		if yyct3297 == codecSelferValueTypeMap1234 {
			yyl3297 := r.ReadMapStart()
			if yyl3297 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3297, d)
			}
		} else if yyct3297 == codecSelferValueTypeArray1234 {
			yyl3297 := r.ReadArrayStart()
			if yyl3297 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3298Slc
	var yyhl3298 bool = l >= 0
	for yyj3298 := 0; ; yyj3298++ {
		if yyhl3298 {
			if yyj3298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3298Slc = r.DecodeBytes(yys3298Slc, true, true)
		yys3298 := string(yys3298Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3298 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3298)
		} // end switch yys3298
	} // end for yyj3298
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3300 int
	var yyb3300 bool
	var yyhl3300 bool = l >= 0
	yyj3300++
	if yyhl3300 {
		yyb3300 = yyj3300 > l
	} else {
		yyb3300 = r.CheckBreak()
	}
	if yyb3300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3300++
		if yyhl3300 {
			yyb3300 = yyj3300 > l
		} else {
			yyb3300 = r.CheckBreak()
		}
		if yyb3300 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3300-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3302 := z.EncBinary()
	_ = yym3302
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3303 := z.DecBinary()
	_ = yym3303
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3304 := z.EncBinary()
		_ = yym3304
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3305 := !z.EncBinary()
			yy2arr3305 := z.EncBasicHandle().StructToArray
			var yyq3305 [5]bool
			_, _, _ = yysep3305, yyq3305, yy2arr3305
			const yyr3305 bool = false
			yyq3305[0] = x.Kind != ""
			yyq3305[1] = x.APIVersion != ""
			yyq3305[2] = true
			yyq3305[3] = true
			yyq3305[4] = true
			var yynn3305 int
			if yyr3305 || yy2arr3305 {
				r.EncodeArrayStart(5)
			} else {
				yynn3305 = 0
				for _, b := range yyq3305 {
					if b {
						yynn3305++
					}
				}
				r.EncodeMapStart(yynn3305)
				yynn3305 = 0
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3305[0] {
					yym3307 := z.EncBinary()
					_ = yym3307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3305[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3305[1] {
					yym3310 := z.EncBinary()
					_ = yym3310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3305[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3311 := z.EncBinary()
					_ = yym3311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3305[2] {
					yy3313 := &x.ObjectMeta
					yy3313.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3305[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3314 := &x.ObjectMeta
					yy3314.CodecEncodeSelf(e)
				}
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3305[3] {
					yy3316 := &x.Spec
					yy3316.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3305[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3317 := &x.Spec
					yy3317.CodecEncodeSelf(e)
				}
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3305[4] {
					yy3319 := &x.Status
					yy3319.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3305[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3320 := &x.Status
					yy3320.CodecEncodeSelf(e)
				}
			}
			if yyr3305 || yy2arr3305 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3321 := z.DecBinary()
	_ = yym3321
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3322 := r.ContainerType()
		if yyct3322 == codecSelferValueTypeMap1234 {
			yyl3322 := r.ReadMapStart()
			if yyl3322 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3322, d)
			}
		} else if yyct3322 == codecSelferValueTypeArray1234 {
			yyl3322 := r.ReadArrayStart()
			if yyl3322 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3322, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3323Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3323Slc
	var yyhl3323 bool = l >= 0
	for yyj3323 := 0; ; yyj3323++ {
		if yyhl3323 {
			if yyj3323 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3323Slc = r.DecodeBytes(yys3323Slc, true, true)
		yys3323 := string(yys3323Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3323 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3326 := &x.ObjectMeta
				yyv3326.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3327 := &x.Spec
				yyv3327.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3328 := &x.Status
				yyv3328.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3323)
		} // end switch yys3323
	} // end for yyj3323
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3329 int
	var yyb3329 bool
	var yyhl3329 bool = l >= 0
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3332 := &x.ObjectMeta
		yyv3332.CodecDecodeSelf(d)
	}
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3333 := &x.Spec
		yyv3333.CodecDecodeSelf(d)
	}
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3334 := &x.Status
		yyv3334.CodecDecodeSelf(d)
	}
	for {
		yyj3329++
		if yyhl3329 {
			yyb3329 = yyj3329 > l
		} else {
			yyb3329 = r.CheckBreak()
		}
		if yyb3329 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3329-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3335 := z.EncBinary()
		_ = yym3335
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3336 := !z.EncBinary()
			yy2arr3336 := z.EncBasicHandle().StructToArray
			var yyq3336 [4]bool
			_, _, _ = yysep3336, yyq3336, yy2arr3336
			const yyr3336 bool = false
			yyq3336[0] = x.Kind != ""
			yyq3336[1] = x.APIVersion != ""
			yyq3336[2] = true
			var yynn3336 int
			if yyr3336 || yy2arr3336 {
				r.EncodeArrayStart(4)
			} else {
				yynn3336 = 1
				for _, b := range yyq3336 {
					if b {
						yynn3336++
					}
				}
				r.EncodeMapStart(yynn3336)
				yynn3336 = 0
			}
			if yyr3336 || yy2arr3336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3336[0] {
					yym3338 := z.EncBinary()
					_ = yym3338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3336[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3339 := z.EncBinary()
					_ = yym3339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3336 || yy2arr3336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3336[1] {
					yym3341 := z.EncBinary()
					_ = yym3341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3336[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3342 := z.EncBinary()
					_ = yym3342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3336 || yy2arr3336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3336[2] {
					yy3344 := &x.ListMeta
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3344) {
					} else {
						z.EncFallback(yy3344)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3336[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3346 := &x.ListMeta
					yym3347 := z.EncBinary()
					_ = yym3347
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3346) {
					} else {
						z.EncFallback(yy3346)
					}
				}
			}
			if yyr3336 || yy2arr3336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3349 := z.EncBinary()
					_ = yym3349
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3350 := z.EncBinary()
					_ = yym3350
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3336 || yy2arr3336 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3351 := z.DecBinary()
	_ = yym3351
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3352 := r.ContainerType()
		if yyct3352 == codecSelferValueTypeMap1234 {
			yyl3352 := r.ReadMapStart()
			if yyl3352 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3352, d)
			}
		} else if yyct3352 == codecSelferValueTypeArray1234 {
			yyl3352 := r.ReadArrayStart()
			if yyl3352 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3352, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3353Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3353Slc
	var yyhl3353 bool = l >= 0
	for yyj3353 := 0; ; yyj3353++ {
		if yyhl3353 {
			if yyj3353 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3353Slc = r.DecodeBytes(yys3353Slc, true, true)
		yys3353 := string(yys3353Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3353 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3356 := &x.ListMeta
				yym3357 := z.DecBinary()
				_ = yym3357
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3356) {
				} else {
					z.DecFallback(yyv3356, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3358 := &x.Items
				yym3359 := z.DecBinary()
				_ = yym3359
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3358), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3353)
		} // end switch yys3353
	} // end for yyj3353
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3360 int
	var yyb3360 bool
	var yyhl3360 bool = l >= 0
	yyj3360++
	if yyhl3360 {
		yyb3360 = yyj3360 > l
	} else {
		yyb3360 = r.CheckBreak()
	}
	if yyb3360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3360++
	if yyhl3360 {
		yyb3360 = yyj3360 > l
	} else {
		yyb3360 = r.CheckBreak()
	}
	if yyb3360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3360++
	if yyhl3360 {
		yyb3360 = yyj3360 > l
	} else {
		yyb3360 = r.CheckBreak()
	}
	if yyb3360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3363 := &x.ListMeta
		yym3364 := z.DecBinary()
		_ = yym3364
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3363) {
		} else {
			z.DecFallback(yyv3363, false)
		}
	}
	yyj3360++
	if yyhl3360 {
		yyb3360 = yyj3360 > l
	} else {
		yyb3360 = r.CheckBreak()
	}
	if yyb3360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3365 := &x.Items
		yym3366 := z.DecBinary()
		_ = yym3366
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3365), d)
		}
	}
	for {
		yyj3360++
		if yyhl3360 {
			yyb3360 = yyj3360 > l
		} else {
			yyb3360 = r.CheckBreak()
		}
		if yyb3360 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3360-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3367 := z.EncBinary()
		_ = yym3367
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3368 := !z.EncBinary()
			yy2arr3368 := z.EncBasicHandle().StructToArray
			var yyq3368 [4]bool
			_, _, _ = yysep3368, yyq3368, yy2arr3368
			const yyr3368 bool = false
			yyq3368[0] = x.Kind != ""
			yyq3368[1] = x.APIVersion != ""
			yyq3368[2] = true
			var yynn3368 int
			if yyr3368 || yy2arr3368 {
				r.EncodeArrayStart(4)
			} else {
				yynn3368 = 1
				for _, b := range yyq3368 {
					if b {
						yynn3368++
					}
				}
				r.EncodeMapStart(yynn3368)
				yynn3368 = 0
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[0] {
					yym3370 := z.EncBinary()
					_ = yym3370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3368[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[1] {
					yym3373 := z.EncBinary()
					_ = yym3373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3368[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3374 := z.EncBinary()
					_ = yym3374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[2] {
					yy3376 := &x.ObjectMeta
					yy3376.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3368[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3377 := &x.ObjectMeta
					yy3377.CodecEncodeSelf(e)
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3379 := &x.Target
				yy3379.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3380 := &x.Target
				yy3380.CodecEncodeSelf(e)
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3381 := z.DecBinary()
	_ = yym3381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3382 := r.ContainerType()
		if yyct3382 == codecSelferValueTypeMap1234 {
			yyl3382 := r.ReadMapStart()
			if yyl3382 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3382, d)
			}
		} else if yyct3382 == codecSelferValueTypeArray1234 {
			yyl3382 := r.ReadArrayStart()
			if yyl3382 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3382, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3383Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3383Slc
	var yyhl3383 bool = l >= 0
	for yyj3383 := 0; ; yyj3383++ {
		if yyhl3383 {
			if yyj3383 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3383Slc = r.DecodeBytes(yys3383Slc, true, true)
		yys3383 := string(yys3383Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3383 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3386 := &x.ObjectMeta
				yyv3386.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3387 := &x.Target
				yyv3387.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3383)
		} // end switch yys3383
	} // end for yyj3383
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3388 int
	var yyb3388 bool
	var yyhl3388 bool = l >= 0
	yyj3388++
	if yyhl3388 {
		yyb3388 = yyj3388 > l
	} else {
		yyb3388 = r.CheckBreak()
	}
	if yyb3388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3388++
	if yyhl3388 {
		yyb3388 = yyj3388 > l
	} else {
		yyb3388 = r.CheckBreak()
	}
	if yyb3388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3388++
	if yyhl3388 {
		yyb3388 = yyj3388 > l
	} else {
		yyb3388 = r.CheckBreak()
	}
	if yyb3388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3391 := &x.ObjectMeta
		yyv3391.CodecDecodeSelf(d)
	}
	yyj3388++
	if yyhl3388 {
		yyb3388 = yyj3388 > l
	} else {
		yyb3388 = r.CheckBreak()
	}
	if yyb3388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3392 := &x.Target
		yyv3392.CodecDecodeSelf(d)
	}
	for {
		yyj3388++
		if yyhl3388 {
			yyb3388 = yyj3388 > l
		} else {
			yyb3388 = r.CheckBreak()
		}
		if yyb3388 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3388-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3393 := z.EncBinary()
		_ = yym3393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3394 := !z.EncBinary()
			yy2arr3394 := z.EncBasicHandle().StructToArray
			var yyq3394 [1]bool
			_, _, _ = yysep3394, yyq3394, yy2arr3394
			const yyr3394 bool = false
			yyq3394[0] = x.UID != nil
			var yynn3394 int
			if yyr3394 || yy2arr3394 {
				r.EncodeArrayStart(1)
			} else {
				yynn3394 = 0
				for _, b := range yyq3394 {
					if b {
						yynn3394++
					}
				}
				r.EncodeMapStart(yynn3394)
				yynn3394 = 0
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3396 := *x.UID
						yym3397 := z.EncBinary()
						_ = yym3397
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3396) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3396))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3394[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3398 := *x.UID
						yym3399 := z.EncBinary()
						_ = yym3399
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3398) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3398))
						}
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3400 := z.DecBinary()
	_ = yym3400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3401 := r.ContainerType()
		if yyct3401 == codecSelferValueTypeMap1234 {
			yyl3401 := r.ReadMapStart()
			if yyl3401 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3401, d)
			}
		} else if yyct3401 == codecSelferValueTypeArray1234 {
			yyl3401 := r.ReadArrayStart()
			if yyl3401 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3401, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3402Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3402Slc
	var yyhl3402 bool = l >= 0
	for yyj3402 := 0; ; yyj3402++ {
		if yyhl3402 {
			if yyj3402 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3402Slc = r.DecodeBytes(yys3402Slc, true, true)
		yys3402 := string(yys3402Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3402 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3404 := z.DecBinary()
				_ = yym3404
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3402)
		} // end switch yys3402
	} // end for yyj3402
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3405 int
	var yyb3405 bool
	var yyhl3405 bool = l >= 0
	yyj3405++
	if yyhl3405 {
		yyb3405 = yyj3405 > l
	} else {
		yyb3405 = r.CheckBreak()
	}
	if yyb3405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3407 := z.DecBinary()
		_ = yym3407
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3405++
		if yyhl3405 {
			yyb3405 = yyj3405 > l
		} else {
			yyb3405 = r.CheckBreak()
		}
		if yyb3405 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3405-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3408 := z.EncBinary()
		_ = yym3408
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3409 := !z.EncBinary()
			yy2arr3409 := z.EncBasicHandle().StructToArray
			var yyq3409 [5]bool
			_, _, _ = yysep3409, yyq3409, yy2arr3409
			const yyr3409 bool = false
			yyq3409[0] = x.Kind != ""
			yyq3409[1] = x.APIVersion != ""
			yyq3409[2] = x.GracePeriodSeconds != nil
			yyq3409[3] = x.Preconditions != nil
			yyq3409[4] = x.OrphanDependents != nil
			var yynn3409 int
			if yyr3409 || yy2arr3409 {
				r.EncodeArrayStart(5)
			} else {
				yynn3409 = 0
				for _, b := range yyq3409 {
					if b {
						yynn3409++
					}
				}
				r.EncodeMapStart(yynn3409)
				yynn3409 = 0
			}
			if yyr3409 || yy2arr3409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3409[0] {
					yym3411 := z.EncBinary()
					_ = yym3411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3409[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3412 := z.EncBinary()
					_ = yym3412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3409 || yy2arr3409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3409[1] {
					yym3414 := z.EncBinary()
					_ = yym3414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3409[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3415 := z.EncBinary()
					_ = yym3415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3409 || yy2arr3409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3409[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3417 := *x.GracePeriodSeconds
						yym3418 := z.EncBinary()
						_ = yym3418
						if false {
						} else {
							r.EncodeInt(int64(yy3417))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3409[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3419 := *x.GracePeriodSeconds
						yym3420 := z.EncBinary()
						_ = yym3420
						if false {
						} else {
							r.EncodeInt(int64(yy3419))
						}
					}
				}
			}
			if yyr3409 || yy2arr3409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3409[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3409[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3409 || yy2arr3409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3409[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3423 := *x.OrphanDependents
						yym3424 := z.EncBinary()
						_ = yym3424
						if false {
						} else {
							r.EncodeBool(bool(yy3423))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3409[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3425 := *x.OrphanDependents
						yym3426 := z.EncBinary()
						_ = yym3426
						if false {
						} else {
							r.EncodeBool(bool(yy3425))
						}
					}
				}
			}
			if yyr3409 || yy2arr3409 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3427 := z.DecBinary()
	_ = yym3427
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3428 := r.ContainerType()
		if yyct3428 == codecSelferValueTypeMap1234 {
			yyl3428 := r.ReadMapStart()
			if yyl3428 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3428, d)
			}
		} else if yyct3428 == codecSelferValueTypeArray1234 {
			yyl3428 := r.ReadArrayStart()
			if yyl3428 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3428, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3429Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3429Slc
	var yyhl3429 bool = l >= 0
	for yyj3429 := 0; ; yyj3429++ {
		if yyhl3429 {
			if yyj3429 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3429Slc = r.DecodeBytes(yys3429Slc, true, true)
		yys3429 := string(yys3429Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3429 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3433 := z.DecBinary()
				_ = yym3433
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3436 := z.DecBinary()
				_ = yym3436
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3429)
		} // end switch yys3429
	} // end for yyj3429
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3437 int
	var yyb3437 bool
	var yyhl3437 bool = l >= 0
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3441 := z.DecBinary()
		_ = yym3441
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3437++
	if yyhl3437 {
		yyb3437 = yyj3437 > l
	} else {
		yyb3437 = r.CheckBreak()
	}
	if yyb3437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3444 := z.DecBinary()
		_ = yym3444
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3437++
		if yyhl3437 {
			yyb3437 = yyj3437 > l
		} else {
			yyb3437 = r.CheckBreak()
		}
		if yyb3437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3445 := z.EncBinary()
		_ = yym3445
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3446 := !z.EncBinary()
			yy2arr3446 := z.EncBasicHandle().StructToArray
			var yyq3446 [4]bool
			_, _, _ = yysep3446, yyq3446, yy2arr3446
			const yyr3446 bool = false
			yyq3446[0] = x.Kind != ""
			yyq3446[1] = x.APIVersion != ""
			var yynn3446 int
			if yyr3446 || yy2arr3446 {
				r.EncodeArrayStart(4)
			} else {
				yynn3446 = 2
				for _, b := range yyq3446 {
					if b {
						yynn3446++
					}
				}
				r.EncodeMapStart(yynn3446)
				yynn3446 = 0
			}
			if yyr3446 || yy2arr3446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3446[0] {
					yym3448 := z.EncBinary()
					_ = yym3448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3446[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3446 || yy2arr3446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3446[1] {
					yym3451 := z.EncBinary()
					_ = yym3451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3446[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3452 := z.EncBinary()
					_ = yym3452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3446 || yy2arr3446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3454 := z.EncBinary()
				_ = yym3454
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3455 := z.EncBinary()
				_ = yym3455
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3446 || yy2arr3446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3457 := z.EncBinary()
				_ = yym3457
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3458 := z.EncBinary()
				_ = yym3458
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3446 || yy2arr3446 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3459 := z.DecBinary()
	_ = yym3459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3460 := r.ContainerType()
		if yyct3460 == codecSelferValueTypeMap1234 {
			yyl3460 := r.ReadMapStart()
			if yyl3460 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3460, d)
			}
		} else if yyct3460 == codecSelferValueTypeArray1234 {
			yyl3460 := r.ReadArrayStart()
			if yyl3460 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3460, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3461Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3461Slc
	var yyhl3461 bool = l >= 0
	for yyj3461 := 0; ; yyj3461++ {
		if yyhl3461 {
			if yyj3461 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3461Slc = r.DecodeBytes(yys3461Slc, true, true)
		yys3461 := string(yys3461Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3461 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3461)
		} // end switch yys3461
	} // end for yyj3461
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3466 int
	var yyb3466 bool
	var yyhl3466 bool = l >= 0
	yyj3466++
	if yyhl3466 {
		yyb3466 = yyj3466 > l
	} else {
		yyb3466 = r.CheckBreak()
	}
	if yyb3466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3466++
	if yyhl3466 {
		yyb3466 = yyj3466 > l
	} else {
		yyb3466 = r.CheckBreak()
	}
	if yyb3466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3466++
	if yyhl3466 {
		yyb3466 = yyj3466 > l
	} else {
		yyb3466 = r.CheckBreak()
	}
	if yyb3466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3466++
	if yyhl3466 {
		yyb3466 = yyj3466 > l
	} else {
		yyb3466 = r.CheckBreak()
	}
	if yyb3466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3466++
		if yyhl3466 {
			yyb3466 = yyj3466 > l
		} else {
			yyb3466 = r.CheckBreak()
		}
		if yyb3466 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3466-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3471 := z.EncBinary()
		_ = yym3471
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3472 := !z.EncBinary()
			yy2arr3472 := z.EncBasicHandle().StructToArray
			var yyq3472 [7]bool
			_, _, _ = yysep3472, yyq3472, yy2arr3472
			const yyr3472 bool = false
			yyq3472[0] = x.Kind != ""
			yyq3472[1] = x.APIVersion != ""
			yyq3472[2] = x.LabelSelector != ""
			yyq3472[3] = x.FieldSelector != ""
			yyq3472[4] = x.Watch != false
			yyq3472[5] = x.ResourceVersion != ""
			yyq3472[6] = x.TimeoutSeconds != nil
			var yynn3472 int
			if yyr3472 || yy2arr3472 {
				r.EncodeArrayStart(7)
			} else {
				yynn3472 = 0
				for _, b := range yyq3472 {
					if b {
						yynn3472++
					}
				}
				r.EncodeMapStart(yynn3472)
				yynn3472 = 0
			}
			if yyr3472 || yy2arr3472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3472[0] {
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3472[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3475 := z.EncBinary()
					_ = yym3475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3472 || yy2arr3472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3472[1] {
					yym3477 := z.EncBinary()
					_ = yym3477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3472[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3478 := z.EncBinary()
					_ = yym3478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3472 || yy2arr3472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3472[2] {
					yym3480 := z.EncBinary()
					_ = yym3480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3472[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3481 := z.EncBinary()
					_ = yym3481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3472 || yy2arr3472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3472[3] {
					yym3483 := z.EncBinary()
					_ = yym3483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3472[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3484 := z.EncBinary()
					_ = yym3484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3472 || yy2arr3472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3472[4] {
					yym3486 := z.EncBinary()
					_ = yym3486
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3472[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3487 := z.EncBinary()
					_ = yym3487
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3472 || yy2arr3472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3472[5] {
					yym3489 := z.EncBinary()
					_ = yym3489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3472[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3490 := z.EncBinary()
					_ = yym3490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3472 || yy2arr3472 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3472[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3492 := *x.TimeoutSeconds
						yym3493 := z.EncBinary()
						_ = yym3493
						if false {
						} else {
							r.EncodeInt(int64(yy3492))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3472[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3494 := *x.TimeoutSeconds
						yym3495 := z.EncBinary()
						_ = yym3495
						if false {
						} else {
							r.EncodeInt(int64(yy3494))
						}
					}
				}
			}
			if yyr3472 || yy2arr3472 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3496 := z.DecBinary()
	_ = yym3496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3497 := r.ContainerType()
		if yyct3497 == codecSelferValueTypeMap1234 {
			yyl3497 := r.ReadMapStart()
			if yyl3497 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3497, d)
			}
		} else if yyct3497 == codecSelferValueTypeArray1234 {
			yyl3497 := r.ReadArrayStart()
			if yyl3497 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3497, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3498Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3498Slc
	var yyhl3498 bool = l >= 0
	for yyj3498 := 0; ; yyj3498++ {
		if yyhl3498 {
			if yyj3498 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3498Slc = r.DecodeBytes(yys3498Slc, true, true)
		yys3498 := string(yys3498Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3498 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3506 := z.DecBinary()
				_ = yym3506
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3498)
		} // end switch yys3498
	} // end for yyj3498
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3507 int
	var yyb3507 bool
	var yyhl3507 bool = l >= 0
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3507++
	if yyhl3507 {
		yyb3507 = yyj3507 > l
	} else {
		yyb3507 = r.CheckBreak()
	}
	if yyb3507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3515 := z.DecBinary()
		_ = yym3515
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3507++
		if yyhl3507 {
			yyb3507 = yyj3507 > l
		} else {
			yyb3507 = r.CheckBreak()
		}
		if yyb3507 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3507-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3516 := z.EncBinary()
		_ = yym3516
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3517 := !z.EncBinary()
			yy2arr3517 := z.EncBasicHandle().StructToArray
			var yyq3517 [10]bool
			_, _, _ = yysep3517, yyq3517, yy2arr3517
			const yyr3517 bool = false
			yyq3517[0] = x.Kind != ""
			yyq3517[1] = x.APIVersion != ""
			yyq3517[2] = x.Container != ""
			yyq3517[3] = x.Follow != false
			yyq3517[4] = x.Previous != false
			yyq3517[5] = x.SinceSeconds != nil
			yyq3517[6] = x.SinceTime != nil
			yyq3517[7] = x.Timestamps != false
			yyq3517[8] = x.TailLines != nil
			yyq3517[9] = x.LimitBytes != nil
			var yynn3517 int
			if yyr3517 || yy2arr3517 {
				r.EncodeArrayStart(10)
			} else {
				yynn3517 = 0
				for _, b := range yyq3517 {
					if b {
						yynn3517++
					}
				}
				r.EncodeMapStart(yynn3517)
				yynn3517 = 0
			}
			if yyr3517 || yy2arr3517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3517[0] {
					yym3519 := z.EncBinary()
					_ = yym3519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3517[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3520 := z.EncBinary()
					_ = yym3520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3517 || yy2arr3517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3517[1] {
					yym3522 := z.EncBinary()
					_ = yym3522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3517[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3517 || yy2arr3517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3517[2] {
					yym3525 := z.EncBinary()
					_ = yym3525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3517[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3526 := z.EncBinary()
					_ = yym3526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3517 || yy2arr3517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3517[3] {
					yym3528 := z.EncBinary()
					_ = yym3528
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3517[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3529 := z.EncBinary()
					_ = yym3529
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3517 || yy2arr3517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3517[4] {
					yym3531 := z.EncBinary()
					_ = yym3531
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3517[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3532 := z.EncBinary()
					_ = yym3532
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3517 || yy2arr3517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3517[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3534 := *x.SinceSeconds
						yym3535 := z.EncBinary()
						_ = yym3535
						if false {
						} else {
							r.EncodeInt(int64(yy3534))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3517[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3536 := *x.SinceSeconds
						yym3537 := z.EncBinary()
						_ = yym3537
						if false {
						} else {
							r.EncodeInt(int64(yy3536))
						}
					}
				}
			}
			if yyr3517 || yy2arr3517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3517[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3539 := z.EncBinary()
						_ = yym3539
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3539 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3539 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3517[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3540 := z.EncBinary()
						_ = yym3540
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3540 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3540 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3517 || yy2arr3517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3517[7] {
					yym3542 := z.EncBinary()
					_ = yym3542
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3517[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3543 := z.EncBinary()
					_ = yym3543
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3517 || yy2arr3517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3517[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3545 := *x.TailLines
						yym3546 := z.EncBinary()
						_ = yym3546
						if false {
						} else {
							r.EncodeInt(int64(yy3545))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3517[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3547 := *x.TailLines
						yym3548 := z.EncBinary()
						_ = yym3548
						if false {
						} else {
							r.EncodeInt(int64(yy3547))
						}
					}
				}
			}
			if yyr3517 || yy2arr3517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3517[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3550 := *x.LimitBytes
						yym3551 := z.EncBinary()
						_ = yym3551
						if false {
						} else {
							r.EncodeInt(int64(yy3550))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3517[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3552 := *x.LimitBytes
						yym3553 := z.EncBinary()
						_ = yym3553
						if false {
						} else {
							r.EncodeInt(int64(yy3552))
						}
					}
				}
			}
			if yyr3517 || yy2arr3517 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3554 := z.DecBinary()
	_ = yym3554
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3555 := r.ContainerType()
		if yyct3555 == codecSelferValueTypeMap1234 {
			yyl3555 := r.ReadMapStart()
			if yyl3555 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3555, d)
			}
		} else if yyct3555 == codecSelferValueTypeArray1234 {
			yyl3555 := r.ReadArrayStart()
			if yyl3555 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3555, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3556Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3556Slc
	var yyhl3556 bool = l >= 0
	for yyj3556 := 0; ; yyj3556++ {
		if yyhl3556 {
			if yyj3556 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3556Slc = r.DecodeBytes(yys3556Slc, true, true)
		yys3556 := string(yys3556Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3556 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3563 := z.DecBinary()
				_ = yym3563
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3565 := z.DecBinary()
				_ = yym3565
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3565 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3565 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3568 := z.DecBinary()
				_ = yym3568
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3570 := z.DecBinary()
				_ = yym3570
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3556)
		} // end switch yys3556
	} // end for yyj3556
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3571 int
	var yyb3571 bool
	var yyhl3571 bool = l >= 0
	yyj3571++
	if yyhl3571 {
		yyb3571 = yyj3571 > l
	} else {
		yyb3571 = r.CheckBreak()
	}
	if yyb3571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3571++
	if yyhl3571 {
		yyb3571 = yyj3571 > l
	} else {
		yyb3571 = r.CheckBreak()
	}
	if yyb3571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3571++
	if yyhl3571 {
		yyb3571 = yyj3571 > l
	} else {
		yyb3571 = r.CheckBreak()
	}
	if yyb3571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3571++
	if yyhl3571 {
		yyb3571 = yyj3571 > l
	} else {
		yyb3571 = r.CheckBreak()
	}
	if yyb3571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3571++
	if yyhl3571 {
		yyb3571 = yyj3571 > l
	} else {
		yyb3571 = r.CheckBreak()
	}
	if yyb3571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3571++
	if yyhl3571 {
		yyb3571 = yyj3571 > l
	} else {
		yyb3571 = r.CheckBreak()
	}
	if yyb3571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3578 := z.DecBinary()
		_ = yym3578
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3571++
	if yyhl3571 {
		yyb3571 = yyj3571 > l
	} else {
		yyb3571 = r.CheckBreak()
	}
	if yyb3571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3580 := z.DecBinary()
		_ = yym3580
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3580 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3580 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3571++
	if yyhl3571 {
		yyb3571 = yyj3571 > l
	} else {
		yyb3571 = r.CheckBreak()
	}
	if yyb3571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3571++
	if yyhl3571 {
		yyb3571 = yyj3571 > l
	} else {
		yyb3571 = r.CheckBreak()
	}
	if yyb3571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3583 := z.DecBinary()
		_ = yym3583
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3571++
	if yyhl3571 {
		yyb3571 = yyj3571 > l
	} else {
		yyb3571 = r.CheckBreak()
	}
	if yyb3571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3585 := z.DecBinary()
		_ = yym3585
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3571++
		if yyhl3571 {
			yyb3571 = yyj3571 > l
		} else {
			yyb3571 = r.CheckBreak()
		}
		if yyb3571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3586 := z.EncBinary()
		_ = yym3586
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3587 := !z.EncBinary()
			yy2arr3587 := z.EncBasicHandle().StructToArray
			var yyq3587 [7]bool
			_, _, _ = yysep3587, yyq3587, yy2arr3587
			const yyr3587 bool = false
			yyq3587[0] = x.Kind != ""
			yyq3587[1] = x.APIVersion != ""
			yyq3587[2] = x.Stdin != false
			yyq3587[3] = x.Stdout != false
			yyq3587[4] = x.Stderr != false
			yyq3587[5] = x.TTY != false
			yyq3587[6] = x.Container != ""
			var yynn3587 int
			if yyr3587 || yy2arr3587 {
				r.EncodeArrayStart(7)
			} else {
				yynn3587 = 0
				for _, b := range yyq3587 {
					if b {
						yynn3587++
					}
				}
				r.EncodeMapStart(yynn3587)
				yynn3587 = 0
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3587[0] {
					yym3589 := z.EncBinary()
					_ = yym3589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3587[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3590 := z.EncBinary()
					_ = yym3590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3587[1] {
					yym3592 := z.EncBinary()
					_ = yym3592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3587[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3593 := z.EncBinary()
					_ = yym3593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3587[2] {
					yym3595 := z.EncBinary()
					_ = yym3595
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3587[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3596 := z.EncBinary()
					_ = yym3596
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3587[3] {
					yym3598 := z.EncBinary()
					_ = yym3598
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3587[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3599 := z.EncBinary()
					_ = yym3599
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3587[4] {
					yym3601 := z.EncBinary()
					_ = yym3601
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3587[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3602 := z.EncBinary()
					_ = yym3602
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3587[5] {
					yym3604 := z.EncBinary()
					_ = yym3604
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3587[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3605 := z.EncBinary()
					_ = yym3605
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3587[6] {
					yym3607 := z.EncBinary()
					_ = yym3607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3587[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3608 := z.EncBinary()
					_ = yym3608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3587 || yy2arr3587 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3609 := z.DecBinary()
	_ = yym3609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3610 := r.ContainerType()
		if yyct3610 == codecSelferValueTypeMap1234 {
			yyl3610 := r.ReadMapStart()
			if yyl3610 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3610, d)
			}
		} else if yyct3610 == codecSelferValueTypeArray1234 {
			yyl3610 := r.ReadArrayStart()
			if yyl3610 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3610, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3611Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3611Slc
	var yyhl3611 bool = l >= 0
	for yyj3611 := 0; ; yyj3611++ {
		if yyhl3611 {
			if yyj3611 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3611Slc = r.DecodeBytes(yys3611Slc, true, true)
		yys3611 := string(yys3611Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3611 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3611)
		} // end switch yys3611
	} // end for yyj3611
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3619 int
	var yyb3619 bool
	var yyhl3619 bool = l >= 0
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3619++
	if yyhl3619 {
		yyb3619 = yyj3619 > l
	} else {
		yyb3619 = r.CheckBreak()
	}
	if yyb3619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3619++
		if yyhl3619 {
			yyb3619 = yyj3619 > l
		} else {
			yyb3619 = r.CheckBreak()
		}
		if yyb3619 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3619-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3627 := z.EncBinary()
		_ = yym3627
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3628 := !z.EncBinary()
			yy2arr3628 := z.EncBasicHandle().StructToArray
			var yyq3628 [8]bool
			_, _, _ = yysep3628, yyq3628, yy2arr3628
			const yyr3628 bool = false
			yyq3628[0] = x.Kind != ""
			yyq3628[1] = x.APIVersion != ""
			yyq3628[2] = x.Stdin != false
			yyq3628[3] = x.Stdout != false
			yyq3628[4] = x.Stderr != false
			yyq3628[5] = x.TTY != false
			yyq3628[6] = x.Container != ""
			var yynn3628 int
			if yyr3628 || yy2arr3628 {
				r.EncodeArrayStart(8)
			} else {
				yynn3628 = 1
				for _, b := range yyq3628 {
					if b {
						yynn3628++
					}
				}
				r.EncodeMapStart(yynn3628)
				yynn3628 = 0
			}
			if yyr3628 || yy2arr3628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3628[0] {
					yym3630 := z.EncBinary()
					_ = yym3630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3628[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3631 := z.EncBinary()
					_ = yym3631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3628 || yy2arr3628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3628[1] {
					yym3633 := z.EncBinary()
					_ = yym3633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3628[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3634 := z.EncBinary()
					_ = yym3634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3628 || yy2arr3628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3628[2] {
					yym3636 := z.EncBinary()
					_ = yym3636
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3628[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3637 := z.EncBinary()
					_ = yym3637
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3628 || yy2arr3628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3628[3] {
					yym3639 := z.EncBinary()
					_ = yym3639
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3628[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3640 := z.EncBinary()
					_ = yym3640
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3628 || yy2arr3628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3628[4] {
					yym3642 := z.EncBinary()
					_ = yym3642
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3628[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3643 := z.EncBinary()
					_ = yym3643
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3628 || yy2arr3628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3628[5] {
					yym3645 := z.EncBinary()
					_ = yym3645
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3628[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3646 := z.EncBinary()
					_ = yym3646
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3628 || yy2arr3628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3628[6] {
					yym3648 := z.EncBinary()
					_ = yym3648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3628[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3649 := z.EncBinary()
					_ = yym3649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3628 || yy2arr3628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3651 := z.EncBinary()
					_ = yym3651
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3652 := z.EncBinary()
					_ = yym3652
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3628 || yy2arr3628 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3653 := z.DecBinary()
	_ = yym3653
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3654 := r.ContainerType()
		if yyct3654 == codecSelferValueTypeMap1234 {
			yyl3654 := r.ReadMapStart()
			if yyl3654 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3654, d)
			}
		} else if yyct3654 == codecSelferValueTypeArray1234 {
			yyl3654 := r.ReadArrayStart()
			if yyl3654 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3654, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3655Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3655Slc
	var yyhl3655 bool = l >= 0
	for yyj3655 := 0; ; yyj3655++ {
		if yyhl3655 {
			if yyj3655 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3655Slc = r.DecodeBytes(yys3655Slc, true, true)
		yys3655 := string(yys3655Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3655 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3663 := &x.Command
				yym3664 := z.DecBinary()
				_ = yym3664
				if false {
				} else {
					z.F.DecSliceStringX(yyv3663, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3655)
		} // end switch yys3655
	} // end for yyj3655
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3665 int
	var yyb3665 bool
	var yyhl3665 bool = l >= 0
	yyj3665++
	if yyhl3665 {
		yyb3665 = yyj3665 > l
	} else {
		yyb3665 = r.CheckBreak()
	}
	if yyb3665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3665++
	if yyhl3665 {
		yyb3665 = yyj3665 > l
	} else {
		yyb3665 = r.CheckBreak()
	}
	if yyb3665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3665++
	if yyhl3665 {
		yyb3665 = yyj3665 > l
	} else {
		yyb3665 = r.CheckBreak()
	}
	if yyb3665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3665++
	if yyhl3665 {
		yyb3665 = yyj3665 > l
	} else {
		yyb3665 = r.CheckBreak()
	}
	if yyb3665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3665++
	if yyhl3665 {
		yyb3665 = yyj3665 > l
	} else {
		yyb3665 = r.CheckBreak()
	}
	if yyb3665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3665++
	if yyhl3665 {
		yyb3665 = yyj3665 > l
	} else {
		yyb3665 = r.CheckBreak()
	}
	if yyb3665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3665++
	if yyhl3665 {
		yyb3665 = yyj3665 > l
	} else {
		yyb3665 = r.CheckBreak()
	}
	if yyb3665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3665++
	if yyhl3665 {
		yyb3665 = yyj3665 > l
	} else {
		yyb3665 = r.CheckBreak()
	}
	if yyb3665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3673 := &x.Command
		yym3674 := z.DecBinary()
		_ = yym3674
		if false {
		} else {
			z.F.DecSliceStringX(yyv3673, false, d)
		}
	}
	for {
		yyj3665++
		if yyhl3665 {
			yyb3665 = yyj3665 > l
		} else {
			yyb3665 = r.CheckBreak()
		}
		if yyb3665 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3665-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3675 := z.EncBinary()
		_ = yym3675
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3676 := !z.EncBinary()
			yy2arr3676 := z.EncBasicHandle().StructToArray
			var yyq3676 [3]bool
			_, _, _ = yysep3676, yyq3676, yy2arr3676
			const yyr3676 bool = false
			yyq3676[0] = x.Kind != ""
			yyq3676[1] = x.APIVersion != ""
			yyq3676[2] = x.Path != ""
			var yynn3676 int
			if yyr3676 || yy2arr3676 {
				r.EncodeArrayStart(3)
			} else {
				yynn3676 = 0
				for _, b := range yyq3676 {
					if b {
						yynn3676++
					}
				}
				r.EncodeMapStart(yynn3676)
				yynn3676 = 0
			}
			if yyr3676 || yy2arr3676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3676[0] {
					yym3678 := z.EncBinary()
					_ = yym3678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3676[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3679 := z.EncBinary()
					_ = yym3679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3676 || yy2arr3676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3676[1] {
					yym3681 := z.EncBinary()
					_ = yym3681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3676[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3682 := z.EncBinary()
					_ = yym3682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3676 || yy2arr3676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3676[2] {
					yym3684 := z.EncBinary()
					_ = yym3684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3676[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3685 := z.EncBinary()
					_ = yym3685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3676 || yy2arr3676 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3686 := z.DecBinary()
	_ = yym3686
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3687 := r.ContainerType()
		if yyct3687 == codecSelferValueTypeMap1234 {
			yyl3687 := r.ReadMapStart()
			if yyl3687 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3687, d)
			}
		} else if yyct3687 == codecSelferValueTypeArray1234 {
			yyl3687 := r.ReadArrayStart()
			if yyl3687 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3687, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3688Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3688Slc
	var yyhl3688 bool = l >= 0
	for yyj3688 := 0; ; yyj3688++ {
		if yyhl3688 {
			if yyj3688 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3688Slc = r.DecodeBytes(yys3688Slc, true, true)
		yys3688 := string(yys3688Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3688 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3688)
		} // end switch yys3688
	} // end for yyj3688
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3692 int
	var yyb3692 bool
	var yyhl3692 bool = l >= 0
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3692++
		if yyhl3692 {
			yyb3692 = yyj3692 > l
		} else {
			yyb3692 = r.CheckBreak()
		}
		if yyb3692 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3692-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3696 := z.EncBinary()
		_ = yym3696
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3697 := !z.EncBinary()
			yy2arr3697 := z.EncBasicHandle().StructToArray
			var yyq3697 [3]bool
			_, _, _ = yysep3697, yyq3697, yy2arr3697
			const yyr3697 bool = false
			yyq3697[0] = x.Kind != ""
			yyq3697[1] = x.APIVersion != ""
			yyq3697[2] = x.Path != ""
			var yynn3697 int
			if yyr3697 || yy2arr3697 {
				r.EncodeArrayStart(3)
			} else {
				yynn3697 = 0
				for _, b := range yyq3697 {
					if b {
						yynn3697++
					}
				}
				r.EncodeMapStart(yynn3697)
				yynn3697 = 0
			}
			if yyr3697 || yy2arr3697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3697[0] {
					yym3699 := z.EncBinary()
					_ = yym3699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3697[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3700 := z.EncBinary()
					_ = yym3700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3697 || yy2arr3697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3697[1] {
					yym3702 := z.EncBinary()
					_ = yym3702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3697[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3703 := z.EncBinary()
					_ = yym3703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3697 || yy2arr3697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3697[2] {
					yym3705 := z.EncBinary()
					_ = yym3705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3697[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3706 := z.EncBinary()
					_ = yym3706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3697 || yy2arr3697 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3707 := z.DecBinary()
	_ = yym3707
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3708 := r.ContainerType()
		if yyct3708 == codecSelferValueTypeMap1234 {
			yyl3708 := r.ReadMapStart()
			if yyl3708 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3708, d)
			}
		} else if yyct3708 == codecSelferValueTypeArray1234 {
			yyl3708 := r.ReadArrayStart()
			if yyl3708 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3708, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3709Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3709Slc
	var yyhl3709 bool = l >= 0
	for yyj3709 := 0; ; yyj3709++ {
		if yyhl3709 {
			if yyj3709 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3709Slc = r.DecodeBytes(yys3709Slc, true, true)
		yys3709 := string(yys3709Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3709 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3709)
		} // end switch yys3709
	} // end for yyj3709
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3713 int
	var yyb3713 bool
	var yyhl3713 bool = l >= 0
	yyj3713++
	if yyhl3713 {
		yyb3713 = yyj3713 > l
	} else {
		yyb3713 = r.CheckBreak()
	}
	if yyb3713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3713++
	if yyhl3713 {
		yyb3713 = yyj3713 > l
	} else {
		yyb3713 = r.CheckBreak()
	}
	if yyb3713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3713++
	if yyhl3713 {
		yyb3713 = yyj3713 > l
	} else {
		yyb3713 = r.CheckBreak()
	}
	if yyb3713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3713++
		if yyhl3713 {
			yyb3713 = yyj3713 > l
		} else {
			yyb3713 = r.CheckBreak()
		}
		if yyb3713 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3713-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3717 := z.EncBinary()
		_ = yym3717
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3718 := !z.EncBinary()
			yy2arr3718 := z.EncBasicHandle().StructToArray
			var yyq3718 [3]bool
			_, _, _ = yysep3718, yyq3718, yy2arr3718
			const yyr3718 bool = false
			yyq3718[0] = x.Kind != ""
			yyq3718[1] = x.APIVersion != ""
			yyq3718[2] = x.Path != ""
			var yynn3718 int
			if yyr3718 || yy2arr3718 {
				r.EncodeArrayStart(3)
			} else {
				yynn3718 = 0
				for _, b := range yyq3718 {
					if b {
						yynn3718++
					}
				}
				r.EncodeMapStart(yynn3718)
				yynn3718 = 0
			}
			if yyr3718 || yy2arr3718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3718[0] {
					yym3720 := z.EncBinary()
					_ = yym3720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3718[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3721 := z.EncBinary()
					_ = yym3721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3718 || yy2arr3718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3718[1] {
					yym3723 := z.EncBinary()
					_ = yym3723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3718[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3724 := z.EncBinary()
					_ = yym3724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3718 || yy2arr3718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3718[2] {
					yym3726 := z.EncBinary()
					_ = yym3726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3718[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3727 := z.EncBinary()
					_ = yym3727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3718 || yy2arr3718 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3728 := z.DecBinary()
	_ = yym3728
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3729 := r.ContainerType()
		if yyct3729 == codecSelferValueTypeMap1234 {
			yyl3729 := r.ReadMapStart()
			if yyl3729 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3729, d)
			}
		} else if yyct3729 == codecSelferValueTypeArray1234 {
			yyl3729 := r.ReadArrayStart()
			if yyl3729 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3729, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3730Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3730Slc
	var yyhl3730 bool = l >= 0
	for yyj3730 := 0; ; yyj3730++ {
		if yyhl3730 {
			if yyj3730 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3730Slc = r.DecodeBytes(yys3730Slc, true, true)
		yys3730 := string(yys3730Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3730 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3730)
		} // end switch yys3730
	} // end for yyj3730
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3734 int
	var yyb3734 bool
	var yyhl3734 bool = l >= 0
	yyj3734++
	if yyhl3734 {
		yyb3734 = yyj3734 > l
	} else {
		yyb3734 = r.CheckBreak()
	}
	if yyb3734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3734++
	if yyhl3734 {
		yyb3734 = yyj3734 > l
	} else {
		yyb3734 = r.CheckBreak()
	}
	if yyb3734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3734++
	if yyhl3734 {
		yyb3734 = yyj3734 > l
	} else {
		yyb3734 = r.CheckBreak()
	}
	if yyb3734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3734++
		if yyhl3734 {
			yyb3734 = yyj3734 > l
		} else {
			yyb3734 = r.CheckBreak()
		}
		if yyb3734 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3734-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3738 := z.EncBinary()
		_ = yym3738
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3739 := !z.EncBinary()
			yy2arr3739 := z.EncBasicHandle().StructToArray
			var yyq3739 [5]bool
			_, _, _ = yysep3739, yyq3739, yy2arr3739
			const yyr3739 bool = false
			yyq3739[4] = x.Controller != nil
			var yynn3739 int
			if yyr3739 || yy2arr3739 {
				r.EncodeArrayStart(5)
			} else {
				yynn3739 = 4
				for _, b := range yyq3739 {
					if b {
						yynn3739++
					}
				}
				r.EncodeMapStart(yynn3739)
				yynn3739 = 0
			}
			if yyr3739 || yy2arr3739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3741 := z.EncBinary()
				_ = yym3741
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3742 := z.EncBinary()
				_ = yym3742
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3739 || yy2arr3739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3744 := z.EncBinary()
				_ = yym3744
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3745 := z.EncBinary()
				_ = yym3745
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3739 || yy2arr3739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3747 := z.EncBinary()
				_ = yym3747
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3748 := z.EncBinary()
				_ = yym3748
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3739 || yy2arr3739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3750 := z.EncBinary()
				_ = yym3750
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3751 := z.EncBinary()
				_ = yym3751
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3739 || yy2arr3739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3739[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3753 := *x.Controller
						yym3754 := z.EncBinary()
						_ = yym3754
						if false {
						} else {
							r.EncodeBool(bool(yy3753))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3739[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3755 := *x.Controller
						yym3756 := z.EncBinary()
						_ = yym3756
						if false {
						} else {
							r.EncodeBool(bool(yy3755))
						}
					}
				}
			}
			if yyr3739 || yy2arr3739 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3757 := z.DecBinary()
	_ = yym3757
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3758 := r.ContainerType()
		if yyct3758 == codecSelferValueTypeMap1234 {
			yyl3758 := r.ReadMapStart()
			if yyl3758 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3758, d)
			}
		} else if yyct3758 == codecSelferValueTypeArray1234 {
			yyl3758 := r.ReadArrayStart()
			if yyl3758 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3758, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3759Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3759Slc
	var yyhl3759 bool = l >= 0
	for yyj3759 := 0; ; yyj3759++ {
		if yyhl3759 {
			if yyj3759 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3759Slc = r.DecodeBytes(yys3759Slc, true, true)
		yys3759 := string(yys3759Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3759 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3765 := z.DecBinary()
				_ = yym3765
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3759)
		} // end switch yys3759
	} // end for yyj3759
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3766 int
	var yyb3766 bool
	var yyhl3766 bool = l >= 0
	yyj3766++
	if yyhl3766 {
		yyb3766 = yyj3766 > l
	} else {
		yyb3766 = r.CheckBreak()
	}
	if yyb3766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3766++
	if yyhl3766 {
		yyb3766 = yyj3766 > l
	} else {
		yyb3766 = r.CheckBreak()
	}
	if yyb3766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3766++
	if yyhl3766 {
		yyb3766 = yyj3766 > l
	} else {
		yyb3766 = r.CheckBreak()
	}
	if yyb3766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3766++
	if yyhl3766 {
		yyb3766 = yyj3766 > l
	} else {
		yyb3766 = r.CheckBreak()
	}
	if yyb3766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3766++
	if yyhl3766 {
		yyb3766 = yyj3766 > l
	} else {
		yyb3766 = r.CheckBreak()
	}
	if yyb3766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3772 := z.DecBinary()
		_ = yym3772
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3766++
		if yyhl3766 {
			yyb3766 = yyj3766 > l
		} else {
			yyb3766 = r.CheckBreak()
		}
		if yyb3766 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3766-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3773 := z.EncBinary()
		_ = yym3773
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3774 := !z.EncBinary()
			yy2arr3774 := z.EncBasicHandle().StructToArray
			var yyq3774 [7]bool
			_, _, _ = yysep3774, yyq3774, yy2arr3774
			const yyr3774 bool = false
			yyq3774[0] = x.Kind != ""
			yyq3774[1] = x.Namespace != ""
			yyq3774[2] = x.Name != ""
			yyq3774[3] = x.UID != ""
			yyq3774[4] = x.APIVersion != ""
			yyq3774[5] = x.ResourceVersion != ""
			yyq3774[6] = x.FieldPath != ""
			var yynn3774 int
			if yyr3774 || yy2arr3774 {
				r.EncodeArrayStart(7)
			} else {
				yynn3774 = 0
				for _, b := range yyq3774 {
					if b {
						yynn3774++
					}
				}
				r.EncodeMapStart(yynn3774)
				yynn3774 = 0
			}
			if yyr3774 || yy2arr3774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3774[0] {
					yym3776 := z.EncBinary()
					_ = yym3776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3774[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3777 := z.EncBinary()
					_ = yym3777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3774 || yy2arr3774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3774[1] {
					yym3779 := z.EncBinary()
					_ = yym3779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3774[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3780 := z.EncBinary()
					_ = yym3780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3774 || yy2arr3774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3774[2] {
					yym3782 := z.EncBinary()
					_ = yym3782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3774[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3783 := z.EncBinary()
					_ = yym3783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3774 || yy2arr3774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3774[3] {
					yym3785 := z.EncBinary()
					_ = yym3785
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3774[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3786 := z.EncBinary()
					_ = yym3786
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3774 || yy2arr3774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3774[4] {
					yym3788 := z.EncBinary()
					_ = yym3788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3774[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3789 := z.EncBinary()
					_ = yym3789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3774 || yy2arr3774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3774[5] {
					yym3791 := z.EncBinary()
					_ = yym3791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3774[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3792 := z.EncBinary()
					_ = yym3792
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3774 || yy2arr3774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3774[6] {
					yym3794 := z.EncBinary()
					_ = yym3794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3774[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3795 := z.EncBinary()
					_ = yym3795
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3774 || yy2arr3774 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3796 := z.DecBinary()
	_ = yym3796
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3797 := r.ContainerType()
		if yyct3797 == codecSelferValueTypeMap1234 {
			yyl3797 := r.ReadMapStart()
			if yyl3797 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3797, d)
			}
		} else if yyct3797 == codecSelferValueTypeArray1234 {
			yyl3797 := r.ReadArrayStart()
			if yyl3797 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3797, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3798Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3798Slc
	var yyhl3798 bool = l >= 0
	for yyj3798 := 0; ; yyj3798++ {
		if yyhl3798 {
			if yyj3798 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3798Slc = r.DecodeBytes(yys3798Slc, true, true)
		yys3798 := string(yys3798Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3798 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3798)
		} // end switch yys3798
	} // end for yyj3798
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3806 int
	var yyb3806 bool
	var yyhl3806 bool = l >= 0
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3806++
	if yyhl3806 {
		yyb3806 = yyj3806 > l
	} else {
		yyb3806 = r.CheckBreak()
	}
	if yyb3806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3806++
		if yyhl3806 {
			yyb3806 = yyj3806 > l
		} else {
			yyb3806 = r.CheckBreak()
		}
		if yyb3806 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3806-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3814 := z.EncBinary()
		_ = yym3814
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3815 := !z.EncBinary()
			yy2arr3815 := z.EncBasicHandle().StructToArray
			var yyq3815 [1]bool
			_, _, _ = yysep3815, yyq3815, yy2arr3815
			const yyr3815 bool = false
			yyq3815[0] = x.Name != ""
			var yynn3815 int
			if yyr3815 || yy2arr3815 {
				r.EncodeArrayStart(1)
			} else {
				yynn3815 = 0
				for _, b := range yyq3815 {
					if b {
						yynn3815++
					}
				}
				r.EncodeMapStart(yynn3815)
				yynn3815 = 0
			}
			if yyr3815 || yy2arr3815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3815[0] {
					yym3817 := z.EncBinary()
					_ = yym3817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3815[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3815 || yy2arr3815 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3819 := z.DecBinary()
	_ = yym3819
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3820 := r.ContainerType()
		if yyct3820 == codecSelferValueTypeMap1234 {
			yyl3820 := r.ReadMapStart()
			if yyl3820 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3820, d)
			}
		} else if yyct3820 == codecSelferValueTypeArray1234 {
			yyl3820 := r.ReadArrayStart()
			if yyl3820 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3820, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3821Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3821Slc
	var yyhl3821 bool = l >= 0
	for yyj3821 := 0; ; yyj3821++ {
		if yyhl3821 {
			if yyj3821 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3821Slc = r.DecodeBytes(yys3821Slc, true, true)
		yys3821 := string(yys3821Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3821 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3821)
		} // end switch yys3821
	} // end for yyj3821
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3823 int
	var yyb3823 bool
	var yyhl3823 bool = l >= 0
	yyj3823++
	if yyhl3823 {
		yyb3823 = yyj3823 > l
	} else {
		yyb3823 = r.CheckBreak()
	}
	if yyb3823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3823++
		if yyhl3823 {
			yyb3823 = yyj3823 > l
		} else {
			yyb3823 = r.CheckBreak()
		}
		if yyb3823 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3823-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3825 := z.EncBinary()
		_ = yym3825
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3826 := !z.EncBinary()
			yy2arr3826 := z.EncBasicHandle().StructToArray
			var yyq3826 [3]bool
			_, _, _ = yysep3826, yyq3826, yy2arr3826
			const yyr3826 bool = false
			yyq3826[0] = x.Kind != ""
			yyq3826[1] = x.APIVersion != ""
			yyq3826[2] = true
			var yynn3826 int
			if yyr3826 || yy2arr3826 {
				r.EncodeArrayStart(3)
			} else {
				yynn3826 = 0
				for _, b := range yyq3826 {
					if b {
						yynn3826++
					}
				}
				r.EncodeMapStart(yynn3826)
				yynn3826 = 0
			}
			if yyr3826 || yy2arr3826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3826[0] {
					yym3828 := z.EncBinary()
					_ = yym3828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3826[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3829 := z.EncBinary()
					_ = yym3829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3826 || yy2arr3826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3826[1] {
					yym3831 := z.EncBinary()
					_ = yym3831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3826[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3832 := z.EncBinary()
					_ = yym3832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3826 || yy2arr3826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3826[2] {
					yy3834 := &x.Reference
					yy3834.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3826[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3835 := &x.Reference
					yy3835.CodecEncodeSelf(e)
				}
			}
			if yyr3826 || yy2arr3826 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3836 := z.DecBinary()
	_ = yym3836
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3837 := r.ContainerType()
		if yyct3837 == codecSelferValueTypeMap1234 {
			yyl3837 := r.ReadMapStart()
			if yyl3837 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3837, d)
			}
		} else if yyct3837 == codecSelferValueTypeArray1234 {
			yyl3837 := r.ReadArrayStart()
			if yyl3837 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3837, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3838Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3838Slc
	var yyhl3838 bool = l >= 0
	for yyj3838 := 0; ; yyj3838++ {
		if yyhl3838 {
			if yyj3838 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3838Slc = r.DecodeBytes(yys3838Slc, true, true)
		yys3838 := string(yys3838Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3838 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3841 := &x.Reference
				yyv3841.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3838)
		} // end switch yys3838
	} // end for yyj3838
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3842 int
	var yyb3842 bool
	var yyhl3842 bool = l >= 0
	yyj3842++
	if yyhl3842 {
		yyb3842 = yyj3842 > l
	} else {
		yyb3842 = r.CheckBreak()
	}
	if yyb3842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3842++
	if yyhl3842 {
		yyb3842 = yyj3842 > l
	} else {
		yyb3842 = r.CheckBreak()
	}
	if yyb3842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3842++
	if yyhl3842 {
		yyb3842 = yyj3842 > l
	} else {
		yyb3842 = r.CheckBreak()
	}
	if yyb3842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3845 := &x.Reference
		yyv3845.CodecDecodeSelf(d)
	}
	for {
		yyj3842++
		if yyhl3842 {
			yyb3842 = yyj3842 > l
		} else {
			yyb3842 = r.CheckBreak()
		}
		if yyb3842 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3842-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3846 := z.EncBinary()
		_ = yym3846
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3847 := !z.EncBinary()
			yy2arr3847 := z.EncBasicHandle().StructToArray
			var yyq3847 [2]bool
			_, _, _ = yysep3847, yyq3847, yy2arr3847
			const yyr3847 bool = false
			yyq3847[0] = x.Component != ""
			yyq3847[1] = x.Host != ""
			var yynn3847 int
			if yyr3847 || yy2arr3847 {
				r.EncodeArrayStart(2)
			} else {
				yynn3847 = 0
				for _, b := range yyq3847 {
					if b {
						yynn3847++
					}
				}
				r.EncodeMapStart(yynn3847)
				yynn3847 = 0
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[0] {
					yym3849 := z.EncBinary()
					_ = yym3849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3847[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3850 := z.EncBinary()
					_ = yym3850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[1] {
					yym3852 := z.EncBinary()
					_ = yym3852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3847[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3853 := z.EncBinary()
					_ = yym3853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3854 := z.DecBinary()
	_ = yym3854
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3855 := r.ContainerType()
		if yyct3855 == codecSelferValueTypeMap1234 {
			yyl3855 := r.ReadMapStart()
			if yyl3855 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3855, d)
			}
		} else if yyct3855 == codecSelferValueTypeArray1234 {
			yyl3855 := r.ReadArrayStart()
			if yyl3855 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3855, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3856Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3856Slc
	var yyhl3856 bool = l >= 0
	for yyj3856 := 0; ; yyj3856++ {
		if yyhl3856 {
			if yyj3856 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3856Slc = r.DecodeBytes(yys3856Slc, true, true)
		yys3856 := string(yys3856Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3856 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3856)
		} // end switch yys3856
	} // end for yyj3856
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3859 int
	var yyb3859 bool
	var yyhl3859 bool = l >= 0
	yyj3859++
	if yyhl3859 {
		yyb3859 = yyj3859 > l
	} else {
		yyb3859 = r.CheckBreak()
	}
	if yyb3859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3859++
	if yyhl3859 {
		yyb3859 = yyj3859 > l
	} else {
		yyb3859 = r.CheckBreak()
	}
	if yyb3859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3859++
		if yyhl3859 {
			yyb3859 = yyj3859 > l
		} else {
			yyb3859 = r.CheckBreak()
		}
		if yyb3859 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3859-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3862 := z.EncBinary()
		_ = yym3862
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3863 := !z.EncBinary()
			yy2arr3863 := z.EncBasicHandle().StructToArray
			var yyq3863 [11]bool
			_, _, _ = yysep3863, yyq3863, yy2arr3863
			const yyr3863 bool = false
			yyq3863[0] = x.Kind != ""
			yyq3863[1] = x.APIVersion != ""
			yyq3863[4] = x.Reason != ""
			yyq3863[5] = x.Message != ""
			yyq3863[6] = true
			yyq3863[7] = true
			yyq3863[8] = true
			yyq3863[9] = x.Count != 0
			yyq3863[10] = x.Type != ""
			var yynn3863 int
			if yyr3863 || yy2arr3863 {
				r.EncodeArrayStart(11)
			} else {
				yynn3863 = 2
				for _, b := range yyq3863 {
					if b {
						yynn3863++
					}
				}
				r.EncodeMapStart(yynn3863)
				yynn3863 = 0
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3863[0] {
					yym3865 := z.EncBinary()
					_ = yym3865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3863[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3866 := z.EncBinary()
					_ = yym3866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3863[1] {
					yym3868 := z.EncBinary()
					_ = yym3868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3863[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3869 := z.EncBinary()
					_ = yym3869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3871 := &x.ObjectMeta
				yy3871.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3872 := &x.ObjectMeta
				yy3872.CodecEncodeSelf(e)
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3874 := &x.InvolvedObject
				yy3874.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3875 := &x.InvolvedObject
				yy3875.CodecEncodeSelf(e)
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3863[4] {
					yym3877 := z.EncBinary()
					_ = yym3877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3863[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3878 := z.EncBinary()
					_ = yym3878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3863[5] {
					yym3880 := z.EncBinary()
					_ = yym3880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3863[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3881 := z.EncBinary()
					_ = yym3881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3863[6] {
					yy3883 := &x.Source
					yy3883.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3863[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3884 := &x.Source
					yy3884.CodecEncodeSelf(e)
				}
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3863[7] {
					yy3886 := &x.FirstTimestamp
					yym3887 := z.EncBinary()
					_ = yym3887
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3886) {
					} else if yym3887 {
						z.EncBinaryMarshal(yy3886)
					} else if !yym3887 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3886)
					} else {
						z.EncFallback(yy3886)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3863[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3888 := &x.FirstTimestamp
					yym3889 := z.EncBinary()
					_ = yym3889
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3888) {
					} else if yym3889 {
						z.EncBinaryMarshal(yy3888)
					} else if !yym3889 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3888)
					} else {
						z.EncFallback(yy3888)
					}
				}
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3863[8] {
					yy3891 := &x.LastTimestamp
					yym3892 := z.EncBinary()
					_ = yym3892
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3891) {
					} else if yym3892 {
						z.EncBinaryMarshal(yy3891)
					} else if !yym3892 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3891)
					} else {
						z.EncFallback(yy3891)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3863[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3893 := &x.LastTimestamp
					yym3894 := z.EncBinary()
					_ = yym3894
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3893) {
					} else if yym3894 {
						z.EncBinaryMarshal(yy3893)
					} else if !yym3894 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3893)
					} else {
						z.EncFallback(yy3893)
					}
				}
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3863[9] {
					yym3896 := z.EncBinary()
					_ = yym3896
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3863[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3897 := z.EncBinary()
					_ = yym3897
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3863[10] {
					yym3899 := z.EncBinary()
					_ = yym3899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3863[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3900 := z.EncBinary()
					_ = yym3900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3863 || yy2arr3863 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3901 := z.DecBinary()
	_ = yym3901
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3902 := r.ContainerType()
		if yyct3902 == codecSelferValueTypeMap1234 {
			yyl3902 := r.ReadMapStart()
			if yyl3902 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3902, d)
			}
		} else if yyct3902 == codecSelferValueTypeArray1234 {
			yyl3902 := r.ReadArrayStart()
			if yyl3902 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3902, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3903Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3903Slc
	var yyhl3903 bool = l >= 0
	for yyj3903 := 0; ; yyj3903++ {
		if yyhl3903 {
			if yyj3903 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3903Slc = r.DecodeBytes(yys3903Slc, true, true)
		yys3903 := string(yys3903Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3903 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3906 := &x.ObjectMeta
				yyv3906.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3907 := &x.InvolvedObject
				yyv3907.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3910 := &x.Source
				yyv3910.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3911 := &x.FirstTimestamp
				yym3912 := z.DecBinary()
				_ = yym3912
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3911) {
				} else if yym3912 {
					z.DecBinaryUnmarshal(yyv3911)
				} else if !yym3912 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3911)
				} else {
					z.DecFallback(yyv3911, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3913 := &x.LastTimestamp
				yym3914 := z.DecBinary()
				_ = yym3914
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3913) {
				} else if yym3914 {
					z.DecBinaryUnmarshal(yyv3913)
				} else if !yym3914 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3913)
				} else {
					z.DecFallback(yyv3913, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3903)
		} // end switch yys3903
	} // end for yyj3903
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3917 int
	var yyb3917 bool
	var yyhl3917 bool = l >= 0
	yyj3917++
	if yyhl3917 {
		yyb3917 = yyj3917 > l
	} else {
		yyb3917 = r.CheckBreak()
	}
	if yyb3917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3917++
	if yyhl3917 {
		yyb3917 = yyj3917 > l
	} else {
		yyb3917 = r.CheckBreak()
	}
	if yyb3917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3917++
	if yyhl3917 {
		yyb3917 = yyj3917 > l
	} else {
		yyb3917 = r.CheckBreak()
	}
	if yyb3917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3920 := &x.ObjectMeta
		yyv3920.CodecDecodeSelf(d)
	}
	yyj3917++
	if yyhl3917 {
		yyb3917 = yyj3917 > l
	} else {
		yyb3917 = r.CheckBreak()
	}
	if yyb3917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3921 := &x.InvolvedObject
		yyv3921.CodecDecodeSelf(d)
	}
	yyj3917++
	if yyhl3917 {
		yyb3917 = yyj3917 > l
	} else {
		yyb3917 = r.CheckBreak()
	}
	if yyb3917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3917++
	if yyhl3917 {
		yyb3917 = yyj3917 > l
	} else {
		yyb3917 = r.CheckBreak()
	}
	if yyb3917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3917++
	if yyhl3917 {
		yyb3917 = yyj3917 > l
	} else {
		yyb3917 = r.CheckBreak()
	}
	if yyb3917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3924 := &x.Source
		yyv3924.CodecDecodeSelf(d)
	}
	yyj3917++
	if yyhl3917 {
		yyb3917 = yyj3917 > l
	} else {
		yyb3917 = r.CheckBreak()
	}
	if yyb3917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3925 := &x.FirstTimestamp
		yym3926 := z.DecBinary()
		_ = yym3926
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3925) {
		} else if yym3926 {
			z.DecBinaryUnmarshal(yyv3925)
		} else if !yym3926 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3925)
		} else {
			z.DecFallback(yyv3925, false)
		}
	}
	yyj3917++
	if yyhl3917 {
		yyb3917 = yyj3917 > l
	} else {
		yyb3917 = r.CheckBreak()
	}
	if yyb3917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3927 := &x.LastTimestamp
		yym3928 := z.DecBinary()
		_ = yym3928
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3927) {
		} else if yym3928 {
			z.DecBinaryUnmarshal(yyv3927)
		} else if !yym3928 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3927)
		} else {
			z.DecFallback(yyv3927, false)
		}
	}
	yyj3917++
	if yyhl3917 {
		yyb3917 = yyj3917 > l
	} else {
		yyb3917 = r.CheckBreak()
	}
	if yyb3917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3917++
	if yyhl3917 {
		yyb3917 = yyj3917 > l
	} else {
		yyb3917 = r.CheckBreak()
	}
	if yyb3917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3917++
		if yyhl3917 {
			yyb3917 = yyj3917 > l
		} else {
			yyb3917 = r.CheckBreak()
		}
		if yyb3917 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3917-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3931 := z.EncBinary()
		_ = yym3931
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3932 := !z.EncBinary()
			yy2arr3932 := z.EncBasicHandle().StructToArray
			var yyq3932 [4]bool
			_, _, _ = yysep3932, yyq3932, yy2arr3932
			const yyr3932 bool = false
			yyq3932[0] = x.Kind != ""
			yyq3932[1] = x.APIVersion != ""
			yyq3932[2] = true
			var yynn3932 int
			if yyr3932 || yy2arr3932 {
				r.EncodeArrayStart(4)
			} else {
				yynn3932 = 1
				for _, b := range yyq3932 {
					if b {
						yynn3932++
					}
				}
				r.EncodeMapStart(yynn3932)
				yynn3932 = 0
			}
			if yyr3932 || yy2arr3932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3932[0] {
					yym3934 := z.EncBinary()
					_ = yym3934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3932[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3935 := z.EncBinary()
					_ = yym3935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3932 || yy2arr3932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3932[1] {
					yym3937 := z.EncBinary()
					_ = yym3937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3932[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3938 := z.EncBinary()
					_ = yym3938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3932 || yy2arr3932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3932[2] {
					yy3940 := &x.ListMeta
					yym3941 := z.EncBinary()
					_ = yym3941
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3940) {
					} else {
						z.EncFallback(yy3940)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3932[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3942 := &x.ListMeta
					yym3943 := z.EncBinary()
					_ = yym3943
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3942) {
					} else {
						z.EncFallback(yy3942)
					}
				}
			}
			if yyr3932 || yy2arr3932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3945 := z.EncBinary()
					_ = yym3945
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3946 := z.EncBinary()
					_ = yym3946
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3932 || yy2arr3932 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3947 := z.DecBinary()
	_ = yym3947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3948 := r.ContainerType()
		if yyct3948 == codecSelferValueTypeMap1234 {
			yyl3948 := r.ReadMapStart()
			if yyl3948 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3948, d)
			}
		} else if yyct3948 == codecSelferValueTypeArray1234 {
			yyl3948 := r.ReadArrayStart()
			if yyl3948 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3949Slc
	var yyhl3949 bool = l >= 0
	for yyj3949 := 0; ; yyj3949++ {
		if yyhl3949 {
			if yyj3949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3949Slc = r.DecodeBytes(yys3949Slc, true, true)
		yys3949 := string(yys3949Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3949 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3952 := &x.ListMeta
				yym3953 := z.DecBinary()
				_ = yym3953
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3952) {
				} else {
					z.DecFallback(yyv3952, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3954 := &x.Items
				yym3955 := z.DecBinary()
				_ = yym3955
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3954), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3949)
		} // end switch yys3949
	} // end for yyj3949
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3956 int
	var yyb3956 bool
	var yyhl3956 bool = l >= 0
	yyj3956++
	if yyhl3956 {
		yyb3956 = yyj3956 > l
	} else {
		yyb3956 = r.CheckBreak()
	}
	if yyb3956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3956++
	if yyhl3956 {
		yyb3956 = yyj3956 > l
	} else {
		yyb3956 = r.CheckBreak()
	}
	if yyb3956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3956++
	if yyhl3956 {
		yyb3956 = yyj3956 > l
	} else {
		yyb3956 = r.CheckBreak()
	}
	if yyb3956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3959 := &x.ListMeta
		yym3960 := z.DecBinary()
		_ = yym3960
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3959) {
		} else {
			z.DecFallback(yyv3959, false)
		}
	}
	yyj3956++
	if yyhl3956 {
		yyb3956 = yyj3956 > l
	} else {
		yyb3956 = r.CheckBreak()
	}
	if yyb3956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3961 := &x.Items
		yym3962 := z.DecBinary()
		_ = yym3962
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3961), d)
		}
	}
	for {
		yyj3956++
		if yyhl3956 {
			yyb3956 = yyj3956 > l
		} else {
			yyb3956 = r.CheckBreak()
		}
		if yyb3956 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3956-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3963 := z.EncBinary()
		_ = yym3963
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3964 := !z.EncBinary()
			yy2arr3964 := z.EncBasicHandle().StructToArray
			var yyq3964 [4]bool
			_, _, _ = yysep3964, yyq3964, yy2arr3964
			const yyr3964 bool = false
			yyq3964[0] = x.Kind != ""
			yyq3964[1] = x.APIVersion != ""
			yyq3964[2] = true
			var yynn3964 int
			if yyr3964 || yy2arr3964 {
				r.EncodeArrayStart(4)
			} else {
				yynn3964 = 1
				for _, b := range yyq3964 {
					if b {
						yynn3964++
					}
				}
				r.EncodeMapStart(yynn3964)
				yynn3964 = 0
			}
			if yyr3964 || yy2arr3964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3964[0] {
					yym3966 := z.EncBinary()
					_ = yym3966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3964[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3967 := z.EncBinary()
					_ = yym3967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3964 || yy2arr3964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3964[1] {
					yym3969 := z.EncBinary()
					_ = yym3969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3964[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3970 := z.EncBinary()
					_ = yym3970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3964 || yy2arr3964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3964[2] {
					yy3972 := &x.ListMeta
					yym3973 := z.EncBinary()
					_ = yym3973
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3972) {
					} else {
						z.EncFallback(yy3972)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3964[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3974 := &x.ListMeta
					yym3975 := z.EncBinary()
					_ = yym3975
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3974) {
					} else {
						z.EncFallback(yy3974)
					}
				}
			}
			if yyr3964 || yy2arr3964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3977 := z.EncBinary()
					_ = yym3977
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3978 := z.EncBinary()
					_ = yym3978
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3964 || yy2arr3964 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3979 := z.DecBinary()
	_ = yym3979
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3980 := r.ContainerType()
		if yyct3980 == codecSelferValueTypeMap1234 {
			yyl3980 := r.ReadMapStart()
			if yyl3980 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3980, d)
			}
		} else if yyct3980 == codecSelferValueTypeArray1234 {
			yyl3980 := r.ReadArrayStart()
			if yyl3980 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3980, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3981Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3981Slc
	var yyhl3981 bool = l >= 0
	for yyj3981 := 0; ; yyj3981++ {
		if yyhl3981 {
			if yyj3981 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3981Slc = r.DecodeBytes(yys3981Slc, true, true)
		yys3981 := string(yys3981Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3981 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3984 := &x.ListMeta
				yym3985 := z.DecBinary()
				_ = yym3985
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3984) {
				} else {
					z.DecFallback(yyv3984, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3986 := &x.Items
				yym3987 := z.DecBinary()
				_ = yym3987
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3986), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3981)
		} // end switch yys3981
	} // end for yyj3981
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3988 int
	var yyb3988 bool
	var yyhl3988 bool = l >= 0
	yyj3988++
	if yyhl3988 {
		yyb3988 = yyj3988 > l
	} else {
		yyb3988 = r.CheckBreak()
	}
	if yyb3988 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3988++
	if yyhl3988 {
		yyb3988 = yyj3988 > l
	} else {
		yyb3988 = r.CheckBreak()
	}
	if yyb3988 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3988++
	if yyhl3988 {
		yyb3988 = yyj3988 > l
	} else {
		yyb3988 = r.CheckBreak()
	}
	if yyb3988 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3991 := &x.ListMeta
		yym3992 := z.DecBinary()
		_ = yym3992
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3991) {
		} else {
			z.DecFallback(yyv3991, false)
		}
	}
	yyj3988++
	if yyhl3988 {
		yyb3988 = yyj3988 > l
	} else {
		yyb3988 = r.CheckBreak()
	}
	if yyb3988 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3993 := &x.Items
		yym3994 := z.DecBinary()
		_ = yym3994
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3993), d)
		}
	}
	for {
		yyj3988++
		if yyhl3988 {
			yyb3988 = yyj3988 > l
		} else {
			yyb3988 = r.CheckBreak()
		}
		if yyb3988 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3988-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3995 := z.EncBinary()
	_ = yym3995
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3996 := z.DecBinary()
	_ = yym3996
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3997 := z.EncBinary()
		_ = yym3997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3998 := !z.EncBinary()
			yy2arr3998 := z.EncBasicHandle().StructToArray
			var yyq3998 [6]bool
			_, _, _ = yysep3998, yyq3998, yy2arr3998
			const yyr3998 bool = false
			yyq3998[0] = x.Type != ""
			yyq3998[1] = len(x.Max) != 0
			yyq3998[2] = len(x.Min) != 0
			yyq3998[3] = len(x.Default) != 0
			yyq3998[4] = len(x.DefaultRequest) != 0
			yyq3998[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3998 int
			if yyr3998 || yy2arr3998 {
				r.EncodeArrayStart(6)
			} else {
				yynn3998 = 0
				for _, b := range yyq3998 {
					if b {
						yynn3998++
					}
				}
				r.EncodeMapStart(yynn3998)
				yynn3998 = 0
			}
			if yyr3998 || yy2arr3998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3998[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3998[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3998 || yy2arr3998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3998[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3998[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3998 || yy2arr3998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3998[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3998[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3998 || yy2arr3998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3998[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3998[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3998 || yy2arr3998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3998[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3998[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3998 || yy2arr3998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3998[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3998[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3998 || yy2arr3998 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4005 := z.DecBinary()
	_ = yym4005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4006 := r.ContainerType()
		if yyct4006 == codecSelferValueTypeMap1234 {
			yyl4006 := r.ReadMapStart()
			if yyl4006 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4006, d)
			}
		} else if yyct4006 == codecSelferValueTypeArray1234 {
			yyl4006 := r.ReadArrayStart()
			if yyl4006 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4007Slc
	var yyhl4007 bool = l >= 0
	for yyj4007 := 0; ; yyj4007++ {
		if yyhl4007 {
			if yyj4007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4007Slc = r.DecodeBytes(yys4007Slc, true, true)
		yys4007 := string(yys4007Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4007 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4009 := &x.Max
				yyv4009.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4010 := &x.Min
				yyv4010.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4011 := &x.Default
				yyv4011.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4012 := &x.DefaultRequest
				yyv4012.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4013 := &x.MaxLimitRequestRatio
				yyv4013.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4007)
		} // end switch yys4007
	} // end for yyj4007
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4014 int
	var yyb4014 bool
	var yyhl4014 bool = l >= 0
	yyj4014++
	if yyhl4014 {
		yyb4014 = yyj4014 > l
	} else {
		yyb4014 = r.CheckBreak()
	}
	if yyb4014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4014++
	if yyhl4014 {
		yyb4014 = yyj4014 > l
	} else {
		yyb4014 = r.CheckBreak()
	}
	if yyb4014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4016 := &x.Max
		yyv4016.CodecDecodeSelf(d)
	}
	yyj4014++
	if yyhl4014 {
		yyb4014 = yyj4014 > l
	} else {
		yyb4014 = r.CheckBreak()
	}
	if yyb4014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4017 := &x.Min
		yyv4017.CodecDecodeSelf(d)
	}
	yyj4014++
	if yyhl4014 {
		yyb4014 = yyj4014 > l
	} else {
		yyb4014 = r.CheckBreak()
	}
	if yyb4014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4018 := &x.Default
		yyv4018.CodecDecodeSelf(d)
	}
	yyj4014++
	if yyhl4014 {
		yyb4014 = yyj4014 > l
	} else {
		yyb4014 = r.CheckBreak()
	}
	if yyb4014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4019 := &x.DefaultRequest
		yyv4019.CodecDecodeSelf(d)
	}
	yyj4014++
	if yyhl4014 {
		yyb4014 = yyj4014 > l
	} else {
		yyb4014 = r.CheckBreak()
	}
	if yyb4014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4020 := &x.MaxLimitRequestRatio
		yyv4020.CodecDecodeSelf(d)
	}
	for {
		yyj4014++
		if yyhl4014 {
			yyb4014 = yyj4014 > l
		} else {
			yyb4014 = r.CheckBreak()
		}
		if yyb4014 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4014-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4021 := z.EncBinary()
		_ = yym4021
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4022 := !z.EncBinary()
			yy2arr4022 := z.EncBasicHandle().StructToArray
			var yyq4022 [1]bool
			_, _, _ = yysep4022, yyq4022, yy2arr4022
			const yyr4022 bool = false
			var yynn4022 int
			if yyr4022 || yy2arr4022 {
				r.EncodeArrayStart(1)
			} else {
				yynn4022 = 1
				for _, b := range yyq4022 {
					if b {
						yynn4022++
					}
				}
				r.EncodeMapStart(yynn4022)
				yynn4022 = 0
			}
			if yyr4022 || yy2arr4022 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4024 := z.EncBinary()
					_ = yym4024
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4025 := z.EncBinary()
					_ = yym4025
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4022 || yy2arr4022 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4026 := z.DecBinary()
	_ = yym4026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4027 := r.ContainerType()
		if yyct4027 == codecSelferValueTypeMap1234 {
			yyl4027 := r.ReadMapStart()
			if yyl4027 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4027, d)
			}
		} else if yyct4027 == codecSelferValueTypeArray1234 {
			yyl4027 := r.ReadArrayStart()
			if yyl4027 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4027, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4028Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4028Slc
	var yyhl4028 bool = l >= 0
	for yyj4028 := 0; ; yyj4028++ {
		if yyhl4028 {
			if yyj4028 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4028Slc = r.DecodeBytes(yys4028Slc, true, true)
		yys4028 := string(yys4028Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4028 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4029 := &x.Limits
				yym4030 := z.DecBinary()
				_ = yym4030
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4029), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4028)
		} // end switch yys4028
	} // end for yyj4028
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4031 int
	var yyb4031 bool
	var yyhl4031 bool = l >= 0
	yyj4031++
	if yyhl4031 {
		yyb4031 = yyj4031 > l
	} else {
		yyb4031 = r.CheckBreak()
	}
	if yyb4031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4032 := &x.Limits
		yym4033 := z.DecBinary()
		_ = yym4033
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4032), d)
		}
	}
	for {
		yyj4031++
		if yyhl4031 {
			yyb4031 = yyj4031 > l
		} else {
			yyb4031 = r.CheckBreak()
		}
		if yyb4031 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4031-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4034 := z.EncBinary()
		_ = yym4034
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4035 := !z.EncBinary()
			yy2arr4035 := z.EncBasicHandle().StructToArray
			var yyq4035 [4]bool
			_, _, _ = yysep4035, yyq4035, yy2arr4035
			const yyr4035 bool = false
			yyq4035[0] = x.Kind != ""
			yyq4035[1] = x.APIVersion != ""
			yyq4035[2] = true
			yyq4035[3] = true
			var yynn4035 int
			if yyr4035 || yy2arr4035 {
				r.EncodeArrayStart(4)
			} else {
				yynn4035 = 0
				for _, b := range yyq4035 {
					if b {
						yynn4035++
					}
				}
				r.EncodeMapStart(yynn4035)
				yynn4035 = 0
			}
			if yyr4035 || yy2arr4035 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4035[0] {
					yym4037 := z.EncBinary()
					_ = yym4037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4035[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4038 := z.EncBinary()
					_ = yym4038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4035 || yy2arr4035 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4035[1] {
					yym4040 := z.EncBinary()
					_ = yym4040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4035[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4041 := z.EncBinary()
					_ = yym4041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4035 || yy2arr4035 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4035[2] {
					yy4043 := &x.ObjectMeta
					yy4043.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4035[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4044 := &x.ObjectMeta
					yy4044.CodecEncodeSelf(e)
				}
			}
			if yyr4035 || yy2arr4035 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4035[3] {
					yy4046 := &x.Spec
					yy4046.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4035[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4047 := &x.Spec
					yy4047.CodecEncodeSelf(e)
				}
			}
			if yyr4035 || yy2arr4035 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4048 := z.DecBinary()
	_ = yym4048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4049 := r.ContainerType()
		if yyct4049 == codecSelferValueTypeMap1234 {
			yyl4049 := r.ReadMapStart()
			if yyl4049 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4049, d)
			}
		} else if yyct4049 == codecSelferValueTypeArray1234 {
			yyl4049 := r.ReadArrayStart()
			if yyl4049 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4050Slc
	var yyhl4050 bool = l >= 0
	for yyj4050 := 0; ; yyj4050++ {
		if yyhl4050 {
			if yyj4050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4050Slc = r.DecodeBytes(yys4050Slc, true, true)
		yys4050 := string(yys4050Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4050 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4053 := &x.ObjectMeta
				yyv4053.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4054 := &x.Spec
				yyv4054.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4050)
		} // end switch yys4050
	} // end for yyj4050
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4055 int
	var yyb4055 bool
	var yyhl4055 bool = l >= 0
	yyj4055++
	if yyhl4055 {
		yyb4055 = yyj4055 > l
	} else {
		yyb4055 = r.CheckBreak()
	}
	if yyb4055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4055++
	if yyhl4055 {
		yyb4055 = yyj4055 > l
	} else {
		yyb4055 = r.CheckBreak()
	}
	if yyb4055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4055++
	if yyhl4055 {
		yyb4055 = yyj4055 > l
	} else {
		yyb4055 = r.CheckBreak()
	}
	if yyb4055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4058 := &x.ObjectMeta
		yyv4058.CodecDecodeSelf(d)
	}
	yyj4055++
	if yyhl4055 {
		yyb4055 = yyj4055 > l
	} else {
		yyb4055 = r.CheckBreak()
	}
	if yyb4055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4059 := &x.Spec
		yyv4059.CodecDecodeSelf(d)
	}
	for {
		yyj4055++
		if yyhl4055 {
			yyb4055 = yyj4055 > l
		} else {
			yyb4055 = r.CheckBreak()
		}
		if yyb4055 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4055-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4060 := z.EncBinary()
		_ = yym4060
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4061 := !z.EncBinary()
			yy2arr4061 := z.EncBasicHandle().StructToArray
			var yyq4061 [4]bool
			_, _, _ = yysep4061, yyq4061, yy2arr4061
			const yyr4061 bool = false
			yyq4061[0] = x.Kind != ""
			yyq4061[1] = x.APIVersion != ""
			yyq4061[2] = true
			var yynn4061 int
			if yyr4061 || yy2arr4061 {
				r.EncodeArrayStart(4)
			} else {
				yynn4061 = 1
				for _, b := range yyq4061 {
					if b {
						yynn4061++
					}
				}
				r.EncodeMapStart(yynn4061)
				yynn4061 = 0
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4061[0] {
					yym4063 := z.EncBinary()
					_ = yym4063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4061[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4064 := z.EncBinary()
					_ = yym4064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4061[1] {
					yym4066 := z.EncBinary()
					_ = yym4066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4061[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4067 := z.EncBinary()
					_ = yym4067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4061[2] {
					yy4069 := &x.ListMeta
					yym4070 := z.EncBinary()
					_ = yym4070
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4069) {
					} else {
						z.EncFallback(yy4069)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4061[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4071 := &x.ListMeta
					yym4072 := z.EncBinary()
					_ = yym4072
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4071) {
					} else {
						z.EncFallback(yy4071)
					}
				}
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4074 := z.EncBinary()
					_ = yym4074
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4075 := z.EncBinary()
					_ = yym4075
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4076 := z.DecBinary()
	_ = yym4076
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4077 := r.ContainerType()
		if yyct4077 == codecSelferValueTypeMap1234 {
			yyl4077 := r.ReadMapStart()
			if yyl4077 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4077, d)
			}
		} else if yyct4077 == codecSelferValueTypeArray1234 {
			yyl4077 := r.ReadArrayStart()
			if yyl4077 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4077, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4078Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4078Slc
	var yyhl4078 bool = l >= 0
	for yyj4078 := 0; ; yyj4078++ {
		if yyhl4078 {
			if yyj4078 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4078Slc = r.DecodeBytes(yys4078Slc, true, true)
		yys4078 := string(yys4078Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4078 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4081 := &x.ListMeta
				yym4082 := z.DecBinary()
				_ = yym4082
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4081) {
				} else {
					z.DecFallback(yyv4081, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4083 := &x.Items
				yym4084 := z.DecBinary()
				_ = yym4084
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4083), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4078)
		} // end switch yys4078
	} // end for yyj4078
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4085 int
	var yyb4085 bool
	var yyhl4085 bool = l >= 0
	yyj4085++
	if yyhl4085 {
		yyb4085 = yyj4085 > l
	} else {
		yyb4085 = r.CheckBreak()
	}
	if yyb4085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4085++
	if yyhl4085 {
		yyb4085 = yyj4085 > l
	} else {
		yyb4085 = r.CheckBreak()
	}
	if yyb4085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4085++
	if yyhl4085 {
		yyb4085 = yyj4085 > l
	} else {
		yyb4085 = r.CheckBreak()
	}
	if yyb4085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4088 := &x.ListMeta
		yym4089 := z.DecBinary()
		_ = yym4089
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4088) {
		} else {
			z.DecFallback(yyv4088, false)
		}
	}
	yyj4085++
	if yyhl4085 {
		yyb4085 = yyj4085 > l
	} else {
		yyb4085 = r.CheckBreak()
	}
	if yyb4085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4090 := &x.Items
		yym4091 := z.DecBinary()
		_ = yym4091
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4090), d)
		}
	}
	for {
		yyj4085++
		if yyhl4085 {
			yyb4085 = yyj4085 > l
		} else {
			yyb4085 = r.CheckBreak()
		}
		if yyb4085 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4085-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4092 := z.EncBinary()
	_ = yym4092
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4093 := z.DecBinary()
	_ = yym4093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4094 := z.EncBinary()
		_ = yym4094
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4095 := !z.EncBinary()
			yy2arr4095 := z.EncBasicHandle().StructToArray
			var yyq4095 [2]bool
			_, _, _ = yysep4095, yyq4095, yy2arr4095
			const yyr4095 bool = false
			yyq4095[0] = len(x.Hard) != 0
			yyq4095[1] = len(x.Scopes) != 0
			var yynn4095 int
			if yyr4095 || yy2arr4095 {
				r.EncodeArrayStart(2)
			} else {
				yynn4095 = 0
				for _, b := range yyq4095 {
					if b {
						yynn4095++
					}
				}
				r.EncodeMapStart(yynn4095)
				yynn4095 = 0
			}
			if yyr4095 || yy2arr4095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4095[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4095[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4095 || yy2arr4095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4095[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4098 := z.EncBinary()
						_ = yym4098
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4095[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4099 := z.EncBinary()
						_ = yym4099
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4095 || yy2arr4095 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4100 := z.DecBinary()
	_ = yym4100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4101 := r.ContainerType()
		if yyct4101 == codecSelferValueTypeMap1234 {
			yyl4101 := r.ReadMapStart()
			if yyl4101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4101, d)
			}
		} else if yyct4101 == codecSelferValueTypeArray1234 {
			yyl4101 := r.ReadArrayStart()
			if yyl4101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4102Slc
	var yyhl4102 bool = l >= 0
	for yyj4102 := 0; ; yyj4102++ {
		if yyhl4102 {
			if yyj4102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4102Slc = r.DecodeBytes(yys4102Slc, true, true)
		yys4102 := string(yys4102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4102 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4103 := &x.Hard
				yyv4103.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4104 := &x.Scopes
				yym4105 := z.DecBinary()
				_ = yym4105
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4104), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4102)
		} // end switch yys4102
	} // end for yyj4102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4106 int
	var yyb4106 bool
	var yyhl4106 bool = l >= 0
	yyj4106++
	if yyhl4106 {
		yyb4106 = yyj4106 > l
	} else {
		yyb4106 = r.CheckBreak()
	}
	if yyb4106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4107 := &x.Hard
		yyv4107.CodecDecodeSelf(d)
	}
	yyj4106++
	if yyhl4106 {
		yyb4106 = yyj4106 > l
	} else {
		yyb4106 = r.CheckBreak()
	}
	if yyb4106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4108 := &x.Scopes
		yym4109 := z.DecBinary()
		_ = yym4109
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4108), d)
		}
	}
	for {
		yyj4106++
		if yyhl4106 {
			yyb4106 = yyj4106 > l
		} else {
			yyb4106 = r.CheckBreak()
		}
		if yyb4106 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4106-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4110 := z.EncBinary()
		_ = yym4110
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4111 := !z.EncBinary()
			yy2arr4111 := z.EncBasicHandle().StructToArray
			var yyq4111 [2]bool
			_, _, _ = yysep4111, yyq4111, yy2arr4111
			const yyr4111 bool = false
			yyq4111[0] = len(x.Hard) != 0
			yyq4111[1] = len(x.Used) != 0
			var yynn4111 int
			if yyr4111 || yy2arr4111 {
				r.EncodeArrayStart(2)
			} else {
				yynn4111 = 0
				for _, b := range yyq4111 {
					if b {
						yynn4111++
					}
				}
				r.EncodeMapStart(yynn4111)
				yynn4111 = 0
			}
			if yyr4111 || yy2arr4111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4111[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4111[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4111 || yy2arr4111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4111[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4111[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4111 || yy2arr4111 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4114 := z.DecBinary()
	_ = yym4114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4115 := r.ContainerType()
		if yyct4115 == codecSelferValueTypeMap1234 {
			yyl4115 := r.ReadMapStart()
			if yyl4115 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4115, d)
			}
		} else if yyct4115 == codecSelferValueTypeArray1234 {
			yyl4115 := r.ReadArrayStart()
			if yyl4115 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4115, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4116Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4116Slc
	var yyhl4116 bool = l >= 0
	for yyj4116 := 0; ; yyj4116++ {
		if yyhl4116 {
			if yyj4116 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4116Slc = r.DecodeBytes(yys4116Slc, true, true)
		yys4116 := string(yys4116Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4116 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4117 := &x.Hard
				yyv4117.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4118 := &x.Used
				yyv4118.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4116)
		} // end switch yys4116
	} // end for yyj4116
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4119 int
	var yyb4119 bool
	var yyhl4119 bool = l >= 0
	yyj4119++
	if yyhl4119 {
		yyb4119 = yyj4119 > l
	} else {
		yyb4119 = r.CheckBreak()
	}
	if yyb4119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4120 := &x.Hard
		yyv4120.CodecDecodeSelf(d)
	}
	yyj4119++
	if yyhl4119 {
		yyb4119 = yyj4119 > l
	} else {
		yyb4119 = r.CheckBreak()
	}
	if yyb4119 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4121 := &x.Used
		yyv4121.CodecDecodeSelf(d)
	}
	for {
		yyj4119++
		if yyhl4119 {
			yyb4119 = yyj4119 > l
		} else {
			yyb4119 = r.CheckBreak()
		}
		if yyb4119 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4119-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4122 := z.EncBinary()
		_ = yym4122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4123 := !z.EncBinary()
			yy2arr4123 := z.EncBasicHandle().StructToArray
			var yyq4123 [5]bool
			_, _, _ = yysep4123, yyq4123, yy2arr4123
			const yyr4123 bool = false
			yyq4123[0] = x.Kind != ""
			yyq4123[1] = x.APIVersion != ""
			yyq4123[2] = true
			yyq4123[3] = true
			yyq4123[4] = true
			var yynn4123 int
			if yyr4123 || yy2arr4123 {
				r.EncodeArrayStart(5)
			} else {
				yynn4123 = 0
				for _, b := range yyq4123 {
					if b {
						yynn4123++
					}
				}
				r.EncodeMapStart(yynn4123)
				yynn4123 = 0
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4123[0] {
					yym4125 := z.EncBinary()
					_ = yym4125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4123[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4126 := z.EncBinary()
					_ = yym4126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4123[1] {
					yym4128 := z.EncBinary()
					_ = yym4128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4123[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4129 := z.EncBinary()
					_ = yym4129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4123[2] {
					yy4131 := &x.ObjectMeta
					yy4131.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4123[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4132 := &x.ObjectMeta
					yy4132.CodecEncodeSelf(e)
				}
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4123[3] {
					yy4134 := &x.Spec
					yy4134.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4123[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4135 := &x.Spec
					yy4135.CodecEncodeSelf(e)
				}
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4123[4] {
					yy4137 := &x.Status
					yy4137.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4123[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4138 := &x.Status
					yy4138.CodecEncodeSelf(e)
				}
			}
			if yyr4123 || yy2arr4123 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4139 := z.DecBinary()
	_ = yym4139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4140 := r.ContainerType()
		if yyct4140 == codecSelferValueTypeMap1234 {
			yyl4140 := r.ReadMapStart()
			if yyl4140 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4140, d)
			}
		} else if yyct4140 == codecSelferValueTypeArray1234 {
			yyl4140 := r.ReadArrayStart()
			if yyl4140 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4140, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4141Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4141Slc
	var yyhl4141 bool = l >= 0
	for yyj4141 := 0; ; yyj4141++ {
		if yyhl4141 {
			if yyj4141 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4141Slc = r.DecodeBytes(yys4141Slc, true, true)
		yys4141 := string(yys4141Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4141 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4144 := &x.ObjectMeta
				yyv4144.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4145 := &x.Spec
				yyv4145.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4146 := &x.Status
				yyv4146.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4141)
		} // end switch yys4141
	} // end for yyj4141
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4147 int
	var yyb4147 bool
	var yyhl4147 bool = l >= 0
	yyj4147++
	if yyhl4147 {
		yyb4147 = yyj4147 > l
	} else {
		yyb4147 = r.CheckBreak()
	}
	if yyb4147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4147++
	if yyhl4147 {
		yyb4147 = yyj4147 > l
	} else {
		yyb4147 = r.CheckBreak()
	}
	if yyb4147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4147++
	if yyhl4147 {
		yyb4147 = yyj4147 > l
	} else {
		yyb4147 = r.CheckBreak()
	}
	if yyb4147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4150 := &x.ObjectMeta
		yyv4150.CodecDecodeSelf(d)
	}
	yyj4147++
	if yyhl4147 {
		yyb4147 = yyj4147 > l
	} else {
		yyb4147 = r.CheckBreak()
	}
	if yyb4147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4151 := &x.Spec
		yyv4151.CodecDecodeSelf(d)
	}
	yyj4147++
	if yyhl4147 {
		yyb4147 = yyj4147 > l
	} else {
		yyb4147 = r.CheckBreak()
	}
	if yyb4147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4152 := &x.Status
		yyv4152.CodecDecodeSelf(d)
	}
	for {
		yyj4147++
		if yyhl4147 {
			yyb4147 = yyj4147 > l
		} else {
			yyb4147 = r.CheckBreak()
		}
		if yyb4147 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4147-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4153 := z.EncBinary()
		_ = yym4153
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4154 := !z.EncBinary()
			yy2arr4154 := z.EncBasicHandle().StructToArray
			var yyq4154 [4]bool
			_, _, _ = yysep4154, yyq4154, yy2arr4154
			const yyr4154 bool = false
			yyq4154[0] = x.Kind != ""
			yyq4154[1] = x.APIVersion != ""
			yyq4154[2] = true
			var yynn4154 int
			if yyr4154 || yy2arr4154 {
				r.EncodeArrayStart(4)
			} else {
				yynn4154 = 1
				for _, b := range yyq4154 {
					if b {
						yynn4154++
					}
				}
				r.EncodeMapStart(yynn4154)
				yynn4154 = 0
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4154[0] {
					yym4156 := z.EncBinary()
					_ = yym4156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4154[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4157 := z.EncBinary()
					_ = yym4157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4154[1] {
					yym4159 := z.EncBinary()
					_ = yym4159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4154[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4160 := z.EncBinary()
					_ = yym4160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4154[2] {
					yy4162 := &x.ListMeta
					yym4163 := z.EncBinary()
					_ = yym4163
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4162) {
					} else {
						z.EncFallback(yy4162)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4154[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4164 := &x.ListMeta
					yym4165 := z.EncBinary()
					_ = yym4165
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4164) {
					} else {
						z.EncFallback(yy4164)
					}
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4167 := z.EncBinary()
					_ = yym4167
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4168 := z.EncBinary()
					_ = yym4168
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4169 := z.DecBinary()
	_ = yym4169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4170 := r.ContainerType()
		if yyct4170 == codecSelferValueTypeMap1234 {
			yyl4170 := r.ReadMapStart()
			if yyl4170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4170, d)
			}
		} else if yyct4170 == codecSelferValueTypeArray1234 {
			yyl4170 := r.ReadArrayStart()
			if yyl4170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4171Slc
	var yyhl4171 bool = l >= 0
	for yyj4171 := 0; ; yyj4171++ {
		if yyhl4171 {
			if yyj4171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4171Slc = r.DecodeBytes(yys4171Slc, true, true)
		yys4171 := string(yys4171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4171 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4174 := &x.ListMeta
				yym4175 := z.DecBinary()
				_ = yym4175
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4174) {
				} else {
					z.DecFallback(yyv4174, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4176 := &x.Items
				yym4177 := z.DecBinary()
				_ = yym4177
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4176), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4171)
		} // end switch yys4171
	} // end for yyj4171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4178 int
	var yyb4178 bool
	var yyhl4178 bool = l >= 0
	yyj4178++
	if yyhl4178 {
		yyb4178 = yyj4178 > l
	} else {
		yyb4178 = r.CheckBreak()
	}
	if yyb4178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4178++
	if yyhl4178 {
		yyb4178 = yyj4178 > l
	} else {
		yyb4178 = r.CheckBreak()
	}
	if yyb4178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4178++
	if yyhl4178 {
		yyb4178 = yyj4178 > l
	} else {
		yyb4178 = r.CheckBreak()
	}
	if yyb4178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4181 := &x.ListMeta
		yym4182 := z.DecBinary()
		_ = yym4182
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4181) {
		} else {
			z.DecFallback(yyv4181, false)
		}
	}
	yyj4178++
	if yyhl4178 {
		yyb4178 = yyj4178 > l
	} else {
		yyb4178 = r.CheckBreak()
	}
	if yyb4178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4183 := &x.Items
		yym4184 := z.DecBinary()
		_ = yym4184
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4183), d)
		}
	}
	for {
		yyj4178++
		if yyhl4178 {
			yyb4178 = yyj4178 > l
		} else {
			yyb4178 = r.CheckBreak()
		}
		if yyb4178 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4178-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4185 := z.EncBinary()
		_ = yym4185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4186 := !z.EncBinary()
			yy2arr4186 := z.EncBasicHandle().StructToArray
			var yyq4186 [6]bool
			_, _, _ = yysep4186, yyq4186, yy2arr4186
			const yyr4186 bool = false
			yyq4186[0] = x.Kind != ""
			yyq4186[1] = x.APIVersion != ""
			yyq4186[2] = true
			yyq4186[3] = len(x.Data) != 0
			yyq4186[4] = len(x.StringData) != 0
			yyq4186[5] = x.Type != ""
			var yynn4186 int
			if yyr4186 || yy2arr4186 {
				r.EncodeArrayStart(6)
			} else {
				yynn4186 = 0
				for _, b := range yyq4186 {
					if b {
						yynn4186++
					}
				}
				r.EncodeMapStart(yynn4186)
				yynn4186 = 0
			}
			if yyr4186 || yy2arr4186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4186[0] {
					yym4188 := z.EncBinary()
					_ = yym4188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4186[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4189 := z.EncBinary()
					_ = yym4189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4186 || yy2arr4186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4186[1] {
					yym4191 := z.EncBinary()
					_ = yym4191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4186[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4192 := z.EncBinary()
					_ = yym4192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4186 || yy2arr4186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4186[2] {
					yy4194 := &x.ObjectMeta
					yy4194.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4186[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4195 := &x.ObjectMeta
					yy4195.CodecEncodeSelf(e)
				}
			}
			if yyr4186 || yy2arr4186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4186[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4197 := z.EncBinary()
						_ = yym4197
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4186[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4198 := z.EncBinary()
						_ = yym4198
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4186 || yy2arr4186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4186[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4200 := z.EncBinary()
						_ = yym4200
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4186[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4201 := z.EncBinary()
						_ = yym4201
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4186 || yy2arr4186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4186[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4186[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4186 || yy2arr4186 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4203 := z.DecBinary()
	_ = yym4203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4204 := r.ContainerType()
		if yyct4204 == codecSelferValueTypeMap1234 {
			yyl4204 := r.ReadMapStart()
			if yyl4204 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4204, d)
			}
		} else if yyct4204 == codecSelferValueTypeArray1234 {
			yyl4204 := r.ReadArrayStart()
			if yyl4204 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4205Slc
	var yyhl4205 bool = l >= 0
	for yyj4205 := 0; ; yyj4205++ {
		if yyhl4205 {
			if yyj4205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4205Slc = r.DecodeBytes(yys4205Slc, true, true)
		yys4205 := string(yys4205Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4205 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4208 := &x.ObjectMeta
				yyv4208.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4209 := &x.Data
				yym4210 := z.DecBinary()
				_ = yym4210
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4209), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4211 := &x.StringData
				yym4212 := z.DecBinary()
				_ = yym4212
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4211, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4205)
		} // end switch yys4205
	} // end for yyj4205
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4214 int
	var yyb4214 bool
	var yyhl4214 bool = l >= 0
	yyj4214++
	if yyhl4214 {
		yyb4214 = yyj4214 > l
	} else {
		yyb4214 = r.CheckBreak()
	}
	if yyb4214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4214++
	if yyhl4214 {
		yyb4214 = yyj4214 > l
	} else {
		yyb4214 = r.CheckBreak()
	}
	if yyb4214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4214++
	if yyhl4214 {
		yyb4214 = yyj4214 > l
	} else {
		yyb4214 = r.CheckBreak()
	}
	if yyb4214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4217 := &x.ObjectMeta
		yyv4217.CodecDecodeSelf(d)
	}
	yyj4214++
	if yyhl4214 {
		yyb4214 = yyj4214 > l
	} else {
		yyb4214 = r.CheckBreak()
	}
	if yyb4214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4218 := &x.Data
		yym4219 := z.DecBinary()
		_ = yym4219
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4218), d)
		}
	}
	yyj4214++
	if yyhl4214 {
		yyb4214 = yyj4214 > l
	} else {
		yyb4214 = r.CheckBreak()
	}
	if yyb4214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4220 := &x.StringData
		yym4221 := z.DecBinary()
		_ = yym4221
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4220, false, d)
		}
	}
	yyj4214++
	if yyhl4214 {
		yyb4214 = yyj4214 > l
	} else {
		yyb4214 = r.CheckBreak()
	}
	if yyb4214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4214++
		if yyhl4214 {
			yyb4214 = yyj4214 > l
		} else {
			yyb4214 = r.CheckBreak()
		}
		if yyb4214 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4214-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4223 := z.EncBinary()
	_ = yym4223
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4224 := z.DecBinary()
	_ = yym4224
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4225 := z.EncBinary()
		_ = yym4225
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4226 := !z.EncBinary()
			yy2arr4226 := z.EncBasicHandle().StructToArray
			var yyq4226 [4]bool
			_, _, _ = yysep4226, yyq4226, yy2arr4226
			const yyr4226 bool = false
			yyq4226[0] = x.Kind != ""
			yyq4226[1] = x.APIVersion != ""
			yyq4226[2] = true
			var yynn4226 int
			if yyr4226 || yy2arr4226 {
				r.EncodeArrayStart(4)
			} else {
				yynn4226 = 1
				for _, b := range yyq4226 {
					if b {
						yynn4226++
					}
				}
				r.EncodeMapStart(yynn4226)
				yynn4226 = 0
			}
			if yyr4226 || yy2arr4226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4226[0] {
					yym4228 := z.EncBinary()
					_ = yym4228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4226[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4229 := z.EncBinary()
					_ = yym4229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4226 || yy2arr4226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4226[1] {
					yym4231 := z.EncBinary()
					_ = yym4231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4226[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4232 := z.EncBinary()
					_ = yym4232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4226 || yy2arr4226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4226[2] {
					yy4234 := &x.ListMeta
					yym4235 := z.EncBinary()
					_ = yym4235
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4234) {
					} else {
						z.EncFallback(yy4234)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4226[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4236 := &x.ListMeta
					yym4237 := z.EncBinary()
					_ = yym4237
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4236) {
					} else {
						z.EncFallback(yy4236)
					}
				}
			}
			if yyr4226 || yy2arr4226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4239 := z.EncBinary()
					_ = yym4239
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4240 := z.EncBinary()
					_ = yym4240
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4226 || yy2arr4226 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4241 := z.DecBinary()
	_ = yym4241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4242 := r.ContainerType()
		if yyct4242 == codecSelferValueTypeMap1234 {
			yyl4242 := r.ReadMapStart()
			if yyl4242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4242, d)
			}
		} else if yyct4242 == codecSelferValueTypeArray1234 {
			yyl4242 := r.ReadArrayStart()
			if yyl4242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4243Slc
	var yyhl4243 bool = l >= 0
	for yyj4243 := 0; ; yyj4243++ {
		if yyhl4243 {
			if yyj4243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4243Slc = r.DecodeBytes(yys4243Slc, true, true)
		yys4243 := string(yys4243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4243 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4246 := &x.ListMeta
				yym4247 := z.DecBinary()
				_ = yym4247
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4246) {
				} else {
					z.DecFallback(yyv4246, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4248 := &x.Items
				yym4249 := z.DecBinary()
				_ = yym4249
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4248), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4243)
		} // end switch yys4243
	} // end for yyj4243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4250 int
	var yyb4250 bool
	var yyhl4250 bool = l >= 0
	yyj4250++
	if yyhl4250 {
		yyb4250 = yyj4250 > l
	} else {
		yyb4250 = r.CheckBreak()
	}
	if yyb4250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4250++
	if yyhl4250 {
		yyb4250 = yyj4250 > l
	} else {
		yyb4250 = r.CheckBreak()
	}
	if yyb4250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4250++
	if yyhl4250 {
		yyb4250 = yyj4250 > l
	} else {
		yyb4250 = r.CheckBreak()
	}
	if yyb4250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4253 := &x.ListMeta
		yym4254 := z.DecBinary()
		_ = yym4254
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4253) {
		} else {
			z.DecFallback(yyv4253, false)
		}
	}
	yyj4250++
	if yyhl4250 {
		yyb4250 = yyj4250 > l
	} else {
		yyb4250 = r.CheckBreak()
	}
	if yyb4250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4255 := &x.Items
		yym4256 := z.DecBinary()
		_ = yym4256
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4255), d)
		}
	}
	for {
		yyj4250++
		if yyhl4250 {
			yyb4250 = yyj4250 > l
		} else {
			yyb4250 = r.CheckBreak()
		}
		if yyb4250 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4250-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4257 := z.EncBinary()
		_ = yym4257
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4258 := !z.EncBinary()
			yy2arr4258 := z.EncBasicHandle().StructToArray
			var yyq4258 [4]bool
			_, _, _ = yysep4258, yyq4258, yy2arr4258
			const yyr4258 bool = false
			yyq4258[0] = x.Kind != ""
			yyq4258[1] = x.APIVersion != ""
			yyq4258[2] = true
			yyq4258[3] = len(x.Data) != 0
			var yynn4258 int
			if yyr4258 || yy2arr4258 {
				r.EncodeArrayStart(4)
			} else {
				yynn4258 = 0
				for _, b := range yyq4258 {
					if b {
						yynn4258++
					}
				}
				r.EncodeMapStart(yynn4258)
				yynn4258 = 0
			}
			if yyr4258 || yy2arr4258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4258[0] {
					yym4260 := z.EncBinary()
					_ = yym4260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4258[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4261 := z.EncBinary()
					_ = yym4261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4258 || yy2arr4258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4258[1] {
					yym4263 := z.EncBinary()
					_ = yym4263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4258[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4264 := z.EncBinary()
					_ = yym4264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4258 || yy2arr4258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4258[2] {
					yy4266 := &x.ObjectMeta
					yy4266.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4258[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4267 := &x.ObjectMeta
					yy4267.CodecEncodeSelf(e)
				}
			}
			if yyr4258 || yy2arr4258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4258[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4269 := z.EncBinary()
						_ = yym4269
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4258[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4270 := z.EncBinary()
						_ = yym4270
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4258 || yy2arr4258 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4271 := z.DecBinary()
	_ = yym4271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4272 := r.ContainerType()
		if yyct4272 == codecSelferValueTypeMap1234 {
			yyl4272 := r.ReadMapStart()
			if yyl4272 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4272, d)
			}
		} else if yyct4272 == codecSelferValueTypeArray1234 {
			yyl4272 := r.ReadArrayStart()
			if yyl4272 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4273Slc
	var yyhl4273 bool = l >= 0
	for yyj4273 := 0; ; yyj4273++ {
		if yyhl4273 {
			if yyj4273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4273Slc = r.DecodeBytes(yys4273Slc, true, true)
		yys4273 := string(yys4273Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4273 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4276 := &x.ObjectMeta
				yyv4276.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4277 := &x.Data
				yym4278 := z.DecBinary()
				_ = yym4278
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4277, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4273)
		} // end switch yys4273
	} // end for yyj4273
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4279 int
	var yyb4279 bool
	var yyhl4279 bool = l >= 0
	yyj4279++
	if yyhl4279 {
		yyb4279 = yyj4279 > l
	} else {
		yyb4279 = r.CheckBreak()
	}
	if yyb4279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4279++
	if yyhl4279 {
		yyb4279 = yyj4279 > l
	} else {
		yyb4279 = r.CheckBreak()
	}
	if yyb4279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4279++
	if yyhl4279 {
		yyb4279 = yyj4279 > l
	} else {
		yyb4279 = r.CheckBreak()
	}
	if yyb4279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4282 := &x.ObjectMeta
		yyv4282.CodecDecodeSelf(d)
	}
	yyj4279++
	if yyhl4279 {
		yyb4279 = yyj4279 > l
	} else {
		yyb4279 = r.CheckBreak()
	}
	if yyb4279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4283 := &x.Data
		yym4284 := z.DecBinary()
		_ = yym4284
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4283, false, d)
		}
	}
	for {
		yyj4279++
		if yyhl4279 {
			yyb4279 = yyj4279 > l
		} else {
			yyb4279 = r.CheckBreak()
		}
		if yyb4279 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4279-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4285 := z.EncBinary()
		_ = yym4285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4286 := !z.EncBinary()
			yy2arr4286 := z.EncBasicHandle().StructToArray
			var yyq4286 [4]bool
			_, _, _ = yysep4286, yyq4286, yy2arr4286
			const yyr4286 bool = false
			yyq4286[0] = x.Kind != ""
			yyq4286[1] = x.APIVersion != ""
			yyq4286[2] = true
			var yynn4286 int
			if yyr4286 || yy2arr4286 {
				r.EncodeArrayStart(4)
			} else {
				yynn4286 = 1
				for _, b := range yyq4286 {
					if b {
						yynn4286++
					}
				}
				r.EncodeMapStart(yynn4286)
				yynn4286 = 0
			}
			if yyr4286 || yy2arr4286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4286[0] {
					yym4288 := z.EncBinary()
					_ = yym4288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4286[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4289 := z.EncBinary()
					_ = yym4289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4286 || yy2arr4286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4286[1] {
					yym4291 := z.EncBinary()
					_ = yym4291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4286[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4292 := z.EncBinary()
					_ = yym4292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4286 || yy2arr4286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4286[2] {
					yy4294 := &x.ListMeta
					yym4295 := z.EncBinary()
					_ = yym4295
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4294) {
					} else {
						z.EncFallback(yy4294)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4286[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4296 := &x.ListMeta
					yym4297 := z.EncBinary()
					_ = yym4297
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4296) {
					} else {
						z.EncFallback(yy4296)
					}
				}
			}
			if yyr4286 || yy2arr4286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4299 := z.EncBinary()
					_ = yym4299
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4300 := z.EncBinary()
					_ = yym4300
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4286 || yy2arr4286 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4301 := z.DecBinary()
	_ = yym4301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4302 := r.ContainerType()
		if yyct4302 == codecSelferValueTypeMap1234 {
			yyl4302 := r.ReadMapStart()
			if yyl4302 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4302, d)
			}
		} else if yyct4302 == codecSelferValueTypeArray1234 {
			yyl4302 := r.ReadArrayStart()
			if yyl4302 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4302, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4303Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4303Slc
	var yyhl4303 bool = l >= 0
	for yyj4303 := 0; ; yyj4303++ {
		if yyhl4303 {
			if yyj4303 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4303Slc = r.DecodeBytes(yys4303Slc, true, true)
		yys4303 := string(yys4303Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4303 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4306 := &x.ListMeta
				yym4307 := z.DecBinary()
				_ = yym4307
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4306) {
				} else {
					z.DecFallback(yyv4306, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4308 := &x.Items
				yym4309 := z.DecBinary()
				_ = yym4309
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4308), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4303)
		} // end switch yys4303
	} // end for yyj4303
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4310 int
	var yyb4310 bool
	var yyhl4310 bool = l >= 0
	yyj4310++
	if yyhl4310 {
		yyb4310 = yyj4310 > l
	} else {
		yyb4310 = r.CheckBreak()
	}
	if yyb4310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4310++
	if yyhl4310 {
		yyb4310 = yyj4310 > l
	} else {
		yyb4310 = r.CheckBreak()
	}
	if yyb4310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4310++
	if yyhl4310 {
		yyb4310 = yyj4310 > l
	} else {
		yyb4310 = r.CheckBreak()
	}
	if yyb4310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4313 := &x.ListMeta
		yym4314 := z.DecBinary()
		_ = yym4314
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4313) {
		} else {
			z.DecFallback(yyv4313, false)
		}
	}
	yyj4310++
	if yyhl4310 {
		yyb4310 = yyj4310 > l
	} else {
		yyb4310 = r.CheckBreak()
	}
	if yyb4310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4315 := &x.Items
		yym4316 := z.DecBinary()
		_ = yym4316
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4315), d)
		}
	}
	for {
		yyj4310++
		if yyhl4310 {
			yyb4310 = yyj4310 > l
		} else {
			yyb4310 = r.CheckBreak()
		}
		if yyb4310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4317 := z.EncBinary()
	_ = yym4317
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4318 := z.DecBinary()
	_ = yym4318
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4319 := z.EncBinary()
		_ = yym4319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4320 := !z.EncBinary()
			yy2arr4320 := z.EncBasicHandle().StructToArray
			var yyq4320 [4]bool
			_, _, _ = yysep4320, yyq4320, yy2arr4320
			const yyr4320 bool = false
			yyq4320[2] = x.Message != ""
			yyq4320[3] = x.Error != ""
			var yynn4320 int
			if yyr4320 || yy2arr4320 {
				r.EncodeArrayStart(4)
			} else {
				yynn4320 = 2
				for _, b := range yyq4320 {
					if b {
						yynn4320++
					}
				}
				r.EncodeMapStart(yynn4320)
				yynn4320 = 0
			}
			if yyr4320 || yy2arr4320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4320 || yy2arr4320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4320 || yy2arr4320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4320[2] {
					yym4324 := z.EncBinary()
					_ = yym4324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4320[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4325 := z.EncBinary()
					_ = yym4325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4320 || yy2arr4320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4320[3] {
					yym4327 := z.EncBinary()
					_ = yym4327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4320[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4328 := z.EncBinary()
					_ = yym4328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4320 || yy2arr4320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4329 := z.DecBinary()
	_ = yym4329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4330 := r.ContainerType()
		if yyct4330 == codecSelferValueTypeMap1234 {
			yyl4330 := r.ReadMapStart()
			if yyl4330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4330, d)
			}
		} else if yyct4330 == codecSelferValueTypeArray1234 {
			yyl4330 := r.ReadArrayStart()
			if yyl4330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4331Slc
	var yyhl4331 bool = l >= 0
	for yyj4331 := 0; ; yyj4331++ {
		if yyhl4331 {
			if yyj4331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4331Slc = r.DecodeBytes(yys4331Slc, true, true)
		yys4331 := string(yys4331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4331 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4331)
		} // end switch yys4331
	} // end for yyj4331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4336 int
	var yyb4336 bool
	var yyhl4336 bool = l >= 0
	yyj4336++
	if yyhl4336 {
		yyb4336 = yyj4336 > l
	} else {
		yyb4336 = r.CheckBreak()
	}
	if yyb4336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4336++
	if yyhl4336 {
		yyb4336 = yyj4336 > l
	} else {
		yyb4336 = r.CheckBreak()
	}
	if yyb4336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4336++
	if yyhl4336 {
		yyb4336 = yyj4336 > l
	} else {
		yyb4336 = r.CheckBreak()
	}
	if yyb4336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4336++
	if yyhl4336 {
		yyb4336 = yyj4336 > l
	} else {
		yyb4336 = r.CheckBreak()
	}
	if yyb4336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4336++
		if yyhl4336 {
			yyb4336 = yyj4336 > l
		} else {
			yyb4336 = r.CheckBreak()
		}
		if yyb4336 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4336-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4341 := z.EncBinary()
		_ = yym4341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4342 := !z.EncBinary()
			yy2arr4342 := z.EncBasicHandle().StructToArray
			var yyq4342 [4]bool
			_, _, _ = yysep4342, yyq4342, yy2arr4342
			const yyr4342 bool = false
			yyq4342[0] = x.Kind != ""
			yyq4342[1] = x.APIVersion != ""
			yyq4342[2] = true
			yyq4342[3] = len(x.Conditions) != 0
			var yynn4342 int
			if yyr4342 || yy2arr4342 {
				r.EncodeArrayStart(4)
			} else {
				yynn4342 = 0
				for _, b := range yyq4342 {
					if b {
						yynn4342++
					}
				}
				r.EncodeMapStart(yynn4342)
				yynn4342 = 0
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4342[0] {
					yym4344 := z.EncBinary()
					_ = yym4344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4342[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4345 := z.EncBinary()
					_ = yym4345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4342[1] {
					yym4347 := z.EncBinary()
					_ = yym4347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4342[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4348 := z.EncBinary()
					_ = yym4348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4342[2] {
					yy4350 := &x.ObjectMeta
					yy4350.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4342[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4351 := &x.ObjectMeta
					yy4351.CodecEncodeSelf(e)
				}
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4342[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4353 := z.EncBinary()
						_ = yym4353
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4342[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4354 := z.EncBinary()
						_ = yym4354
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4355 := z.DecBinary()
	_ = yym4355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4356 := r.ContainerType()
		if yyct4356 == codecSelferValueTypeMap1234 {
			yyl4356 := r.ReadMapStart()
			if yyl4356 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4356, d)
			}
		} else if yyct4356 == codecSelferValueTypeArray1234 {
			yyl4356 := r.ReadArrayStart()
			if yyl4356 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4356, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4357Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4357Slc
	var yyhl4357 bool = l >= 0
	for yyj4357 := 0; ; yyj4357++ {
		if yyhl4357 {
			if yyj4357 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4357Slc = r.DecodeBytes(yys4357Slc, true, true)
		yys4357 := string(yys4357Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4357 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4360 := &x.ObjectMeta
				yyv4360.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4361 := &x.Conditions
				yym4362 := z.DecBinary()
				_ = yym4362
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4361), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4357)
		} // end switch yys4357
	} // end for yyj4357
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4363 int
	var yyb4363 bool
	var yyhl4363 bool = l >= 0
	yyj4363++
	if yyhl4363 {
		yyb4363 = yyj4363 > l
	} else {
		yyb4363 = r.CheckBreak()
	}
	if yyb4363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4363++
	if yyhl4363 {
		yyb4363 = yyj4363 > l
	} else {
		yyb4363 = r.CheckBreak()
	}
	if yyb4363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4363++
	if yyhl4363 {
		yyb4363 = yyj4363 > l
	} else {
		yyb4363 = r.CheckBreak()
	}
	if yyb4363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4366 := &x.ObjectMeta
		yyv4366.CodecDecodeSelf(d)
	}
	yyj4363++
	if yyhl4363 {
		yyb4363 = yyj4363 > l
	} else {
		yyb4363 = r.CheckBreak()
	}
	if yyb4363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4367 := &x.Conditions
		yym4368 := z.DecBinary()
		_ = yym4368
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4367), d)
		}
	}
	for {
		yyj4363++
		if yyhl4363 {
			yyb4363 = yyj4363 > l
		} else {
			yyb4363 = r.CheckBreak()
		}
		if yyb4363 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4363-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4369 := z.EncBinary()
		_ = yym4369
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4370 := !z.EncBinary()
			yy2arr4370 := z.EncBasicHandle().StructToArray
			var yyq4370 [4]bool
			_, _, _ = yysep4370, yyq4370, yy2arr4370
			const yyr4370 bool = false
			yyq4370[0] = x.Kind != ""
			yyq4370[1] = x.APIVersion != ""
			yyq4370[2] = true
			var yynn4370 int
			if yyr4370 || yy2arr4370 {
				r.EncodeArrayStart(4)
			} else {
				yynn4370 = 1
				for _, b := range yyq4370 {
					if b {
						yynn4370++
					}
				}
				r.EncodeMapStart(yynn4370)
				yynn4370 = 0
			}
			if yyr4370 || yy2arr4370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4370[0] {
					yym4372 := z.EncBinary()
					_ = yym4372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4370[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4373 := z.EncBinary()
					_ = yym4373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4370 || yy2arr4370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4370[1] {
					yym4375 := z.EncBinary()
					_ = yym4375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4370[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4376 := z.EncBinary()
					_ = yym4376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4370 || yy2arr4370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4370[2] {
					yy4378 := &x.ListMeta
					yym4379 := z.EncBinary()
					_ = yym4379
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4378) {
					} else {
						z.EncFallback(yy4378)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4370[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4380 := &x.ListMeta
					yym4381 := z.EncBinary()
					_ = yym4381
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4380) {
					} else {
						z.EncFallback(yy4380)
					}
				}
			}
			if yyr4370 || yy2arr4370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4383 := z.EncBinary()
					_ = yym4383
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4384 := z.EncBinary()
					_ = yym4384
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4370 || yy2arr4370 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4385 := z.DecBinary()
	_ = yym4385
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4386 := r.ContainerType()
		if yyct4386 == codecSelferValueTypeMap1234 {
			yyl4386 := r.ReadMapStart()
			if yyl4386 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4386, d)
			}
		} else if yyct4386 == codecSelferValueTypeArray1234 {
			yyl4386 := r.ReadArrayStart()
			if yyl4386 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4386, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4387Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4387Slc
	var yyhl4387 bool = l >= 0
	for yyj4387 := 0; ; yyj4387++ {
		if yyhl4387 {
			if yyj4387 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4387Slc = r.DecodeBytes(yys4387Slc, true, true)
		yys4387 := string(yys4387Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4387 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4390 := &x.ListMeta
				yym4391 := z.DecBinary()
				_ = yym4391
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4390) {
				} else {
					z.DecFallback(yyv4390, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4392 := &x.Items
				yym4393 := z.DecBinary()
				_ = yym4393
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4392), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4387)
		} // end switch yys4387
	} // end for yyj4387
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4394 int
	var yyb4394 bool
	var yyhl4394 bool = l >= 0
	yyj4394++
	if yyhl4394 {
		yyb4394 = yyj4394 > l
	} else {
		yyb4394 = r.CheckBreak()
	}
	if yyb4394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4394++
	if yyhl4394 {
		yyb4394 = yyj4394 > l
	} else {
		yyb4394 = r.CheckBreak()
	}
	if yyb4394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4394++
	if yyhl4394 {
		yyb4394 = yyj4394 > l
	} else {
		yyb4394 = r.CheckBreak()
	}
	if yyb4394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4397 := &x.ListMeta
		yym4398 := z.DecBinary()
		_ = yym4398
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4397) {
		} else {
			z.DecFallback(yyv4397, false)
		}
	}
	yyj4394++
	if yyhl4394 {
		yyb4394 = yyj4394 > l
	} else {
		yyb4394 = r.CheckBreak()
	}
	if yyb4394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4399 := &x.Items
		yym4400 := z.DecBinary()
		_ = yym4400
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4399), d)
		}
	}
	for {
		yyj4394++
		if yyhl4394 {
			yyb4394 = yyj4394 > l
		} else {
			yyb4394 = r.CheckBreak()
		}
		if yyb4394 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4394-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4401 := z.EncBinary()
		_ = yym4401
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4402 := !z.EncBinary()
			yy2arr4402 := z.EncBasicHandle().StructToArray
			var yyq4402 [2]bool
			_, _, _ = yysep4402, yyq4402, yy2arr4402
			const yyr4402 bool = false
			yyq4402[0] = len(x.Items) != 0
			yyq4402[1] = x.DefaultMode != nil
			var yynn4402 int
			if yyr4402 || yy2arr4402 {
				r.EncodeArrayStart(2)
			} else {
				yynn4402 = 0
				for _, b := range yyq4402 {
					if b {
						yynn4402++
					}
				}
				r.EncodeMapStart(yynn4402)
				yynn4402 = 0
			}
			if yyr4402 || yy2arr4402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4402[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4404 := z.EncBinary()
						_ = yym4404
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4402[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4405 := z.EncBinary()
						_ = yym4405
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4402 || yy2arr4402 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4402[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4407 := *x.DefaultMode
						yym4408 := z.EncBinary()
						_ = yym4408
						if false {
						} else {
							r.EncodeInt(int64(yy4407))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4402[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4409 := *x.DefaultMode
						yym4410 := z.EncBinary()
						_ = yym4410
						if false {
						} else {
							r.EncodeInt(int64(yy4409))
						}
					}
				}
			}
			if yyr4402 || yy2arr4402 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4411 := z.DecBinary()
	_ = yym4411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4412 := r.ContainerType()
		if yyct4412 == codecSelferValueTypeMap1234 {
			yyl4412 := r.ReadMapStart()
			if yyl4412 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4412, d)
			}
		} else if yyct4412 == codecSelferValueTypeArray1234 {
			yyl4412 := r.ReadArrayStart()
			if yyl4412 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4412, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4413Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4413Slc
	var yyhl4413 bool = l >= 0
	for yyj4413 := 0; ; yyj4413++ {
		if yyhl4413 {
			if yyj4413 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4413Slc = r.DecodeBytes(yys4413Slc, true, true)
		yys4413 := string(yys4413Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4413 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4414 := &x.Items
				yym4415 := z.DecBinary()
				_ = yym4415
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4414), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym4417 := z.DecBinary()
				_ = yym4417
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4413)
		} // end switch yys4413
	} // end for yyj4413
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4418 int
	var yyb4418 bool
	var yyhl4418 bool = l >= 0
	yyj4418++
	if yyhl4418 {
		yyb4418 = yyj4418 > l
	} else {
		yyb4418 = r.CheckBreak()
	}
	if yyb4418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4419 := &x.Items
		yym4420 := z.DecBinary()
		_ = yym4420
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4419), d)
		}
	}
	yyj4418++
	if yyhl4418 {
		yyb4418 = yyj4418 > l
	} else {
		yyb4418 = r.CheckBreak()
	}
	if yyb4418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym4422 := z.DecBinary()
		_ = yym4422
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4418++
		if yyhl4418 {
			yyb4418 = yyj4418 > l
		} else {
			yyb4418 = r.CheckBreak()
		}
		if yyb4418 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4418-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4423 := z.EncBinary()
		_ = yym4423
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4424 := !z.EncBinary()
			yy2arr4424 := z.EncBasicHandle().StructToArray
			var yyq4424 [4]bool
			_, _, _ = yysep4424, yyq4424, yy2arr4424
			const yyr4424 bool = false
			yyq4424[1] = x.FieldRef != nil
			yyq4424[2] = x.ResourceFieldRef != nil
			yyq4424[3] = x.Mode != nil
			var yynn4424 int
			if yyr4424 || yy2arr4424 {
				r.EncodeArrayStart(4)
			} else {
				yynn4424 = 1
				for _, b := range yyq4424 {
					if b {
						yynn4424++
					}
				}
				r.EncodeMapStart(yynn4424)
				yynn4424 = 0
			}
			if yyr4424 || yy2arr4424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4426 := z.EncBinary()
				_ = yym4426
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4427 := z.EncBinary()
				_ = yym4427
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4424 || yy2arr4424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4424[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4424[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4424 || yy2arr4424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4424[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4424[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4424 || yy2arr4424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4424[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4431 := *x.Mode
						yym4432 := z.EncBinary()
						_ = yym4432
						if false {
						} else {
							r.EncodeInt(int64(yy4431))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4424[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4433 := *x.Mode
						yym4434 := z.EncBinary()
						_ = yym4434
						if false {
						} else {
							r.EncodeInt(int64(yy4433))
						}
					}
				}
			}
			if yyr4424 || yy2arr4424 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4435 := z.DecBinary()
	_ = yym4435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4436 := r.ContainerType()
		if yyct4436 == codecSelferValueTypeMap1234 {
			yyl4436 := r.ReadMapStart()
			if yyl4436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4436, d)
			}
		} else if yyct4436 == codecSelferValueTypeArray1234 {
			yyl4436 := r.ReadArrayStart()
			if yyl4436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4437Slc
	var yyhl4437 bool = l >= 0
	for yyj4437 := 0; ; yyj4437++ {
		if yyhl4437 {
			if yyj4437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4437Slc = r.DecodeBytes(yys4437Slc, true, true)
		yys4437 := string(yys4437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4437 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym4442 := z.DecBinary()
				_ = yym4442
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4437)
		} // end switch yys4437
	} // end for yyj4437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4443 int
	var yyb4443 bool
	var yyhl4443 bool = l >= 0
	yyj4443++
	if yyhl4443 {
		yyb4443 = yyj4443 > l
	} else {
		yyb4443 = r.CheckBreak()
	}
	if yyb4443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4443++
	if yyhl4443 {
		yyb4443 = yyj4443 > l
	} else {
		yyb4443 = r.CheckBreak()
	}
	if yyb4443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4443++
	if yyhl4443 {
		yyb4443 = yyj4443 > l
	} else {
		yyb4443 = r.CheckBreak()
	}
	if yyb4443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj4443++
	if yyhl4443 {
		yyb4443 = yyj4443 > l
	} else {
		yyb4443 = r.CheckBreak()
	}
	if yyb4443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym4448 := z.DecBinary()
		_ = yym4448
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4443++
		if yyhl4443 {
			yyb4443 = yyj4443 > l
		} else {
			yyb4443 = r.CheckBreak()
		}
		if yyb4443 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4443-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4449 := z.EncBinary()
		_ = yym4449
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4450 := !z.EncBinary()
			yy2arr4450 := z.EncBasicHandle().StructToArray
			var yyq4450 [6]bool
			_, _, _ = yysep4450, yyq4450, yy2arr4450
			const yyr4450 bool = false
			yyq4450[0] = x.Capabilities != nil
			yyq4450[1] = x.Privileged != nil
			yyq4450[2] = x.SELinuxOptions != nil
			yyq4450[3] = x.RunAsUser != nil
			yyq4450[4] = x.RunAsNonRoot != nil
			yyq4450[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4450 int
			if yyr4450 || yy2arr4450 {
				r.EncodeArrayStart(6)
			} else {
				yynn4450 = 0
				for _, b := range yyq4450 {
					if b {
						yynn4450++
					}
				}
				r.EncodeMapStart(yynn4450)
				yynn4450 = 0
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4450[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4450[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4450[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4453 := *x.Privileged
						yym4454 := z.EncBinary()
						_ = yym4454
						if false {
						} else {
							r.EncodeBool(bool(yy4453))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4450[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4455 := *x.Privileged
						yym4456 := z.EncBinary()
						_ = yym4456
						if false {
						} else {
							r.EncodeBool(bool(yy4455))
						}
					}
				}
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4450[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4450[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4450[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4459 := *x.RunAsUser
						yym4460 := z.EncBinary()
						_ = yym4460
						if false {
						} else {
							r.EncodeInt(int64(yy4459))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4450[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4461 := *x.RunAsUser
						yym4462 := z.EncBinary()
						_ = yym4462
						if false {
						} else {
							r.EncodeInt(int64(yy4461))
						}
					}
				}
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4450[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4464 := *x.RunAsNonRoot
						yym4465 := z.EncBinary()
						_ = yym4465
						if false {
						} else {
							r.EncodeBool(bool(yy4464))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4450[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4466 := *x.RunAsNonRoot
						yym4467 := z.EncBinary()
						_ = yym4467
						if false {
						} else {
							r.EncodeBool(bool(yy4466))
						}
					}
				}
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4450[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4469 := *x.ReadOnlyRootFilesystem
						yym4470 := z.EncBinary()
						_ = yym4470
						if false {
						} else {
							r.EncodeBool(bool(yy4469))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4450[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4471 := *x.ReadOnlyRootFilesystem
						yym4472 := z.EncBinary()
						_ = yym4472
						if false {
						} else {
							r.EncodeBool(bool(yy4471))
						}
					}
				}
			}
			if yyr4450 || yy2arr4450 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4473 := z.DecBinary()
	_ = yym4473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4474 := r.ContainerType()
		if yyct4474 == codecSelferValueTypeMap1234 {
			yyl4474 := r.ReadMapStart()
			if yyl4474 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4474, d)
			}
		} else if yyct4474 == codecSelferValueTypeArray1234 {
			yyl4474 := r.ReadArrayStart()
			if yyl4474 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4474, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4475Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4475Slc
	var yyhl4475 bool = l >= 0
	for yyj4475 := 0; ; yyj4475++ {
		if yyhl4475 {
			if yyj4475 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4475Slc = r.DecodeBytes(yys4475Slc, true, true)
		yys4475 := string(yys4475Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4475 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4478 := z.DecBinary()
				_ = yym4478
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4481 := z.DecBinary()
				_ = yym4481
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4483 := z.DecBinary()
				_ = yym4483
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4485 := z.DecBinary()
				_ = yym4485
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4475)
		} // end switch yys4475
	} // end for yyj4475
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4486 int
	var yyb4486 bool
	var yyhl4486 bool = l >= 0
	yyj4486++
	if yyhl4486 {
		yyb4486 = yyj4486 > l
	} else {
		yyb4486 = r.CheckBreak()
	}
	if yyb4486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4486++
	if yyhl4486 {
		yyb4486 = yyj4486 > l
	} else {
		yyb4486 = r.CheckBreak()
	}
	if yyb4486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4489 := z.DecBinary()
		_ = yym4489
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4486++
	if yyhl4486 {
		yyb4486 = yyj4486 > l
	} else {
		yyb4486 = r.CheckBreak()
	}
	if yyb4486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4486++
	if yyhl4486 {
		yyb4486 = yyj4486 > l
	} else {
		yyb4486 = r.CheckBreak()
	}
	if yyb4486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4492 := z.DecBinary()
		_ = yym4492
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4486++
	if yyhl4486 {
		yyb4486 = yyj4486 > l
	} else {
		yyb4486 = r.CheckBreak()
	}
	if yyb4486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4494 := z.DecBinary()
		_ = yym4494
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4486++
	if yyhl4486 {
		yyb4486 = yyj4486 > l
	} else {
		yyb4486 = r.CheckBreak()
	}
	if yyb4486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4496 := z.DecBinary()
		_ = yym4496
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4486++
		if yyhl4486 {
			yyb4486 = yyj4486 > l
		} else {
			yyb4486 = r.CheckBreak()
		}
		if yyb4486 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4486-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4497 := z.EncBinary()
		_ = yym4497
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4498 := !z.EncBinary()
			yy2arr4498 := z.EncBasicHandle().StructToArray
			var yyq4498 [4]bool
			_, _, _ = yysep4498, yyq4498, yy2arr4498
			const yyr4498 bool = false
			yyq4498[0] = x.User != ""
			yyq4498[1] = x.Role != ""
			yyq4498[2] = x.Type != ""
			yyq4498[3] = x.Level != ""
			var yynn4498 int
			if yyr4498 || yy2arr4498 {
				r.EncodeArrayStart(4)
			} else {
				yynn4498 = 0
				for _, b := range yyq4498 {
					if b {
						yynn4498++
					}
				}
				r.EncodeMapStart(yynn4498)
				yynn4498 = 0
			}
			if yyr4498 || yy2arr4498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4498[0] {
					yym4500 := z.EncBinary()
					_ = yym4500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4498[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4501 := z.EncBinary()
					_ = yym4501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4498 || yy2arr4498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4498[1] {
					yym4503 := z.EncBinary()
					_ = yym4503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4498[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4504 := z.EncBinary()
					_ = yym4504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4498 || yy2arr4498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4498[2] {
					yym4506 := z.EncBinary()
					_ = yym4506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4498[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4507 := z.EncBinary()
					_ = yym4507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4498 || yy2arr4498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4498[3] {
					yym4509 := z.EncBinary()
					_ = yym4509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4498[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4510 := z.EncBinary()
					_ = yym4510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4498 || yy2arr4498 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4511 := z.DecBinary()
	_ = yym4511
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4512 := r.ContainerType()
		if yyct4512 == codecSelferValueTypeMap1234 {
			yyl4512 := r.ReadMapStart()
			if yyl4512 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4512, d)
			}
		} else if yyct4512 == codecSelferValueTypeArray1234 {
			yyl4512 := r.ReadArrayStart()
			if yyl4512 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4512, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4513Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4513Slc
	var yyhl4513 bool = l >= 0
	for yyj4513 := 0; ; yyj4513++ {
		if yyhl4513 {
			if yyj4513 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4513Slc = r.DecodeBytes(yys4513Slc, true, true)
		yys4513 := string(yys4513Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4513 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4513)
		} // end switch yys4513
	} // end for yyj4513
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4518 int
	var yyb4518 bool
	var yyhl4518 bool = l >= 0
	yyj4518++
	if yyhl4518 {
		yyb4518 = yyj4518 > l
	} else {
		yyb4518 = r.CheckBreak()
	}
	if yyb4518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4518++
	if yyhl4518 {
		yyb4518 = yyj4518 > l
	} else {
		yyb4518 = r.CheckBreak()
	}
	if yyb4518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4518++
	if yyhl4518 {
		yyb4518 = yyj4518 > l
	} else {
		yyb4518 = r.CheckBreak()
	}
	if yyb4518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4518++
	if yyhl4518 {
		yyb4518 = yyj4518 > l
	} else {
		yyb4518 = r.CheckBreak()
	}
	if yyb4518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4518++
		if yyhl4518 {
			yyb4518 = yyj4518 > l
		} else {
			yyb4518 = r.CheckBreak()
		}
		if yyb4518 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4518-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4523 := z.EncBinary()
		_ = yym4523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4524 := !z.EncBinary()
			yy2arr4524 := z.EncBasicHandle().StructToArray
			var yyq4524 [5]bool
			_, _, _ = yysep4524, yyq4524, yy2arr4524
			const yyr4524 bool = false
			yyq4524[0] = x.Kind != ""
			yyq4524[1] = x.APIVersion != ""
			yyq4524[2] = true
			var yynn4524 int
			if yyr4524 || yy2arr4524 {
				r.EncodeArrayStart(5)
			} else {
				yynn4524 = 2
				for _, b := range yyq4524 {
					if b {
						yynn4524++
					}
				}
				r.EncodeMapStart(yynn4524)
				yynn4524 = 0
			}
			if yyr4524 || yy2arr4524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4524[0] {
					yym4526 := z.EncBinary()
					_ = yym4526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4524[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4527 := z.EncBinary()
					_ = yym4527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4524 || yy2arr4524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4524[1] {
					yym4529 := z.EncBinary()
					_ = yym4529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4524[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4530 := z.EncBinary()
					_ = yym4530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4524 || yy2arr4524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4524[2] {
					yy4532 := &x.ObjectMeta
					yy4532.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4524[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4533 := &x.ObjectMeta
					yy4533.CodecEncodeSelf(e)
				}
			}
			if yyr4524 || yy2arr4524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4535 := z.EncBinary()
				_ = yym4535
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4536 := z.EncBinary()
				_ = yym4536
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4524 || yy2arr4524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4538 := z.EncBinary()
					_ = yym4538
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4539 := z.EncBinary()
					_ = yym4539
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4524 || yy2arr4524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4540 := z.DecBinary()
	_ = yym4540
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4541 := r.ContainerType()
		if yyct4541 == codecSelferValueTypeMap1234 {
			yyl4541 := r.ReadMapStart()
			if yyl4541 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4541, d)
			}
		} else if yyct4541 == codecSelferValueTypeArray1234 {
			yyl4541 := r.ReadArrayStart()
			if yyl4541 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4541, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4542Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4542Slc
	var yyhl4542 bool = l >= 0
	for yyj4542 := 0; ; yyj4542++ {
		if yyhl4542 {
			if yyj4542 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4542Slc = r.DecodeBytes(yys4542Slc, true, true)
		yys4542 := string(yys4542Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4542 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4545 := &x.ObjectMeta
				yyv4545.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4547 := &x.Data
				yym4548 := z.DecBinary()
				_ = yym4548
				if false {
				} else {
					*yyv4547 = r.DecodeBytes(*(*[]byte)(yyv4547), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4542)
		} // end switch yys4542
	} // end for yyj4542
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4549 int
	var yyb4549 bool
	var yyhl4549 bool = l >= 0
	yyj4549++
	if yyhl4549 {
		yyb4549 = yyj4549 > l
	} else {
		yyb4549 = r.CheckBreak()
	}
	if yyb4549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4549++
	if yyhl4549 {
		yyb4549 = yyj4549 > l
	} else {
		yyb4549 = r.CheckBreak()
	}
	if yyb4549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4549++
	if yyhl4549 {
		yyb4549 = yyj4549 > l
	} else {
		yyb4549 = r.CheckBreak()
	}
	if yyb4549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4552 := &x.ObjectMeta
		yyv4552.CodecDecodeSelf(d)
	}
	yyj4549++
	if yyhl4549 {
		yyb4549 = yyj4549 > l
	} else {
		yyb4549 = r.CheckBreak()
	}
	if yyb4549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4549++
	if yyhl4549 {
		yyb4549 = yyj4549 > l
	} else {
		yyb4549 = r.CheckBreak()
	}
	if yyb4549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4554 := &x.Data
		yym4555 := z.DecBinary()
		_ = yym4555
		if false {
		} else {
			*yyv4554 = r.DecodeBytes(*(*[]byte)(yyv4554), false, false)
		}
	}
	for {
		yyj4549++
		if yyhl4549 {
			yyb4549 = yyj4549 > l
		} else {
			yyb4549 = r.CheckBreak()
		}
		if yyb4549 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4549-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4556 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4557 := &yyv4556
		yy4557.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4558 := *v
	yyh4558, yyl4558 := z.DecSliceHelperStart()
	var yyc4558 bool
	if yyl4558 == 0 {
		if yyv4558 == nil {
			yyv4558 = []OwnerReference{}
			yyc4558 = true
		} else if len(yyv4558) != 0 {
			yyv4558 = yyv4558[:0]
			yyc4558 = true
		}
	} else if yyl4558 > 0 {
		var yyrr4558, yyrl4558 int
		var yyrt4558 bool
		if yyl4558 > cap(yyv4558) {

			yyrg4558 := len(yyv4558) > 0
			yyv24558 := yyv4558
			yyrl4558, yyrt4558 = z.DecInferLen(yyl4558, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4558 {
				if yyrl4558 <= cap(yyv4558) {
					yyv4558 = yyv4558[:yyrl4558]
				} else {
					yyv4558 = make([]OwnerReference, yyrl4558)
				}
			} else {
				yyv4558 = make([]OwnerReference, yyrl4558)
			}
			yyc4558 = true
			yyrr4558 = len(yyv4558)
			if yyrg4558 {
				copy(yyv4558, yyv24558)
			}
		} else if yyl4558 != len(yyv4558) {
			yyv4558 = yyv4558[:yyl4558]
			yyc4558 = true
		}
		yyj4558 := 0
		for ; yyj4558 < yyrr4558; yyj4558++ {
			yyh4558.ElemContainerState(yyj4558)
			if r.TryDecodeAsNil() {
				yyv4558[yyj4558] = OwnerReference{}
			} else {
				yyv4559 := &yyv4558[yyj4558]
				yyv4559.CodecDecodeSelf(d)
			}

		}
		if yyrt4558 {
			for ; yyj4558 < yyl4558; yyj4558++ {
				yyv4558 = append(yyv4558, OwnerReference{})
				yyh4558.ElemContainerState(yyj4558)
				if r.TryDecodeAsNil() {
					yyv4558[yyj4558] = OwnerReference{}
				} else {
					yyv4560 := &yyv4558[yyj4558]
					yyv4560.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4558 := 0
		for ; !r.CheckBreak(); yyj4558++ {

			if yyj4558 >= len(yyv4558) {
				yyv4558 = append(yyv4558, OwnerReference{}) // var yyz4558 OwnerReference
				yyc4558 = true
			}
			yyh4558.ElemContainerState(yyj4558)
			if yyj4558 < len(yyv4558) {
				if r.TryDecodeAsNil() {
					yyv4558[yyj4558] = OwnerReference{}
				} else {
					yyv4561 := &yyv4558[yyj4558]
					yyv4561.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4558 < len(yyv4558) {
			yyv4558 = yyv4558[:yyj4558]
			yyc4558 = true
		} else if yyj4558 == 0 && yyv4558 == nil {
			yyv4558 = []OwnerReference{}
			yyc4558 = true
		}
	}
	yyh4558.End()
	if yyc4558 {
		*v = yyv4558
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4562 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4562.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4563 := *v
	yyh4563, yyl4563 := z.DecSliceHelperStart()
	var yyc4563 bool
	if yyl4563 == 0 {
		if yyv4563 == nil {
			yyv4563 = []PersistentVolumeAccessMode{}
			yyc4563 = true
		} else if len(yyv4563) != 0 {
			yyv4563 = yyv4563[:0]
			yyc4563 = true
		}
	} else if yyl4563 > 0 {
		var yyrr4563, yyrl4563 int
		var yyrt4563 bool
		if yyl4563 > cap(yyv4563) {

			yyrl4563, yyrt4563 = z.DecInferLen(yyl4563, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4563 {
				if yyrl4563 <= cap(yyv4563) {
					yyv4563 = yyv4563[:yyrl4563]
				} else {
					yyv4563 = make([]PersistentVolumeAccessMode, yyrl4563)
				}
			} else {
				yyv4563 = make([]PersistentVolumeAccessMode, yyrl4563)
			}
			yyc4563 = true
			yyrr4563 = len(yyv4563)
		} else if yyl4563 != len(yyv4563) {
			yyv4563 = yyv4563[:yyl4563]
			yyc4563 = true
		}
		yyj4563 := 0
		for ; yyj4563 < yyrr4563; yyj4563++ {
			yyh4563.ElemContainerState(yyj4563)
			if r.TryDecodeAsNil() {
				yyv4563[yyj4563] = ""
			} else {
				yyv4563[yyj4563] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4563 {
			for ; yyj4563 < yyl4563; yyj4563++ {
				yyv4563 = append(yyv4563, "")
				yyh4563.ElemContainerState(yyj4563)
				if r.TryDecodeAsNil() {
					yyv4563[yyj4563] = ""
				} else {
					yyv4563[yyj4563] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4563 := 0
		for ; !r.CheckBreak(); yyj4563++ {

			if yyj4563 >= len(yyv4563) {
				yyv4563 = append(yyv4563, "") // var yyz4563 PersistentVolumeAccessMode
				yyc4563 = true
			}
			yyh4563.ElemContainerState(yyj4563)
			if yyj4563 < len(yyv4563) {
				if r.TryDecodeAsNil() {
					yyv4563[yyj4563] = ""
				} else {
					yyv4563[yyj4563] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4563 < len(yyv4563) {
			yyv4563 = yyv4563[:yyj4563]
			yyc4563 = true
		} else if yyj4563 == 0 && yyv4563 == nil {
			yyv4563 = []PersistentVolumeAccessMode{}
			yyc4563 = true
		}
	}
	yyh4563.End()
	if yyc4563 {
		*v = yyv4563
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4567 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4568 := &yyv4567
		yy4568.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4569 := *v
	yyh4569, yyl4569 := z.DecSliceHelperStart()
	var yyc4569 bool
	if yyl4569 == 0 {
		if yyv4569 == nil {
			yyv4569 = []PersistentVolume{}
			yyc4569 = true
		} else if len(yyv4569) != 0 {
			yyv4569 = yyv4569[:0]
			yyc4569 = true
		}
	} else if yyl4569 > 0 {
		var yyrr4569, yyrl4569 int
		var yyrt4569 bool
		if yyl4569 > cap(yyv4569) {

			yyrg4569 := len(yyv4569) > 0
			yyv24569 := yyv4569
			yyrl4569, yyrt4569 = z.DecInferLen(yyl4569, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt4569 {
				if yyrl4569 <= cap(yyv4569) {
					yyv4569 = yyv4569[:yyrl4569]
				} else {
					yyv4569 = make([]PersistentVolume, yyrl4569)
				}
			} else {
				yyv4569 = make([]PersistentVolume, yyrl4569)
			}
			yyc4569 = true
			yyrr4569 = len(yyv4569)
			if yyrg4569 {
				copy(yyv4569, yyv24569)
			}
		} else if yyl4569 != len(yyv4569) {
			yyv4569 = yyv4569[:yyl4569]
			yyc4569 = true
		}
		yyj4569 := 0
		for ; yyj4569 < yyrr4569; yyj4569++ {
			yyh4569.ElemContainerState(yyj4569)
			if r.TryDecodeAsNil() {
				yyv4569[yyj4569] = PersistentVolume{}
			} else {
				yyv4570 := &yyv4569[yyj4569]
				yyv4570.CodecDecodeSelf(d)
			}

		}
		if yyrt4569 {
			for ; yyj4569 < yyl4569; yyj4569++ {
				yyv4569 = append(yyv4569, PersistentVolume{})
				yyh4569.ElemContainerState(yyj4569)
				if r.TryDecodeAsNil() {
					yyv4569[yyj4569] = PersistentVolume{}
				} else {
					yyv4571 := &yyv4569[yyj4569]
					yyv4571.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4569 := 0
		for ; !r.CheckBreak(); yyj4569++ {

			if yyj4569 >= len(yyv4569) {
				yyv4569 = append(yyv4569, PersistentVolume{}) // var yyz4569 PersistentVolume
				yyc4569 = true
			}
			yyh4569.ElemContainerState(yyj4569)
			if yyj4569 < len(yyv4569) {
				if r.TryDecodeAsNil() {
					yyv4569[yyj4569] = PersistentVolume{}
				} else {
					yyv4572 := &yyv4569[yyj4569]
					yyv4572.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4569 < len(yyv4569) {
			yyv4569 = yyv4569[:yyj4569]
			yyc4569 = true
		} else if yyj4569 == 0 && yyv4569 == nil {
			yyv4569 = []PersistentVolume{}
			yyc4569 = true
		}
	}
	yyh4569.End()
	if yyc4569 {
		*v = yyv4569
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4573 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4574 := &yyv4573
		yy4574.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4575 := *v
	yyh4575, yyl4575 := z.DecSliceHelperStart()
	var yyc4575 bool
	if yyl4575 == 0 {
		if yyv4575 == nil {
			yyv4575 = []PersistentVolumeClaim{}
			yyc4575 = true
		} else if len(yyv4575) != 0 {
			yyv4575 = yyv4575[:0]
			yyc4575 = true
		}
	} else if yyl4575 > 0 {
		var yyrr4575, yyrl4575 int
		var yyrt4575 bool
		if yyl4575 > cap(yyv4575) {

			yyrg4575 := len(yyv4575) > 0
			yyv24575 := yyv4575
			yyrl4575, yyrt4575 = z.DecInferLen(yyl4575, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4575 {
				if yyrl4575 <= cap(yyv4575) {
					yyv4575 = yyv4575[:yyrl4575]
				} else {
					yyv4575 = make([]PersistentVolumeClaim, yyrl4575)
				}
			} else {
				yyv4575 = make([]PersistentVolumeClaim, yyrl4575)
			}
			yyc4575 = true
			yyrr4575 = len(yyv4575)
			if yyrg4575 {
				copy(yyv4575, yyv24575)
			}
		} else if yyl4575 != len(yyv4575) {
			yyv4575 = yyv4575[:yyl4575]
			yyc4575 = true
		}
		yyj4575 := 0
		for ; yyj4575 < yyrr4575; yyj4575++ {
			yyh4575.ElemContainerState(yyj4575)
			if r.TryDecodeAsNil() {
				yyv4575[yyj4575] = PersistentVolumeClaim{}
			} else {
				yyv4576 := &yyv4575[yyj4575]
				yyv4576.CodecDecodeSelf(d)
			}

		}
		if yyrt4575 {
			for ; yyj4575 < yyl4575; yyj4575++ {
				yyv4575 = append(yyv4575, PersistentVolumeClaim{})
				yyh4575.ElemContainerState(yyj4575)
				if r.TryDecodeAsNil() {
					yyv4575[yyj4575] = PersistentVolumeClaim{}
				} else {
					yyv4577 := &yyv4575[yyj4575]
					yyv4577.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4575 := 0
		for ; !r.CheckBreak(); yyj4575++ {

			if yyj4575 >= len(yyv4575) {
				yyv4575 = append(yyv4575, PersistentVolumeClaim{}) // var yyz4575 PersistentVolumeClaim
				yyc4575 = true
			}
			yyh4575.ElemContainerState(yyj4575)
			if yyj4575 < len(yyv4575) {
				if r.TryDecodeAsNil() {
					yyv4575[yyj4575] = PersistentVolumeClaim{}
				} else {
					yyv4578 := &yyv4575[yyj4575]
					yyv4578.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4575 < len(yyv4575) {
			yyv4575 = yyv4575[:yyj4575]
			yyc4575 = true
		} else if yyj4575 == 0 && yyv4575 == nil {
			yyv4575 = []PersistentVolumeClaim{}
			yyc4575 = true
		}
	}
	yyh4575.End()
	if yyc4575 {
		*v = yyv4575
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4579 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4580 := &yyv4579
		yy4580.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4581 := *v
	yyh4581, yyl4581 := z.DecSliceHelperStart()
	var yyc4581 bool
	if yyl4581 == 0 {
		if yyv4581 == nil {
			yyv4581 = []KeyToPath{}
			yyc4581 = true
		} else if len(yyv4581) != 0 {
			yyv4581 = yyv4581[:0]
			yyc4581 = true
		}
	} else if yyl4581 > 0 {
		var yyrr4581, yyrl4581 int
		var yyrt4581 bool
		if yyl4581 > cap(yyv4581) {

			yyrg4581 := len(yyv4581) > 0
			yyv24581 := yyv4581
			yyrl4581, yyrt4581 = z.DecInferLen(yyl4581, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4581 {
				if yyrl4581 <= cap(yyv4581) {
					yyv4581 = yyv4581[:yyrl4581]
				} else {
					yyv4581 = make([]KeyToPath, yyrl4581)
				}
			} else {
				yyv4581 = make([]KeyToPath, yyrl4581)
			}
			yyc4581 = true
			yyrr4581 = len(yyv4581)
			if yyrg4581 {
				copy(yyv4581, yyv24581)
			}
		} else if yyl4581 != len(yyv4581) {
			yyv4581 = yyv4581[:yyl4581]
			yyc4581 = true
		}
		yyj4581 := 0
		for ; yyj4581 < yyrr4581; yyj4581++ {
			yyh4581.ElemContainerState(yyj4581)
			if r.TryDecodeAsNil() {
				yyv4581[yyj4581] = KeyToPath{}
			} else {
				yyv4582 := &yyv4581[yyj4581]
				yyv4582.CodecDecodeSelf(d)
			}

		}
		if yyrt4581 {
			for ; yyj4581 < yyl4581; yyj4581++ {
				yyv4581 = append(yyv4581, KeyToPath{})
				yyh4581.ElemContainerState(yyj4581)
				if r.TryDecodeAsNil() {
					yyv4581[yyj4581] = KeyToPath{}
				} else {
					yyv4583 := &yyv4581[yyj4581]
					yyv4583.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4581 := 0
		for ; !r.CheckBreak(); yyj4581++ {

			if yyj4581 >= len(yyv4581) {
				yyv4581 = append(yyv4581, KeyToPath{}) // var yyz4581 KeyToPath
				yyc4581 = true
			}
			yyh4581.ElemContainerState(yyj4581)
			if yyj4581 < len(yyv4581) {
				if r.TryDecodeAsNil() {
					yyv4581[yyj4581] = KeyToPath{}
				} else {
					yyv4584 := &yyv4581[yyj4581]
					yyv4584.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4581 < len(yyv4581) {
			yyv4581 = yyv4581[:yyj4581]
			yyc4581 = true
		} else if yyj4581 == 0 && yyv4581 == nil {
			yyv4581 = []KeyToPath{}
			yyc4581 = true
		}
	}
	yyh4581.End()
	if yyc4581 {
		*v = yyv4581
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4585 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4586 := &yyv4585
		yy4586.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4587 := *v
	yyh4587, yyl4587 := z.DecSliceHelperStart()
	var yyc4587 bool
	if yyl4587 == 0 {
		if yyv4587 == nil {
			yyv4587 = []HTTPHeader{}
			yyc4587 = true
		} else if len(yyv4587) != 0 {
			yyv4587 = yyv4587[:0]
			yyc4587 = true
		}
	} else if yyl4587 > 0 {
		var yyrr4587, yyrl4587 int
		var yyrt4587 bool
		if yyl4587 > cap(yyv4587) {

			yyrg4587 := len(yyv4587) > 0
			yyv24587 := yyv4587
			yyrl4587, yyrt4587 = z.DecInferLen(yyl4587, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4587 {
				if yyrl4587 <= cap(yyv4587) {
					yyv4587 = yyv4587[:yyrl4587]
				} else {
					yyv4587 = make([]HTTPHeader, yyrl4587)
				}
			} else {
				yyv4587 = make([]HTTPHeader, yyrl4587)
			}
			yyc4587 = true
			yyrr4587 = len(yyv4587)
			if yyrg4587 {
				copy(yyv4587, yyv24587)
			}
		} else if yyl4587 != len(yyv4587) {
			yyv4587 = yyv4587[:yyl4587]
			yyc4587 = true
		}
		yyj4587 := 0
		for ; yyj4587 < yyrr4587; yyj4587++ {
			yyh4587.ElemContainerState(yyj4587)
			if r.TryDecodeAsNil() {
				yyv4587[yyj4587] = HTTPHeader{}
			} else {
				yyv4588 := &yyv4587[yyj4587]
				yyv4588.CodecDecodeSelf(d)
			}

		}
		if yyrt4587 {
			for ; yyj4587 < yyl4587; yyj4587++ {
				yyv4587 = append(yyv4587, HTTPHeader{})
				yyh4587.ElemContainerState(yyj4587)
				if r.TryDecodeAsNil() {
					yyv4587[yyj4587] = HTTPHeader{}
				} else {
					yyv4589 := &yyv4587[yyj4587]
					yyv4589.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4587 := 0
		for ; !r.CheckBreak(); yyj4587++ {

			if yyj4587 >= len(yyv4587) {
				yyv4587 = append(yyv4587, HTTPHeader{}) // var yyz4587 HTTPHeader
				yyc4587 = true
			}
			yyh4587.ElemContainerState(yyj4587)
			if yyj4587 < len(yyv4587) {
				if r.TryDecodeAsNil() {
					yyv4587[yyj4587] = HTTPHeader{}
				} else {
					yyv4590 := &yyv4587[yyj4587]
					yyv4590.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4587 < len(yyv4587) {
			yyv4587 = yyv4587[:yyj4587]
			yyc4587 = true
		} else if yyj4587 == 0 && yyv4587 == nil {
			yyv4587 = []HTTPHeader{}
			yyc4587 = true
		}
	}
	yyh4587.End()
	if yyc4587 {
		*v = yyv4587
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4591 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4591.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4592 := *v
	yyh4592, yyl4592 := z.DecSliceHelperStart()
	var yyc4592 bool
	if yyl4592 == 0 {
		if yyv4592 == nil {
			yyv4592 = []Capability{}
			yyc4592 = true
		} else if len(yyv4592) != 0 {
			yyv4592 = yyv4592[:0]
			yyc4592 = true
		}
	} else if yyl4592 > 0 {
		var yyrr4592, yyrl4592 int
		var yyrt4592 bool
		if yyl4592 > cap(yyv4592) {

			yyrl4592, yyrt4592 = z.DecInferLen(yyl4592, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4592 {
				if yyrl4592 <= cap(yyv4592) {
					yyv4592 = yyv4592[:yyrl4592]
				} else {
					yyv4592 = make([]Capability, yyrl4592)
				}
			} else {
				yyv4592 = make([]Capability, yyrl4592)
			}
			yyc4592 = true
			yyrr4592 = len(yyv4592)
		} else if yyl4592 != len(yyv4592) {
			yyv4592 = yyv4592[:yyl4592]
			yyc4592 = true
		}
		yyj4592 := 0
		for ; yyj4592 < yyrr4592; yyj4592++ {
			yyh4592.ElemContainerState(yyj4592)
			if r.TryDecodeAsNil() {
				yyv4592[yyj4592] = ""
			} else {
				yyv4592[yyj4592] = Capability(r.DecodeString())
			}

		}
		if yyrt4592 {
			for ; yyj4592 < yyl4592; yyj4592++ {
				yyv4592 = append(yyv4592, "")
				yyh4592.ElemContainerState(yyj4592)
				if r.TryDecodeAsNil() {
					yyv4592[yyj4592] = ""
				} else {
					yyv4592[yyj4592] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4592 := 0
		for ; !r.CheckBreak(); yyj4592++ {

			if yyj4592 >= len(yyv4592) {
				yyv4592 = append(yyv4592, "") // var yyz4592 Capability
				yyc4592 = true
			}
			yyh4592.ElemContainerState(yyj4592)
			if yyj4592 < len(yyv4592) {
				if r.TryDecodeAsNil() {
					yyv4592[yyj4592] = ""
				} else {
					yyv4592[yyj4592] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4592 < len(yyv4592) {
			yyv4592 = yyv4592[:yyj4592]
			yyc4592 = true
		} else if yyj4592 == 0 && yyv4592 == nil {
			yyv4592 = []Capability{}
			yyc4592 = true
		}
	}
	yyh4592.End()
	if yyc4592 {
		*v = yyv4592
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4596 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4597 := &yyv4596
		yy4597.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4598 := *v
	yyh4598, yyl4598 := z.DecSliceHelperStart()
	var yyc4598 bool
	if yyl4598 == 0 {
		if yyv4598 == nil {
			yyv4598 = []ContainerPort{}
			yyc4598 = true
		} else if len(yyv4598) != 0 {
			yyv4598 = yyv4598[:0]
			yyc4598 = true
		}
	} else if yyl4598 > 0 {
		var yyrr4598, yyrl4598 int
		var yyrt4598 bool
		if yyl4598 > cap(yyv4598) {

			yyrg4598 := len(yyv4598) > 0
			yyv24598 := yyv4598
			yyrl4598, yyrt4598 = z.DecInferLen(yyl4598, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4598 {
				if yyrl4598 <= cap(yyv4598) {
					yyv4598 = yyv4598[:yyrl4598]
				} else {
					yyv4598 = make([]ContainerPort, yyrl4598)
				}
			} else {
				yyv4598 = make([]ContainerPort, yyrl4598)
			}
			yyc4598 = true
			yyrr4598 = len(yyv4598)
			if yyrg4598 {
				copy(yyv4598, yyv24598)
			}
		} else if yyl4598 != len(yyv4598) {
			yyv4598 = yyv4598[:yyl4598]
			yyc4598 = true
		}
		yyj4598 := 0
		for ; yyj4598 < yyrr4598; yyj4598++ {
			yyh4598.ElemContainerState(yyj4598)
			if r.TryDecodeAsNil() {
				yyv4598[yyj4598] = ContainerPort{}
			} else {
				yyv4599 := &yyv4598[yyj4598]
				yyv4599.CodecDecodeSelf(d)
			}

		}
		if yyrt4598 {
			for ; yyj4598 < yyl4598; yyj4598++ {
				yyv4598 = append(yyv4598, ContainerPort{})
				yyh4598.ElemContainerState(yyj4598)
				if r.TryDecodeAsNil() {
					yyv4598[yyj4598] = ContainerPort{}
				} else {
					yyv4600 := &yyv4598[yyj4598]
					yyv4600.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4598 := 0
		for ; !r.CheckBreak(); yyj4598++ {

			if yyj4598 >= len(yyv4598) {
				yyv4598 = append(yyv4598, ContainerPort{}) // var yyz4598 ContainerPort
				yyc4598 = true
			}
			yyh4598.ElemContainerState(yyj4598)
			if yyj4598 < len(yyv4598) {
				if r.TryDecodeAsNil() {
					yyv4598[yyj4598] = ContainerPort{}
				} else {
					yyv4601 := &yyv4598[yyj4598]
					yyv4601.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4598 < len(yyv4598) {
			yyv4598 = yyv4598[:yyj4598]
			yyc4598 = true
		} else if yyj4598 == 0 && yyv4598 == nil {
			yyv4598 = []ContainerPort{}
			yyc4598 = true
		}
	}
	yyh4598.End()
	if yyc4598 {
		*v = yyv4598
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4602 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4603 := &yyv4602
		yy4603.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4604 := *v
	yyh4604, yyl4604 := z.DecSliceHelperStart()
	var yyc4604 bool
	if yyl4604 == 0 {
		if yyv4604 == nil {
			yyv4604 = []EnvVar{}
			yyc4604 = true
		} else if len(yyv4604) != 0 {
			yyv4604 = yyv4604[:0]
			yyc4604 = true
		}
	} else if yyl4604 > 0 {
		var yyrr4604, yyrl4604 int
		var yyrt4604 bool
		if yyl4604 > cap(yyv4604) {

			yyrg4604 := len(yyv4604) > 0
			yyv24604 := yyv4604
			yyrl4604, yyrt4604 = z.DecInferLen(yyl4604, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4604 {
				if yyrl4604 <= cap(yyv4604) {
					yyv4604 = yyv4604[:yyrl4604]
				} else {
					yyv4604 = make([]EnvVar, yyrl4604)
				}
			} else {
				yyv4604 = make([]EnvVar, yyrl4604)
			}
			yyc4604 = true
			yyrr4604 = len(yyv4604)
			if yyrg4604 {
				copy(yyv4604, yyv24604)
			}
		} else if yyl4604 != len(yyv4604) {
			yyv4604 = yyv4604[:yyl4604]
			yyc4604 = true
		}
		yyj4604 := 0
		for ; yyj4604 < yyrr4604; yyj4604++ {
			yyh4604.ElemContainerState(yyj4604)
			if r.TryDecodeAsNil() {
				yyv4604[yyj4604] = EnvVar{}
			} else {
				yyv4605 := &yyv4604[yyj4604]
				yyv4605.CodecDecodeSelf(d)
			}

		}
		if yyrt4604 {
			for ; yyj4604 < yyl4604; yyj4604++ {
				yyv4604 = append(yyv4604, EnvVar{})
				yyh4604.ElemContainerState(yyj4604)
				if r.TryDecodeAsNil() {
					yyv4604[yyj4604] = EnvVar{}
				} else {
					yyv4606 := &yyv4604[yyj4604]
					yyv4606.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4604 := 0
		for ; !r.CheckBreak(); yyj4604++ {

			if yyj4604 >= len(yyv4604) {
				yyv4604 = append(yyv4604, EnvVar{}) // var yyz4604 EnvVar
				yyc4604 = true
			}
			yyh4604.ElemContainerState(yyj4604)
			if yyj4604 < len(yyv4604) {
				if r.TryDecodeAsNil() {
					yyv4604[yyj4604] = EnvVar{}
				} else {
					yyv4607 := &yyv4604[yyj4604]
					yyv4607.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4604 < len(yyv4604) {
			yyv4604 = yyv4604[:yyj4604]
			yyc4604 = true
		} else if yyj4604 == 0 && yyv4604 == nil {
			yyv4604 = []EnvVar{}
			yyc4604 = true
		}
	}
	yyh4604.End()
	if yyc4604 {
		*v = yyv4604
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4608 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4609 := &yyv4608
		yy4609.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4610 := *v
	yyh4610, yyl4610 := z.DecSliceHelperStart()
	var yyc4610 bool
	if yyl4610 == 0 {
		if yyv4610 == nil {
			yyv4610 = []VolumeMount{}
			yyc4610 = true
		} else if len(yyv4610) != 0 {
			yyv4610 = yyv4610[:0]
			yyc4610 = true
		}
	} else if yyl4610 > 0 {
		var yyrr4610, yyrl4610 int
		var yyrt4610 bool
		if yyl4610 > cap(yyv4610) {

			yyrg4610 := len(yyv4610) > 0
			yyv24610 := yyv4610
			yyrl4610, yyrt4610 = z.DecInferLen(yyl4610, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4610 {
				if yyrl4610 <= cap(yyv4610) {
					yyv4610 = yyv4610[:yyrl4610]
				} else {
					yyv4610 = make([]VolumeMount, yyrl4610)
				}
			} else {
				yyv4610 = make([]VolumeMount, yyrl4610)
			}
			yyc4610 = true
			yyrr4610 = len(yyv4610)
			if yyrg4610 {
				copy(yyv4610, yyv24610)
			}
		} else if yyl4610 != len(yyv4610) {
			yyv4610 = yyv4610[:yyl4610]
			yyc4610 = true
		}
		yyj4610 := 0
		for ; yyj4610 < yyrr4610; yyj4610++ {
			yyh4610.ElemContainerState(yyj4610)
			if r.TryDecodeAsNil() {
				yyv4610[yyj4610] = VolumeMount{}
			} else {
				yyv4611 := &yyv4610[yyj4610]
				yyv4611.CodecDecodeSelf(d)
			}

		}
		if yyrt4610 {
			for ; yyj4610 < yyl4610; yyj4610++ {
				yyv4610 = append(yyv4610, VolumeMount{})
				yyh4610.ElemContainerState(yyj4610)
				if r.TryDecodeAsNil() {
					yyv4610[yyj4610] = VolumeMount{}
				} else {
					yyv4612 := &yyv4610[yyj4610]
					yyv4612.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4610 := 0
		for ; !r.CheckBreak(); yyj4610++ {

			if yyj4610 >= len(yyv4610) {
				yyv4610 = append(yyv4610, VolumeMount{}) // var yyz4610 VolumeMount
				yyc4610 = true
			}
			yyh4610.ElemContainerState(yyj4610)
			if yyj4610 < len(yyv4610) {
				if r.TryDecodeAsNil() {
					yyv4610[yyj4610] = VolumeMount{}
				} else {
					yyv4613 := &yyv4610[yyj4610]
					yyv4613.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4610 < len(yyv4610) {
			yyv4610 = yyv4610[:yyj4610]
			yyc4610 = true
		} else if yyj4610 == 0 && yyv4610 == nil {
			yyv4610 = []VolumeMount{}
			yyc4610 = true
		}
	}
	yyh4610.End()
	if yyc4610 {
		*v = yyv4610
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4614 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4615 := &yyv4614
		yy4615.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4616 := *v
	yyh4616, yyl4616 := z.DecSliceHelperStart()
	var yyc4616 bool
	if yyl4616 == 0 {
		if yyv4616 == nil {
			yyv4616 = []NodeSelectorTerm{}
			yyc4616 = true
		} else if len(yyv4616) != 0 {
			yyv4616 = yyv4616[:0]
			yyc4616 = true
		}
	} else if yyl4616 > 0 {
		var yyrr4616, yyrl4616 int
		var yyrt4616 bool
		if yyl4616 > cap(yyv4616) {

			yyrg4616 := len(yyv4616) > 0
			yyv24616 := yyv4616
			yyrl4616, yyrt4616 = z.DecInferLen(yyl4616, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4616 {
				if yyrl4616 <= cap(yyv4616) {
					yyv4616 = yyv4616[:yyrl4616]
				} else {
					yyv4616 = make([]NodeSelectorTerm, yyrl4616)
				}
			} else {
				yyv4616 = make([]NodeSelectorTerm, yyrl4616)
			}
			yyc4616 = true
			yyrr4616 = len(yyv4616)
			if yyrg4616 {
				copy(yyv4616, yyv24616)
			}
		} else if yyl4616 != len(yyv4616) {
			yyv4616 = yyv4616[:yyl4616]
			yyc4616 = true
		}
		yyj4616 := 0
		for ; yyj4616 < yyrr4616; yyj4616++ {
			yyh4616.ElemContainerState(yyj4616)
			if r.TryDecodeAsNil() {
				yyv4616[yyj4616] = NodeSelectorTerm{}
			} else {
				yyv4617 := &yyv4616[yyj4616]
				yyv4617.CodecDecodeSelf(d)
			}

		}
		if yyrt4616 {
			for ; yyj4616 < yyl4616; yyj4616++ {
				yyv4616 = append(yyv4616, NodeSelectorTerm{})
				yyh4616.ElemContainerState(yyj4616)
				if r.TryDecodeAsNil() {
					yyv4616[yyj4616] = NodeSelectorTerm{}
				} else {
					yyv4618 := &yyv4616[yyj4616]
					yyv4618.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4616 := 0
		for ; !r.CheckBreak(); yyj4616++ {

			if yyj4616 >= len(yyv4616) {
				yyv4616 = append(yyv4616, NodeSelectorTerm{}) // var yyz4616 NodeSelectorTerm
				yyc4616 = true
			}
			yyh4616.ElemContainerState(yyj4616)
			if yyj4616 < len(yyv4616) {
				if r.TryDecodeAsNil() {
					yyv4616[yyj4616] = NodeSelectorTerm{}
				} else {
					yyv4619 := &yyv4616[yyj4616]
					yyv4619.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4616 < len(yyv4616) {
			yyv4616 = yyv4616[:yyj4616]
			yyc4616 = true
		} else if yyj4616 == 0 && yyv4616 == nil {
			yyv4616 = []NodeSelectorTerm{}
			yyc4616 = true
		}
	}
	yyh4616.End()
	if yyc4616 {
		*v = yyv4616
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4620 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4621 := &yyv4620
		yy4621.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4622 := *v
	yyh4622, yyl4622 := z.DecSliceHelperStart()
	var yyc4622 bool
	if yyl4622 == 0 {
		if yyv4622 == nil {
			yyv4622 = []NodeSelectorRequirement{}
			yyc4622 = true
		} else if len(yyv4622) != 0 {
			yyv4622 = yyv4622[:0]
			yyc4622 = true
		}
	} else if yyl4622 > 0 {
		var yyrr4622, yyrl4622 int
		var yyrt4622 bool
		if yyl4622 > cap(yyv4622) {

			yyrg4622 := len(yyv4622) > 0
			yyv24622 := yyv4622
			yyrl4622, yyrt4622 = z.DecInferLen(yyl4622, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4622 {
				if yyrl4622 <= cap(yyv4622) {
					yyv4622 = yyv4622[:yyrl4622]
				} else {
					yyv4622 = make([]NodeSelectorRequirement, yyrl4622)
				}
			} else {
				yyv4622 = make([]NodeSelectorRequirement, yyrl4622)
			}
			yyc4622 = true
			yyrr4622 = len(yyv4622)
			if yyrg4622 {
				copy(yyv4622, yyv24622)
			}
		} else if yyl4622 != len(yyv4622) {
			yyv4622 = yyv4622[:yyl4622]
			yyc4622 = true
		}
		yyj4622 := 0
		for ; yyj4622 < yyrr4622; yyj4622++ {
			yyh4622.ElemContainerState(yyj4622)
			if r.TryDecodeAsNil() {
				yyv4622[yyj4622] = NodeSelectorRequirement{}
			} else {
				yyv4623 := &yyv4622[yyj4622]
				yyv4623.CodecDecodeSelf(d)
			}

		}
		if yyrt4622 {
			for ; yyj4622 < yyl4622; yyj4622++ {
				yyv4622 = append(yyv4622, NodeSelectorRequirement{})
				yyh4622.ElemContainerState(yyj4622)
				if r.TryDecodeAsNil() {
					yyv4622[yyj4622] = NodeSelectorRequirement{}
				} else {
					yyv4624 := &yyv4622[yyj4622]
					yyv4624.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4622 := 0
		for ; !r.CheckBreak(); yyj4622++ {

			if yyj4622 >= len(yyv4622) {
				yyv4622 = append(yyv4622, NodeSelectorRequirement{}) // var yyz4622 NodeSelectorRequirement
				yyc4622 = true
			}
			yyh4622.ElemContainerState(yyj4622)
			if yyj4622 < len(yyv4622) {
				if r.TryDecodeAsNil() {
					yyv4622[yyj4622] = NodeSelectorRequirement{}
				} else {
					yyv4625 := &yyv4622[yyj4622]
					yyv4625.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4622 < len(yyv4622) {
			yyv4622 = yyv4622[:yyj4622]
			yyc4622 = true
		} else if yyj4622 == 0 && yyv4622 == nil {
			yyv4622 = []NodeSelectorRequirement{}
			yyc4622 = true
		}
	}
	yyh4622.End()
	if yyc4622 {
		*v = yyv4622
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4626 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4627 := &yyv4626
		yy4627.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4628 := *v
	yyh4628, yyl4628 := z.DecSliceHelperStart()
	var yyc4628 bool
	if yyl4628 == 0 {
		if yyv4628 == nil {
			yyv4628 = []PodAffinityTerm{}
			yyc4628 = true
		} else if len(yyv4628) != 0 {
			yyv4628 = yyv4628[:0]
			yyc4628 = true
		}
	} else if yyl4628 > 0 {
		var yyrr4628, yyrl4628 int
		var yyrt4628 bool
		if yyl4628 > cap(yyv4628) {

			yyrg4628 := len(yyv4628) > 0
			yyv24628 := yyv4628
			yyrl4628, yyrt4628 = z.DecInferLen(yyl4628, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4628 {
				if yyrl4628 <= cap(yyv4628) {
					yyv4628 = yyv4628[:yyrl4628]
				} else {
					yyv4628 = make([]PodAffinityTerm, yyrl4628)
				}
			} else {
				yyv4628 = make([]PodAffinityTerm, yyrl4628)
			}
			yyc4628 = true
			yyrr4628 = len(yyv4628)
			if yyrg4628 {
				copy(yyv4628, yyv24628)
			}
		} else if yyl4628 != len(yyv4628) {
			yyv4628 = yyv4628[:yyl4628]
			yyc4628 = true
		}
		yyj4628 := 0
		for ; yyj4628 < yyrr4628; yyj4628++ {
			yyh4628.ElemContainerState(yyj4628)
			if r.TryDecodeAsNil() {
				yyv4628[yyj4628] = PodAffinityTerm{}
			} else {
				yyv4629 := &yyv4628[yyj4628]
				yyv4629.CodecDecodeSelf(d)
			}

		}
		if yyrt4628 {
			for ; yyj4628 < yyl4628; yyj4628++ {
				yyv4628 = append(yyv4628, PodAffinityTerm{})
				yyh4628.ElemContainerState(yyj4628)
				if r.TryDecodeAsNil() {
					yyv4628[yyj4628] = PodAffinityTerm{}
				} else {
					yyv4630 := &yyv4628[yyj4628]
					yyv4630.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4628 := 0
		for ; !r.CheckBreak(); yyj4628++ {

			if yyj4628 >= len(yyv4628) {
				yyv4628 = append(yyv4628, PodAffinityTerm{}) // var yyz4628 PodAffinityTerm
				yyc4628 = true
			}
			yyh4628.ElemContainerState(yyj4628)
			if yyj4628 < len(yyv4628) {
				if r.TryDecodeAsNil() {
					yyv4628[yyj4628] = PodAffinityTerm{}
				} else {
					yyv4631 := &yyv4628[yyj4628]
					yyv4631.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4628 < len(yyv4628) {
			yyv4628 = yyv4628[:yyj4628]
			yyc4628 = true
		} else if yyj4628 == 0 && yyv4628 == nil {
			yyv4628 = []PodAffinityTerm{}
			yyc4628 = true
		}
	}
	yyh4628.End()
	if yyc4628 {
		*v = yyv4628
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4632 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4633 := &yyv4632
		yy4633.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4634 := *v
	yyh4634, yyl4634 := z.DecSliceHelperStart()
	var yyc4634 bool
	if yyl4634 == 0 {
		if yyv4634 == nil {
			yyv4634 = []WeightedPodAffinityTerm{}
			yyc4634 = true
		} else if len(yyv4634) != 0 {
			yyv4634 = yyv4634[:0]
			yyc4634 = true
		}
	} else if yyl4634 > 0 {
		var yyrr4634, yyrl4634 int
		var yyrt4634 bool
		if yyl4634 > cap(yyv4634) {

			yyrg4634 := len(yyv4634) > 0
			yyv24634 := yyv4634
			yyrl4634, yyrt4634 = z.DecInferLen(yyl4634, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4634 {
				if yyrl4634 <= cap(yyv4634) {
					yyv4634 = yyv4634[:yyrl4634]
				} else {
					yyv4634 = make([]WeightedPodAffinityTerm, yyrl4634)
				}
			} else {
				yyv4634 = make([]WeightedPodAffinityTerm, yyrl4634)
			}
			yyc4634 = true
			yyrr4634 = len(yyv4634)
			if yyrg4634 {
				copy(yyv4634, yyv24634)
			}
		} else if yyl4634 != len(yyv4634) {
			yyv4634 = yyv4634[:yyl4634]
			yyc4634 = true
		}
		yyj4634 := 0
		for ; yyj4634 < yyrr4634; yyj4634++ {
			yyh4634.ElemContainerState(yyj4634)
			if r.TryDecodeAsNil() {
				yyv4634[yyj4634] = WeightedPodAffinityTerm{}
			} else {
				yyv4635 := &yyv4634[yyj4634]
				yyv4635.CodecDecodeSelf(d)
			}

		}
		if yyrt4634 {
			for ; yyj4634 < yyl4634; yyj4634++ {
				yyv4634 = append(yyv4634, WeightedPodAffinityTerm{})
				yyh4634.ElemContainerState(yyj4634)
				if r.TryDecodeAsNil() {
					yyv4634[yyj4634] = WeightedPodAffinityTerm{}
				} else {
					yyv4636 := &yyv4634[yyj4634]
					yyv4636.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4634 := 0
		for ; !r.CheckBreak(); yyj4634++ {

			if yyj4634 >= len(yyv4634) {
				yyv4634 = append(yyv4634, WeightedPodAffinityTerm{}) // var yyz4634 WeightedPodAffinityTerm
				yyc4634 = true
			}
			yyh4634.ElemContainerState(yyj4634)
			if yyj4634 < len(yyv4634) {
				if r.TryDecodeAsNil() {
					yyv4634[yyj4634] = WeightedPodAffinityTerm{}
				} else {
					yyv4637 := &yyv4634[yyj4634]
					yyv4637.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4634 < len(yyv4634) {
			yyv4634 = yyv4634[:yyj4634]
			yyc4634 = true
		} else if yyj4634 == 0 && yyv4634 == nil {
			yyv4634 = []WeightedPodAffinityTerm{}
			yyc4634 = true
		}
	}
	yyh4634.End()
	if yyc4634 {
		*v = yyv4634
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4638 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4639 := &yyv4638
		yy4639.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4640 := *v
	yyh4640, yyl4640 := z.DecSliceHelperStart()
	var yyc4640 bool
	if yyl4640 == 0 {
		if yyv4640 == nil {
			yyv4640 = []PreferredSchedulingTerm{}
			yyc4640 = true
		} else if len(yyv4640) != 0 {
			yyv4640 = yyv4640[:0]
			yyc4640 = true
		}
	} else if yyl4640 > 0 {
		var yyrr4640, yyrl4640 int
		var yyrt4640 bool
		if yyl4640 > cap(yyv4640) {

			yyrg4640 := len(yyv4640) > 0
			yyv24640 := yyv4640
			yyrl4640, yyrt4640 = z.DecInferLen(yyl4640, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4640 {
				if yyrl4640 <= cap(yyv4640) {
					yyv4640 = yyv4640[:yyrl4640]
				} else {
					yyv4640 = make([]PreferredSchedulingTerm, yyrl4640)
				}
			} else {
				yyv4640 = make([]PreferredSchedulingTerm, yyrl4640)
			}
			yyc4640 = true
			yyrr4640 = len(yyv4640)
			if yyrg4640 {
				copy(yyv4640, yyv24640)
			}
		} else if yyl4640 != len(yyv4640) {
			yyv4640 = yyv4640[:yyl4640]
			yyc4640 = true
		}
		yyj4640 := 0
		for ; yyj4640 < yyrr4640; yyj4640++ {
			yyh4640.ElemContainerState(yyj4640)
			if r.TryDecodeAsNil() {
				yyv4640[yyj4640] = PreferredSchedulingTerm{}
			} else {
				yyv4641 := &yyv4640[yyj4640]
				yyv4641.CodecDecodeSelf(d)
			}

		}
		if yyrt4640 {
			for ; yyj4640 < yyl4640; yyj4640++ {
				yyv4640 = append(yyv4640, PreferredSchedulingTerm{})
				yyh4640.ElemContainerState(yyj4640)
				if r.TryDecodeAsNil() {
					yyv4640[yyj4640] = PreferredSchedulingTerm{}
				} else {
					yyv4642 := &yyv4640[yyj4640]
					yyv4642.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4640 := 0
		for ; !r.CheckBreak(); yyj4640++ {

			if yyj4640 >= len(yyv4640) {
				yyv4640 = append(yyv4640, PreferredSchedulingTerm{}) // var yyz4640 PreferredSchedulingTerm
				yyc4640 = true
			}
			yyh4640.ElemContainerState(yyj4640)
			if yyj4640 < len(yyv4640) {
				if r.TryDecodeAsNil() {
					yyv4640[yyj4640] = PreferredSchedulingTerm{}
				} else {
					yyv4643 := &yyv4640[yyj4640]
					yyv4643.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4640 < len(yyv4640) {
			yyv4640 = yyv4640[:yyj4640]
			yyc4640 = true
		} else if yyj4640 == 0 && yyv4640 == nil {
			yyv4640 = []PreferredSchedulingTerm{}
			yyc4640 = true
		}
	}
	yyh4640.End()
	if yyc4640 {
		*v = yyv4640
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4644 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4645 := &yyv4644
		yy4645.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4646 := *v
	yyh4646, yyl4646 := z.DecSliceHelperStart()
	var yyc4646 bool
	if yyl4646 == 0 {
		if yyv4646 == nil {
			yyv4646 = []Volume{}
			yyc4646 = true
		} else if len(yyv4646) != 0 {
			yyv4646 = yyv4646[:0]
			yyc4646 = true
		}
	} else if yyl4646 > 0 {
		var yyrr4646, yyrl4646 int
		var yyrt4646 bool
		if yyl4646 > cap(yyv4646) {

			yyrg4646 := len(yyv4646) > 0
			yyv24646 := yyv4646
			yyrl4646, yyrt4646 = z.DecInferLen(yyl4646, z.DecBasicHandle().MaxInitLen, 200)
			if yyrt4646 {
				if yyrl4646 <= cap(yyv4646) {
					yyv4646 = yyv4646[:yyrl4646]
				} else {
					yyv4646 = make([]Volume, yyrl4646)
				}
			} else {
				yyv4646 = make([]Volume, yyrl4646)
			}
			yyc4646 = true
			yyrr4646 = len(yyv4646)
			if yyrg4646 {
				copy(yyv4646, yyv24646)
			}
		} else if yyl4646 != len(yyv4646) {
			yyv4646 = yyv4646[:yyl4646]
			yyc4646 = true
		}
		yyj4646 := 0
		for ; yyj4646 < yyrr4646; yyj4646++ {
			yyh4646.ElemContainerState(yyj4646)
			if r.TryDecodeAsNil() {
				yyv4646[yyj4646] = Volume{}
			} else {
				yyv4647 := &yyv4646[yyj4646]
				yyv4647.CodecDecodeSelf(d)
			}

		}
		if yyrt4646 {
			for ; yyj4646 < yyl4646; yyj4646++ {
				yyv4646 = append(yyv4646, Volume{})
				yyh4646.ElemContainerState(yyj4646)
				if r.TryDecodeAsNil() {
					yyv4646[yyj4646] = Volume{}
				} else {
					yyv4648 := &yyv4646[yyj4646]
					yyv4648.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4646 := 0
		for ; !r.CheckBreak(); yyj4646++ {

			if yyj4646 >= len(yyv4646) {
				yyv4646 = append(yyv4646, Volume{}) // var yyz4646 Volume
				yyc4646 = true
			}
			yyh4646.ElemContainerState(yyj4646)
			if yyj4646 < len(yyv4646) {
				if r.TryDecodeAsNil() {
					yyv4646[yyj4646] = Volume{}
				} else {
					yyv4649 := &yyv4646[yyj4646]
					yyv4649.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4646 < len(yyv4646) {
			yyv4646 = yyv4646[:yyj4646]
			yyc4646 = true
		} else if yyj4646 == 0 && yyv4646 == nil {
			yyv4646 = []Volume{}
			yyc4646 = true
		}
	}
	yyh4646.End()
	if yyc4646 {
		*v = yyv4646
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4650 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4651 := &yyv4650
		yy4651.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4652 := *v
	yyh4652, yyl4652 := z.DecSliceHelperStart()
	var yyc4652 bool
	if yyl4652 == 0 {
		if yyv4652 == nil {
			yyv4652 = []Container{}
			yyc4652 = true
		} else if len(yyv4652) != 0 {
			yyv4652 = yyv4652[:0]
			yyc4652 = true
		}
	} else if yyl4652 > 0 {
		var yyrr4652, yyrl4652 int
		var yyrt4652 bool
		if yyl4652 > cap(yyv4652) {

			yyrg4652 := len(yyv4652) > 0
			yyv24652 := yyv4652
			yyrl4652, yyrt4652 = z.DecInferLen(yyl4652, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4652 {
				if yyrl4652 <= cap(yyv4652) {
					yyv4652 = yyv4652[:yyrl4652]
				} else {
					yyv4652 = make([]Container, yyrl4652)
				}
			} else {
				yyv4652 = make([]Container, yyrl4652)
			}
			yyc4652 = true
			yyrr4652 = len(yyv4652)
			if yyrg4652 {
				copy(yyv4652, yyv24652)
			}
		} else if yyl4652 != len(yyv4652) {
			yyv4652 = yyv4652[:yyl4652]
			yyc4652 = true
		}
		yyj4652 := 0
		for ; yyj4652 < yyrr4652; yyj4652++ {
			yyh4652.ElemContainerState(yyj4652)
			if r.TryDecodeAsNil() {
				yyv4652[yyj4652] = Container{}
			} else {
				yyv4653 := &yyv4652[yyj4652]
				yyv4653.CodecDecodeSelf(d)
			}

		}
		if yyrt4652 {
			for ; yyj4652 < yyl4652; yyj4652++ {
				yyv4652 = append(yyv4652, Container{})
				yyh4652.ElemContainerState(yyj4652)
				if r.TryDecodeAsNil() {
					yyv4652[yyj4652] = Container{}
				} else {
					yyv4654 := &yyv4652[yyj4652]
					yyv4654.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4652 := 0
		for ; !r.CheckBreak(); yyj4652++ {

			if yyj4652 >= len(yyv4652) {
				yyv4652 = append(yyv4652, Container{}) // var yyz4652 Container
				yyc4652 = true
			}
			yyh4652.ElemContainerState(yyj4652)
			if yyj4652 < len(yyv4652) {
				if r.TryDecodeAsNil() {
					yyv4652[yyj4652] = Container{}
				} else {
					yyv4655 := &yyv4652[yyj4652]
					yyv4655.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4652 < len(yyv4652) {
			yyv4652 = yyv4652[:yyj4652]
			yyc4652 = true
		} else if yyj4652 == 0 && yyv4652 == nil {
			yyv4652 = []Container{}
			yyc4652 = true
		}
	}
	yyh4652.End()
	if yyc4652 {
		*v = yyv4652
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4656 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4657 := &yyv4656
		yy4657.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4658 := *v
	yyh4658, yyl4658 := z.DecSliceHelperStart()
	var yyc4658 bool
	if yyl4658 == 0 {
		if yyv4658 == nil {
			yyv4658 = []LocalObjectReference{}
			yyc4658 = true
		} else if len(yyv4658) != 0 {
			yyv4658 = yyv4658[:0]
			yyc4658 = true
		}
	} else if yyl4658 > 0 {
		var yyrr4658, yyrl4658 int
		var yyrt4658 bool
		if yyl4658 > cap(yyv4658) {

			yyrg4658 := len(yyv4658) > 0
			yyv24658 := yyv4658
			yyrl4658, yyrt4658 = z.DecInferLen(yyl4658, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4658 {
				if yyrl4658 <= cap(yyv4658) {
					yyv4658 = yyv4658[:yyrl4658]
				} else {
					yyv4658 = make([]LocalObjectReference, yyrl4658)
				}
			} else {
				yyv4658 = make([]LocalObjectReference, yyrl4658)
			}
			yyc4658 = true
			yyrr4658 = len(yyv4658)
			if yyrg4658 {
				copy(yyv4658, yyv24658)
			}
		} else if yyl4658 != len(yyv4658) {
			yyv4658 = yyv4658[:yyl4658]
			yyc4658 = true
		}
		yyj4658 := 0
		for ; yyj4658 < yyrr4658; yyj4658++ {
			yyh4658.ElemContainerState(yyj4658)
			if r.TryDecodeAsNil() {
				yyv4658[yyj4658] = LocalObjectReference{}
			} else {
				yyv4659 := &yyv4658[yyj4658]
				yyv4659.CodecDecodeSelf(d)
			}

		}
		if yyrt4658 {
			for ; yyj4658 < yyl4658; yyj4658++ {
				yyv4658 = append(yyv4658, LocalObjectReference{})
				yyh4658.ElemContainerState(yyj4658)
				if r.TryDecodeAsNil() {
					yyv4658[yyj4658] = LocalObjectReference{}
				} else {
					yyv4660 := &yyv4658[yyj4658]
					yyv4660.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4658 := 0
		for ; !r.CheckBreak(); yyj4658++ {

			if yyj4658 >= len(yyv4658) {
				yyv4658 = append(yyv4658, LocalObjectReference{}) // var yyz4658 LocalObjectReference
				yyc4658 = true
			}
			yyh4658.ElemContainerState(yyj4658)
			if yyj4658 < len(yyv4658) {
				if r.TryDecodeAsNil() {
					yyv4658[yyj4658] = LocalObjectReference{}
				} else {
					yyv4661 := &yyv4658[yyj4658]
					yyv4661.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4658 < len(yyv4658) {
			yyv4658 = yyv4658[:yyj4658]
			yyc4658 = true
		} else if yyj4658 == 0 && yyv4658 == nil {
			yyv4658 = []LocalObjectReference{}
			yyc4658 = true
		}
	}
	yyh4658.End()
	if yyc4658 {
		*v = yyv4658
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4662 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4663 := &yyv4662
		yy4663.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4664 := *v
	yyh4664, yyl4664 := z.DecSliceHelperStart()
	var yyc4664 bool
	if yyl4664 == 0 {
		if yyv4664 == nil {
			yyv4664 = []PodCondition{}
			yyc4664 = true
		} else if len(yyv4664) != 0 {
			yyv4664 = yyv4664[:0]
			yyc4664 = true
		}
	} else if yyl4664 > 0 {
		var yyrr4664, yyrl4664 int
		var yyrt4664 bool
		if yyl4664 > cap(yyv4664) {

			yyrg4664 := len(yyv4664) > 0
			yyv24664 := yyv4664
			yyrl4664, yyrt4664 = z.DecInferLen(yyl4664, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4664 {
				if yyrl4664 <= cap(yyv4664) {
					yyv4664 = yyv4664[:yyrl4664]
				} else {
					yyv4664 = make([]PodCondition, yyrl4664)
				}
			} else {
				yyv4664 = make([]PodCondition, yyrl4664)
			}
			yyc4664 = true
			yyrr4664 = len(yyv4664)
			if yyrg4664 {
				copy(yyv4664, yyv24664)
			}
		} else if yyl4664 != len(yyv4664) {
			yyv4664 = yyv4664[:yyl4664]
			yyc4664 = true
		}
		yyj4664 := 0
		for ; yyj4664 < yyrr4664; yyj4664++ {
			yyh4664.ElemContainerState(yyj4664)
			if r.TryDecodeAsNil() {
				yyv4664[yyj4664] = PodCondition{}
			} else {
				yyv4665 := &yyv4664[yyj4664]
				yyv4665.CodecDecodeSelf(d)
			}

		}
		if yyrt4664 {
			for ; yyj4664 < yyl4664; yyj4664++ {
				yyv4664 = append(yyv4664, PodCondition{})
				yyh4664.ElemContainerState(yyj4664)
				if r.TryDecodeAsNil() {
					yyv4664[yyj4664] = PodCondition{}
				} else {
					yyv4666 := &yyv4664[yyj4664]
					yyv4666.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4664 := 0
		for ; !r.CheckBreak(); yyj4664++ {

			if yyj4664 >= len(yyv4664) {
				yyv4664 = append(yyv4664, PodCondition{}) // var yyz4664 PodCondition
				yyc4664 = true
			}
			yyh4664.ElemContainerState(yyj4664)
			if yyj4664 < len(yyv4664) {
				if r.TryDecodeAsNil() {
					yyv4664[yyj4664] = PodCondition{}
				} else {
					yyv4667 := &yyv4664[yyj4664]
					yyv4667.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4664 < len(yyv4664) {
			yyv4664 = yyv4664[:yyj4664]
			yyc4664 = true
		} else if yyj4664 == 0 && yyv4664 == nil {
			yyv4664 = []PodCondition{}
			yyc4664 = true
		}
	}
	yyh4664.End()
	if yyc4664 {
		*v = yyv4664
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4668 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4669 := &yyv4668
		yy4669.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4670 := *v
	yyh4670, yyl4670 := z.DecSliceHelperStart()
	var yyc4670 bool
	if yyl4670 == 0 {
		if yyv4670 == nil {
			yyv4670 = []ContainerStatus{}
			yyc4670 = true
		} else if len(yyv4670) != 0 {
			yyv4670 = yyv4670[:0]
			yyc4670 = true
		}
	} else if yyl4670 > 0 {
		var yyrr4670, yyrl4670 int
		var yyrt4670 bool
		if yyl4670 > cap(yyv4670) {

			yyrg4670 := len(yyv4670) > 0
			yyv24670 := yyv4670
			yyrl4670, yyrt4670 = z.DecInferLen(yyl4670, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4670 {
				if yyrl4670 <= cap(yyv4670) {
					yyv4670 = yyv4670[:yyrl4670]
				} else {
					yyv4670 = make([]ContainerStatus, yyrl4670)
				}
			} else {
				yyv4670 = make([]ContainerStatus, yyrl4670)
			}
			yyc4670 = true
			yyrr4670 = len(yyv4670)
			if yyrg4670 {
				copy(yyv4670, yyv24670)
			}
		} else if yyl4670 != len(yyv4670) {
			yyv4670 = yyv4670[:yyl4670]
			yyc4670 = true
		}
		yyj4670 := 0
		for ; yyj4670 < yyrr4670; yyj4670++ {
			yyh4670.ElemContainerState(yyj4670)
			if r.TryDecodeAsNil() {
				yyv4670[yyj4670] = ContainerStatus{}
			} else {
				yyv4671 := &yyv4670[yyj4670]
				yyv4671.CodecDecodeSelf(d)
			}

		}
		if yyrt4670 {
			for ; yyj4670 < yyl4670; yyj4670++ {
				yyv4670 = append(yyv4670, ContainerStatus{})
				yyh4670.ElemContainerState(yyj4670)
				if r.TryDecodeAsNil() {
					yyv4670[yyj4670] = ContainerStatus{}
				} else {
					yyv4672 := &yyv4670[yyj4670]
					yyv4672.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4670 := 0
		for ; !r.CheckBreak(); yyj4670++ {

			if yyj4670 >= len(yyv4670) {
				yyv4670 = append(yyv4670, ContainerStatus{}) // var yyz4670 ContainerStatus
				yyc4670 = true
			}
			yyh4670.ElemContainerState(yyj4670)
			if yyj4670 < len(yyv4670) {
				if r.TryDecodeAsNil() {
					yyv4670[yyj4670] = ContainerStatus{}
				} else {
					yyv4673 := &yyv4670[yyj4670]
					yyv4673.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4670 < len(yyv4670) {
			yyv4670 = yyv4670[:yyj4670]
			yyc4670 = true
		} else if yyj4670 == 0 && yyv4670 == nil {
			yyv4670 = []ContainerStatus{}
			yyc4670 = true
		}
	}
	yyh4670.End()
	if yyc4670 {
		*v = yyv4670
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4674 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4675 := &yyv4674
		yy4675.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4676 := *v
	yyh4676, yyl4676 := z.DecSliceHelperStart()
	var yyc4676 bool
	if yyl4676 == 0 {
		if yyv4676 == nil {
			yyv4676 = []Pod{}
			yyc4676 = true
		} else if len(yyv4676) != 0 {
			yyv4676 = yyv4676[:0]
			yyc4676 = true
		}
	} else if yyl4676 > 0 {
		var yyrr4676, yyrl4676 int
		var yyrt4676 bool
		if yyl4676 > cap(yyv4676) {

			yyrg4676 := len(yyv4676) > 0
			yyv24676 := yyv4676
			yyrl4676, yyrt4676 = z.DecInferLen(yyl4676, z.DecBasicHandle().MaxInitLen, 664)
			if yyrt4676 {
				if yyrl4676 <= cap(yyv4676) {
					yyv4676 = yyv4676[:yyrl4676]
				} else {
					yyv4676 = make([]Pod, yyrl4676)
				}
			} else {
				yyv4676 = make([]Pod, yyrl4676)
			}
			yyc4676 = true
			yyrr4676 = len(yyv4676)
			if yyrg4676 {
				copy(yyv4676, yyv24676)
			}
		} else if yyl4676 != len(yyv4676) {
			yyv4676 = yyv4676[:yyl4676]
			yyc4676 = true
		}
		yyj4676 := 0
		for ; yyj4676 < yyrr4676; yyj4676++ {
			yyh4676.ElemContainerState(yyj4676)
			if r.TryDecodeAsNil() {
				yyv4676[yyj4676] = Pod{}
			} else {
				yyv4677 := &yyv4676[yyj4676]
				yyv4677.CodecDecodeSelf(d)
			}

		}
		if yyrt4676 {
			for ; yyj4676 < yyl4676; yyj4676++ {
				yyv4676 = append(yyv4676, Pod{})
				yyh4676.ElemContainerState(yyj4676)
				if r.TryDecodeAsNil() {
					yyv4676[yyj4676] = Pod{}
				} else {
					yyv4678 := &yyv4676[yyj4676]
					yyv4678.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4676 := 0
		for ; !r.CheckBreak(); yyj4676++ {

			if yyj4676 >= len(yyv4676) {
				yyv4676 = append(yyv4676, Pod{}) // var yyz4676 Pod
				yyc4676 = true
			}
			yyh4676.ElemContainerState(yyj4676)
			if yyj4676 < len(yyv4676) {
				if r.TryDecodeAsNil() {
					yyv4676[yyj4676] = Pod{}
				} else {
					yyv4679 := &yyv4676[yyj4676]
					yyv4679.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4676 < len(yyv4676) {
			yyv4676 = yyv4676[:yyj4676]
			yyc4676 = true
		} else if yyj4676 == 0 && yyv4676 == nil {
			yyv4676 = []Pod{}
			yyc4676 = true
		}
	}
	yyh4676.End()
	if yyc4676 {
		*v = yyv4676
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4680 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4681 := &yyv4680
		yy4681.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4682 := *v
	yyh4682, yyl4682 := z.DecSliceHelperStart()
	var yyc4682 bool
	if yyl4682 == 0 {
		if yyv4682 == nil {
			yyv4682 = []PodTemplate{}
			yyc4682 = true
		} else if len(yyv4682) != 0 {
			yyv4682 = yyv4682[:0]
			yyc4682 = true
		}
	} else if yyl4682 > 0 {
		var yyrr4682, yyrl4682 int
		var yyrt4682 bool
		if yyl4682 > cap(yyv4682) {

			yyrg4682 := len(yyv4682) > 0
			yyv24682 := yyv4682
			yyrl4682, yyrt4682 = z.DecInferLen(yyl4682, z.DecBasicHandle().MaxInitLen, 728)
			if yyrt4682 {
				if yyrl4682 <= cap(yyv4682) {
					yyv4682 = yyv4682[:yyrl4682]
				} else {
					yyv4682 = make([]PodTemplate, yyrl4682)
				}
			} else {
				yyv4682 = make([]PodTemplate, yyrl4682)
			}
			yyc4682 = true
			yyrr4682 = len(yyv4682)
			if yyrg4682 {
				copy(yyv4682, yyv24682)
			}
		} else if yyl4682 != len(yyv4682) {
			yyv4682 = yyv4682[:yyl4682]
			yyc4682 = true
		}
		yyj4682 := 0
		for ; yyj4682 < yyrr4682; yyj4682++ {
			yyh4682.ElemContainerState(yyj4682)
			if r.TryDecodeAsNil() {
				yyv4682[yyj4682] = PodTemplate{}
			} else {
				yyv4683 := &yyv4682[yyj4682]
				yyv4683.CodecDecodeSelf(d)
			}

		}
		if yyrt4682 {
			for ; yyj4682 < yyl4682; yyj4682++ {
				yyv4682 = append(yyv4682, PodTemplate{})
				yyh4682.ElemContainerState(yyj4682)
				if r.TryDecodeAsNil() {
					yyv4682[yyj4682] = PodTemplate{}
				} else {
					yyv4684 := &yyv4682[yyj4682]
					yyv4684.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4682 := 0
		for ; !r.CheckBreak(); yyj4682++ {

			if yyj4682 >= len(yyv4682) {
				yyv4682 = append(yyv4682, PodTemplate{}) // var yyz4682 PodTemplate
				yyc4682 = true
			}
			yyh4682.ElemContainerState(yyj4682)
			if yyj4682 < len(yyv4682) {
				if r.TryDecodeAsNil() {
					yyv4682[yyj4682] = PodTemplate{}
				} else {
					yyv4685 := &yyv4682[yyj4682]
					yyv4685.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4682 < len(yyv4682) {
			yyv4682 = yyv4682[:yyj4682]
			yyc4682 = true
		} else if yyj4682 == 0 && yyv4682 == nil {
			yyv4682 = []PodTemplate{}
			yyc4682 = true
		}
	}
	yyh4682.End()
	if yyc4682 {
		*v = yyv4682
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4686 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4687 := &yyv4686
		yy4687.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4688 := *v
	yyh4688, yyl4688 := z.DecSliceHelperStart()
	var yyc4688 bool
	if yyl4688 == 0 {
		if yyv4688 == nil {
			yyv4688 = []ReplicationController{}
			yyc4688 = true
		} else if len(yyv4688) != 0 {
			yyv4688 = yyv4688[:0]
			yyc4688 = true
		}
	} else if yyl4688 > 0 {
		var yyrr4688, yyrl4688 int
		var yyrt4688 bool
		if yyl4688 > cap(yyv4688) {

			yyrg4688 := len(yyv4688) > 0
			yyv24688 := yyv4688
			yyrl4688, yyrt4688 = z.DecInferLen(yyl4688, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4688 {
				if yyrl4688 <= cap(yyv4688) {
					yyv4688 = yyv4688[:yyrl4688]
				} else {
					yyv4688 = make([]ReplicationController, yyrl4688)
				}
			} else {
				yyv4688 = make([]ReplicationController, yyrl4688)
			}
			yyc4688 = true
			yyrr4688 = len(yyv4688)
			if yyrg4688 {
				copy(yyv4688, yyv24688)
			}
		} else if yyl4688 != len(yyv4688) {
			yyv4688 = yyv4688[:yyl4688]
			yyc4688 = true
		}
		yyj4688 := 0
		for ; yyj4688 < yyrr4688; yyj4688++ {
			yyh4688.ElemContainerState(yyj4688)
			if r.TryDecodeAsNil() {
				yyv4688[yyj4688] = ReplicationController{}
			} else {
				yyv4689 := &yyv4688[yyj4688]
				yyv4689.CodecDecodeSelf(d)
			}

		}
		if yyrt4688 {
			for ; yyj4688 < yyl4688; yyj4688++ {
				yyv4688 = append(yyv4688, ReplicationController{})
				yyh4688.ElemContainerState(yyj4688)
				if r.TryDecodeAsNil() {
					yyv4688[yyj4688] = ReplicationController{}
				} else {
					yyv4690 := &yyv4688[yyj4688]
					yyv4690.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4688 := 0
		for ; !r.CheckBreak(); yyj4688++ {

			if yyj4688 >= len(yyv4688) {
				yyv4688 = append(yyv4688, ReplicationController{}) // var yyz4688 ReplicationController
				yyc4688 = true
			}
			yyh4688.ElemContainerState(yyj4688)
			if yyj4688 < len(yyv4688) {
				if r.TryDecodeAsNil() {
					yyv4688[yyj4688] = ReplicationController{}
				} else {
					yyv4691 := &yyv4688[yyj4688]
					yyv4691.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4688 < len(yyv4688) {
			yyv4688 = yyv4688[:yyj4688]
			yyc4688 = true
		} else if yyj4688 == 0 && yyv4688 == nil {
			yyv4688 = []ReplicationController{}
			yyc4688 = true
		}
	}
	yyh4688.End()
	if yyc4688 {
		*v = yyv4688
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4692 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4693 := &yyv4692
		yy4693.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4694 := *v
	yyh4694, yyl4694 := z.DecSliceHelperStart()
	var yyc4694 bool
	if yyl4694 == 0 {
		if yyv4694 == nil {
			yyv4694 = []LoadBalancerIngress{}
			yyc4694 = true
		} else if len(yyv4694) != 0 {
			yyv4694 = yyv4694[:0]
			yyc4694 = true
		}
	} else if yyl4694 > 0 {
		var yyrr4694, yyrl4694 int
		var yyrt4694 bool
		if yyl4694 > cap(yyv4694) {

			yyrg4694 := len(yyv4694) > 0
			yyv24694 := yyv4694
			yyrl4694, yyrt4694 = z.DecInferLen(yyl4694, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4694 {
				if yyrl4694 <= cap(yyv4694) {
					yyv4694 = yyv4694[:yyrl4694]
				} else {
					yyv4694 = make([]LoadBalancerIngress, yyrl4694)
				}
			} else {
				yyv4694 = make([]LoadBalancerIngress, yyrl4694)
			}
			yyc4694 = true
			yyrr4694 = len(yyv4694)
			if yyrg4694 {
				copy(yyv4694, yyv24694)
			}
		} else if yyl4694 != len(yyv4694) {
			yyv4694 = yyv4694[:yyl4694]
			yyc4694 = true
		}
		yyj4694 := 0
		for ; yyj4694 < yyrr4694; yyj4694++ {
			yyh4694.ElemContainerState(yyj4694)
			if r.TryDecodeAsNil() {
				yyv4694[yyj4694] = LoadBalancerIngress{}
			} else {
				yyv4695 := &yyv4694[yyj4694]
				yyv4695.CodecDecodeSelf(d)
			}

		}
		if yyrt4694 {
			for ; yyj4694 < yyl4694; yyj4694++ {
				yyv4694 = append(yyv4694, LoadBalancerIngress{})
				yyh4694.ElemContainerState(yyj4694)
				if r.TryDecodeAsNil() {
					yyv4694[yyj4694] = LoadBalancerIngress{}
				} else {
					yyv4696 := &yyv4694[yyj4694]
					yyv4696.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4694 := 0
		for ; !r.CheckBreak(); yyj4694++ {

			if yyj4694 >= len(yyv4694) {
				yyv4694 = append(yyv4694, LoadBalancerIngress{}) // var yyz4694 LoadBalancerIngress
				yyc4694 = true
			}
			yyh4694.ElemContainerState(yyj4694)
			if yyj4694 < len(yyv4694) {
				if r.TryDecodeAsNil() {
					yyv4694[yyj4694] = LoadBalancerIngress{}
				} else {
					yyv4697 := &yyv4694[yyj4694]
					yyv4697.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4694 < len(yyv4694) {
			yyv4694 = yyv4694[:yyj4694]
			yyc4694 = true
		} else if yyj4694 == 0 && yyv4694 == nil {
			yyv4694 = []LoadBalancerIngress{}
			yyc4694 = true
		}
	}
	yyh4694.End()
	if yyc4694 {
		*v = yyv4694
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4698 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4699 := &yyv4698
		yy4699.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4700 := *v
	yyh4700, yyl4700 := z.DecSliceHelperStart()
	var yyc4700 bool
	if yyl4700 == 0 {
		if yyv4700 == nil {
			yyv4700 = []ServicePort{}
			yyc4700 = true
		} else if len(yyv4700) != 0 {
			yyv4700 = yyv4700[:0]
			yyc4700 = true
		}
	} else if yyl4700 > 0 {
		var yyrr4700, yyrl4700 int
		var yyrt4700 bool
		if yyl4700 > cap(yyv4700) {

			yyrg4700 := len(yyv4700) > 0
			yyv24700 := yyv4700
			yyrl4700, yyrt4700 = z.DecInferLen(yyl4700, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4700 {
				if yyrl4700 <= cap(yyv4700) {
					yyv4700 = yyv4700[:yyrl4700]
				} else {
					yyv4700 = make([]ServicePort, yyrl4700)
				}
			} else {
				yyv4700 = make([]ServicePort, yyrl4700)
			}
			yyc4700 = true
			yyrr4700 = len(yyv4700)
			if yyrg4700 {
				copy(yyv4700, yyv24700)
			}
		} else if yyl4700 != len(yyv4700) {
			yyv4700 = yyv4700[:yyl4700]
			yyc4700 = true
		}
		yyj4700 := 0
		for ; yyj4700 < yyrr4700; yyj4700++ {
			yyh4700.ElemContainerState(yyj4700)
			if r.TryDecodeAsNil() {
				yyv4700[yyj4700] = ServicePort{}
			} else {
				yyv4701 := &yyv4700[yyj4700]
				yyv4701.CodecDecodeSelf(d)
			}

		}
		if yyrt4700 {
			for ; yyj4700 < yyl4700; yyj4700++ {
				yyv4700 = append(yyv4700, ServicePort{})
				yyh4700.ElemContainerState(yyj4700)
				if r.TryDecodeAsNil() {
					yyv4700[yyj4700] = ServicePort{}
				} else {
					yyv4702 := &yyv4700[yyj4700]
					yyv4702.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4700 := 0
		for ; !r.CheckBreak(); yyj4700++ {

			if yyj4700 >= len(yyv4700) {
				yyv4700 = append(yyv4700, ServicePort{}) // var yyz4700 ServicePort
				yyc4700 = true
			}
			yyh4700.ElemContainerState(yyj4700)
			if yyj4700 < len(yyv4700) {
				if r.TryDecodeAsNil() {
					yyv4700[yyj4700] = ServicePort{}
				} else {
					yyv4703 := &yyv4700[yyj4700]
					yyv4703.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4700 < len(yyv4700) {
			yyv4700 = yyv4700[:yyj4700]
			yyc4700 = true
		} else if yyj4700 == 0 && yyv4700 == nil {
			yyv4700 = []ServicePort{}
			yyc4700 = true
		}
	}
	yyh4700.End()
	if yyc4700 {
		*v = yyv4700
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4704 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4705 := &yyv4704
		yy4705.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4706 := *v
	yyh4706, yyl4706 := z.DecSliceHelperStart()
	var yyc4706 bool
	if yyl4706 == 0 {
		if yyv4706 == nil {
			yyv4706 = []Service{}
			yyc4706 = true
		} else if len(yyv4706) != 0 {
			yyv4706 = yyv4706[:0]
			yyc4706 = true
		}
	} else if yyl4706 > 0 {
		var yyrr4706, yyrl4706 int
		var yyrt4706 bool
		if yyl4706 > cap(yyv4706) {

			yyrg4706 := len(yyv4706) > 0
			yyv24706 := yyv4706
			yyrl4706, yyrt4706 = z.DecInferLen(yyl4706, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4706 {
				if yyrl4706 <= cap(yyv4706) {
					yyv4706 = yyv4706[:yyrl4706]
				} else {
					yyv4706 = make([]Service, yyrl4706)
				}
			} else {
				yyv4706 = make([]Service, yyrl4706)
			}
			yyc4706 = true
			yyrr4706 = len(yyv4706)
			if yyrg4706 {
				copy(yyv4706, yyv24706)
			}
		} else if yyl4706 != len(yyv4706) {
			yyv4706 = yyv4706[:yyl4706]
			yyc4706 = true
		}
		yyj4706 := 0
		for ; yyj4706 < yyrr4706; yyj4706++ {
			yyh4706.ElemContainerState(yyj4706)
			if r.TryDecodeAsNil() {
				yyv4706[yyj4706] = Service{}
			} else {
				yyv4707 := &yyv4706[yyj4706]
				yyv4707.CodecDecodeSelf(d)
			}

		}
		if yyrt4706 {
			for ; yyj4706 < yyl4706; yyj4706++ {
				yyv4706 = append(yyv4706, Service{})
				yyh4706.ElemContainerState(yyj4706)
				if r.TryDecodeAsNil() {
					yyv4706[yyj4706] = Service{}
				} else {
					yyv4708 := &yyv4706[yyj4706]
					yyv4708.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4706 := 0
		for ; !r.CheckBreak(); yyj4706++ {

			if yyj4706 >= len(yyv4706) {
				yyv4706 = append(yyv4706, Service{}) // var yyz4706 Service
				yyc4706 = true
			}
			yyh4706.ElemContainerState(yyj4706)
			if yyj4706 < len(yyv4706) {
				if r.TryDecodeAsNil() {
					yyv4706[yyj4706] = Service{}
				} else {
					yyv4709 := &yyv4706[yyj4706]
					yyv4709.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4706 < len(yyv4706) {
			yyv4706 = yyv4706[:yyj4706]
			yyc4706 = true
		} else if yyj4706 == 0 && yyv4706 == nil {
			yyv4706 = []Service{}
			yyc4706 = true
		}
	}
	yyh4706.End()
	if yyc4706 {
		*v = yyv4706
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4710 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4711 := &yyv4710
		yy4711.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4712 := *v
	yyh4712, yyl4712 := z.DecSliceHelperStart()
	var yyc4712 bool
	if yyl4712 == 0 {
		if yyv4712 == nil {
			yyv4712 = []ObjectReference{}
			yyc4712 = true
		} else if len(yyv4712) != 0 {
			yyv4712 = yyv4712[:0]
			yyc4712 = true
		}
	} else if yyl4712 > 0 {
		var yyrr4712, yyrl4712 int
		var yyrt4712 bool
		if yyl4712 > cap(yyv4712) {

			yyrg4712 := len(yyv4712) > 0
			yyv24712 := yyv4712
			yyrl4712, yyrt4712 = z.DecInferLen(yyl4712, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4712 {
				if yyrl4712 <= cap(yyv4712) {
					yyv4712 = yyv4712[:yyrl4712]
				} else {
					yyv4712 = make([]ObjectReference, yyrl4712)
				}
			} else {
				yyv4712 = make([]ObjectReference, yyrl4712)
			}
			yyc4712 = true
			yyrr4712 = len(yyv4712)
			if yyrg4712 {
				copy(yyv4712, yyv24712)
			}
		} else if yyl4712 != len(yyv4712) {
			yyv4712 = yyv4712[:yyl4712]
			yyc4712 = true
		}
		yyj4712 := 0
		for ; yyj4712 < yyrr4712; yyj4712++ {
			yyh4712.ElemContainerState(yyj4712)
			if r.TryDecodeAsNil() {
				yyv4712[yyj4712] = ObjectReference{}
			} else {
				yyv4713 := &yyv4712[yyj4712]
				yyv4713.CodecDecodeSelf(d)
			}

		}
		if yyrt4712 {
			for ; yyj4712 < yyl4712; yyj4712++ {
				yyv4712 = append(yyv4712, ObjectReference{})
				yyh4712.ElemContainerState(yyj4712)
				if r.TryDecodeAsNil() {
					yyv4712[yyj4712] = ObjectReference{}
				} else {
					yyv4714 := &yyv4712[yyj4712]
					yyv4714.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4712 := 0
		for ; !r.CheckBreak(); yyj4712++ {

			if yyj4712 >= len(yyv4712) {
				yyv4712 = append(yyv4712, ObjectReference{}) // var yyz4712 ObjectReference
				yyc4712 = true
			}
			yyh4712.ElemContainerState(yyj4712)
			if yyj4712 < len(yyv4712) {
				if r.TryDecodeAsNil() {
					yyv4712[yyj4712] = ObjectReference{}
				} else {
					yyv4715 := &yyv4712[yyj4712]
					yyv4715.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4712 < len(yyv4712) {
			yyv4712 = yyv4712[:yyj4712]
			yyc4712 = true
		} else if yyj4712 == 0 && yyv4712 == nil {
			yyv4712 = []ObjectReference{}
			yyc4712 = true
		}
	}
	yyh4712.End()
	if yyc4712 {
		*v = yyv4712
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4716 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4717 := &yyv4716
		yy4717.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4718 := *v
	yyh4718, yyl4718 := z.DecSliceHelperStart()
	var yyc4718 bool
	if yyl4718 == 0 {
		if yyv4718 == nil {
			yyv4718 = []ServiceAccount{}
			yyc4718 = true
		} else if len(yyv4718) != 0 {
			yyv4718 = yyv4718[:0]
			yyc4718 = true
		}
	} else if yyl4718 > 0 {
		var yyrr4718, yyrl4718 int
		var yyrt4718 bool
		if yyl4718 > cap(yyv4718) {

			yyrg4718 := len(yyv4718) > 0
			yyv24718 := yyv4718
			yyrl4718, yyrt4718 = z.DecInferLen(yyl4718, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4718 {
				if yyrl4718 <= cap(yyv4718) {
					yyv4718 = yyv4718[:yyrl4718]
				} else {
					yyv4718 = make([]ServiceAccount, yyrl4718)
				}
			} else {
				yyv4718 = make([]ServiceAccount, yyrl4718)
			}
			yyc4718 = true
			yyrr4718 = len(yyv4718)
			if yyrg4718 {
				copy(yyv4718, yyv24718)
			}
		} else if yyl4718 != len(yyv4718) {
			yyv4718 = yyv4718[:yyl4718]
			yyc4718 = true
		}
		yyj4718 := 0
		for ; yyj4718 < yyrr4718; yyj4718++ {
			yyh4718.ElemContainerState(yyj4718)
			if r.TryDecodeAsNil() {
				yyv4718[yyj4718] = ServiceAccount{}
			} else {
				yyv4719 := &yyv4718[yyj4718]
				yyv4719.CodecDecodeSelf(d)
			}

		}
		if yyrt4718 {
			for ; yyj4718 < yyl4718; yyj4718++ {
				yyv4718 = append(yyv4718, ServiceAccount{})
				yyh4718.ElemContainerState(yyj4718)
				if r.TryDecodeAsNil() {
					yyv4718[yyj4718] = ServiceAccount{}
				} else {
					yyv4720 := &yyv4718[yyj4718]
					yyv4720.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4718 := 0
		for ; !r.CheckBreak(); yyj4718++ {

			if yyj4718 >= len(yyv4718) {
				yyv4718 = append(yyv4718, ServiceAccount{}) // var yyz4718 ServiceAccount
				yyc4718 = true
			}
			yyh4718.ElemContainerState(yyj4718)
			if yyj4718 < len(yyv4718) {
				if r.TryDecodeAsNil() {
					yyv4718[yyj4718] = ServiceAccount{}
				} else {
					yyv4721 := &yyv4718[yyj4718]
					yyv4721.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4718 < len(yyv4718) {
			yyv4718 = yyv4718[:yyj4718]
			yyc4718 = true
		} else if yyj4718 == 0 && yyv4718 == nil {
			yyv4718 = []ServiceAccount{}
			yyc4718 = true
		}
	}
	yyh4718.End()
	if yyc4718 {
		*v = yyv4718
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4722 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4723 := &yyv4722
		yy4723.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4724 := *v
	yyh4724, yyl4724 := z.DecSliceHelperStart()
	var yyc4724 bool
	if yyl4724 == 0 {
		if yyv4724 == nil {
			yyv4724 = []EndpointSubset{}
			yyc4724 = true
		} else if len(yyv4724) != 0 {
			yyv4724 = yyv4724[:0]
			yyc4724 = true
		}
	} else if yyl4724 > 0 {
		var yyrr4724, yyrl4724 int
		var yyrt4724 bool
		if yyl4724 > cap(yyv4724) {

			yyrg4724 := len(yyv4724) > 0
			yyv24724 := yyv4724
			yyrl4724, yyrt4724 = z.DecInferLen(yyl4724, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4724 {
				if yyrl4724 <= cap(yyv4724) {
					yyv4724 = yyv4724[:yyrl4724]
				} else {
					yyv4724 = make([]EndpointSubset, yyrl4724)
				}
			} else {
				yyv4724 = make([]EndpointSubset, yyrl4724)
			}
			yyc4724 = true
			yyrr4724 = len(yyv4724)
			if yyrg4724 {
				copy(yyv4724, yyv24724)
			}
		} else if yyl4724 != len(yyv4724) {
			yyv4724 = yyv4724[:yyl4724]
			yyc4724 = true
		}
		yyj4724 := 0
		for ; yyj4724 < yyrr4724; yyj4724++ {
			yyh4724.ElemContainerState(yyj4724)
			if r.TryDecodeAsNil() {
				yyv4724[yyj4724] = EndpointSubset{}
			} else {
				yyv4725 := &yyv4724[yyj4724]
				yyv4725.CodecDecodeSelf(d)
			}

		}
		if yyrt4724 {
			for ; yyj4724 < yyl4724; yyj4724++ {
				yyv4724 = append(yyv4724, EndpointSubset{})
				yyh4724.ElemContainerState(yyj4724)
				if r.TryDecodeAsNil() {
					yyv4724[yyj4724] = EndpointSubset{}
				} else {
					yyv4726 := &yyv4724[yyj4724]
					yyv4726.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4724 := 0
		for ; !r.CheckBreak(); yyj4724++ {

			if yyj4724 >= len(yyv4724) {
				yyv4724 = append(yyv4724, EndpointSubset{}) // var yyz4724 EndpointSubset
				yyc4724 = true
			}
			yyh4724.ElemContainerState(yyj4724)
			if yyj4724 < len(yyv4724) {
				if r.TryDecodeAsNil() {
					yyv4724[yyj4724] = EndpointSubset{}
				} else {
					yyv4727 := &yyv4724[yyj4724]
					yyv4727.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4724 < len(yyv4724) {
			yyv4724 = yyv4724[:yyj4724]
			yyc4724 = true
		} else if yyj4724 == 0 && yyv4724 == nil {
			yyv4724 = []EndpointSubset{}
			yyc4724 = true
		}
	}
	yyh4724.End()
	if yyc4724 {
		*v = yyv4724
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4728 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4729 := &yyv4728
		yy4729.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4730 := *v
	yyh4730, yyl4730 := z.DecSliceHelperStart()
	var yyc4730 bool
	if yyl4730 == 0 {
		if yyv4730 == nil {
			yyv4730 = []EndpointAddress{}
			yyc4730 = true
		} else if len(yyv4730) != 0 {
			yyv4730 = yyv4730[:0]
			yyc4730 = true
		}
	} else if yyl4730 > 0 {
		var yyrr4730, yyrl4730 int
		var yyrt4730 bool
		if yyl4730 > cap(yyv4730) {

			yyrg4730 := len(yyv4730) > 0
			yyv24730 := yyv4730
			yyrl4730, yyrt4730 = z.DecInferLen(yyl4730, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4730 {
				if yyrl4730 <= cap(yyv4730) {
					yyv4730 = yyv4730[:yyrl4730]
				} else {
					yyv4730 = make([]EndpointAddress, yyrl4730)
				}
			} else {
				yyv4730 = make([]EndpointAddress, yyrl4730)
			}
			yyc4730 = true
			yyrr4730 = len(yyv4730)
			if yyrg4730 {
				copy(yyv4730, yyv24730)
			}
		} else if yyl4730 != len(yyv4730) {
			yyv4730 = yyv4730[:yyl4730]
			yyc4730 = true
		}
		yyj4730 := 0
		for ; yyj4730 < yyrr4730; yyj4730++ {
			yyh4730.ElemContainerState(yyj4730)
			if r.TryDecodeAsNil() {
				yyv4730[yyj4730] = EndpointAddress{}
			} else {
				yyv4731 := &yyv4730[yyj4730]
				yyv4731.CodecDecodeSelf(d)
			}

		}
		if yyrt4730 {
			for ; yyj4730 < yyl4730; yyj4730++ {
				yyv4730 = append(yyv4730, EndpointAddress{})
				yyh4730.ElemContainerState(yyj4730)
				if r.TryDecodeAsNil() {
					yyv4730[yyj4730] = EndpointAddress{}
				} else {
					yyv4732 := &yyv4730[yyj4730]
					yyv4732.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4730 := 0
		for ; !r.CheckBreak(); yyj4730++ {

			if yyj4730 >= len(yyv4730) {
				yyv4730 = append(yyv4730, EndpointAddress{}) // var yyz4730 EndpointAddress
				yyc4730 = true
			}
			yyh4730.ElemContainerState(yyj4730)
			if yyj4730 < len(yyv4730) {
				if r.TryDecodeAsNil() {
					yyv4730[yyj4730] = EndpointAddress{}
				} else {
					yyv4733 := &yyv4730[yyj4730]
					yyv4733.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4730 < len(yyv4730) {
			yyv4730 = yyv4730[:yyj4730]
			yyc4730 = true
		} else if yyj4730 == 0 && yyv4730 == nil {
			yyv4730 = []EndpointAddress{}
			yyc4730 = true
		}
	}
	yyh4730.End()
	if yyc4730 {
		*v = yyv4730
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4734 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4735 := &yyv4734
		yy4735.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4736 := *v
	yyh4736, yyl4736 := z.DecSliceHelperStart()
	var yyc4736 bool
	if yyl4736 == 0 {
		if yyv4736 == nil {
			yyv4736 = []EndpointPort{}
			yyc4736 = true
		} else if len(yyv4736) != 0 {
			yyv4736 = yyv4736[:0]
			yyc4736 = true
		}
	} else if yyl4736 > 0 {
		var yyrr4736, yyrl4736 int
		var yyrt4736 bool
		if yyl4736 > cap(yyv4736) {

			yyrg4736 := len(yyv4736) > 0
			yyv24736 := yyv4736
			yyrl4736, yyrt4736 = z.DecInferLen(yyl4736, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4736 {
				if yyrl4736 <= cap(yyv4736) {
					yyv4736 = yyv4736[:yyrl4736]
				} else {
					yyv4736 = make([]EndpointPort, yyrl4736)
				}
			} else {
				yyv4736 = make([]EndpointPort, yyrl4736)
			}
			yyc4736 = true
			yyrr4736 = len(yyv4736)
			if yyrg4736 {
				copy(yyv4736, yyv24736)
			}
		} else if yyl4736 != len(yyv4736) {
			yyv4736 = yyv4736[:yyl4736]
			yyc4736 = true
		}
		yyj4736 := 0
		for ; yyj4736 < yyrr4736; yyj4736++ {
			yyh4736.ElemContainerState(yyj4736)
			if r.TryDecodeAsNil() {
				yyv4736[yyj4736] = EndpointPort{}
			} else {
				yyv4737 := &yyv4736[yyj4736]
				yyv4737.CodecDecodeSelf(d)
			}

		}
		if yyrt4736 {
			for ; yyj4736 < yyl4736; yyj4736++ {
				yyv4736 = append(yyv4736, EndpointPort{})
				yyh4736.ElemContainerState(yyj4736)
				if r.TryDecodeAsNil() {
					yyv4736[yyj4736] = EndpointPort{}
				} else {
					yyv4738 := &yyv4736[yyj4736]
					yyv4738.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4736 := 0
		for ; !r.CheckBreak(); yyj4736++ {

			if yyj4736 >= len(yyv4736) {
				yyv4736 = append(yyv4736, EndpointPort{}) // var yyz4736 EndpointPort
				yyc4736 = true
			}
			yyh4736.ElemContainerState(yyj4736)
			if yyj4736 < len(yyv4736) {
				if r.TryDecodeAsNil() {
					yyv4736[yyj4736] = EndpointPort{}
				} else {
					yyv4739 := &yyv4736[yyj4736]
					yyv4739.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4736 < len(yyv4736) {
			yyv4736 = yyv4736[:yyj4736]
			yyc4736 = true
		} else if yyj4736 == 0 && yyv4736 == nil {
			yyv4736 = []EndpointPort{}
			yyc4736 = true
		}
	}
	yyh4736.End()
	if yyc4736 {
		*v = yyv4736
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4740 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4741 := &yyv4740
		yy4741.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4742 := *v
	yyh4742, yyl4742 := z.DecSliceHelperStart()
	var yyc4742 bool
	if yyl4742 == 0 {
		if yyv4742 == nil {
			yyv4742 = []Endpoints{}
			yyc4742 = true
		} else if len(yyv4742) != 0 {
			yyv4742 = yyv4742[:0]
			yyc4742 = true
		}
	} else if yyl4742 > 0 {
		var yyrr4742, yyrl4742 int
		var yyrt4742 bool
		if yyl4742 > cap(yyv4742) {

			yyrg4742 := len(yyv4742) > 0
			yyv24742 := yyv4742
			yyrl4742, yyrt4742 = z.DecInferLen(yyl4742, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4742 {
				if yyrl4742 <= cap(yyv4742) {
					yyv4742 = yyv4742[:yyrl4742]
				} else {
					yyv4742 = make([]Endpoints, yyrl4742)
				}
			} else {
				yyv4742 = make([]Endpoints, yyrl4742)
			}
			yyc4742 = true
			yyrr4742 = len(yyv4742)
			if yyrg4742 {
				copy(yyv4742, yyv24742)
			}
		} else if yyl4742 != len(yyv4742) {
			yyv4742 = yyv4742[:yyl4742]
			yyc4742 = true
		}
		yyj4742 := 0
		for ; yyj4742 < yyrr4742; yyj4742++ {
			yyh4742.ElemContainerState(yyj4742)
			if r.TryDecodeAsNil() {
				yyv4742[yyj4742] = Endpoints{}
			} else {
				yyv4743 := &yyv4742[yyj4742]
				yyv4743.CodecDecodeSelf(d)
			}

		}
		if yyrt4742 {
			for ; yyj4742 < yyl4742; yyj4742++ {
				yyv4742 = append(yyv4742, Endpoints{})
				yyh4742.ElemContainerState(yyj4742)
				if r.TryDecodeAsNil() {
					yyv4742[yyj4742] = Endpoints{}
				} else {
					yyv4744 := &yyv4742[yyj4742]
					yyv4744.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4742 := 0
		for ; !r.CheckBreak(); yyj4742++ {

			if yyj4742 >= len(yyv4742) {
				yyv4742 = append(yyv4742, Endpoints{}) // var yyz4742 Endpoints
				yyc4742 = true
			}
			yyh4742.ElemContainerState(yyj4742)
			if yyj4742 < len(yyv4742) {
				if r.TryDecodeAsNil() {
					yyv4742[yyj4742] = Endpoints{}
				} else {
					yyv4745 := &yyv4742[yyj4742]
					yyv4745.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4742 < len(yyv4742) {
			yyv4742 = yyv4742[:yyj4742]
			yyc4742 = true
		} else if yyj4742 == 0 && yyv4742 == nil {
			yyv4742 = []Endpoints{}
			yyc4742 = true
		}
	}
	yyh4742.End()
	if yyc4742 {
		*v = yyv4742
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4746 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4747 := &yyv4746
		yy4747.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4748 := *v
	yyh4748, yyl4748 := z.DecSliceHelperStart()
	var yyc4748 bool
	if yyl4748 == 0 {
		if yyv4748 == nil {
			yyv4748 = []NodeCondition{}
			yyc4748 = true
		} else if len(yyv4748) != 0 {
			yyv4748 = yyv4748[:0]
			yyc4748 = true
		}
	} else if yyl4748 > 0 {
		var yyrr4748, yyrl4748 int
		var yyrt4748 bool
		if yyl4748 > cap(yyv4748) {

			yyrg4748 := len(yyv4748) > 0
			yyv24748 := yyv4748
			yyrl4748, yyrt4748 = z.DecInferLen(yyl4748, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4748 {
				if yyrl4748 <= cap(yyv4748) {
					yyv4748 = yyv4748[:yyrl4748]
				} else {
					yyv4748 = make([]NodeCondition, yyrl4748)
				}
			} else {
				yyv4748 = make([]NodeCondition, yyrl4748)
			}
			yyc4748 = true
			yyrr4748 = len(yyv4748)
			if yyrg4748 {
				copy(yyv4748, yyv24748)
			}
		} else if yyl4748 != len(yyv4748) {
			yyv4748 = yyv4748[:yyl4748]
			yyc4748 = true
		}
		yyj4748 := 0
		for ; yyj4748 < yyrr4748; yyj4748++ {
			yyh4748.ElemContainerState(yyj4748)
			if r.TryDecodeAsNil() {
				yyv4748[yyj4748] = NodeCondition{}
			} else {
				yyv4749 := &yyv4748[yyj4748]
				yyv4749.CodecDecodeSelf(d)
			}

		}
		if yyrt4748 {
			for ; yyj4748 < yyl4748; yyj4748++ {
				yyv4748 = append(yyv4748, NodeCondition{})
				yyh4748.ElemContainerState(yyj4748)
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = NodeCondition{}
				} else {
					yyv4750 := &yyv4748[yyj4748]
					yyv4750.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4748 := 0
		for ; !r.CheckBreak(); yyj4748++ {

			if yyj4748 >= len(yyv4748) {
				yyv4748 = append(yyv4748, NodeCondition{}) // var yyz4748 NodeCondition
				yyc4748 = true
			}
			yyh4748.ElemContainerState(yyj4748)
			if yyj4748 < len(yyv4748) {
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = NodeCondition{}
				} else {
					yyv4751 := &yyv4748[yyj4748]
					yyv4751.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4748 < len(yyv4748) {
			yyv4748 = yyv4748[:yyj4748]
			yyc4748 = true
		} else if yyj4748 == 0 && yyv4748 == nil {
			yyv4748 = []NodeCondition{}
			yyc4748 = true
		}
	}
	yyh4748.End()
	if yyc4748 {
		*v = yyv4748
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4752 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4753 := &yyv4752
		yy4753.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4754 := *v
	yyh4754, yyl4754 := z.DecSliceHelperStart()
	var yyc4754 bool
	if yyl4754 == 0 {
		if yyv4754 == nil {
			yyv4754 = []NodeAddress{}
			yyc4754 = true
		} else if len(yyv4754) != 0 {
			yyv4754 = yyv4754[:0]
			yyc4754 = true
		}
	} else if yyl4754 > 0 {
		var yyrr4754, yyrl4754 int
		var yyrt4754 bool
		if yyl4754 > cap(yyv4754) {

			yyrg4754 := len(yyv4754) > 0
			yyv24754 := yyv4754
			yyrl4754, yyrt4754 = z.DecInferLen(yyl4754, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4754 {
				if yyrl4754 <= cap(yyv4754) {
					yyv4754 = yyv4754[:yyrl4754]
				} else {
					yyv4754 = make([]NodeAddress, yyrl4754)
				}
			} else {
				yyv4754 = make([]NodeAddress, yyrl4754)
			}
			yyc4754 = true
			yyrr4754 = len(yyv4754)
			if yyrg4754 {
				copy(yyv4754, yyv24754)
			}
		} else if yyl4754 != len(yyv4754) {
			yyv4754 = yyv4754[:yyl4754]
			yyc4754 = true
		}
		yyj4754 := 0
		for ; yyj4754 < yyrr4754; yyj4754++ {
			yyh4754.ElemContainerState(yyj4754)
			if r.TryDecodeAsNil() {
				yyv4754[yyj4754] = NodeAddress{}
			} else {
				yyv4755 := &yyv4754[yyj4754]
				yyv4755.CodecDecodeSelf(d)
			}

		}
		if yyrt4754 {
			for ; yyj4754 < yyl4754; yyj4754++ {
				yyv4754 = append(yyv4754, NodeAddress{})
				yyh4754.ElemContainerState(yyj4754)
				if r.TryDecodeAsNil() {
					yyv4754[yyj4754] = NodeAddress{}
				} else {
					yyv4756 := &yyv4754[yyj4754]
					yyv4756.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4754 := 0
		for ; !r.CheckBreak(); yyj4754++ {

			if yyj4754 >= len(yyv4754) {
				yyv4754 = append(yyv4754, NodeAddress{}) // var yyz4754 NodeAddress
				yyc4754 = true
			}
			yyh4754.ElemContainerState(yyj4754)
			if yyj4754 < len(yyv4754) {
				if r.TryDecodeAsNil() {
					yyv4754[yyj4754] = NodeAddress{}
				} else {
					yyv4757 := &yyv4754[yyj4754]
					yyv4757.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4754 < len(yyv4754) {
			yyv4754 = yyv4754[:yyj4754]
			yyc4754 = true
		} else if yyj4754 == 0 && yyv4754 == nil {
			yyv4754 = []NodeAddress{}
			yyc4754 = true
		}
	}
	yyh4754.End()
	if yyc4754 {
		*v = yyv4754
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4758 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4759 := &yyv4758
		yy4759.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4760 := *v
	yyh4760, yyl4760 := z.DecSliceHelperStart()
	var yyc4760 bool
	if yyl4760 == 0 {
		if yyv4760 == nil {
			yyv4760 = []ContainerImage{}
			yyc4760 = true
		} else if len(yyv4760) != 0 {
			yyv4760 = yyv4760[:0]
			yyc4760 = true
		}
	} else if yyl4760 > 0 {
		var yyrr4760, yyrl4760 int
		var yyrt4760 bool
		if yyl4760 > cap(yyv4760) {

			yyrg4760 := len(yyv4760) > 0
			yyv24760 := yyv4760
			yyrl4760, yyrt4760 = z.DecInferLen(yyl4760, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4760 {
				if yyrl4760 <= cap(yyv4760) {
					yyv4760 = yyv4760[:yyrl4760]
				} else {
					yyv4760 = make([]ContainerImage, yyrl4760)
				}
			} else {
				yyv4760 = make([]ContainerImage, yyrl4760)
			}
			yyc4760 = true
			yyrr4760 = len(yyv4760)
			if yyrg4760 {
				copy(yyv4760, yyv24760)
			}
		} else if yyl4760 != len(yyv4760) {
			yyv4760 = yyv4760[:yyl4760]
			yyc4760 = true
		}
		yyj4760 := 0
		for ; yyj4760 < yyrr4760; yyj4760++ {
			yyh4760.ElemContainerState(yyj4760)
			if r.TryDecodeAsNil() {
				yyv4760[yyj4760] = ContainerImage{}
			} else {
				yyv4761 := &yyv4760[yyj4760]
				yyv4761.CodecDecodeSelf(d)
			}

		}
		if yyrt4760 {
			for ; yyj4760 < yyl4760; yyj4760++ {
				yyv4760 = append(yyv4760, ContainerImage{})
				yyh4760.ElemContainerState(yyj4760)
				if r.TryDecodeAsNil() {
					yyv4760[yyj4760] = ContainerImage{}
				} else {
					yyv4762 := &yyv4760[yyj4760]
					yyv4762.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4760 := 0
		for ; !r.CheckBreak(); yyj4760++ {

			if yyj4760 >= len(yyv4760) {
				yyv4760 = append(yyv4760, ContainerImage{}) // var yyz4760 ContainerImage
				yyc4760 = true
			}
			yyh4760.ElemContainerState(yyj4760)
			if yyj4760 < len(yyv4760) {
				if r.TryDecodeAsNil() {
					yyv4760[yyj4760] = ContainerImage{}
				} else {
					yyv4763 := &yyv4760[yyj4760]
					yyv4763.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4760 < len(yyv4760) {
			yyv4760 = yyv4760[:yyj4760]
			yyc4760 = true
		} else if yyj4760 == 0 && yyv4760 == nil {
			yyv4760 = []ContainerImage{}
			yyc4760 = true
		}
	}
	yyh4760.End()
	if yyc4760 {
		*v = yyv4760
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4764 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4764.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4765 := *v
	yyh4765, yyl4765 := z.DecSliceHelperStart()
	var yyc4765 bool
	if yyl4765 == 0 {
		if yyv4765 == nil {
			yyv4765 = []UniqueVolumeName{}
			yyc4765 = true
		} else if len(yyv4765) != 0 {
			yyv4765 = yyv4765[:0]
			yyc4765 = true
		}
	} else if yyl4765 > 0 {
		var yyrr4765, yyrl4765 int
		var yyrt4765 bool
		if yyl4765 > cap(yyv4765) {

			yyrl4765, yyrt4765 = z.DecInferLen(yyl4765, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4765 {
				if yyrl4765 <= cap(yyv4765) {
					yyv4765 = yyv4765[:yyrl4765]
				} else {
					yyv4765 = make([]UniqueVolumeName, yyrl4765)
				}
			} else {
				yyv4765 = make([]UniqueVolumeName, yyrl4765)
			}
			yyc4765 = true
			yyrr4765 = len(yyv4765)
		} else if yyl4765 != len(yyv4765) {
			yyv4765 = yyv4765[:yyl4765]
			yyc4765 = true
		}
		yyj4765 := 0
		for ; yyj4765 < yyrr4765; yyj4765++ {
			yyh4765.ElemContainerState(yyj4765)
			if r.TryDecodeAsNil() {
				yyv4765[yyj4765] = ""
			} else {
				yyv4765[yyj4765] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4765 {
			for ; yyj4765 < yyl4765; yyj4765++ {
				yyv4765 = append(yyv4765, "")
				yyh4765.ElemContainerState(yyj4765)
				if r.TryDecodeAsNil() {
					yyv4765[yyj4765] = ""
				} else {
					yyv4765[yyj4765] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4765 := 0
		for ; !r.CheckBreak(); yyj4765++ {

			if yyj4765 >= len(yyv4765) {
				yyv4765 = append(yyv4765, "") // var yyz4765 UniqueVolumeName
				yyc4765 = true
			}
			yyh4765.ElemContainerState(yyj4765)
			if yyj4765 < len(yyv4765) {
				if r.TryDecodeAsNil() {
					yyv4765[yyj4765] = ""
				} else {
					yyv4765[yyj4765] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4765 < len(yyv4765) {
			yyv4765 = yyv4765[:yyj4765]
			yyc4765 = true
		} else if yyj4765 == 0 && yyv4765 == nil {
			yyv4765 = []UniqueVolumeName{}
			yyc4765 = true
		}
	}
	yyh4765.End()
	if yyc4765 {
		*v = yyv4765
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4769 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4770 := &yyv4769
		yy4770.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4771 := *v
	yyh4771, yyl4771 := z.DecSliceHelperStart()
	var yyc4771 bool
	if yyl4771 == 0 {
		if yyv4771 == nil {
			yyv4771 = []AttachedVolume{}
			yyc4771 = true
		} else if len(yyv4771) != 0 {
			yyv4771 = yyv4771[:0]
			yyc4771 = true
		}
	} else if yyl4771 > 0 {
		var yyrr4771, yyrl4771 int
		var yyrt4771 bool
		if yyl4771 > cap(yyv4771) {

			yyrg4771 := len(yyv4771) > 0
			yyv24771 := yyv4771
			yyrl4771, yyrt4771 = z.DecInferLen(yyl4771, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4771 {
				if yyrl4771 <= cap(yyv4771) {
					yyv4771 = yyv4771[:yyrl4771]
				} else {
					yyv4771 = make([]AttachedVolume, yyrl4771)
				}
			} else {
				yyv4771 = make([]AttachedVolume, yyrl4771)
			}
			yyc4771 = true
			yyrr4771 = len(yyv4771)
			if yyrg4771 {
				copy(yyv4771, yyv24771)
			}
		} else if yyl4771 != len(yyv4771) {
			yyv4771 = yyv4771[:yyl4771]
			yyc4771 = true
		}
		yyj4771 := 0
		for ; yyj4771 < yyrr4771; yyj4771++ {
			yyh4771.ElemContainerState(yyj4771)
			if r.TryDecodeAsNil() {
				yyv4771[yyj4771] = AttachedVolume{}
			} else {
				yyv4772 := &yyv4771[yyj4771]
				yyv4772.CodecDecodeSelf(d)
			}

		}
		if yyrt4771 {
			for ; yyj4771 < yyl4771; yyj4771++ {
				yyv4771 = append(yyv4771, AttachedVolume{})
				yyh4771.ElemContainerState(yyj4771)
				if r.TryDecodeAsNil() {
					yyv4771[yyj4771] = AttachedVolume{}
				} else {
					yyv4773 := &yyv4771[yyj4771]
					yyv4773.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4771 := 0
		for ; !r.CheckBreak(); yyj4771++ {

			if yyj4771 >= len(yyv4771) {
				yyv4771 = append(yyv4771, AttachedVolume{}) // var yyz4771 AttachedVolume
				yyc4771 = true
			}
			yyh4771.ElemContainerState(yyj4771)
			if yyj4771 < len(yyv4771) {
				if r.TryDecodeAsNil() {
					yyv4771[yyj4771] = AttachedVolume{}
				} else {
					yyv4774 := &yyv4771[yyj4771]
					yyv4774.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4771 < len(yyv4771) {
			yyv4771 = yyv4771[:yyj4771]
			yyc4771 = true
		} else if yyj4771 == 0 && yyv4771 == nil {
			yyv4771 = []AttachedVolume{}
			yyc4771 = true
		}
	}
	yyh4771.End()
	if yyc4771 {
		*v = yyv4771
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4775 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4776 := &yyv4775
		yy4776.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4777 := *v
	yyh4777, yyl4777 := z.DecSliceHelperStart()
	var yyc4777 bool
	if yyl4777 == 0 {
		if yyv4777 == nil {
			yyv4777 = []PreferAvoidPodsEntry{}
			yyc4777 = true
		} else if len(yyv4777) != 0 {
			yyv4777 = yyv4777[:0]
			yyc4777 = true
		}
	} else if yyl4777 > 0 {
		var yyrr4777, yyrl4777 int
		var yyrt4777 bool
		if yyl4777 > cap(yyv4777) {

			yyrg4777 := len(yyv4777) > 0
			yyv24777 := yyv4777
			yyrl4777, yyrt4777 = z.DecInferLen(yyl4777, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4777 {
				if yyrl4777 <= cap(yyv4777) {
					yyv4777 = yyv4777[:yyrl4777]
				} else {
					yyv4777 = make([]PreferAvoidPodsEntry, yyrl4777)
				}
			} else {
				yyv4777 = make([]PreferAvoidPodsEntry, yyrl4777)
			}
			yyc4777 = true
			yyrr4777 = len(yyv4777)
			if yyrg4777 {
				copy(yyv4777, yyv24777)
			}
		} else if yyl4777 != len(yyv4777) {
			yyv4777 = yyv4777[:yyl4777]
			yyc4777 = true
		}
		yyj4777 := 0
		for ; yyj4777 < yyrr4777; yyj4777++ {
			yyh4777.ElemContainerState(yyj4777)
			if r.TryDecodeAsNil() {
				yyv4777[yyj4777] = PreferAvoidPodsEntry{}
			} else {
				yyv4778 := &yyv4777[yyj4777]
				yyv4778.CodecDecodeSelf(d)
			}

		}
		if yyrt4777 {
			for ; yyj4777 < yyl4777; yyj4777++ {
				yyv4777 = append(yyv4777, PreferAvoidPodsEntry{})
				yyh4777.ElemContainerState(yyj4777)
				if r.TryDecodeAsNil() {
					yyv4777[yyj4777] = PreferAvoidPodsEntry{}
				} else {
					yyv4779 := &yyv4777[yyj4777]
					yyv4779.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4777 := 0
		for ; !r.CheckBreak(); yyj4777++ {

			if yyj4777 >= len(yyv4777) {
				yyv4777 = append(yyv4777, PreferAvoidPodsEntry{}) // var yyz4777 PreferAvoidPodsEntry
				yyc4777 = true
			}
			yyh4777.ElemContainerState(yyj4777)
			if yyj4777 < len(yyv4777) {
				if r.TryDecodeAsNil() {
					yyv4777[yyj4777] = PreferAvoidPodsEntry{}
				} else {
					yyv4780 := &yyv4777[yyj4777]
					yyv4780.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4777 < len(yyv4777) {
			yyv4777 = yyv4777[:yyj4777]
			yyc4777 = true
		} else if yyj4777 == 0 && yyv4777 == nil {
			yyv4777 = []PreferAvoidPodsEntry{}
			yyc4777 = true
		}
	}
	yyh4777.End()
	if yyc4777 {
		*v = yyv4777
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4781, yyv4781 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4781.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4782 := &yyv4781
		yym4783 := z.EncBinary()
		_ = yym4783
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4782) {
		} else if !yym4783 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4782)
		} else {
			z.EncFallback(yy4782)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4784 := *v
	yyl4784 := r.ReadMapStart()
	yybh4784 := z.DecBasicHandle()
	if yyv4784 == nil {
		yyrl4784, _ := z.DecInferLen(yyl4784, yybh4784.MaxInitLen, 72)
		yyv4784 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4784)
		*v = yyv4784
	}
	var yymk4784 ResourceName
	var yymv4784 pkg3_resource.Quantity
	var yymg4784 bool
	if yybh4784.MapValueReset {
		yymg4784 = true
	}
	if yyl4784 > 0 {
		for yyj4784 := 0; yyj4784 < yyl4784; yyj4784++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4784 = ""
			} else {
				yymk4784 = ResourceName(r.DecodeString())
			}

			if yymg4784 {
				yymv4784 = yyv4784[yymk4784]
			} else {
				yymv4784 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4784 = pkg3_resource.Quantity{}
			} else {
				yyv4786 := &yymv4784
				yym4787 := z.DecBinary()
				_ = yym4787
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4786) {
				} else if !yym4787 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4786)
				} else {
					z.DecFallback(yyv4786, false)
				}
			}

			if yyv4784 != nil {
				yyv4784[yymk4784] = yymv4784
			}
		}
	} else if yyl4784 < 0 {
		for yyj4784 := 0; !r.CheckBreak(); yyj4784++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4784 = ""
			} else {
				yymk4784 = ResourceName(r.DecodeString())
			}

			if yymg4784 {
				yymv4784 = yyv4784[yymk4784]
			} else {
				yymv4784 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4784 = pkg3_resource.Quantity{}
			} else {
				yyv4789 := &yymv4784
				yym4790 := z.DecBinary()
				_ = yym4790
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4789) {
				} else if !yym4790 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4789)
				} else {
					z.DecFallback(yyv4789, false)
				}
			}

			if yyv4784 != nil {
				yyv4784[yymk4784] = yymv4784
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4791 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4792 := &yyv4791
		yy4792.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4793 := *v
	yyh4793, yyl4793 := z.DecSliceHelperStart()
	var yyc4793 bool
	if yyl4793 == 0 {
		if yyv4793 == nil {
			yyv4793 = []Node{}
			yyc4793 = true
		} else if len(yyv4793) != 0 {
			yyv4793 = yyv4793[:0]
			yyc4793 = true
		}
	} else if yyl4793 > 0 {
		var yyrr4793, yyrl4793 int
		var yyrt4793 bool
		if yyl4793 > cap(yyv4793) {

			yyrg4793 := len(yyv4793) > 0
			yyv24793 := yyv4793
			yyrl4793, yyrt4793 = z.DecInferLen(yyl4793, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4793 {
				if yyrl4793 <= cap(yyv4793) {
					yyv4793 = yyv4793[:yyrl4793]
				} else {
					yyv4793 = make([]Node, yyrl4793)
				}
			} else {
				yyv4793 = make([]Node, yyrl4793)
			}
			yyc4793 = true
			yyrr4793 = len(yyv4793)
			if yyrg4793 {
				copy(yyv4793, yyv24793)
			}
		} else if yyl4793 != len(yyv4793) {
			yyv4793 = yyv4793[:yyl4793]
			yyc4793 = true
		}
		yyj4793 := 0
		for ; yyj4793 < yyrr4793; yyj4793++ {
			yyh4793.ElemContainerState(yyj4793)
			if r.TryDecodeAsNil() {
				yyv4793[yyj4793] = Node{}
			} else {
				yyv4794 := &yyv4793[yyj4793]
				yyv4794.CodecDecodeSelf(d)
			}

		}
		if yyrt4793 {
			for ; yyj4793 < yyl4793; yyj4793++ {
				yyv4793 = append(yyv4793, Node{})
				yyh4793.ElemContainerState(yyj4793)
				if r.TryDecodeAsNil() {
					yyv4793[yyj4793] = Node{}
				} else {
					yyv4795 := &yyv4793[yyj4793]
					yyv4795.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4793 := 0
		for ; !r.CheckBreak(); yyj4793++ {

			if yyj4793 >= len(yyv4793) {
				yyv4793 = append(yyv4793, Node{}) // var yyz4793 Node
				yyc4793 = true
			}
			yyh4793.ElemContainerState(yyj4793)
			if yyj4793 < len(yyv4793) {
				if r.TryDecodeAsNil() {
					yyv4793[yyj4793] = Node{}
				} else {
					yyv4796 := &yyv4793[yyj4793]
					yyv4796.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4793 < len(yyv4793) {
			yyv4793 = yyv4793[:yyj4793]
			yyc4793 = true
		} else if yyj4793 == 0 && yyv4793 == nil {
			yyv4793 = []Node{}
			yyc4793 = true
		}
	}
	yyh4793.End()
	if yyc4793 {
		*v = yyv4793
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4797 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4797.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4798 := *v
	yyh4798, yyl4798 := z.DecSliceHelperStart()
	var yyc4798 bool
	if yyl4798 == 0 {
		if yyv4798 == nil {
			yyv4798 = []FinalizerName{}
			yyc4798 = true
		} else if len(yyv4798) != 0 {
			yyv4798 = yyv4798[:0]
			yyc4798 = true
		}
	} else if yyl4798 > 0 {
		var yyrr4798, yyrl4798 int
		var yyrt4798 bool
		if yyl4798 > cap(yyv4798) {

			yyrl4798, yyrt4798 = z.DecInferLen(yyl4798, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4798 {
				if yyrl4798 <= cap(yyv4798) {
					yyv4798 = yyv4798[:yyrl4798]
				} else {
					yyv4798 = make([]FinalizerName, yyrl4798)
				}
			} else {
				yyv4798 = make([]FinalizerName, yyrl4798)
			}
			yyc4798 = true
			yyrr4798 = len(yyv4798)
		} else if yyl4798 != len(yyv4798) {
			yyv4798 = yyv4798[:yyl4798]
			yyc4798 = true
		}
		yyj4798 := 0
		for ; yyj4798 < yyrr4798; yyj4798++ {
			yyh4798.ElemContainerState(yyj4798)
			if r.TryDecodeAsNil() {
				yyv4798[yyj4798] = ""
			} else {
				yyv4798[yyj4798] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4798 {
			for ; yyj4798 < yyl4798; yyj4798++ {
				yyv4798 = append(yyv4798, "")
				yyh4798.ElemContainerState(yyj4798)
				if r.TryDecodeAsNil() {
					yyv4798[yyj4798] = ""
				} else {
					yyv4798[yyj4798] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4798 := 0
		for ; !r.CheckBreak(); yyj4798++ {

			if yyj4798 >= len(yyv4798) {
				yyv4798 = append(yyv4798, "") // var yyz4798 FinalizerName
				yyc4798 = true
			}
			yyh4798.ElemContainerState(yyj4798)
			if yyj4798 < len(yyv4798) {
				if r.TryDecodeAsNil() {
					yyv4798[yyj4798] = ""
				} else {
					yyv4798[yyj4798] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4798 < len(yyv4798) {
			yyv4798 = yyv4798[:yyj4798]
			yyc4798 = true
		} else if yyj4798 == 0 && yyv4798 == nil {
			yyv4798 = []FinalizerName{}
			yyc4798 = true
		}
	}
	yyh4798.End()
	if yyc4798 {
		*v = yyv4798
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4802 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4803 := &yyv4802
		yy4803.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4804 := *v
	yyh4804, yyl4804 := z.DecSliceHelperStart()
	var yyc4804 bool
	if yyl4804 == 0 {
		if yyv4804 == nil {
			yyv4804 = []Namespace{}
			yyc4804 = true
		} else if len(yyv4804) != 0 {
			yyv4804 = yyv4804[:0]
			yyc4804 = true
		}
	} else if yyl4804 > 0 {
		var yyrr4804, yyrl4804 int
		var yyrt4804 bool
		if yyl4804 > cap(yyv4804) {

			yyrg4804 := len(yyv4804) > 0
			yyv24804 := yyv4804
			yyrl4804, yyrt4804 = z.DecInferLen(yyl4804, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4804 {
				if yyrl4804 <= cap(yyv4804) {
					yyv4804 = yyv4804[:yyrl4804]
				} else {
					yyv4804 = make([]Namespace, yyrl4804)
				}
			} else {
				yyv4804 = make([]Namespace, yyrl4804)
			}
			yyc4804 = true
			yyrr4804 = len(yyv4804)
			if yyrg4804 {
				copy(yyv4804, yyv24804)
			}
		} else if yyl4804 != len(yyv4804) {
			yyv4804 = yyv4804[:yyl4804]
			yyc4804 = true
		}
		yyj4804 := 0
		for ; yyj4804 < yyrr4804; yyj4804++ {
			yyh4804.ElemContainerState(yyj4804)
			if r.TryDecodeAsNil() {
				yyv4804[yyj4804] = Namespace{}
			} else {
				yyv4805 := &yyv4804[yyj4804]
				yyv4805.CodecDecodeSelf(d)
			}

		}
		if yyrt4804 {
			for ; yyj4804 < yyl4804; yyj4804++ {
				yyv4804 = append(yyv4804, Namespace{})
				yyh4804.ElemContainerState(yyj4804)
				if r.TryDecodeAsNil() {
					yyv4804[yyj4804] = Namespace{}
				} else {
					yyv4806 := &yyv4804[yyj4804]
					yyv4806.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4804 := 0
		for ; !r.CheckBreak(); yyj4804++ {

			if yyj4804 >= len(yyv4804) {
				yyv4804 = append(yyv4804, Namespace{}) // var yyz4804 Namespace
				yyc4804 = true
			}
			yyh4804.ElemContainerState(yyj4804)
			if yyj4804 < len(yyv4804) {
				if r.TryDecodeAsNil() {
					yyv4804[yyj4804] = Namespace{}
				} else {
					yyv4807 := &yyv4804[yyj4804]
					yyv4807.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4804 < len(yyv4804) {
			yyv4804 = yyv4804[:yyj4804]
			yyc4804 = true
		} else if yyj4804 == 0 && yyv4804 == nil {
			yyv4804 = []Namespace{}
			yyc4804 = true
		}
	}
	yyh4804.End()
	if yyc4804 {
		*v = yyv4804
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4808 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4809 := &yyv4808
		yy4809.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4810 := *v
	yyh4810, yyl4810 := z.DecSliceHelperStart()
	var yyc4810 bool
	if yyl4810 == 0 {
		if yyv4810 == nil {
			yyv4810 = []Event{}
			yyc4810 = true
		} else if len(yyv4810) != 0 {
			yyv4810 = yyv4810[:0]
			yyc4810 = true
		}
	} else if yyl4810 > 0 {
		var yyrr4810, yyrl4810 int
		var yyrt4810 bool
		if yyl4810 > cap(yyv4810) {

			yyrg4810 := len(yyv4810) > 0
			yyv24810 := yyv4810
			yyrl4810, yyrt4810 = z.DecInferLen(yyl4810, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4810 {
				if yyrl4810 <= cap(yyv4810) {
					yyv4810 = yyv4810[:yyrl4810]
				} else {
					yyv4810 = make([]Event, yyrl4810)
				}
			} else {
				yyv4810 = make([]Event, yyrl4810)
			}
			yyc4810 = true
			yyrr4810 = len(yyv4810)
			if yyrg4810 {
				copy(yyv4810, yyv24810)
			}
		} else if yyl4810 != len(yyv4810) {
			yyv4810 = yyv4810[:yyl4810]
			yyc4810 = true
		}
		yyj4810 := 0
		for ; yyj4810 < yyrr4810; yyj4810++ {
			yyh4810.ElemContainerState(yyj4810)
			if r.TryDecodeAsNil() {
				yyv4810[yyj4810] = Event{}
			} else {
				yyv4811 := &yyv4810[yyj4810]
				yyv4811.CodecDecodeSelf(d)
			}

		}
		if yyrt4810 {
			for ; yyj4810 < yyl4810; yyj4810++ {
				yyv4810 = append(yyv4810, Event{})
				yyh4810.ElemContainerState(yyj4810)
				if r.TryDecodeAsNil() {
					yyv4810[yyj4810] = Event{}
				} else {
					yyv4812 := &yyv4810[yyj4810]
					yyv4812.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4810 := 0
		for ; !r.CheckBreak(); yyj4810++ {

			if yyj4810 >= len(yyv4810) {
				yyv4810 = append(yyv4810, Event{}) // var yyz4810 Event
				yyc4810 = true
			}
			yyh4810.ElemContainerState(yyj4810)
			if yyj4810 < len(yyv4810) {
				if r.TryDecodeAsNil() {
					yyv4810[yyj4810] = Event{}
				} else {
					yyv4813 := &yyv4810[yyj4810]
					yyv4813.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4810 < len(yyv4810) {
			yyv4810 = yyv4810[:yyj4810]
			yyc4810 = true
		} else if yyj4810 == 0 && yyv4810 == nil {
			yyv4810 = []Event{}
			yyc4810 = true
		}
	}
	yyh4810.End()
	if yyc4810 {
		*v = yyv4810
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4814 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4815 := &yyv4814
		yym4816 := z.EncBinary()
		_ = yym4816
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4815) {
		} else if !yym4816 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4815)
		} else {
			z.EncFallback(yy4815)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4817 := *v
	yyh4817, yyl4817 := z.DecSliceHelperStart()
	var yyc4817 bool
	if yyl4817 == 0 {
		if yyv4817 == nil {
			yyv4817 = []pkg5_runtime.RawExtension{}
			yyc4817 = true
		} else if len(yyv4817) != 0 {
			yyv4817 = yyv4817[:0]
			yyc4817 = true
		}
	} else if yyl4817 > 0 {
		var yyrr4817, yyrl4817 int
		var yyrt4817 bool
		if yyl4817 > cap(yyv4817) {

			yyrg4817 := len(yyv4817) > 0
			yyv24817 := yyv4817
			yyrl4817, yyrt4817 = z.DecInferLen(yyl4817, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4817 {
				if yyrl4817 <= cap(yyv4817) {
					yyv4817 = yyv4817[:yyrl4817]
				} else {
					yyv4817 = make([]pkg5_runtime.RawExtension, yyrl4817)
				}
			} else {
				yyv4817 = make([]pkg5_runtime.RawExtension, yyrl4817)
			}
			yyc4817 = true
			yyrr4817 = len(yyv4817)
			if yyrg4817 {
				copy(yyv4817, yyv24817)
			}
		} else if yyl4817 != len(yyv4817) {
			yyv4817 = yyv4817[:yyl4817]
			yyc4817 = true
		}
		yyj4817 := 0
		for ; yyj4817 < yyrr4817; yyj4817++ {
			yyh4817.ElemContainerState(yyj4817)
			if r.TryDecodeAsNil() {
				yyv4817[yyj4817] = pkg5_runtime.RawExtension{}
			} else {
				yyv4818 := &yyv4817[yyj4817]
				yym4819 := z.DecBinary()
				_ = yym4819
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4818) {
				} else if !yym4819 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4818)
				} else {
					z.DecFallback(yyv4818, false)
				}
			}

		}
		if yyrt4817 {
			for ; yyj4817 < yyl4817; yyj4817++ {
				yyv4817 = append(yyv4817, pkg5_runtime.RawExtension{})
				yyh4817.ElemContainerState(yyj4817)
				if r.TryDecodeAsNil() {
					yyv4817[yyj4817] = pkg5_runtime.RawExtension{}
				} else {
					yyv4820 := &yyv4817[yyj4817]
					yym4821 := z.DecBinary()
					_ = yym4821
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4820) {
					} else if !yym4821 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4820)
					} else {
						z.DecFallback(yyv4820, false)
					}
				}

			}
		}

	} else {
		yyj4817 := 0
		for ; !r.CheckBreak(); yyj4817++ {

			if yyj4817 >= len(yyv4817) {
				yyv4817 = append(yyv4817, pkg5_runtime.RawExtension{}) // var yyz4817 pkg5_runtime.RawExtension
				yyc4817 = true
			}
			yyh4817.ElemContainerState(yyj4817)
			if yyj4817 < len(yyv4817) {
				if r.TryDecodeAsNil() {
					yyv4817[yyj4817] = pkg5_runtime.RawExtension{}
				} else {
					yyv4822 := &yyv4817[yyj4817]
					yym4823 := z.DecBinary()
					_ = yym4823
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4822) {
					} else if !yym4823 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4822)
					} else {
						z.DecFallback(yyv4822, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4817 < len(yyv4817) {
			yyv4817 = yyv4817[:yyj4817]
			yyc4817 = true
		} else if yyj4817 == 0 && yyv4817 == nil {
			yyv4817 = []pkg5_runtime.RawExtension{}
			yyc4817 = true
		}
	}
	yyh4817.End()
	if yyc4817 {
		*v = yyv4817
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4824 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4825 := &yyv4824
		yy4825.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4826 := *v
	yyh4826, yyl4826 := z.DecSliceHelperStart()
	var yyc4826 bool
	if yyl4826 == 0 {
		if yyv4826 == nil {
			yyv4826 = []LimitRangeItem{}
			yyc4826 = true
		} else if len(yyv4826) != 0 {
			yyv4826 = yyv4826[:0]
			yyc4826 = true
		}
	} else if yyl4826 > 0 {
		var yyrr4826, yyrl4826 int
		var yyrt4826 bool
		if yyl4826 > cap(yyv4826) {

			yyrg4826 := len(yyv4826) > 0
			yyv24826 := yyv4826
			yyrl4826, yyrt4826 = z.DecInferLen(yyl4826, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4826 {
				if yyrl4826 <= cap(yyv4826) {
					yyv4826 = yyv4826[:yyrl4826]
				} else {
					yyv4826 = make([]LimitRangeItem, yyrl4826)
				}
			} else {
				yyv4826 = make([]LimitRangeItem, yyrl4826)
			}
			yyc4826 = true
			yyrr4826 = len(yyv4826)
			if yyrg4826 {
				copy(yyv4826, yyv24826)
			}
		} else if yyl4826 != len(yyv4826) {
			yyv4826 = yyv4826[:yyl4826]
			yyc4826 = true
		}
		yyj4826 := 0
		for ; yyj4826 < yyrr4826; yyj4826++ {
			yyh4826.ElemContainerState(yyj4826)
			if r.TryDecodeAsNil() {
				yyv4826[yyj4826] = LimitRangeItem{}
			} else {
				yyv4827 := &yyv4826[yyj4826]
				yyv4827.CodecDecodeSelf(d)
			}

		}
		if yyrt4826 {
			for ; yyj4826 < yyl4826; yyj4826++ {
				yyv4826 = append(yyv4826, LimitRangeItem{})
				yyh4826.ElemContainerState(yyj4826)
				if r.TryDecodeAsNil() {
					yyv4826[yyj4826] = LimitRangeItem{}
				} else {
					yyv4828 := &yyv4826[yyj4826]
					yyv4828.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4826 := 0
		for ; !r.CheckBreak(); yyj4826++ {

			if yyj4826 >= len(yyv4826) {
				yyv4826 = append(yyv4826, LimitRangeItem{}) // var yyz4826 LimitRangeItem
				yyc4826 = true
			}
			yyh4826.ElemContainerState(yyj4826)
			if yyj4826 < len(yyv4826) {
				if r.TryDecodeAsNil() {
					yyv4826[yyj4826] = LimitRangeItem{}
				} else {
					yyv4829 := &yyv4826[yyj4826]
					yyv4829.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4826 < len(yyv4826) {
			yyv4826 = yyv4826[:yyj4826]
			yyc4826 = true
		} else if yyj4826 == 0 && yyv4826 == nil {
			yyv4826 = []LimitRangeItem{}
			yyc4826 = true
		}
	}
	yyh4826.End()
	if yyc4826 {
		*v = yyv4826
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4830 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4831 := &yyv4830
		yy4831.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4832 := *v
	yyh4832, yyl4832 := z.DecSliceHelperStart()
	var yyc4832 bool
	if yyl4832 == 0 {
		if yyv4832 == nil {
			yyv4832 = []LimitRange{}
			yyc4832 = true
		} else if len(yyv4832) != 0 {
			yyv4832 = yyv4832[:0]
			yyc4832 = true
		}
	} else if yyl4832 > 0 {
		var yyrr4832, yyrl4832 int
		var yyrt4832 bool
		if yyl4832 > cap(yyv4832) {

			yyrg4832 := len(yyv4832) > 0
			yyv24832 := yyv4832
			yyrl4832, yyrt4832 = z.DecInferLen(yyl4832, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4832 {
				if yyrl4832 <= cap(yyv4832) {
					yyv4832 = yyv4832[:yyrl4832]
				} else {
					yyv4832 = make([]LimitRange, yyrl4832)
				}
			} else {
				yyv4832 = make([]LimitRange, yyrl4832)
			}
			yyc4832 = true
			yyrr4832 = len(yyv4832)
			if yyrg4832 {
				copy(yyv4832, yyv24832)
			}
		} else if yyl4832 != len(yyv4832) {
			yyv4832 = yyv4832[:yyl4832]
			yyc4832 = true
		}
		yyj4832 := 0
		for ; yyj4832 < yyrr4832; yyj4832++ {
			yyh4832.ElemContainerState(yyj4832)
			if r.TryDecodeAsNil() {
				yyv4832[yyj4832] = LimitRange{}
			} else {
				yyv4833 := &yyv4832[yyj4832]
				yyv4833.CodecDecodeSelf(d)
			}

		}
		if yyrt4832 {
			for ; yyj4832 < yyl4832; yyj4832++ {
				yyv4832 = append(yyv4832, LimitRange{})
				yyh4832.ElemContainerState(yyj4832)
				if r.TryDecodeAsNil() {
					yyv4832[yyj4832] = LimitRange{}
				} else {
					yyv4834 := &yyv4832[yyj4832]
					yyv4834.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4832 := 0
		for ; !r.CheckBreak(); yyj4832++ {

			if yyj4832 >= len(yyv4832) {
				yyv4832 = append(yyv4832, LimitRange{}) // var yyz4832 LimitRange
				yyc4832 = true
			}
			yyh4832.ElemContainerState(yyj4832)
			if yyj4832 < len(yyv4832) {
				if r.TryDecodeAsNil() {
					yyv4832[yyj4832] = LimitRange{}
				} else {
					yyv4835 := &yyv4832[yyj4832]
					yyv4835.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4832 < len(yyv4832) {
			yyv4832 = yyv4832[:yyj4832]
			yyc4832 = true
		} else if yyj4832 == 0 && yyv4832 == nil {
			yyv4832 = []LimitRange{}
			yyc4832 = true
		}
	}
	yyh4832.End()
	if yyc4832 {
		*v = yyv4832
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4836 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4836.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4837 := *v
	yyh4837, yyl4837 := z.DecSliceHelperStart()
	var yyc4837 bool
	if yyl4837 == 0 {
		if yyv4837 == nil {
			yyv4837 = []ResourceQuotaScope{}
			yyc4837 = true
		} else if len(yyv4837) != 0 {
			yyv4837 = yyv4837[:0]
			yyc4837 = true
		}
	} else if yyl4837 > 0 {
		var yyrr4837, yyrl4837 int
		var yyrt4837 bool
		if yyl4837 > cap(yyv4837) {

			yyrl4837, yyrt4837 = z.DecInferLen(yyl4837, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4837 {
				if yyrl4837 <= cap(yyv4837) {
					yyv4837 = yyv4837[:yyrl4837]
				} else {
					yyv4837 = make([]ResourceQuotaScope, yyrl4837)
				}
			} else {
				yyv4837 = make([]ResourceQuotaScope, yyrl4837)
			}
			yyc4837 = true
			yyrr4837 = len(yyv4837)
		} else if yyl4837 != len(yyv4837) {
			yyv4837 = yyv4837[:yyl4837]
			yyc4837 = true
		}
		yyj4837 := 0
		for ; yyj4837 < yyrr4837; yyj4837++ {
			yyh4837.ElemContainerState(yyj4837)
			if r.TryDecodeAsNil() {
				yyv4837[yyj4837] = ""
			} else {
				yyv4837[yyj4837] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4837 {
			for ; yyj4837 < yyl4837; yyj4837++ {
				yyv4837 = append(yyv4837, "")
				yyh4837.ElemContainerState(yyj4837)
				if r.TryDecodeAsNil() {
					yyv4837[yyj4837] = ""
				} else {
					yyv4837[yyj4837] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4837 := 0
		for ; !r.CheckBreak(); yyj4837++ {

			if yyj4837 >= len(yyv4837) {
				yyv4837 = append(yyv4837, "") // var yyz4837 ResourceQuotaScope
				yyc4837 = true
			}
			yyh4837.ElemContainerState(yyj4837)
			if yyj4837 < len(yyv4837) {
				if r.TryDecodeAsNil() {
					yyv4837[yyj4837] = ""
				} else {
					yyv4837[yyj4837] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4837 < len(yyv4837) {
			yyv4837 = yyv4837[:yyj4837]
			yyc4837 = true
		} else if yyj4837 == 0 && yyv4837 == nil {
			yyv4837 = []ResourceQuotaScope{}
			yyc4837 = true
		}
	}
	yyh4837.End()
	if yyc4837 {
		*v = yyv4837
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4841 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4842 := &yyv4841
		yy4842.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4843 := *v
	yyh4843, yyl4843 := z.DecSliceHelperStart()
	var yyc4843 bool
	if yyl4843 == 0 {
		if yyv4843 == nil {
			yyv4843 = []ResourceQuota{}
			yyc4843 = true
		} else if len(yyv4843) != 0 {
			yyv4843 = yyv4843[:0]
			yyc4843 = true
		}
	} else if yyl4843 > 0 {
		var yyrr4843, yyrl4843 int
		var yyrt4843 bool
		if yyl4843 > cap(yyv4843) {

			yyrg4843 := len(yyv4843) > 0
			yyv24843 := yyv4843
			yyrl4843, yyrt4843 = z.DecInferLen(yyl4843, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4843 {
				if yyrl4843 <= cap(yyv4843) {
					yyv4843 = yyv4843[:yyrl4843]
				} else {
					yyv4843 = make([]ResourceQuota, yyrl4843)
				}
			} else {
				yyv4843 = make([]ResourceQuota, yyrl4843)
			}
			yyc4843 = true
			yyrr4843 = len(yyv4843)
			if yyrg4843 {
				copy(yyv4843, yyv24843)
			}
		} else if yyl4843 != len(yyv4843) {
			yyv4843 = yyv4843[:yyl4843]
			yyc4843 = true
		}
		yyj4843 := 0
		for ; yyj4843 < yyrr4843; yyj4843++ {
			yyh4843.ElemContainerState(yyj4843)
			if r.TryDecodeAsNil() {
				yyv4843[yyj4843] = ResourceQuota{}
			} else {
				yyv4844 := &yyv4843[yyj4843]
				yyv4844.CodecDecodeSelf(d)
			}

		}
		if yyrt4843 {
			for ; yyj4843 < yyl4843; yyj4843++ {
				yyv4843 = append(yyv4843, ResourceQuota{})
				yyh4843.ElemContainerState(yyj4843)
				if r.TryDecodeAsNil() {
					yyv4843[yyj4843] = ResourceQuota{}
				} else {
					yyv4845 := &yyv4843[yyj4843]
					yyv4845.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4843 := 0
		for ; !r.CheckBreak(); yyj4843++ {

			if yyj4843 >= len(yyv4843) {
				yyv4843 = append(yyv4843, ResourceQuota{}) // var yyz4843 ResourceQuota
				yyc4843 = true
			}
			yyh4843.ElemContainerState(yyj4843)
			if yyj4843 < len(yyv4843) {
				if r.TryDecodeAsNil() {
					yyv4843[yyj4843] = ResourceQuota{}
				} else {
					yyv4846 := &yyv4843[yyj4843]
					yyv4846.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4843 < len(yyv4843) {
			yyv4843 = yyv4843[:yyj4843]
			yyc4843 = true
		} else if yyj4843 == 0 && yyv4843 == nil {
			yyv4843 = []ResourceQuota{}
			yyc4843 = true
		}
	}
	yyh4843.End()
	if yyc4843 {
		*v = yyv4843
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4847, yyv4847 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4848 := z.EncBinary()
		_ = yym4848
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4847))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4847 == nil {
			r.EncodeNil()
		} else {
			yym4849 := z.EncBinary()
			_ = yym4849
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4847))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4850 := *v
	yyl4850 := r.ReadMapStart()
	yybh4850 := z.DecBasicHandle()
	if yyv4850 == nil {
		yyrl4850, _ := z.DecInferLen(yyl4850, yybh4850.MaxInitLen, 40)
		yyv4850 = make(map[string][]uint8, yyrl4850)
		*v = yyv4850
	}
	var yymk4850 string
	var yymv4850 []uint8
	var yymg4850 bool
	if yybh4850.MapValueReset {
		yymg4850 = true
	}
	if yyl4850 > 0 {
		for yyj4850 := 0; yyj4850 < yyl4850; yyj4850++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4850 = ""
			} else {
				yymk4850 = string(r.DecodeString())
			}

			if yymg4850 {
				yymv4850 = yyv4850[yymk4850]
			} else {
				yymv4850 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4850 = nil
			} else {
				yyv4852 := &yymv4850
				yym4853 := z.DecBinary()
				_ = yym4853
				if false {
				} else {
					*yyv4852 = r.DecodeBytes(*(*[]byte)(yyv4852), false, false)
				}
			}

			if yyv4850 != nil {
				yyv4850[yymk4850] = yymv4850
			}
		}
	} else if yyl4850 < 0 {
		for yyj4850 := 0; !r.CheckBreak(); yyj4850++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4850 = ""
			} else {
				yymk4850 = string(r.DecodeString())
			}

			if yymg4850 {
				yymv4850 = yyv4850[yymk4850]
			} else {
				yymv4850 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4850 = nil
			} else {
				yyv4855 := &yymv4850
				yym4856 := z.DecBinary()
				_ = yym4856
				if false {
				} else {
					*yyv4855 = r.DecodeBytes(*(*[]byte)(yyv4855), false, false)
				}
			}

			if yyv4850 != nil {
				yyv4850[yymk4850] = yymv4850
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4857 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4858 := &yyv4857
		yy4858.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4859 := *v
	yyh4859, yyl4859 := z.DecSliceHelperStart()
	var yyc4859 bool
	if yyl4859 == 0 {
		if yyv4859 == nil {
			yyv4859 = []Secret{}
			yyc4859 = true
		} else if len(yyv4859) != 0 {
			yyv4859 = yyv4859[:0]
			yyc4859 = true
		}
	} else if yyl4859 > 0 {
		var yyrr4859, yyrl4859 int
		var yyrt4859 bool
		if yyl4859 > cap(yyv4859) {

			yyrg4859 := len(yyv4859) > 0
			yyv24859 := yyv4859
			yyrl4859, yyrt4859 = z.DecInferLen(yyl4859, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4859 {
				if yyrl4859 <= cap(yyv4859) {
					yyv4859 = yyv4859[:yyrl4859]
				} else {
					yyv4859 = make([]Secret, yyrl4859)
				}
			} else {
				yyv4859 = make([]Secret, yyrl4859)
			}
			yyc4859 = true
			yyrr4859 = len(yyv4859)
			if yyrg4859 {
				copy(yyv4859, yyv24859)
			}
		} else if yyl4859 != len(yyv4859) {
			yyv4859 = yyv4859[:yyl4859]
			yyc4859 = true
		}
		yyj4859 := 0
		for ; yyj4859 < yyrr4859; yyj4859++ {
			yyh4859.ElemContainerState(yyj4859)
			if r.TryDecodeAsNil() {
				yyv4859[yyj4859] = Secret{}
			} else {
				yyv4860 := &yyv4859[yyj4859]
				yyv4860.CodecDecodeSelf(d)
			}

		}
		if yyrt4859 {
			for ; yyj4859 < yyl4859; yyj4859++ {
				yyv4859 = append(yyv4859, Secret{})
				yyh4859.ElemContainerState(yyj4859)
				if r.TryDecodeAsNil() {
					yyv4859[yyj4859] = Secret{}
				} else {
					yyv4861 := &yyv4859[yyj4859]
					yyv4861.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4859 := 0
		for ; !r.CheckBreak(); yyj4859++ {

			if yyj4859 >= len(yyv4859) {
				yyv4859 = append(yyv4859, Secret{}) // var yyz4859 Secret
				yyc4859 = true
			}
			yyh4859.ElemContainerState(yyj4859)
			if yyj4859 < len(yyv4859) {
				if r.TryDecodeAsNil() {
					yyv4859[yyj4859] = Secret{}
				} else {
					yyv4862 := &yyv4859[yyj4859]
					yyv4862.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4859 < len(yyv4859) {
			yyv4859 = yyv4859[:yyj4859]
			yyc4859 = true
		} else if yyj4859 == 0 && yyv4859 == nil {
			yyv4859 = []Secret{}
			yyc4859 = true
		}
	}
	yyh4859.End()
	if yyc4859 {
		*v = yyv4859
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4863 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4864 := &yyv4863
		yy4864.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4865 := *v
	yyh4865, yyl4865 := z.DecSliceHelperStart()
	var yyc4865 bool
	if yyl4865 == 0 {
		if yyv4865 == nil {
			yyv4865 = []ConfigMap{}
			yyc4865 = true
		} else if len(yyv4865) != 0 {
			yyv4865 = yyv4865[:0]
			yyc4865 = true
		}
	} else if yyl4865 > 0 {
		var yyrr4865, yyrl4865 int
		var yyrt4865 bool
		if yyl4865 > cap(yyv4865) {

			yyrg4865 := len(yyv4865) > 0
			yyv24865 := yyv4865
			yyrl4865, yyrt4865 = z.DecInferLen(yyl4865, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4865 {
				if yyrl4865 <= cap(yyv4865) {
					yyv4865 = yyv4865[:yyrl4865]
				} else {
					yyv4865 = make([]ConfigMap, yyrl4865)
				}
			} else {
				yyv4865 = make([]ConfigMap, yyrl4865)
			}
			yyc4865 = true
			yyrr4865 = len(yyv4865)
			if yyrg4865 {
				copy(yyv4865, yyv24865)
			}
		} else if yyl4865 != len(yyv4865) {
			yyv4865 = yyv4865[:yyl4865]
			yyc4865 = true
		}
		yyj4865 := 0
		for ; yyj4865 < yyrr4865; yyj4865++ {
			yyh4865.ElemContainerState(yyj4865)
			if r.TryDecodeAsNil() {
				yyv4865[yyj4865] = ConfigMap{}
			} else {
				yyv4866 := &yyv4865[yyj4865]
				yyv4866.CodecDecodeSelf(d)
			}

		}
		if yyrt4865 {
			for ; yyj4865 < yyl4865; yyj4865++ {
				yyv4865 = append(yyv4865, ConfigMap{})
				yyh4865.ElemContainerState(yyj4865)
				if r.TryDecodeAsNil() {
					yyv4865[yyj4865] = ConfigMap{}
				} else {
					yyv4867 := &yyv4865[yyj4865]
					yyv4867.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4865 := 0
		for ; !r.CheckBreak(); yyj4865++ {

			if yyj4865 >= len(yyv4865) {
				yyv4865 = append(yyv4865, ConfigMap{}) // var yyz4865 ConfigMap
				yyc4865 = true
			}
			yyh4865.ElemContainerState(yyj4865)
			if yyj4865 < len(yyv4865) {
				if r.TryDecodeAsNil() {
					yyv4865[yyj4865] = ConfigMap{}
				} else {
					yyv4868 := &yyv4865[yyj4865]
					yyv4868.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4865 < len(yyv4865) {
			yyv4865 = yyv4865[:yyj4865]
			yyc4865 = true
		} else if yyj4865 == 0 && yyv4865 == nil {
			yyv4865 = []ConfigMap{}
			yyc4865 = true
		}
	}
	yyh4865.End()
	if yyc4865 {
		*v = yyv4865
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4869 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4870 := &yyv4869
		yy4870.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4871 := *v
	yyh4871, yyl4871 := z.DecSliceHelperStart()
	var yyc4871 bool
	if yyl4871 == 0 {
		if yyv4871 == nil {
			yyv4871 = []ComponentCondition{}
			yyc4871 = true
		} else if len(yyv4871) != 0 {
			yyv4871 = yyv4871[:0]
			yyc4871 = true
		}
	} else if yyl4871 > 0 {
		var yyrr4871, yyrl4871 int
		var yyrt4871 bool
		if yyl4871 > cap(yyv4871) {

			yyrg4871 := len(yyv4871) > 0
			yyv24871 := yyv4871
			yyrl4871, yyrt4871 = z.DecInferLen(yyl4871, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4871 {
				if yyrl4871 <= cap(yyv4871) {
					yyv4871 = yyv4871[:yyrl4871]
				} else {
					yyv4871 = make([]ComponentCondition, yyrl4871)
				}
			} else {
				yyv4871 = make([]ComponentCondition, yyrl4871)
			}
			yyc4871 = true
			yyrr4871 = len(yyv4871)
			if yyrg4871 {
				copy(yyv4871, yyv24871)
			}
		} else if yyl4871 != len(yyv4871) {
			yyv4871 = yyv4871[:yyl4871]
			yyc4871 = true
		}
		yyj4871 := 0
		for ; yyj4871 < yyrr4871; yyj4871++ {
			yyh4871.ElemContainerState(yyj4871)
			if r.TryDecodeAsNil() {
				yyv4871[yyj4871] = ComponentCondition{}
			} else {
				yyv4872 := &yyv4871[yyj4871]
				yyv4872.CodecDecodeSelf(d)
			}

		}
		if yyrt4871 {
			for ; yyj4871 < yyl4871; yyj4871++ {
				yyv4871 = append(yyv4871, ComponentCondition{})
				yyh4871.ElemContainerState(yyj4871)
				if r.TryDecodeAsNil() {
					yyv4871[yyj4871] = ComponentCondition{}
				} else {
					yyv4873 := &yyv4871[yyj4871]
					yyv4873.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4871 := 0
		for ; !r.CheckBreak(); yyj4871++ {

			if yyj4871 >= len(yyv4871) {
				yyv4871 = append(yyv4871, ComponentCondition{}) // var yyz4871 ComponentCondition
				yyc4871 = true
			}
			yyh4871.ElemContainerState(yyj4871)
			if yyj4871 < len(yyv4871) {
				if r.TryDecodeAsNil() {
					yyv4871[yyj4871] = ComponentCondition{}
				} else {
					yyv4874 := &yyv4871[yyj4871]
					yyv4874.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4871 < len(yyv4871) {
			yyv4871 = yyv4871[:yyj4871]
			yyc4871 = true
		} else if yyj4871 == 0 && yyv4871 == nil {
			yyv4871 = []ComponentCondition{}
			yyc4871 = true
		}
	}
	yyh4871.End()
	if yyc4871 {
		*v = yyv4871
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4875 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4876 := &yyv4875
		yy4876.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4877 := *v
	yyh4877, yyl4877 := z.DecSliceHelperStart()
	var yyc4877 bool
	if yyl4877 == 0 {
		if yyv4877 == nil {
			yyv4877 = []ComponentStatus{}
			yyc4877 = true
		} else if len(yyv4877) != 0 {
			yyv4877 = yyv4877[:0]
			yyc4877 = true
		}
	} else if yyl4877 > 0 {
		var yyrr4877, yyrl4877 int
		var yyrt4877 bool
		if yyl4877 > cap(yyv4877) {

			yyrg4877 := len(yyv4877) > 0
			yyv24877 := yyv4877
			yyrl4877, yyrt4877 = z.DecInferLen(yyl4877, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4877 {
				if yyrl4877 <= cap(yyv4877) {
					yyv4877 = yyv4877[:yyrl4877]
				} else {
					yyv4877 = make([]ComponentStatus, yyrl4877)
				}
			} else {
				yyv4877 = make([]ComponentStatus, yyrl4877)
			}
			yyc4877 = true
			yyrr4877 = len(yyv4877)
			if yyrg4877 {
				copy(yyv4877, yyv24877)
			}
		} else if yyl4877 != len(yyv4877) {
			yyv4877 = yyv4877[:yyl4877]
			yyc4877 = true
		}
		yyj4877 := 0
		for ; yyj4877 < yyrr4877; yyj4877++ {
			yyh4877.ElemContainerState(yyj4877)
			if r.TryDecodeAsNil() {
				yyv4877[yyj4877] = ComponentStatus{}
			} else {
				yyv4878 := &yyv4877[yyj4877]
				yyv4878.CodecDecodeSelf(d)
			}

		}
		if yyrt4877 {
			for ; yyj4877 < yyl4877; yyj4877++ {
				yyv4877 = append(yyv4877, ComponentStatus{})
				yyh4877.ElemContainerState(yyj4877)
				if r.TryDecodeAsNil() {
					yyv4877[yyj4877] = ComponentStatus{}
				} else {
					yyv4879 := &yyv4877[yyj4877]
					yyv4879.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4877 := 0
		for ; !r.CheckBreak(); yyj4877++ {

			if yyj4877 >= len(yyv4877) {
				yyv4877 = append(yyv4877, ComponentStatus{}) // var yyz4877 ComponentStatus
				yyc4877 = true
			}
			yyh4877.ElemContainerState(yyj4877)
			if yyj4877 < len(yyv4877) {
				if r.TryDecodeAsNil() {
					yyv4877[yyj4877] = ComponentStatus{}
				} else {
					yyv4880 := &yyv4877[yyj4877]
					yyv4880.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4877 < len(yyv4877) {
			yyv4877 = yyv4877[:yyj4877]
			yyc4877 = true
		} else if yyj4877 == 0 && yyv4877 == nil {
			yyv4877 = []ComponentStatus{}
			yyc4877 = true
		}
	}
	yyh4877.End()
	if yyc4877 {
		*v = yyv4877
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4881 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4882 := &yyv4881
		yy4882.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4883 := *v
	yyh4883, yyl4883 := z.DecSliceHelperStart()
	var yyc4883 bool
	if yyl4883 == 0 {
		if yyv4883 == nil {
			yyv4883 = []DownwardAPIVolumeFile{}
			yyc4883 = true
		} else if len(yyv4883) != 0 {
			yyv4883 = yyv4883[:0]
			yyc4883 = true
		}
	} else if yyl4883 > 0 {
		var yyrr4883, yyrl4883 int
		var yyrt4883 bool
		if yyl4883 > cap(yyv4883) {

			yyrg4883 := len(yyv4883) > 0
			yyv24883 := yyv4883
			yyrl4883, yyrt4883 = z.DecInferLen(yyl4883, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4883 {
				if yyrl4883 <= cap(yyv4883) {
					yyv4883 = yyv4883[:yyrl4883]
				} else {
					yyv4883 = make([]DownwardAPIVolumeFile, yyrl4883)
				}
			} else {
				yyv4883 = make([]DownwardAPIVolumeFile, yyrl4883)
			}
			yyc4883 = true
			yyrr4883 = len(yyv4883)
			if yyrg4883 {
				copy(yyv4883, yyv24883)
			}
		} else if yyl4883 != len(yyv4883) {
			yyv4883 = yyv4883[:yyl4883]
			yyc4883 = true
		}
		yyj4883 := 0
		for ; yyj4883 < yyrr4883; yyj4883++ {
			yyh4883.ElemContainerState(yyj4883)
			if r.TryDecodeAsNil() {
				yyv4883[yyj4883] = DownwardAPIVolumeFile{}
			} else {
				yyv4884 := &yyv4883[yyj4883]
				yyv4884.CodecDecodeSelf(d)
			}

		}
		if yyrt4883 {
			for ; yyj4883 < yyl4883; yyj4883++ {
				yyv4883 = append(yyv4883, DownwardAPIVolumeFile{})
				yyh4883.ElemContainerState(yyj4883)
				if r.TryDecodeAsNil() {
					yyv4883[yyj4883] = DownwardAPIVolumeFile{}
				} else {
					yyv4885 := &yyv4883[yyj4883]
					yyv4885.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4883 := 0
		for ; !r.CheckBreak(); yyj4883++ {

			if yyj4883 >= len(yyv4883) {
				yyv4883 = append(yyv4883, DownwardAPIVolumeFile{}) // var yyz4883 DownwardAPIVolumeFile
				yyc4883 = true
			}
			yyh4883.ElemContainerState(yyj4883)
			if yyj4883 < len(yyv4883) {
				if r.TryDecodeAsNil() {
					yyv4883[yyj4883] = DownwardAPIVolumeFile{}
				} else {
					yyv4886 := &yyv4883[yyj4883]
					yyv4886.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4883 < len(yyv4883) {
			yyv4883 = yyv4883[:yyj4883]
			yyc4883 = true
		} else if yyj4883 == 0 && yyv4883 == nil {
			yyv4883 = []DownwardAPIVolumeFile{}
			yyc4883 = true
		}
	}
	yyh4883.End()
	if yyc4883 {
		*v = yyv4883
	}
}
