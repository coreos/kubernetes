/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [24]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[13] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[14] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[15] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[16] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[17] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[18] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[19] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[20] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[21] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq101[23] = x.VolumeSource.CinderLocal != nil && x.CinderLocal != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(24)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.Quobyte == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.Cinder == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.CephFS == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.Flocker == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.FC == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.AzureFile == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.CinderLocal == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr101 || yy2arr101 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[23] {
						if x.CinderLocal == nil {
							r.EncodeNil()
						} else {
							x.CinderLocal.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinderLocal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.CinderLocal == nil {
							r.EncodeNil()
						} else {
							x.CinderLocal.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym128 := z.DecBinary()
	_ = yym128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct129 := r.ContainerType()
		if yyct129 == codecSelferValueTypeMap1234 {
			yyl129 := r.ReadMapStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl129, d)
			}
		} else if yyct129 == codecSelferValueTypeArray1234 {
			yyl129 := r.ReadArrayStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys130Slc
	var yyhl130 bool = l >= 0
	for yyj130 := 0; ; yyj130++ {
		if yyhl130 {
			if yyj130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys130Slc = r.DecodeBytes(yys130Slc, true, true)
		yys130 := string(yys130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys130 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "cinderLocal":
			if x.VolumeSource.CinderLocal == nil {
				x.VolumeSource.CinderLocal = new(CinderLocalVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CinderLocal != nil {
					x.CinderLocal = nil
				}
			} else {
				if x.CinderLocal == nil {
					x.CinderLocal = new(CinderLocalVolumeSource)
				}
				x.CinderLocal.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys130)
		} // end switch yys130
	} // end for yyj130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj155 int
	var yyb155 bool
	var yyhl155 bool = l >= 0
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CinderLocal == nil {
		x.VolumeSource.CinderLocal = new(CinderLocalVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CinderLocal != nil {
			x.CinderLocal = nil
		}
	} else {
		if x.CinderLocal == nil {
			x.CinderLocal = new(CinderLocalVolumeSource)
		}
		x.CinderLocal.CodecDecodeSelf(d)
	}
	for {
		yyj155++
		if yyhl155 {
			yyb155 = yyj155 > l
		} else {
			yyb155 = r.CheckBreak()
		}
		if yyb155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym180 := z.EncBinary()
		_ = yym180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep181 := !z.EncBinary()
			yy2arr181 := z.EncBasicHandle().StructToArray
			var yyq181 [23]bool
			_, _, _ = yysep181, yyq181, yy2arr181
			const yyr181 bool = false
			yyq181[0] = x.HostPath != nil
			yyq181[1] = x.EmptyDir != nil
			yyq181[2] = x.GCEPersistentDisk != nil
			yyq181[3] = x.AWSElasticBlockStore != nil
			yyq181[4] = x.GitRepo != nil
			yyq181[5] = x.Secret != nil
			yyq181[6] = x.NFS != nil
			yyq181[7] = x.ISCSI != nil
			yyq181[8] = x.Glusterfs != nil
			yyq181[9] = x.PersistentVolumeClaim != nil
			yyq181[10] = x.RBD != nil
			yyq181[11] = x.Quobyte != nil
			yyq181[12] = x.FlexVolume != nil
			yyq181[13] = x.Cinder != nil
			yyq181[14] = x.CephFS != nil
			yyq181[15] = x.Flocker != nil
			yyq181[16] = x.DownwardAPI != nil
			yyq181[17] = x.FC != nil
			yyq181[18] = x.AzureFile != nil
			yyq181[19] = x.ConfigMap != nil
			yyq181[20] = x.VsphereVolume != nil
			yyq181[21] = x.AzureDisk != nil
			yyq181[22] = x.CinderLocal != nil
			var yynn181 int
			if yyr181 || yy2arr181 {
				r.EncodeArrayStart(23)
			} else {
				yynn181 = 0
				for _, b := range yyq181 {
					if b {
						yynn181++
					}
				}
				r.EncodeMapStart(yynn181)
				yynn181 = 0
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[11] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[12] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[13] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[14] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[15] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[16] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[17] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[18] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[19] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[20] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[22] {
					if x.CinderLocal == nil {
						r.EncodeNil()
					} else {
						x.CinderLocal.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinderLocal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CinderLocal == nil {
						r.EncodeNil()
					} else {
						x.CinderLocal.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym205 := z.DecBinary()
	_ = yym205
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct206 := r.ContainerType()
		if yyct206 == codecSelferValueTypeMap1234 {
			yyl206 := r.ReadMapStart()
			if yyl206 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl206, d)
			}
		} else if yyct206 == codecSelferValueTypeArray1234 {
			yyl206 := r.ReadArrayStart()
			if yyl206 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl206, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys207Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys207Slc
	var yyhl207 bool = l >= 0
	for yyj207 := 0; ; yyj207++ {
		if yyhl207 {
			if yyj207 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys207Slc = r.DecodeBytes(yys207Slc, true, true)
		yys207 := string(yys207Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys207 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "cinderLocal":
			if r.TryDecodeAsNil() {
				if x.CinderLocal != nil {
					x.CinderLocal = nil
				}
			} else {
				if x.CinderLocal == nil {
					x.CinderLocal = new(CinderLocalVolumeSource)
				}
				x.CinderLocal.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys207)
		} // end switch yys207
	} // end for yyj207
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj231 int
	var yyb231 bool
	var yyhl231 bool = l >= 0
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CinderLocal != nil {
			x.CinderLocal = nil
		}
	} else {
		if x.CinderLocal == nil {
			x.CinderLocal = new(CinderLocalVolumeSource)
		}
		x.CinderLocal.CodecDecodeSelf(d)
	}
	for {
		yyj231++
		if yyhl231 {
			yyb231 = yyj231 > l
		} else {
			yyb231 = r.CheckBreak()
		}
		if yyb231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym255 := z.EncBinary()
		_ = yym255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep256 := !z.EncBinary()
			yy2arr256 := z.EncBasicHandle().StructToArray
			var yyq256 [17]bool
			_, _, _ = yysep256, yyq256, yy2arr256
			const yyr256 bool = false
			yyq256[0] = x.GCEPersistentDisk != nil
			yyq256[1] = x.AWSElasticBlockStore != nil
			yyq256[2] = x.HostPath != nil
			yyq256[3] = x.Glusterfs != nil
			yyq256[4] = x.NFS != nil
			yyq256[5] = x.RBD != nil
			yyq256[6] = x.Quobyte != nil
			yyq256[7] = x.ISCSI != nil
			yyq256[8] = x.FlexVolume != nil
			yyq256[9] = x.Cinder != nil
			yyq256[10] = x.CephFS != nil
			yyq256[11] = x.FC != nil
			yyq256[12] = x.Flocker != nil
			yyq256[13] = x.AzureFile != nil
			yyq256[14] = x.VsphereVolume != nil
			yyq256[15] = x.AzureDisk != nil
			yyq256[16] = x.CinderLocal != nil
			var yynn256 int
			if yyr256 || yy2arr256 {
				r.EncodeArrayStart(17)
			} else {
				yynn256 = 0
				for _, b := range yyq256 {
					if b {
						yynn256++
					}
				}
				r.EncodeMapStart(yynn256)
				yynn256 = 0
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[6] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[8] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[9] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[10] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[11] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[12] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[13] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[14] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[16] {
					if x.CinderLocal == nil {
						r.EncodeNil()
					} else {
						x.CinderLocal.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinderLocal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CinderLocal == nil {
						r.EncodeNil()
					} else {
						x.CinderLocal.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym274 := z.DecBinary()
	_ = yym274
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct275 := r.ContainerType()
		if yyct275 == codecSelferValueTypeMap1234 {
			yyl275 := r.ReadMapStart()
			if yyl275 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl275, d)
			}
		} else if yyct275 == codecSelferValueTypeArray1234 {
			yyl275 := r.ReadArrayStart()
			if yyl275 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl275, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys276Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys276Slc
	var yyhl276 bool = l >= 0
	for yyj276 := 0; ; yyj276++ {
		if yyhl276 {
			if yyj276 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys276Slc = r.DecodeBytes(yys276Slc, true, true)
		yys276 := string(yys276Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys276 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "cinderLocal":
			if r.TryDecodeAsNil() {
				if x.CinderLocal != nil {
					x.CinderLocal = nil
				}
			} else {
				if x.CinderLocal == nil {
					x.CinderLocal = new(CinderLocalVolumeSource)
				}
				x.CinderLocal.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys276)
		} // end switch yys276
	} // end for yyj276
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj294 int
	var yyb294 bool
	var yyhl294 bool = l >= 0
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CinderLocal != nil {
			x.CinderLocal = nil
		}
	} else {
		if x.CinderLocal == nil {
			x.CinderLocal = new(CinderLocalVolumeSource)
		}
		x.CinderLocal.CodecDecodeSelf(d)
	}
	for {
		yyj294++
		if yyhl294 {
			yyb294 = yyj294 > l
		} else {
			yyb294 = r.CheckBreak()
		}
		if yyb294 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj294-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym312 := z.EncBinary()
		_ = yym312
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep313 := !z.EncBinary()
			yy2arr313 := z.EncBasicHandle().StructToArray
			var yyq313 [2]bool
			_, _, _ = yysep313, yyq313, yy2arr313
			const yyr313 bool = false
			yyq313[1] = x.ReadOnly != false
			var yynn313 int
			if yyr313 || yy2arr313 {
				r.EncodeArrayStart(2)
			} else {
				yynn313 = 1
				for _, b := range yyq313 {
					if b {
						yynn313++
					}
				}
				r.EncodeMapStart(yynn313)
				yynn313 = 0
			}
			if yyr313 || yy2arr313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym315 := z.EncBinary()
				_ = yym315
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym316 := z.EncBinary()
				_ = yym316
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr313 || yy2arr313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq313[1] {
					yym318 := z.EncBinary()
					_ = yym318
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq313[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym319 := z.EncBinary()
					_ = yym319
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr313 || yy2arr313 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym320 := z.DecBinary()
	_ = yym320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct321 := r.ContainerType()
		if yyct321 == codecSelferValueTypeMap1234 {
			yyl321 := r.ReadMapStart()
			if yyl321 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl321, d)
			}
		} else if yyct321 == codecSelferValueTypeArray1234 {
			yyl321 := r.ReadArrayStart()
			if yyl321 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl321, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys322Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys322Slc
	var yyhl322 bool = l >= 0
	for yyj322 := 0; ; yyj322++ {
		if yyhl322 {
			if yyj322 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys322Slc = r.DecodeBytes(yys322Slc, true, true)
		yys322 := string(yys322Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys322 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys322)
		} // end switch yys322
	} // end for yyj322
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj325 int
	var yyb325 bool
	var yyhl325 bool = l >= 0
	yyj325++
	if yyhl325 {
		yyb325 = yyj325 > l
	} else {
		yyb325 = r.CheckBreak()
	}
	if yyb325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj325++
	if yyhl325 {
		yyb325 = yyj325 > l
	} else {
		yyb325 = r.CheckBreak()
	}
	if yyb325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj325++
		if yyhl325 {
			yyb325 = yyj325 > l
		} else {
			yyb325 = r.CheckBreak()
		}
		if yyb325 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj325-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym328 := z.EncBinary()
		_ = yym328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep329 := !z.EncBinary()
			yy2arr329 := z.EncBasicHandle().StructToArray
			var yyq329 [5]bool
			_, _, _ = yysep329, yyq329, yy2arr329
			const yyr329 bool = false
			yyq329[0] = x.Kind != ""
			yyq329[1] = x.APIVersion != ""
			yyq329[2] = true
			yyq329[3] = true
			yyq329[4] = true
			var yynn329 int
			if yyr329 || yy2arr329 {
				r.EncodeArrayStart(5)
			} else {
				yynn329 = 0
				for _, b := range yyq329 {
					if b {
						yynn329++
					}
				}
				r.EncodeMapStart(yynn329)
				yynn329 = 0
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[0] {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[1] {
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[2] {
					yy337 := &x.ObjectMeta
					yy337.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy338 := &x.ObjectMeta
					yy338.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[3] {
					yy340 := &x.Spec
					yy340.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy341 := &x.Spec
					yy341.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[4] {
					yy343 := &x.Status
					yy343.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy344 := &x.Status
					yy344.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym345 := z.DecBinary()
	_ = yym345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct346 := r.ContainerType()
		if yyct346 == codecSelferValueTypeMap1234 {
			yyl346 := r.ReadMapStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl346, d)
			}
		} else if yyct346 == codecSelferValueTypeArray1234 {
			yyl346 := r.ReadArrayStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl346, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys347Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys347Slc
	var yyhl347 bool = l >= 0
	for yyj347 := 0; ; yyj347++ {
		if yyhl347 {
			if yyj347 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys347Slc = r.DecodeBytes(yys347Slc, true, true)
		yys347 := string(yys347Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys347 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv350 := &x.ObjectMeta
				yyv350.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv351 := &x.Spec
				yyv351.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv352 := &x.Status
				yyv352.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys347)
		} // end switch yys347
	} // end for yyj347
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj353 int
	var yyb353 bool
	var yyhl353 bool = l >= 0
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv356 := &x.ObjectMeta
		yyv356.CodecDecodeSelf(d)
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv357 := &x.Spec
		yyv357.CodecDecodeSelf(d)
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv358 := &x.Status
		yyv358.CodecDecodeSelf(d)
	}
	for {
		yyj353++
		if yyhl353 {
			yyb353 = yyj353 > l
		} else {
			yyb353 = r.CheckBreak()
		}
		if yyb353 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj353-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym359 := z.EncBinary()
		_ = yym359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep360 := !z.EncBinary()
			yy2arr360 := z.EncBasicHandle().StructToArray
			var yyq360 [21]bool
			_, _, _ = yysep360, yyq360, yy2arr360
			const yyr360 bool = false
			yyq360[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq360[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq360[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq360[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq360[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq360[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq360[7] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq360[8] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq360[9] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq360[10] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq360[11] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq360[12] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq360[13] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq360[14] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq360[15] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq360[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq360[17] = x.PersistentVolumeSource.CinderLocal != nil && x.CinderLocal != nil
			yyq360[18] = len(x.AccessModes) != 0
			yyq360[19] = x.ClaimRef != nil
			yyq360[20] = x.PersistentVolumeReclaimPolicy != ""
			var yynn360 int
			if yyr360 || yy2arr360 {
				r.EncodeArrayStart(21)
			} else {
				yynn360 = 1
				for _, b := range yyq360 {
					if b {
						yynn360++
					}
				}
				r.EncodeMapStart(yynn360)
				yynn360 = 0
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn362 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn362 = true
				goto LABEL362
			}
		LABEL362:
			if yyr360 || yy2arr360 {
				if yyn362 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn362 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn363 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn363 = true
				goto LABEL363
			}
		LABEL363:
			if yyr360 || yy2arr360 {
				if yyn363 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn363 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn364 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn364 = true
				goto LABEL364
			}
		LABEL364:
			if yyr360 || yy2arr360 {
				if yyn364 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn364 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn365 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn365 = true
				goto LABEL365
			}
		LABEL365:
			if yyr360 || yy2arr360 {
				if yyn365 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn365 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn366 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn366 = true
				goto LABEL366
			}
		LABEL366:
			if yyr360 || yy2arr360 {
				if yyn366 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn366 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn367 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn367 = true
				goto LABEL367
			}
		LABEL367:
			if yyr360 || yy2arr360 {
				if yyn367 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn367 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn368 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn368 = true
				goto LABEL368
			}
		LABEL368:
			if yyr360 || yy2arr360 {
				if yyn368 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[7] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn368 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn369 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn369 = true
				goto LABEL369
			}
		LABEL369:
			if yyr360 || yy2arr360 {
				if yyn369 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn369 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn370 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn370 = true
				goto LABEL370
			}
		LABEL370:
			if yyr360 || yy2arr360 {
				if yyn370 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[9] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn370 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn371 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn371 = true
				goto LABEL371
			}
		LABEL371:
			if yyr360 || yy2arr360 {
				if yyn371 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[10] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn371 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn372 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn372 = true
				goto LABEL372
			}
		LABEL372:
			if yyr360 || yy2arr360 {
				if yyn372 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[11] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn372 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn373 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn373 = true
				goto LABEL373
			}
		LABEL373:
			if yyr360 || yy2arr360 {
				if yyn373 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[12] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn373 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn374 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn374 = true
				goto LABEL374
			}
		LABEL374:
			if yyr360 || yy2arr360 {
				if yyn374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[13] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn374 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn375 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn375 = true
				goto LABEL375
			}
		LABEL375:
			if yyr360 || yy2arr360 {
				if yyn375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[14] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn375 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn376 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn376 = true
				goto LABEL376
			}
		LABEL376:
			if yyr360 || yy2arr360 {
				if yyn376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[15] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn376 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn377 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn377 = true
				goto LABEL377
			}
		LABEL377:
			if yyr360 || yy2arr360 {
				if yyn377 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn377 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn378 bool
			if x.PersistentVolumeSource.CinderLocal == nil {
				yyn378 = true
				goto LABEL378
			}
		LABEL378:
			if yyr360 || yy2arr360 {
				if yyn378 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[17] {
						if x.CinderLocal == nil {
							r.EncodeNil()
						} else {
							x.CinderLocal.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinderLocal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn378 {
						r.EncodeNil()
					} else {
						if x.CinderLocal == nil {
							r.EncodeNil()
						} else {
							x.CinderLocal.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[18] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym380 := z.EncBinary()
						_ = yym380
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym381 := z.EncBinary()
						_ = yym381
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[19] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[20] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym384 := z.DecBinary()
	_ = yym384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct385 := r.ContainerType()
		if yyct385 == codecSelferValueTypeMap1234 {
			yyl385 := r.ReadMapStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl385, d)
			}
		} else if yyct385 == codecSelferValueTypeArray1234 {
			yyl385 := r.ReadArrayStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys386Slc
	var yyhl386 bool = l >= 0
	for yyj386 := 0; ; yyj386++ {
		if yyhl386 {
			if yyj386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys386Slc = r.DecodeBytes(yys386Slc, true, true)
		yys386 := string(yys386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys386 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv387 := &x.Capacity
				yyv387.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "cinderLocal":
			if x.PersistentVolumeSource.CinderLocal == nil {
				x.PersistentVolumeSource.CinderLocal = new(CinderLocalVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CinderLocal != nil {
					x.CinderLocal = nil
				}
			} else {
				if x.CinderLocal == nil {
					x.CinderLocal = new(CinderLocalVolumeSource)
				}
				x.CinderLocal.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv405 := &x.AccessModes
				yym406 := z.DecBinary()
				_ = yym406
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv405), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys386)
		} // end switch yys386
	} // end for yyj386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj409 int
	var yyb409 bool
	var yyhl409 bool = l >= 0
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv410 := &x.Capacity
		yyv410.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CinderLocal == nil {
		x.PersistentVolumeSource.CinderLocal = new(CinderLocalVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CinderLocal != nil {
			x.CinderLocal = nil
		}
	} else {
		if x.CinderLocal == nil {
			x.CinderLocal = new(CinderLocalVolumeSource)
		}
		x.CinderLocal.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv428 := &x.AccessModes
		yym429 := z.DecBinary()
		_ = yym429
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv428), d)
		}
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj409++
		if yyhl409 {
			yyb409 = yyj409 > l
		} else {
			yyb409 = r.CheckBreak()
		}
		if yyb409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym432 := z.EncBinary()
	_ = yym432
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym433 := z.DecBinary()
	_ = yym433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym434 := z.EncBinary()
		_ = yym434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep435 := !z.EncBinary()
			yy2arr435 := z.EncBasicHandle().StructToArray
			var yyq435 [3]bool
			_, _, _ = yysep435, yyq435, yy2arr435
			const yyr435 bool = false
			yyq435[0] = x.Phase != ""
			yyq435[1] = x.Message != ""
			yyq435[2] = x.Reason != ""
			var yynn435 int
			if yyr435 || yy2arr435 {
				r.EncodeArrayStart(3)
			} else {
				yynn435 = 0
				for _, b := range yyq435 {
					if b {
						yynn435++
					}
				}
				r.EncodeMapStart(yynn435)
				yynn435 = 0
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[1] {
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[2] {
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym442 := z.EncBinary()
					_ = yym442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym443 := z.DecBinary()
	_ = yym443
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct444 := r.ContainerType()
		if yyct444 == codecSelferValueTypeMap1234 {
			yyl444 := r.ReadMapStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl444, d)
			}
		} else if yyct444 == codecSelferValueTypeArray1234 {
			yyl444 := r.ReadArrayStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl444, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys445Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys445Slc
	var yyhl445 bool = l >= 0
	for yyj445 := 0; ; yyj445++ {
		if yyhl445 {
			if yyj445 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys445Slc = r.DecodeBytes(yys445Slc, true, true)
		yys445 := string(yys445Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys445 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys445)
		} // end switch yys445
	} // end for yyj445
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj449 int
	var yyb449 bool
	var yyhl449 bool = l >= 0
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj449++
		if yyhl449 {
			yyb449 = yyj449 > l
		} else {
			yyb449 = r.CheckBreak()
		}
		if yyb449 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj449-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym453 := z.EncBinary()
		_ = yym453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep454 := !z.EncBinary()
			yy2arr454 := z.EncBasicHandle().StructToArray
			var yyq454 [4]bool
			_, _, _ = yysep454, yyq454, yy2arr454
			const yyr454 bool = false
			yyq454[0] = x.Kind != ""
			yyq454[1] = x.APIVersion != ""
			yyq454[2] = true
			var yynn454 int
			if yyr454 || yy2arr454 {
				r.EncodeArrayStart(4)
			} else {
				yynn454 = 1
				for _, b := range yyq454 {
					if b {
						yynn454++
					}
				}
				r.EncodeMapStart(yynn454)
				yynn454 = 0
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[0] {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq454[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym457 := z.EncBinary()
					_ = yym457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[1] {
					yym459 := z.EncBinary()
					_ = yym459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq454[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[2] {
					yy462 := &x.ListMeta
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else if z.HasExtensions() && z.EncExt(yy462) {
					} else {
						z.EncFallback(yy462)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq454[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy464 := &x.ListMeta
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else if z.HasExtensions() && z.EncExt(yy464) {
					} else {
						z.EncFallback(yy464)
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym469 := z.DecBinary()
	_ = yym469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct470 := r.ContainerType()
		if yyct470 == codecSelferValueTypeMap1234 {
			yyl470 := r.ReadMapStart()
			if yyl470 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl470, d)
			}
		} else if yyct470 == codecSelferValueTypeArray1234 {
			yyl470 := r.ReadArrayStart()
			if yyl470 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys471Slc
	var yyhl471 bool = l >= 0
	for yyj471 := 0; ; yyj471++ {
		if yyhl471 {
			if yyj471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys471Slc = r.DecodeBytes(yys471Slc, true, true)
		yys471 := string(yys471Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys471 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv474 := &x.ListMeta
				yym475 := z.DecBinary()
				_ = yym475
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv474) {
				} else {
					z.DecFallback(yyv474, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv476 := &x.Items
				yym477 := z.DecBinary()
				_ = yym477
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv476), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys471)
		} // end switch yys471
	} // end for yyj471
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj478 int
	var yyb478 bool
	var yyhl478 bool = l >= 0
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv481 := &x.ListMeta
		yym482 := z.DecBinary()
		_ = yym482
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv481) {
		} else {
			z.DecFallback(yyv481, false)
		}
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv483 := &x.Items
		yym484 := z.DecBinary()
		_ = yym484
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv483), d)
		}
	}
	for {
		yyj478++
		if yyhl478 {
			yyb478 = yyj478 > l
		} else {
			yyb478 = r.CheckBreak()
		}
		if yyb478 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj478-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym485 := z.EncBinary()
		_ = yym485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep486 := !z.EncBinary()
			yy2arr486 := z.EncBasicHandle().StructToArray
			var yyq486 [5]bool
			_, _, _ = yysep486, yyq486, yy2arr486
			const yyr486 bool = false
			yyq486[0] = x.Kind != ""
			yyq486[1] = x.APIVersion != ""
			yyq486[2] = true
			yyq486[3] = true
			yyq486[4] = true
			var yynn486 int
			if yyr486 || yy2arr486 {
				r.EncodeArrayStart(5)
			} else {
				yynn486 = 0
				for _, b := range yyq486 {
					if b {
						yynn486++
					}
				}
				r.EncodeMapStart(yynn486)
				yynn486 = 0
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[0] {
					yym488 := z.EncBinary()
					_ = yym488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq486[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[1] {
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq486[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[2] {
					yy494 := &x.ObjectMeta
					yy494.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy495 := &x.ObjectMeta
					yy495.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[3] {
					yy497 := &x.Spec
					yy497.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy498 := &x.Spec
					yy498.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[4] {
					yy500 := &x.Status
					yy500.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy501 := &x.Status
					yy501.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym502 := z.DecBinary()
	_ = yym502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct503 := r.ContainerType()
		if yyct503 == codecSelferValueTypeMap1234 {
			yyl503 := r.ReadMapStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl503, d)
			}
		} else if yyct503 == codecSelferValueTypeArray1234 {
			yyl503 := r.ReadArrayStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl503, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys504Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys504Slc
	var yyhl504 bool = l >= 0
	for yyj504 := 0; ; yyj504++ {
		if yyhl504 {
			if yyj504 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys504Slc = r.DecodeBytes(yys504Slc, true, true)
		yys504 := string(yys504Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys504 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv507 := &x.ObjectMeta
				yyv507.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv508 := &x.Spec
				yyv508.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv509 := &x.Status
				yyv509.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys504)
		} // end switch yys504
	} // end for yyj504
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj510 int
	var yyb510 bool
	var yyhl510 bool = l >= 0
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv513 := &x.ObjectMeta
		yyv513.CodecDecodeSelf(d)
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv514 := &x.Spec
		yyv514.CodecDecodeSelf(d)
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv515 := &x.Status
		yyv515.CodecDecodeSelf(d)
	}
	for {
		yyj510++
		if yyhl510 {
			yyb510 = yyj510 > l
		} else {
			yyb510 = r.CheckBreak()
		}
		if yyb510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym516 := z.EncBinary()
		_ = yym516
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep517 := !z.EncBinary()
			yy2arr517 := z.EncBasicHandle().StructToArray
			var yyq517 [4]bool
			_, _, _ = yysep517, yyq517, yy2arr517
			const yyr517 bool = false
			yyq517[0] = x.Kind != ""
			yyq517[1] = x.APIVersion != ""
			yyq517[2] = true
			var yynn517 int
			if yyr517 || yy2arr517 {
				r.EncodeArrayStart(4)
			} else {
				yynn517 = 1
				for _, b := range yyq517 {
					if b {
						yynn517++
					}
				}
				r.EncodeMapStart(yynn517)
				yynn517 = 0
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[0] {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[1] {
					yym522 := z.EncBinary()
					_ = yym522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym523 := z.EncBinary()
					_ = yym523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[2] {
					yy525 := &x.ListMeta
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else if z.HasExtensions() && z.EncExt(yy525) {
					} else {
						z.EncFallback(yy525)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq517[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy527 := &x.ListMeta
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else if z.HasExtensions() && z.EncExt(yy527) {
					} else {
						z.EncFallback(yy527)
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct533 := r.ContainerType()
		if yyct533 == codecSelferValueTypeMap1234 {
			yyl533 := r.ReadMapStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl533, d)
			}
		} else if yyct533 == codecSelferValueTypeArray1234 {
			yyl533 := r.ReadArrayStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys534Slc
	var yyhl534 bool = l >= 0
	for yyj534 := 0; ; yyj534++ {
		if yyhl534 {
			if yyj534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys534Slc = r.DecodeBytes(yys534Slc, true, true)
		yys534 := string(yys534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys534 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv537 := &x.ListMeta
				yym538 := z.DecBinary()
				_ = yym538
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv537) {
				} else {
					z.DecFallback(yyv537, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv539 := &x.Items
				yym540 := z.DecBinary()
				_ = yym540
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv539), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys534)
		} // end switch yys534
	} // end for yyj534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj541 int
	var yyb541 bool
	var yyhl541 bool = l >= 0
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv544 := &x.ListMeta
		yym545 := z.DecBinary()
		_ = yym545
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv544) {
		} else {
			z.DecFallback(yyv544, false)
		}
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv546 := &x.Items
		yym547 := z.DecBinary()
		_ = yym547
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv546), d)
		}
	}
	for {
		yyj541++
		if yyhl541 {
			yyb541 = yyj541 > l
		} else {
			yyb541 = r.CheckBreak()
		}
		if yyb541 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj541-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym548 := z.EncBinary()
		_ = yym548
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep549 := !z.EncBinary()
			yy2arr549 := z.EncBasicHandle().StructToArray
			var yyq549 [4]bool
			_, _, _ = yysep549, yyq549, yy2arr549
			const yyr549 bool = false
			yyq549[0] = len(x.AccessModes) != 0
			yyq549[1] = x.Selector != nil
			yyq549[2] = true
			yyq549[3] = x.VolumeName != ""
			var yynn549 int
			if yyr549 || yy2arr549 {
				r.EncodeArrayStart(4)
			} else {
				yynn549 = 0
				for _, b := range yyq549 {
					if b {
						yynn549++
					}
				}
				r.EncodeMapStart(yynn549)
				yynn549 = 0
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym551 := z.EncBinary()
						_ = yym551
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym552 := z.EncBinary()
						_ = yym552
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym554 := z.EncBinary()
						_ = yym554
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym555 := z.EncBinary()
						_ = yym555
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[2] {
					yy557 := &x.Resources
					yy557.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy558 := &x.Resources
					yy558.CodecEncodeSelf(e)
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[3] {
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq549[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym562 := z.DecBinary()
	_ = yym562
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct563 := r.ContainerType()
		if yyct563 == codecSelferValueTypeMap1234 {
			yyl563 := r.ReadMapStart()
			if yyl563 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl563, d)
			}
		} else if yyct563 == codecSelferValueTypeArray1234 {
			yyl563 := r.ReadArrayStart()
			if yyl563 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl563, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys564Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys564Slc
	var yyhl564 bool = l >= 0
	for yyj564 := 0; ; yyj564++ {
		if yyhl564 {
			if yyj564 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys564Slc = r.DecodeBytes(yys564Slc, true, true)
		yys564 := string(yys564Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys564 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv565 := &x.AccessModes
				yym566 := z.DecBinary()
				_ = yym566
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv565), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym568 := z.DecBinary()
				_ = yym568
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv569 := &x.Resources
				yyv569.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys564)
		} // end switch yys564
	} // end for yyj564
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj571 int
	var yyb571 bool
	var yyhl571 bool = l >= 0
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv572 := &x.AccessModes
		yym573 := z.DecBinary()
		_ = yym573
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv572), d)
		}
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym575 := z.DecBinary()
		_ = yym575
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv576 := &x.Resources
		yyv576.CodecDecodeSelf(d)
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj571++
		if yyhl571 {
			yyb571 = yyj571 > l
		} else {
			yyb571 = r.CheckBreak()
		}
		if yyb571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym578 := z.EncBinary()
		_ = yym578
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep579 := !z.EncBinary()
			yy2arr579 := z.EncBasicHandle().StructToArray
			var yyq579 [3]bool
			_, _, _ = yysep579, yyq579, yy2arr579
			const yyr579 bool = false
			yyq579[0] = x.Phase != ""
			yyq579[1] = len(x.AccessModes) != 0
			yyq579[2] = len(x.Capacity) != 0
			var yynn579 int
			if yyr579 || yy2arr579 {
				r.EncodeArrayStart(3)
			} else {
				yynn579 = 0
				for _, b := range yyq579 {
					if b {
						yynn579++
					}
				}
				r.EncodeMapStart(yynn579)
				yynn579 = 0
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq579[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym582 := z.EncBinary()
						_ = yym582
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym583 := z.EncBinary()
						_ = yym583
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym585 := z.DecBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct586 := r.ContainerType()
		if yyct586 == codecSelferValueTypeMap1234 {
			yyl586 := r.ReadMapStart()
			if yyl586 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl586, d)
			}
		} else if yyct586 == codecSelferValueTypeArray1234 {
			yyl586 := r.ReadArrayStart()
			if yyl586 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl586, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys587Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys587Slc
	var yyhl587 bool = l >= 0
	for yyj587 := 0; ; yyj587++ {
		if yyhl587 {
			if yyj587 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys587Slc = r.DecodeBytes(yys587Slc, true, true)
		yys587 := string(yys587Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys587 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv589 := &x.AccessModes
				yym590 := z.DecBinary()
				_ = yym590
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv589), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv591 := &x.Capacity
				yyv591.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys587)
		} // end switch yys587
	} // end for yyj587
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj592 int
	var yyb592 bool
	var yyhl592 bool = l >= 0
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv594 := &x.AccessModes
		yym595 := z.DecBinary()
		_ = yym595
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv594), d)
		}
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv596 := &x.Capacity
		yyv596.CodecDecodeSelf(d)
	}
	for {
		yyj592++
		if yyhl592 {
			yyb592 = yyj592 > l
		} else {
			yyb592 = r.CheckBreak()
		}
		if yyb592 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj592-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym597 := z.EncBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym598 := z.DecBinary()
	_ = yym598
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym599 := z.EncBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym600 := z.DecBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym601 := z.EncBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym602 := z.DecBinary()
	_ = yym602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym603 := z.EncBinary()
		_ = yym603
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep604 := !z.EncBinary()
			yy2arr604 := z.EncBasicHandle().StructToArray
			var yyq604 [1]bool
			_, _, _ = yysep604, yyq604, yy2arr604
			const yyr604 bool = false
			var yynn604 int
			if yyr604 || yy2arr604 {
				r.EncodeArrayStart(1)
			} else {
				yynn604 = 1
				for _, b := range yyq604 {
					if b {
						yynn604++
					}
				}
				r.EncodeMapStart(yynn604)
				yynn604 = 0
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym606 := z.EncBinary()
				_ = yym606
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym607 := z.EncBinary()
				_ = yym607
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym608 := z.DecBinary()
	_ = yym608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct609 := r.ContainerType()
		if yyct609 == codecSelferValueTypeMap1234 {
			yyl609 := r.ReadMapStart()
			if yyl609 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl609, d)
			}
		} else if yyct609 == codecSelferValueTypeArray1234 {
			yyl609 := r.ReadArrayStart()
			if yyl609 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys610Slc
	var yyhl610 bool = l >= 0
	for yyj610 := 0; ; yyj610++ {
		if yyhl610 {
			if yyj610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys610Slc = r.DecodeBytes(yys610Slc, true, true)
		yys610 := string(yys610Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys610 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys610)
		} // end switch yys610
	} // end for yyj610
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj612 int
	var yyb612 bool
	var yyhl612 bool = l >= 0
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj612++
		if yyhl612 {
			yyb612 = yyj612 > l
		} else {
			yyb612 = r.CheckBreak()
		}
		if yyb612 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj612-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym614 := z.EncBinary()
		_ = yym614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep615 := !z.EncBinary()
			yy2arr615 := z.EncBasicHandle().StructToArray
			var yyq615 [1]bool
			_, _, _ = yysep615, yyq615, yy2arr615
			const yyr615 bool = false
			yyq615[0] = x.Medium != ""
			var yynn615 int
			if yyr615 || yy2arr615 {
				r.EncodeArrayStart(1)
			} else {
				yynn615 = 0
				for _, b := range yyq615 {
					if b {
						yynn615++
					}
				}
				r.EncodeMapStart(yynn615)
				yynn615 = 0
			}
			if yyr615 || yy2arr615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq615[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq615[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr615 || yy2arr615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym617 := z.DecBinary()
	_ = yym617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct618 := r.ContainerType()
		if yyct618 == codecSelferValueTypeMap1234 {
			yyl618 := r.ReadMapStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl618, d)
			}
		} else if yyct618 == codecSelferValueTypeArray1234 {
			yyl618 := r.ReadArrayStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys619Slc
	var yyhl619 bool = l >= 0
	for yyj619 := 0; ; yyj619++ {
		if yyhl619 {
			if yyj619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys619Slc = r.DecodeBytes(yys619Slc, true, true)
		yys619 := string(yys619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys619 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys619)
		} // end switch yys619
	} // end for yyj619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj621 int
	var yyb621 bool
	var yyhl621 bool = l >= 0
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj621++
		if yyhl621 {
			yyb621 = yyj621 > l
		} else {
			yyb621 = r.CheckBreak()
		}
		if yyb621 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj621-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym623 := z.EncBinary()
	_ = yym623
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym625 := z.EncBinary()
	_ = yym625
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym626 := z.DecBinary()
	_ = yym626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym627 := z.EncBinary()
		_ = yym627
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep628 := !z.EncBinary()
			yy2arr628 := z.EncBasicHandle().StructToArray
			var yyq628 [4]bool
			_, _, _ = yysep628, yyq628, yy2arr628
			const yyr628 bool = false
			yyq628[1] = x.FSType != ""
			yyq628[2] = x.Partition != 0
			yyq628[3] = x.ReadOnly != false
			var yynn628 int
			if yyr628 || yy2arr628 {
				r.EncodeArrayStart(4)
			} else {
				yynn628 = 1
				for _, b := range yyq628 {
					if b {
						yynn628++
					}
				}
				r.EncodeMapStart(yynn628)
				yynn628 = 0
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym630 := z.EncBinary()
				_ = yym630
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym631 := z.EncBinary()
				_ = yym631
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq628[1] {
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq628[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym634 := z.EncBinary()
					_ = yym634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq628[2] {
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq628[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym637 := z.EncBinary()
					_ = yym637
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq628[3] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq628[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym641 := z.DecBinary()
	_ = yym641
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct642 := r.ContainerType()
		if yyct642 == codecSelferValueTypeMap1234 {
			yyl642 := r.ReadMapStart()
			if yyl642 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl642, d)
			}
		} else if yyct642 == codecSelferValueTypeArray1234 {
			yyl642 := r.ReadArrayStart()
			if yyl642 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl642, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys643Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys643Slc
	var yyhl643 bool = l >= 0
	for yyj643 := 0; ; yyj643++ {
		if yyhl643 {
			if yyj643 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys643Slc = r.DecodeBytes(yys643Slc, true, true)
		yys643 := string(yys643Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys643 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys643)
		} // end switch yys643
	} // end for yyj643
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj648 int
	var yyb648 bool
	var yyhl648 bool = l >= 0
	yyj648++
	if yyhl648 {
		yyb648 = yyj648 > l
	} else {
		yyb648 = r.CheckBreak()
	}
	if yyb648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj648++
	if yyhl648 {
		yyb648 = yyj648 > l
	} else {
		yyb648 = r.CheckBreak()
	}
	if yyb648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj648++
	if yyhl648 {
		yyb648 = yyj648 > l
	} else {
		yyb648 = r.CheckBreak()
	}
	if yyb648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj648++
	if yyhl648 {
		yyb648 = yyj648 > l
	} else {
		yyb648 = r.CheckBreak()
	}
	if yyb648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj648++
		if yyhl648 {
			yyb648 = yyj648 > l
		} else {
			yyb648 = r.CheckBreak()
		}
		if yyb648 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj648-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym653 := z.EncBinary()
		_ = yym653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep654 := !z.EncBinary()
			yy2arr654 := z.EncBasicHandle().StructToArray
			var yyq654 [6]bool
			_, _, _ = yysep654, yyq654, yy2arr654
			const yyr654 bool = false
			yyq654[0] = x.TargetPortal != ""
			yyq654[1] = x.IQN != ""
			yyq654[2] = x.Lun != 0
			yyq654[3] = x.ISCSIInterface != ""
			yyq654[4] = x.FSType != ""
			yyq654[5] = x.ReadOnly != false
			var yynn654 int
			if yyr654 || yy2arr654 {
				r.EncodeArrayStart(6)
			} else {
				yynn654 = 0
				for _, b := range yyq654 {
					if b {
						yynn654++
					}
				}
				r.EncodeMapStart(yynn654)
				yynn654 = 0
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[0] {
					yym656 := z.EncBinary()
					_ = yym656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq654[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[1] {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq654[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[2] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq654[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[3] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq654[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[4] {
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq654[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[5] {
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq654[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym673 := z.DecBinary()
	_ = yym673
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct674 := r.ContainerType()
		if yyct674 == codecSelferValueTypeMap1234 {
			yyl674 := r.ReadMapStart()
			if yyl674 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl674, d)
			}
		} else if yyct674 == codecSelferValueTypeArray1234 {
			yyl674 := r.ReadArrayStart()
			if yyl674 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl674, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys675Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys675Slc
	var yyhl675 bool = l >= 0
	for yyj675 := 0; ; yyj675++ {
		if yyhl675 {
			if yyj675 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys675Slc = r.DecodeBytes(yys675Slc, true, true)
		yys675 := string(yys675Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys675 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys675)
		} // end switch yys675
	} // end for yyj675
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj682 int
	var yyb682 bool
	var yyhl682 bool = l >= 0
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj682++
		if yyhl682 {
			yyb682 = yyj682 > l
		} else {
			yyb682 = r.CheckBreak()
		}
		if yyb682 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj682-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym689 := z.EncBinary()
		_ = yym689
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep690 := !z.EncBinary()
			yy2arr690 := z.EncBasicHandle().StructToArray
			var yyq690 [4]bool
			_, _, _ = yysep690, yyq690, yy2arr690
			const yyr690 bool = false
			yyq690[2] = x.FSType != ""
			yyq690[3] = x.ReadOnly != false
			var yynn690 int
			if yyr690 || yy2arr690 {
				r.EncodeArrayStart(4)
			} else {
				yynn690 = 2
				for _, b := range yyq690 {
					if b {
						yynn690++
					}
				}
				r.EncodeMapStart(yynn690)
				yynn690 = 0
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy695 := *x.Lun
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeInt(int64(yy695))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy697 := *x.Lun
					yym698 := z.EncBinary()
					_ = yym698
					if false {
					} else {
						r.EncodeInt(int64(yy697))
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq690[2] {
					yym700 := z.EncBinary()
					_ = yym700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq690[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq690[3] {
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq690[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym705 := z.DecBinary()
	_ = yym705
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct706 := r.ContainerType()
		if yyct706 == codecSelferValueTypeMap1234 {
			yyl706 := r.ReadMapStart()
			if yyl706 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl706, d)
			}
		} else if yyct706 == codecSelferValueTypeArray1234 {
			yyl706 := r.ReadArrayStart()
			if yyl706 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl706, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys707Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys707Slc
	var yyhl707 bool = l >= 0
	for yyj707 := 0; ; yyj707++ {
		if yyhl707 {
			if yyj707 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys707Slc = r.DecodeBytes(yys707Slc, true, true)
		yys707 := string(yys707Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys707 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv708 := &x.TargetWWNs
				yym709 := z.DecBinary()
				_ = yym709
				if false {
				} else {
					z.F.DecSliceStringX(yyv708, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym711 := z.DecBinary()
				_ = yym711
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys707)
		} // end switch yys707
	} // end for yyj707
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj714 int
	var yyb714 bool
	var yyhl714 bool = l >= 0
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv715 := &x.TargetWWNs
		yym716 := z.DecBinary()
		_ = yym716
		if false {
		} else {
			z.F.DecSliceStringX(yyv715, false, d)
		}
	}
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym718 := z.DecBinary()
		_ = yym718
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj714++
		if yyhl714 {
			yyb714 = yyj714 > l
		} else {
			yyb714 = r.CheckBreak()
		}
		if yyb714 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj714-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyq722 [5]bool
			_, _, _ = yysep722, yyq722, yy2arr722
			const yyr722 bool = false
			yyq722[1] = x.FSType != ""
			yyq722[2] = x.SecretRef != nil
			yyq722[3] = x.ReadOnly != false
			yyq722[4] = len(x.Options) != 0
			var yynn722 int
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(5)
			} else {
				yynn722 = 1
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
				yynn722 = 0
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[1] {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq722[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq722[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[3] {
					yym731 := z.EncBinary()
					_ = yym731
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq722[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym732 := z.EncBinary()
					_ = yym732
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym734 := z.EncBinary()
						_ = yym734
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq722[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym735 := z.EncBinary()
						_ = yym735
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym736 := z.DecBinary()
	_ = yym736
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct737 := r.ContainerType()
		if yyct737 == codecSelferValueTypeMap1234 {
			yyl737 := r.ReadMapStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl737, d)
			}
		} else if yyct737 == codecSelferValueTypeArray1234 {
			yyl737 := r.ReadArrayStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl737, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys738Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys738Slc
	var yyhl738 bool = l >= 0
	for yyj738 := 0; ; yyj738++ {
		if yyhl738 {
			if yyj738 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys738Slc = r.DecodeBytes(yys738Slc, true, true)
		yys738 := string(yys738Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys738 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv743 := &x.Options
				yym744 := z.DecBinary()
				_ = yym744
				if false {
				} else {
					z.F.DecMapStringStringX(yyv743, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys738)
		} // end switch yys738
	} // end for yyj738
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj745 int
	var yyb745 bool
	var yyhl745 bool = l >= 0
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv750 := &x.Options
		yym751 := z.DecBinary()
		_ = yym751
		if false {
		} else {
			z.F.DecMapStringStringX(yyv750, false, d)
		}
	}
	for {
		yyj745++
		if yyhl745 {
			yyb745 = yyj745 > l
		} else {
			yyb745 = r.CheckBreak()
		}
		if yyb745 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj745-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym752 := z.EncBinary()
		_ = yym752
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep753 := !z.EncBinary()
			yy2arr753 := z.EncBasicHandle().StructToArray
			var yyq753 [4]bool
			_, _, _ = yysep753, yyq753, yy2arr753
			const yyr753 bool = false
			yyq753[1] = x.FSType != ""
			yyq753[2] = x.Partition != 0
			yyq753[3] = x.ReadOnly != false
			var yynn753 int
			if yyr753 || yy2arr753 {
				r.EncodeArrayStart(4)
			} else {
				yynn753 = 1
				for _, b := range yyq753 {
					if b {
						yynn753++
					}
				}
				r.EncodeMapStart(yynn753)
				yynn753 = 0
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym755 := z.EncBinary()
				_ = yym755
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq753[1] {
					yym758 := z.EncBinary()
					_ = yym758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq753[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym759 := z.EncBinary()
					_ = yym759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq753[2] {
					yym761 := z.EncBinary()
					_ = yym761
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq753[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym762 := z.EncBinary()
					_ = yym762
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq753[3] {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq753[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym766 := z.DecBinary()
	_ = yym766
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct767 := r.ContainerType()
		if yyct767 == codecSelferValueTypeMap1234 {
			yyl767 := r.ReadMapStart()
			if yyl767 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl767, d)
			}
		} else if yyct767 == codecSelferValueTypeArray1234 {
			yyl767 := r.ReadArrayStart()
			if yyl767 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl767, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys768Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys768Slc
	var yyhl768 bool = l >= 0
	for yyj768 := 0; ; yyj768++ {
		if yyhl768 {
			if yyj768 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys768Slc = r.DecodeBytes(yys768Slc, true, true)
		yys768 := string(yys768Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys768 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys768)
		} // end switch yys768
	} // end for yyj768
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj773 int
	var yyb773 bool
	var yyhl773 bool = l >= 0
	yyj773++
	if yyhl773 {
		yyb773 = yyj773 > l
	} else {
		yyb773 = r.CheckBreak()
	}
	if yyb773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj773++
	if yyhl773 {
		yyb773 = yyj773 > l
	} else {
		yyb773 = r.CheckBreak()
	}
	if yyb773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj773++
	if yyhl773 {
		yyb773 = yyj773 > l
	} else {
		yyb773 = r.CheckBreak()
	}
	if yyb773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj773++
	if yyhl773 {
		yyb773 = yyj773 > l
	} else {
		yyb773 = r.CheckBreak()
	}
	if yyb773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj773++
		if yyhl773 {
			yyb773 = yyj773 > l
		} else {
			yyb773 = r.CheckBreak()
		}
		if yyb773 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj773-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym778 := z.EncBinary()
		_ = yym778
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep779 := !z.EncBinary()
			yy2arr779 := z.EncBasicHandle().StructToArray
			var yyq779 [3]bool
			_, _, _ = yysep779, yyq779, yy2arr779
			const yyr779 bool = false
			yyq779[1] = x.Revision != ""
			yyq779[2] = x.Directory != ""
			var yynn779 int
			if yyr779 || yy2arr779 {
				r.EncodeArrayStart(3)
			} else {
				yynn779 = 1
				for _, b := range yyq779 {
					if b {
						yynn779++
					}
				}
				r.EncodeMapStart(yynn779)
				yynn779 = 0
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym781 := z.EncBinary()
				_ = yym781
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym782 := z.EncBinary()
				_ = yym782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq779[1] {
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq779[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq779[2] {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq779[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym789 := z.DecBinary()
	_ = yym789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct790 := r.ContainerType()
		if yyct790 == codecSelferValueTypeMap1234 {
			yyl790 := r.ReadMapStart()
			if yyl790 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl790, d)
			}
		} else if yyct790 == codecSelferValueTypeArray1234 {
			yyl790 := r.ReadArrayStart()
			if yyl790 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys791Slc
	var yyhl791 bool = l >= 0
	for yyj791 := 0; ; yyj791++ {
		if yyhl791 {
			if yyj791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys791Slc = r.DecodeBytes(yys791Slc, true, true)
		yys791 := string(yys791Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys791 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys791)
		} // end switch yys791
	} // end for yyj791
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj795 int
	var yyb795 bool
	var yyhl795 bool = l >= 0
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj795++
		if yyhl795 {
			yyb795 = yyj795 > l
		} else {
			yyb795 = r.CheckBreak()
		}
		if yyb795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym799 := z.EncBinary()
		_ = yym799
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep800 := !z.EncBinary()
			yy2arr800 := z.EncBasicHandle().StructToArray
			var yyq800 [3]bool
			_, _, _ = yysep800, yyq800, yy2arr800
			const yyr800 bool = false
			yyq800[0] = x.SecretName != ""
			yyq800[1] = len(x.Items) != 0
			yyq800[2] = x.DefaultMode != nil
			var yynn800 int
			if yyr800 || yy2arr800 {
				r.EncodeArrayStart(3)
			} else {
				yynn800 = 0
				for _, b := range yyq800 {
					if b {
						yynn800++
					}
				}
				r.EncodeMapStart(yynn800)
				yynn800 = 0
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[0] {
					yym802 := z.EncBinary()
					_ = yym802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq800[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym805 := z.EncBinary()
						_ = yym805
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq800[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym806 := z.EncBinary()
						_ = yym806
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy808 := *x.DefaultMode
						yym809 := z.EncBinary()
						_ = yym809
						if false {
						} else {
							r.EncodeInt(int64(yy808))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq800[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy810 := *x.DefaultMode
						yym811 := z.EncBinary()
						_ = yym811
						if false {
						} else {
							r.EncodeInt(int64(yy810))
						}
					}
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym812 := z.DecBinary()
	_ = yym812
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct813 := r.ContainerType()
		if yyct813 == codecSelferValueTypeMap1234 {
			yyl813 := r.ReadMapStart()
			if yyl813 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl813, d)
			}
		} else if yyct813 == codecSelferValueTypeArray1234 {
			yyl813 := r.ReadArrayStart()
			if yyl813 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl813, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys814Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys814Slc
	var yyhl814 bool = l >= 0
	for yyj814 := 0; ; yyj814++ {
		if yyhl814 {
			if yyj814 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys814Slc = r.DecodeBytes(yys814Slc, true, true)
		yys814 := string(yys814Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys814 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv816 := &x.Items
				yym817 := z.DecBinary()
				_ = yym817
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv816), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym819 := z.DecBinary()
				_ = yym819
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys814)
		} // end switch yys814
	} // end for yyj814
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj820 int
	var yyb820 bool
	var yyhl820 bool = l >= 0
	yyj820++
	if yyhl820 {
		yyb820 = yyj820 > l
	} else {
		yyb820 = r.CheckBreak()
	}
	if yyb820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj820++
	if yyhl820 {
		yyb820 = yyj820 > l
	} else {
		yyb820 = r.CheckBreak()
	}
	if yyb820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv822 := &x.Items
		yym823 := z.DecBinary()
		_ = yym823
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv822), d)
		}
	}
	yyj820++
	if yyhl820 {
		yyb820 = yyj820 > l
	} else {
		yyb820 = r.CheckBreak()
	}
	if yyb820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym825 := z.DecBinary()
		_ = yym825
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj820++
		if yyhl820 {
			yyb820 = yyj820 > l
		} else {
			yyb820 = r.CheckBreak()
		}
		if yyb820 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj820-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym826 := z.EncBinary()
		_ = yym826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep827 := !z.EncBinary()
			yy2arr827 := z.EncBasicHandle().StructToArray
			var yyq827 [3]bool
			_, _, _ = yysep827, yyq827, yy2arr827
			const yyr827 bool = false
			yyq827[2] = x.ReadOnly != false
			var yynn827 int
			if yyr827 || yy2arr827 {
				r.EncodeArrayStart(3)
			} else {
				yynn827 = 2
				for _, b := range yyq827 {
					if b {
						yynn827++
					}
				}
				r.EncodeMapStart(yynn827)
				yynn827 = 0
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym829 := z.EncBinary()
				_ = yym829
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym830 := z.EncBinary()
				_ = yym830
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym832 := z.EncBinary()
				_ = yym832
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym833 := z.EncBinary()
				_ = yym833
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[2] {
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq827[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym837 := z.DecBinary()
	_ = yym837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct838 := r.ContainerType()
		if yyct838 == codecSelferValueTypeMap1234 {
			yyl838 := r.ReadMapStart()
			if yyl838 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl838, d)
			}
		} else if yyct838 == codecSelferValueTypeArray1234 {
			yyl838 := r.ReadArrayStart()
			if yyl838 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl838, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys839Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys839Slc
	var yyhl839 bool = l >= 0
	for yyj839 := 0; ; yyj839++ {
		if yyhl839 {
			if yyj839 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys839Slc = r.DecodeBytes(yys839Slc, true, true)
		yys839 := string(yys839Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys839 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys839)
		} // end switch yys839
	} // end for yyj839
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj843 int
	var yyb843 bool
	var yyhl843 bool = l >= 0
	yyj843++
	if yyhl843 {
		yyb843 = yyj843 > l
	} else {
		yyb843 = r.CheckBreak()
	}
	if yyb843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj843++
	if yyhl843 {
		yyb843 = yyj843 > l
	} else {
		yyb843 = r.CheckBreak()
	}
	if yyb843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj843++
	if yyhl843 {
		yyb843 = yyj843 > l
	} else {
		yyb843 = r.CheckBreak()
	}
	if yyb843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj843++
		if yyhl843 {
			yyb843 = yyj843 > l
		} else {
			yyb843 = r.CheckBreak()
		}
		if yyb843 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj843-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym847 := z.EncBinary()
		_ = yym847
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep848 := !z.EncBinary()
			yy2arr848 := z.EncBasicHandle().StructToArray
			var yyq848 [5]bool
			_, _, _ = yysep848, yyq848, yy2arr848
			const yyr848 bool = false
			yyq848[2] = x.ReadOnly != false
			yyq848[3] = x.User != ""
			yyq848[4] = x.Group != ""
			var yynn848 int
			if yyr848 || yy2arr848 {
				r.EncodeArrayStart(5)
			} else {
				yynn848 = 2
				for _, b := range yyq848 {
					if b {
						yynn848++
					}
				}
				r.EncodeMapStart(yynn848)
				yynn848 = 0
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym850 := z.EncBinary()
				_ = yym850
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym851 := z.EncBinary()
				_ = yym851
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym853 := z.EncBinary()
				_ = yym853
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq848[2] {
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq848[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq848[3] {
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq848[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym860 := z.EncBinary()
					_ = yym860
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq848[4] {
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq848[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym864 := z.DecBinary()
	_ = yym864
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct865 := r.ContainerType()
		if yyct865 == codecSelferValueTypeMap1234 {
			yyl865 := r.ReadMapStart()
			if yyl865 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl865, d)
			}
		} else if yyct865 == codecSelferValueTypeArray1234 {
			yyl865 := r.ReadArrayStart()
			if yyl865 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl865, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys866Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys866Slc
	var yyhl866 bool = l >= 0
	for yyj866 := 0; ; yyj866++ {
		if yyhl866 {
			if yyj866 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys866Slc = r.DecodeBytes(yys866Slc, true, true)
		yys866 := string(yys866Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys866 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys866)
		} // end switch yys866
	} // end for yyj866
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj872 int
	var yyb872 bool
	var yyhl872 bool = l >= 0
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj872++
		if yyhl872 {
			yyb872 = yyj872 > l
		} else {
			yyb872 = r.CheckBreak()
		}
		if yyb872 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj872-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym878 := z.EncBinary()
		_ = yym878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep879 := !z.EncBinary()
			yy2arr879 := z.EncBasicHandle().StructToArray
			var yyq879 [3]bool
			_, _, _ = yysep879, yyq879, yy2arr879
			const yyr879 bool = false
			yyq879[2] = x.ReadOnly != false
			var yynn879 int
			if yyr879 || yy2arr879 {
				r.EncodeArrayStart(3)
			} else {
				yynn879 = 2
				for _, b := range yyq879 {
					if b {
						yynn879++
					}
				}
				r.EncodeMapStart(yynn879)
				yynn879 = 0
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym881 := z.EncBinary()
				_ = yym881
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym882 := z.EncBinary()
				_ = yym882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym884 := z.EncBinary()
				_ = yym884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym885 := z.EncBinary()
				_ = yym885
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq879[2] {
					yym887 := z.EncBinary()
					_ = yym887
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq879[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym889 := z.DecBinary()
	_ = yym889
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct890 := r.ContainerType()
		if yyct890 == codecSelferValueTypeMap1234 {
			yyl890 := r.ReadMapStart()
			if yyl890 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl890, d)
			}
		} else if yyct890 == codecSelferValueTypeArray1234 {
			yyl890 := r.ReadArrayStart()
			if yyl890 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl890, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys891Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys891Slc
	var yyhl891 bool = l >= 0
	for yyj891 := 0; ; yyj891++ {
		if yyhl891 {
			if yyj891 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys891Slc = r.DecodeBytes(yys891Slc, true, true)
		yys891 := string(yys891Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys891 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys891)
		} // end switch yys891
	} // end for yyj891
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj895 int
	var yyb895 bool
	var yyhl895 bool = l >= 0
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj895++
		if yyhl895 {
			yyb895 = yyj895 > l
		} else {
			yyb895 = r.CheckBreak()
		}
		if yyb895 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj895-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym899 := z.EncBinary()
		_ = yym899
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep900 := !z.EncBinary()
			yy2arr900 := z.EncBasicHandle().StructToArray
			var yyq900 [8]bool
			_, _, _ = yysep900, yyq900, yy2arr900
			const yyr900 bool = false
			yyq900[2] = x.FSType != ""
			yyq900[3] = x.RBDPool != ""
			yyq900[4] = x.RadosUser != ""
			yyq900[5] = x.Keyring != ""
			yyq900[6] = x.SecretRef != nil
			yyq900[7] = x.ReadOnly != false
			var yynn900 int
			if yyr900 || yy2arr900 {
				r.EncodeArrayStart(8)
			} else {
				yynn900 = 2
				for _, b := range yyq900 {
					if b {
						yynn900++
					}
				}
				r.EncodeMapStart(yynn900)
				yynn900 = 0
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym903 := z.EncBinary()
					_ = yym903
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym905 := z.EncBinary()
				_ = yym905
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym906 := z.EncBinary()
				_ = yym906
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[2] {
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq900[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[3] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq900[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[4] {
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq900[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[5] {
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq900[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym918 := z.EncBinary()
					_ = yym918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq900[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[7] {
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq900[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym923 := z.DecBinary()
	_ = yym923
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct924 := r.ContainerType()
		if yyct924 == codecSelferValueTypeMap1234 {
			yyl924 := r.ReadMapStart()
			if yyl924 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl924, d)
			}
		} else if yyct924 == codecSelferValueTypeArray1234 {
			yyl924 := r.ReadArrayStart()
			if yyl924 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl924, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys925Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys925Slc
	var yyhl925 bool = l >= 0
	for yyj925 := 0; ; yyj925++ {
		if yyhl925 {
			if yyj925 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys925Slc = r.DecodeBytes(yys925Slc, true, true)
		yys925 := string(yys925Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys925 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv926 := &x.CephMonitors
				yym927 := z.DecBinary()
				_ = yym927
				if false {
				} else {
					z.F.DecSliceStringX(yyv926, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys925)
		} // end switch yys925
	} // end for yyj925
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj935 int
	var yyb935 bool
	var yyhl935 bool = l >= 0
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv936 := &x.CephMonitors
		yym937 := z.DecBinary()
		_ = yym937
		if false {
		} else {
			z.F.DecSliceStringX(yyv936, false, d)
		}
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj935++
		if yyhl935 {
			yyb935 = yyj935 > l
		} else {
			yyb935 = r.CheckBreak()
		}
		if yyb935 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj935-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym945 := z.EncBinary()
		_ = yym945
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep946 := !z.EncBinary()
			yy2arr946 := z.EncBasicHandle().StructToArray
			var yyq946 [3]bool
			_, _, _ = yysep946, yyq946, yy2arr946
			const yyr946 bool = false
			yyq946[1] = x.FSType != ""
			yyq946[2] = x.ReadOnly != false
			var yynn946 int
			if yyr946 || yy2arr946 {
				r.EncodeArrayStart(3)
			} else {
				yynn946 = 1
				for _, b := range yyq946 {
					if b {
						yynn946++
					}
				}
				r.EncodeMapStart(yynn946)
				yynn946 = 0
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym948 := z.EncBinary()
				_ = yym948
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym949 := z.EncBinary()
				_ = yym949
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[1] {
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq946[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym952 := z.EncBinary()
					_ = yym952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[2] {
					yym954 := z.EncBinary()
					_ = yym954
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq946[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym956 := z.DecBinary()
	_ = yym956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct957 := r.ContainerType()
		if yyct957 == codecSelferValueTypeMap1234 {
			yyl957 := r.ReadMapStart()
			if yyl957 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl957, d)
			}
		} else if yyct957 == codecSelferValueTypeArray1234 {
			yyl957 := r.ReadArrayStart()
			if yyl957 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys958Slc
	var yyhl958 bool = l >= 0
	for yyj958 := 0; ; yyj958++ {
		if yyhl958 {
			if yyj958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys958Slc = r.DecodeBytes(yys958Slc, true, true)
		yys958 := string(yys958Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys958 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys958)
		} // end switch yys958
	} // end for yyj958
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj962 int
	var yyb962 bool
	var yyhl962 bool = l >= 0
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj962++
		if yyhl962 {
			yyb962 = yyj962 > l
		} else {
			yyb962 = r.CheckBreak()
		}
		if yyb962 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj962-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderLocalVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym966 := z.EncBinary()
		_ = yym966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep967 := !z.EncBinary()
			yy2arr967 := z.EncBasicHandle().StructToArray
			var yyq967 [4]bool
			_, _, _ = yysep967, yyq967, yy2arr967
			const yyr967 bool = false
			yyq967[1] = x.FSType != ""
			yyq967[2] = x.ReadOnly != false
			var yynn967 int
			if yyr967 || yy2arr967 {
				r.EncodeArrayStart(4)
			} else {
				yynn967 = 2
				for _, b := range yyq967 {
					if b {
						yynn967++
					}
				}
				r.EncodeMapStart(yynn967)
				yynn967 = 0
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym969 := z.EncBinary()
				_ = yym969
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym970 := z.EncBinary()
				_ = yym970
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq967[1] {
					yym972 := z.EncBinary()
					_ = yym972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq967[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym973 := z.EncBinary()
					_ = yym973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq967[2] {
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq967[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym976 := z.EncBinary()
					_ = yym976
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym978 := z.EncBinary()
				_ = yym978
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretRef))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym979 := z.EncBinary()
				_ = yym979
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretRef))
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderLocalVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym980 := z.DecBinary()
	_ = yym980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct981 := r.ContainerType()
		if yyct981 == codecSelferValueTypeMap1234 {
			yyl981 := r.ReadMapStart()
			if yyl981 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl981, d)
			}
		} else if yyct981 == codecSelferValueTypeArray1234 {
			yyl981 := r.ReadArrayStart()
			if yyl981 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderLocalVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys982Slc
	var yyhl982 bool = l >= 0
	for yyj982 := 0; ; yyj982++ {
		if yyhl982 {
			if yyj982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys982Slc = r.DecodeBytes(yys982Slc, true, true)
		yys982 := string(yys982Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys982 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				x.SecretRef = ""
			} else {
				x.SecretRef = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys982)
		} // end switch yys982
	} // end for yyj982
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderLocalVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj987 int
	var yyb987 bool
	var yyhl987 bool = l >= 0
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretRef = ""
	} else {
		x.SecretRef = string(r.DecodeString())
	}
	for {
		yyj987++
		if yyhl987 {
			yyb987 = yyj987 > l
		} else {
			yyb987 = r.CheckBreak()
		}
		if yyb987 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj987-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym992 := z.EncBinary()
		_ = yym992
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep993 := !z.EncBinary()
			yy2arr993 := z.EncBasicHandle().StructToArray
			var yyq993 [6]bool
			_, _, _ = yysep993, yyq993, yy2arr993
			const yyr993 bool = false
			yyq993[1] = x.Path != ""
			yyq993[2] = x.User != ""
			yyq993[3] = x.SecretFile != ""
			yyq993[4] = x.SecretRef != nil
			yyq993[5] = x.ReadOnly != false
			var yynn993 int
			if yyr993 || yy2arr993 {
				r.EncodeArrayStart(6)
			} else {
				yynn993 = 1
				for _, b := range yyq993 {
					if b {
						yynn993++
					}
				}
				r.EncodeMapStart(yynn993)
				yynn993 = 0
			}
			if yyr993 || yy2arr993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym996 := z.EncBinary()
					_ = yym996
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr993 || yy2arr993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq993[1] {
					yym998 := z.EncBinary()
					_ = yym998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq993[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym999 := z.EncBinary()
					_ = yym999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr993 || yy2arr993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq993[2] {
					yym1001 := z.EncBinary()
					_ = yym1001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq993[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1002 := z.EncBinary()
					_ = yym1002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr993 || yy2arr993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq993[3] {
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq993[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1005 := z.EncBinary()
					_ = yym1005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr993 || yy2arr993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq993[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq993[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr993 || yy2arr993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq993[5] {
					yym1008 := z.EncBinary()
					_ = yym1008
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq993[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1009 := z.EncBinary()
					_ = yym1009
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr993 || yy2arr993 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1010 := z.DecBinary()
	_ = yym1010
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1011 := r.ContainerType()
		if yyct1011 == codecSelferValueTypeMap1234 {
			yyl1011 := r.ReadMapStart()
			if yyl1011 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1011, d)
			}
		} else if yyct1011 == codecSelferValueTypeArray1234 {
			yyl1011 := r.ReadArrayStart()
			if yyl1011 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1011, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1012Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1012Slc
	var yyhl1012 bool = l >= 0
	for yyj1012 := 0; ; yyj1012++ {
		if yyhl1012 {
			if yyj1012 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1012Slc = r.DecodeBytes(yys1012Slc, true, true)
		yys1012 := string(yys1012Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1012 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv1013 := &x.Monitors
				yym1014 := z.DecBinary()
				_ = yym1014
				if false {
				} else {
					z.F.DecSliceStringX(yyv1013, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1012)
		} // end switch yys1012
	} // end for yyj1012
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1020 int
	var yyb1020 bool
	var yyhl1020 bool = l >= 0
	yyj1020++
	if yyhl1020 {
		yyb1020 = yyj1020 > l
	} else {
		yyb1020 = r.CheckBreak()
	}
	if yyb1020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv1021 := &x.Monitors
		yym1022 := z.DecBinary()
		_ = yym1022
		if false {
		} else {
			z.F.DecSliceStringX(yyv1021, false, d)
		}
	}
	yyj1020++
	if yyhl1020 {
		yyb1020 = yyj1020 > l
	} else {
		yyb1020 = r.CheckBreak()
	}
	if yyb1020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1020++
	if yyhl1020 {
		yyb1020 = yyj1020 > l
	} else {
		yyb1020 = r.CheckBreak()
	}
	if yyb1020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj1020++
	if yyhl1020 {
		yyb1020 = yyj1020 > l
	} else {
		yyb1020 = r.CheckBreak()
	}
	if yyb1020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj1020++
	if yyhl1020 {
		yyb1020 = yyj1020 > l
	} else {
		yyb1020 = r.CheckBreak()
	}
	if yyb1020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj1020++
	if yyhl1020 {
		yyb1020 = yyj1020 > l
	} else {
		yyb1020 = r.CheckBreak()
	}
	if yyb1020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1020++
		if yyhl1020 {
			yyb1020 = yyj1020 > l
		} else {
			yyb1020 = r.CheckBreak()
		}
		if yyb1020 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1020-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1028 := z.EncBinary()
		_ = yym1028
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1029 := !z.EncBinary()
			yy2arr1029 := z.EncBasicHandle().StructToArray
			var yyq1029 [1]bool
			_, _, _ = yysep1029, yyq1029, yy2arr1029
			const yyr1029 bool = false
			var yynn1029 int
			if yyr1029 || yy2arr1029 {
				r.EncodeArrayStart(1)
			} else {
				yynn1029 = 1
				for _, b := range yyq1029 {
					if b {
						yynn1029++
					}
				}
				r.EncodeMapStart(yynn1029)
				yynn1029 = 0
			}
			if yyr1029 || yy2arr1029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1031 := z.EncBinary()
				_ = yym1031
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1032 := z.EncBinary()
				_ = yym1032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr1029 || yy2arr1029 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1033 := z.DecBinary()
	_ = yym1033
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1034 := r.ContainerType()
		if yyct1034 == codecSelferValueTypeMap1234 {
			yyl1034 := r.ReadMapStart()
			if yyl1034 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1034, d)
			}
		} else if yyct1034 == codecSelferValueTypeArray1234 {
			yyl1034 := r.ReadArrayStart()
			if yyl1034 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1034, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1035Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1035Slc
	var yyhl1035 bool = l >= 0
	for yyj1035 := 0; ; yyj1035++ {
		if yyhl1035 {
			if yyj1035 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1035Slc = r.DecodeBytes(yys1035Slc, true, true)
		yys1035 := string(yys1035Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1035 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1035)
		} // end switch yys1035
	} // end for yyj1035
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1037 int
	var yyb1037 bool
	var yyhl1037 bool = l >= 0
	yyj1037++
	if yyhl1037 {
		yyb1037 = yyj1037 > l
	} else {
		yyb1037 = r.CheckBreak()
	}
	if yyb1037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj1037++
		if yyhl1037 {
			yyb1037 = yyj1037 > l
		} else {
			yyb1037 = r.CheckBreak()
		}
		if yyb1037 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1037-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1039 := z.EncBinary()
		_ = yym1039
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1040 := !z.EncBinary()
			yy2arr1040 := z.EncBasicHandle().StructToArray
			var yyq1040 [2]bool
			_, _, _ = yysep1040, yyq1040, yy2arr1040
			const yyr1040 bool = false
			yyq1040[0] = len(x.Items) != 0
			yyq1040[1] = x.DefaultMode != nil
			var yynn1040 int
			if yyr1040 || yy2arr1040 {
				r.EncodeArrayStart(2)
			} else {
				yynn1040 = 0
				for _, b := range yyq1040 {
					if b {
						yynn1040++
					}
				}
				r.EncodeMapStart(yynn1040)
				yynn1040 = 0
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1040[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1042 := z.EncBinary()
						_ = yym1042
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1040[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1043 := z.EncBinary()
						_ = yym1043
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1040[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1045 := *x.DefaultMode
						yym1046 := z.EncBinary()
						_ = yym1046
						if false {
						} else {
							r.EncodeInt(int64(yy1045))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1040[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1047 := *x.DefaultMode
						yym1048 := z.EncBinary()
						_ = yym1048
						if false {
						} else {
							r.EncodeInt(int64(yy1047))
						}
					}
				}
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1049 := z.DecBinary()
	_ = yym1049
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1050 := r.ContainerType()
		if yyct1050 == codecSelferValueTypeMap1234 {
			yyl1050 := r.ReadMapStart()
			if yyl1050 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1050, d)
			}
		} else if yyct1050 == codecSelferValueTypeArray1234 {
			yyl1050 := r.ReadArrayStart()
			if yyl1050 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1050, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1051Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1051Slc
	var yyhl1051 bool = l >= 0
	for yyj1051 := 0; ; yyj1051++ {
		if yyhl1051 {
			if yyj1051 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1051Slc = r.DecodeBytes(yys1051Slc, true, true)
		yys1051 := string(yys1051Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1051 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1052 := &x.Items
				yym1053 := z.DecBinary()
				_ = yym1053
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1052), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1055 := z.DecBinary()
				_ = yym1055
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1051)
		} // end switch yys1051
	} // end for yyj1051
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1056 int
	var yyb1056 bool
	var yyhl1056 bool = l >= 0
	yyj1056++
	if yyhl1056 {
		yyb1056 = yyj1056 > l
	} else {
		yyb1056 = r.CheckBreak()
	}
	if yyb1056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1057 := &x.Items
		yym1058 := z.DecBinary()
		_ = yym1058
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1057), d)
		}
	}
	yyj1056++
	if yyhl1056 {
		yyb1056 = yyj1056 > l
	} else {
		yyb1056 = r.CheckBreak()
	}
	if yyb1056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1060 := z.DecBinary()
		_ = yym1060
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1056++
		if yyhl1056 {
			yyb1056 = yyj1056 > l
		} else {
			yyb1056 = r.CheckBreak()
		}
		if yyb1056 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1056-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1061 := z.EncBinary()
		_ = yym1061
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1062 := !z.EncBinary()
			yy2arr1062 := z.EncBasicHandle().StructToArray
			var yyq1062 [4]bool
			_, _, _ = yysep1062, yyq1062, yy2arr1062
			const yyr1062 bool = false
			yyq1062[1] = x.FieldRef != nil
			yyq1062[2] = x.ResourceFieldRef != nil
			yyq1062[3] = x.Mode != nil
			var yynn1062 int
			if yyr1062 || yy2arr1062 {
				r.EncodeArrayStart(4)
			} else {
				yynn1062 = 1
				for _, b := range yyq1062 {
					if b {
						yynn1062++
					}
				}
				r.EncodeMapStart(yynn1062)
				yynn1062 = 0
			}
			if yyr1062 || yy2arr1062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1064 := z.EncBinary()
				_ = yym1064
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1065 := z.EncBinary()
				_ = yym1065
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1062 || yy2arr1062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1062[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1062[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1062 || yy2arr1062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1062[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1062[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1062 || yy2arr1062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1062[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1069 := *x.Mode
						yym1070 := z.EncBinary()
						_ = yym1070
						if false {
						} else {
							r.EncodeInt(int64(yy1069))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1062[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1071 := *x.Mode
						yym1072 := z.EncBinary()
						_ = yym1072
						if false {
						} else {
							r.EncodeInt(int64(yy1071))
						}
					}
				}
			}
			if yyr1062 || yy2arr1062 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1073 := z.DecBinary()
	_ = yym1073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1074 := r.ContainerType()
		if yyct1074 == codecSelferValueTypeMap1234 {
			yyl1074 := r.ReadMapStart()
			if yyl1074 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1074, d)
			}
		} else if yyct1074 == codecSelferValueTypeArray1234 {
			yyl1074 := r.ReadArrayStart()
			if yyl1074 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1075Slc
	var yyhl1075 bool = l >= 0
	for yyj1075 := 0; ; yyj1075++ {
		if yyhl1075 {
			if yyj1075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1075Slc = r.DecodeBytes(yys1075Slc, true, true)
		yys1075 := string(yys1075Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1075 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1080 := z.DecBinary()
				_ = yym1080
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1075)
		} // end switch yys1075
	} // end for yyj1075
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1081 int
	var yyb1081 bool
	var yyhl1081 bool = l >= 0
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1081++
	if yyhl1081 {
		yyb1081 = yyj1081 > l
	} else {
		yyb1081 = r.CheckBreak()
	}
	if yyb1081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1086 := z.DecBinary()
		_ = yym1086
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1081++
		if yyhl1081 {
			yyb1081 = yyj1081 > l
		} else {
			yyb1081 = r.CheckBreak()
		}
		if yyb1081 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1081-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1087 := z.EncBinary()
		_ = yym1087
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1088 := !z.EncBinary()
			yy2arr1088 := z.EncBasicHandle().StructToArray
			var yyq1088 [3]bool
			_, _, _ = yysep1088, yyq1088, yy2arr1088
			const yyr1088 bool = false
			yyq1088[2] = x.ReadOnly != false
			var yynn1088 int
			if yyr1088 || yy2arr1088 {
				r.EncodeArrayStart(3)
			} else {
				yynn1088 = 2
				for _, b := range yyq1088 {
					if b {
						yynn1088++
					}
				}
				r.EncodeMapStart(yynn1088)
				yynn1088 = 0
			}
			if yyr1088 || yy2arr1088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1090 := z.EncBinary()
				_ = yym1090
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1091 := z.EncBinary()
				_ = yym1091
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1088 || yy2arr1088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1093 := z.EncBinary()
				_ = yym1093
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1094 := z.EncBinary()
				_ = yym1094
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1088 || yy2arr1088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1088[2] {
					yym1096 := z.EncBinary()
					_ = yym1096
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1088[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1097 := z.EncBinary()
					_ = yym1097
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1088 || yy2arr1088 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1098 := z.DecBinary()
	_ = yym1098
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1099 := r.ContainerType()
		if yyct1099 == codecSelferValueTypeMap1234 {
			yyl1099 := r.ReadMapStart()
			if yyl1099 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1099, d)
			}
		} else if yyct1099 == codecSelferValueTypeArray1234 {
			yyl1099 := r.ReadArrayStart()
			if yyl1099 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1099, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1100Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1100Slc
	var yyhl1100 bool = l >= 0
	for yyj1100 := 0; ; yyj1100++ {
		if yyhl1100 {
			if yyj1100 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1100Slc = r.DecodeBytes(yys1100Slc, true, true)
		yys1100 := string(yys1100Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1100 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1100)
		} // end switch yys1100
	} // end for yyj1100
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1104 int
	var yyb1104 bool
	var yyhl1104 bool = l >= 0
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1104++
		if yyhl1104 {
			yyb1104 = yyj1104 > l
		} else {
			yyb1104 = r.CheckBreak()
		}
		if yyb1104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1108 := z.EncBinary()
		_ = yym1108
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1109 := !z.EncBinary()
			yy2arr1109 := z.EncBasicHandle().StructToArray
			var yyq1109 [2]bool
			_, _, _ = yysep1109, yyq1109, yy2arr1109
			const yyr1109 bool = false
			yyq1109[1] = x.FSType != ""
			var yynn1109 int
			if yyr1109 || yy2arr1109 {
				r.EncodeArrayStart(2)
			} else {
				yynn1109 = 1
				for _, b := range yyq1109 {
					if b {
						yynn1109++
					}
				}
				r.EncodeMapStart(yynn1109)
				yynn1109 = 0
			}
			if yyr1109 || yy2arr1109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1111 := z.EncBinary()
				_ = yym1111
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1112 := z.EncBinary()
				_ = yym1112
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1109 || yy2arr1109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1109[1] {
					yym1114 := z.EncBinary()
					_ = yym1114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1109[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1115 := z.EncBinary()
					_ = yym1115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1109 || yy2arr1109 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1116 := z.DecBinary()
	_ = yym1116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1117 := r.ContainerType()
		if yyct1117 == codecSelferValueTypeMap1234 {
			yyl1117 := r.ReadMapStart()
			if yyl1117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1117, d)
			}
		} else if yyct1117 == codecSelferValueTypeArray1234 {
			yyl1117 := r.ReadArrayStart()
			if yyl1117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1118Slc
	var yyhl1118 bool = l >= 0
	for yyj1118 := 0; ; yyj1118++ {
		if yyhl1118 {
			if yyj1118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1118Slc = r.DecodeBytes(yys1118Slc, true, true)
		yys1118 := string(yys1118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1118 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1118)
		} // end switch yys1118
	} // end for yyj1118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1121 int
	var yyb1121 bool
	var yyhl1121 bool = l >= 0
	yyj1121++
	if yyhl1121 {
		yyb1121 = yyj1121 > l
	} else {
		yyb1121 = r.CheckBreak()
	}
	if yyb1121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1121++
	if yyhl1121 {
		yyb1121 = yyj1121 > l
	} else {
		yyb1121 = r.CheckBreak()
	}
	if yyb1121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1121++
		if yyhl1121 {
			yyb1121 = yyj1121 > l
		} else {
			yyb1121 = r.CheckBreak()
		}
		if yyb1121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1124 := z.EncBinary()
	_ = yym1124
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1125 := z.DecBinary()
	_ = yym1125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1126 := z.EncBinary()
		_ = yym1126
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1127 := !z.EncBinary()
			yy2arr1127 := z.EncBasicHandle().StructToArray
			var yyq1127 [5]bool
			_, _, _ = yysep1127, yyq1127, yy2arr1127
			const yyr1127 bool = false
			yyq1127[2] = x.CachingMode != nil
			yyq1127[3] = x.FSType != nil
			yyq1127[4] = x.ReadOnly != nil
			var yynn1127 int
			if yyr1127 || yy2arr1127 {
				r.EncodeArrayStart(5)
			} else {
				yynn1127 = 2
				for _, b := range yyq1127 {
					if b {
						yynn1127++
					}
				}
				r.EncodeMapStart(yynn1127)
				yynn1127 = 0
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1129 := z.EncBinary()
				_ = yym1129
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1130 := z.EncBinary()
				_ = yym1130
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1132 := z.EncBinary()
				_ = yym1132
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1133 := z.EncBinary()
				_ = yym1133
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1135 := *x.CachingMode
						yy1135.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1127[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1136 := *x.CachingMode
						yy1136.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1138 := *x.FSType
						yym1139 := z.EncBinary()
						_ = yym1139
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1138))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1127[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1140 := *x.FSType
						yym1141 := z.EncBinary()
						_ = yym1141
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1140))
						}
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1143 := *x.ReadOnly
						yym1144 := z.EncBinary()
						_ = yym1144
						if false {
						} else {
							r.EncodeBool(bool(yy1143))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1127[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1145 := *x.ReadOnly
						yym1146 := z.EncBinary()
						_ = yym1146
						if false {
						} else {
							r.EncodeBool(bool(yy1145))
						}
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1147 := z.DecBinary()
	_ = yym1147
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1148 := r.ContainerType()
		if yyct1148 == codecSelferValueTypeMap1234 {
			yyl1148 := r.ReadMapStart()
			if yyl1148 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1148, d)
			}
		} else if yyct1148 == codecSelferValueTypeArray1234 {
			yyl1148 := r.ReadArrayStart()
			if yyl1148 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1148, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1149Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1149Slc
	var yyhl1149 bool = l >= 0
	for yyj1149 := 0; ; yyj1149++ {
		if yyhl1149 {
			if yyj1149 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1149Slc = r.DecodeBytes(yys1149Slc, true, true)
		yys1149 := string(yys1149Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1149 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1154 := z.DecBinary()
				_ = yym1154
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1156 := z.DecBinary()
				_ = yym1156
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1149)
		} // end switch yys1149
	} // end for yyj1149
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1157 int
	var yyb1157 bool
	var yyhl1157 bool = l >= 0
	yyj1157++
	if yyhl1157 {
		yyb1157 = yyj1157 > l
	} else {
		yyb1157 = r.CheckBreak()
	}
	if yyb1157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1157++
	if yyhl1157 {
		yyb1157 = yyj1157 > l
	} else {
		yyb1157 = r.CheckBreak()
	}
	if yyb1157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1157++
	if yyhl1157 {
		yyb1157 = yyj1157 > l
	} else {
		yyb1157 = r.CheckBreak()
	}
	if yyb1157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1157++
	if yyhl1157 {
		yyb1157 = yyj1157 > l
	} else {
		yyb1157 = r.CheckBreak()
	}
	if yyb1157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1162 := z.DecBinary()
		_ = yym1162
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1157++
	if yyhl1157 {
		yyb1157 = yyj1157 > l
	} else {
		yyb1157 = r.CheckBreak()
	}
	if yyb1157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1164 := z.DecBinary()
		_ = yym1164
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1157++
		if yyhl1157 {
			yyb1157 = yyj1157 > l
		} else {
			yyb1157 = r.CheckBreak()
		}
		if yyb1157 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1157-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1165 := z.EncBinary()
		_ = yym1165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1166 := !z.EncBinary()
			yy2arr1166 := z.EncBasicHandle().StructToArray
			var yyq1166 [3]bool
			_, _, _ = yysep1166, yyq1166, yy2arr1166
			const yyr1166 bool = false
			yyq1166[1] = len(x.Items) != 0
			yyq1166[2] = x.DefaultMode != nil
			var yynn1166 int
			if yyr1166 || yy2arr1166 {
				r.EncodeArrayStart(3)
			} else {
				yynn1166 = 1
				for _, b := range yyq1166 {
					if b {
						yynn1166++
					}
				}
				r.EncodeMapStart(yynn1166)
				yynn1166 = 0
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1168 := z.EncBinary()
				_ = yym1168
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1169 := z.EncBinary()
				_ = yym1169
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1166[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1171 := z.EncBinary()
						_ = yym1171
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1166[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1172 := z.EncBinary()
						_ = yym1172
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1166[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1174 := *x.DefaultMode
						yym1175 := z.EncBinary()
						_ = yym1175
						if false {
						} else {
							r.EncodeInt(int64(yy1174))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1166[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1176 := *x.DefaultMode
						yym1177 := z.EncBinary()
						_ = yym1177
						if false {
						} else {
							r.EncodeInt(int64(yy1176))
						}
					}
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1178 := z.DecBinary()
	_ = yym1178
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1179 := r.ContainerType()
		if yyct1179 == codecSelferValueTypeMap1234 {
			yyl1179 := r.ReadMapStart()
			if yyl1179 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1179, d)
			}
		} else if yyct1179 == codecSelferValueTypeArray1234 {
			yyl1179 := r.ReadArrayStart()
			if yyl1179 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1179, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1180Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1180Slc
	var yyhl1180 bool = l >= 0
	for yyj1180 := 0; ; yyj1180++ {
		if yyhl1180 {
			if yyj1180 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1180Slc = r.DecodeBytes(yys1180Slc, true, true)
		yys1180 := string(yys1180Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1180 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1182 := &x.Items
				yym1183 := z.DecBinary()
				_ = yym1183
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1182), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1185 := z.DecBinary()
				_ = yym1185
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1180)
		} // end switch yys1180
	} // end for yyj1180
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1186 int
	var yyb1186 bool
	var yyhl1186 bool = l >= 0
	yyj1186++
	if yyhl1186 {
		yyb1186 = yyj1186 > l
	} else {
		yyb1186 = r.CheckBreak()
	}
	if yyb1186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1186++
	if yyhl1186 {
		yyb1186 = yyj1186 > l
	} else {
		yyb1186 = r.CheckBreak()
	}
	if yyb1186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1188 := &x.Items
		yym1189 := z.DecBinary()
		_ = yym1189
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1188), d)
		}
	}
	yyj1186++
	if yyhl1186 {
		yyb1186 = yyj1186 > l
	} else {
		yyb1186 = r.CheckBreak()
	}
	if yyb1186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1191 := z.DecBinary()
		_ = yym1191
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1186++
		if yyhl1186 {
			yyb1186 = yyj1186 > l
		} else {
			yyb1186 = r.CheckBreak()
		}
		if yyb1186 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1186-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1192 := z.EncBinary()
		_ = yym1192
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1193 := !z.EncBinary()
			yy2arr1193 := z.EncBasicHandle().StructToArray
			var yyq1193 [3]bool
			_, _, _ = yysep1193, yyq1193, yy2arr1193
			const yyr1193 bool = false
			yyq1193[2] = x.Mode != nil
			var yynn1193 int
			if yyr1193 || yy2arr1193 {
				r.EncodeArrayStart(3)
			} else {
				yynn1193 = 2
				for _, b := range yyq1193 {
					if b {
						yynn1193++
					}
				}
				r.EncodeMapStart(yynn1193)
				yynn1193 = 0
			}
			if yyr1193 || yy2arr1193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1195 := z.EncBinary()
				_ = yym1195
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1196 := z.EncBinary()
				_ = yym1196
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1193 || yy2arr1193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1198 := z.EncBinary()
				_ = yym1198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1199 := z.EncBinary()
				_ = yym1199
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1193 || yy2arr1193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1193[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1201 := *x.Mode
						yym1202 := z.EncBinary()
						_ = yym1202
						if false {
						} else {
							r.EncodeInt(int64(yy1201))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1193[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1203 := *x.Mode
						yym1204 := z.EncBinary()
						_ = yym1204
						if false {
						} else {
							r.EncodeInt(int64(yy1203))
						}
					}
				}
			}
			if yyr1193 || yy2arr1193 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1205 := z.DecBinary()
	_ = yym1205
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1206 := r.ContainerType()
		if yyct1206 == codecSelferValueTypeMap1234 {
			yyl1206 := r.ReadMapStart()
			if yyl1206 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1206, d)
			}
		} else if yyct1206 == codecSelferValueTypeArray1234 {
			yyl1206 := r.ReadArrayStart()
			if yyl1206 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1206, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1207Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1207Slc
	var yyhl1207 bool = l >= 0
	for yyj1207 := 0; ; yyj1207++ {
		if yyhl1207 {
			if yyj1207 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1207Slc = r.DecodeBytes(yys1207Slc, true, true)
		yys1207 := string(yys1207Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1207 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1211 := z.DecBinary()
				_ = yym1211
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1207)
		} // end switch yys1207
	} // end for yyj1207
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1212 int
	var yyb1212 bool
	var yyhl1212 bool = l >= 0
	yyj1212++
	if yyhl1212 {
		yyb1212 = yyj1212 > l
	} else {
		yyb1212 = r.CheckBreak()
	}
	if yyb1212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1212++
	if yyhl1212 {
		yyb1212 = yyj1212 > l
	} else {
		yyb1212 = r.CheckBreak()
	}
	if yyb1212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1212++
	if yyhl1212 {
		yyb1212 = yyj1212 > l
	} else {
		yyb1212 = r.CheckBreak()
	}
	if yyb1212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1216 := z.DecBinary()
		_ = yym1216
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1212++
		if yyhl1212 {
			yyb1212 = yyj1212 > l
		} else {
			yyb1212 = r.CheckBreak()
		}
		if yyb1212 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1212-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1217 := z.EncBinary()
		_ = yym1217
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1218 := !z.EncBinary()
			yy2arr1218 := z.EncBasicHandle().StructToArray
			var yyq1218 [5]bool
			_, _, _ = yysep1218, yyq1218, yy2arr1218
			const yyr1218 bool = false
			yyq1218[0] = x.Name != ""
			yyq1218[1] = x.HostPort != 0
			yyq1218[3] = x.Protocol != ""
			yyq1218[4] = x.HostIP != ""
			var yynn1218 int
			if yyr1218 || yy2arr1218 {
				r.EncodeArrayStart(5)
			} else {
				yynn1218 = 1
				for _, b := range yyq1218 {
					if b {
						yynn1218++
					}
				}
				r.EncodeMapStart(yynn1218)
				yynn1218 = 0
			}
			if yyr1218 || yy2arr1218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1218[0] {
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1218[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1218 || yy2arr1218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1218[1] {
					yym1223 := z.EncBinary()
					_ = yym1223
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1218[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1224 := z.EncBinary()
					_ = yym1224
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1218 || yy2arr1218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1226 := z.EncBinary()
				_ = yym1226
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1227 := z.EncBinary()
				_ = yym1227
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1218 || yy2arr1218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1218[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1218[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1218 || yy2arr1218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1218[4] {
					yym1230 := z.EncBinary()
					_ = yym1230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1218[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1231 := z.EncBinary()
					_ = yym1231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1218 || yy2arr1218 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1232 := z.DecBinary()
	_ = yym1232
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1233 := r.ContainerType()
		if yyct1233 == codecSelferValueTypeMap1234 {
			yyl1233 := r.ReadMapStart()
			if yyl1233 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1233, d)
			}
		} else if yyct1233 == codecSelferValueTypeArray1234 {
			yyl1233 := r.ReadArrayStart()
			if yyl1233 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1233, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1234Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1234Slc
	var yyhl1234 bool = l >= 0
	for yyj1234 := 0; ; yyj1234++ {
		if yyhl1234 {
			if yyj1234 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1234Slc = r.DecodeBytes(yys1234Slc, true, true)
		yys1234 := string(yys1234Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1234 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1234)
		} // end switch yys1234
	} // end for yyj1234
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1240 int
	var yyb1240 bool
	var yyhl1240 bool = l >= 0
	yyj1240++
	if yyhl1240 {
		yyb1240 = yyj1240 > l
	} else {
		yyb1240 = r.CheckBreak()
	}
	if yyb1240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1240++
	if yyhl1240 {
		yyb1240 = yyj1240 > l
	} else {
		yyb1240 = r.CheckBreak()
	}
	if yyb1240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1240++
	if yyhl1240 {
		yyb1240 = yyj1240 > l
	} else {
		yyb1240 = r.CheckBreak()
	}
	if yyb1240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1240++
	if yyhl1240 {
		yyb1240 = yyj1240 > l
	} else {
		yyb1240 = r.CheckBreak()
	}
	if yyb1240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1240++
	if yyhl1240 {
		yyb1240 = yyj1240 > l
	} else {
		yyb1240 = r.CheckBreak()
	}
	if yyb1240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1240++
		if yyhl1240 {
			yyb1240 = yyj1240 > l
		} else {
			yyb1240 = r.CheckBreak()
		}
		if yyb1240 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1240-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1246 := z.EncBinary()
		_ = yym1246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1247 := !z.EncBinary()
			yy2arr1247 := z.EncBasicHandle().StructToArray
			var yyq1247 [4]bool
			_, _, _ = yysep1247, yyq1247, yy2arr1247
			const yyr1247 bool = false
			yyq1247[1] = x.ReadOnly != false
			yyq1247[3] = x.SubPath != ""
			var yynn1247 int
			if yyr1247 || yy2arr1247 {
				r.EncodeArrayStart(4)
			} else {
				yynn1247 = 2
				for _, b := range yyq1247 {
					if b {
						yynn1247++
					}
				}
				r.EncodeMapStart(yynn1247)
				yynn1247 = 0
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1249 := z.EncBinary()
				_ = yym1249
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1250 := z.EncBinary()
				_ = yym1250
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1247[1] {
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1247[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1253 := z.EncBinary()
					_ = yym1253
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1255 := z.EncBinary()
				_ = yym1255
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1256 := z.EncBinary()
				_ = yym1256
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1247[3] {
					yym1258 := z.EncBinary()
					_ = yym1258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1247[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1259 := z.EncBinary()
					_ = yym1259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1247 || yy2arr1247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1260 := z.DecBinary()
	_ = yym1260
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1261 := r.ContainerType()
		if yyct1261 == codecSelferValueTypeMap1234 {
			yyl1261 := r.ReadMapStart()
			if yyl1261 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1261, d)
			}
		} else if yyct1261 == codecSelferValueTypeArray1234 {
			yyl1261 := r.ReadArrayStart()
			if yyl1261 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1261, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1262Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1262Slc
	var yyhl1262 bool = l >= 0
	for yyj1262 := 0; ; yyj1262++ {
		if yyhl1262 {
			if yyj1262 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1262Slc = r.DecodeBytes(yys1262Slc, true, true)
		yys1262 := string(yys1262Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1262 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1262)
		} // end switch yys1262
	} // end for yyj1262
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1267 int
	var yyb1267 bool
	var yyhl1267 bool = l >= 0
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1267++
		if yyhl1267 {
			yyb1267 = yyj1267 > l
		} else {
			yyb1267 = r.CheckBreak()
		}
		if yyb1267 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1267-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1272 := z.EncBinary()
		_ = yym1272
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1273 := !z.EncBinary()
			yy2arr1273 := z.EncBasicHandle().StructToArray
			var yyq1273 [3]bool
			_, _, _ = yysep1273, yyq1273, yy2arr1273
			const yyr1273 bool = false
			yyq1273[1] = x.Value != ""
			yyq1273[2] = x.ValueFrom != nil
			var yynn1273 int
			if yyr1273 || yy2arr1273 {
				r.EncodeArrayStart(3)
			} else {
				yynn1273 = 1
				for _, b := range yyq1273 {
					if b {
						yynn1273++
					}
				}
				r.EncodeMapStart(yynn1273)
				yynn1273 = 0
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1275 := z.EncBinary()
				_ = yym1275
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1276 := z.EncBinary()
				_ = yym1276
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1273[1] {
					yym1278 := z.EncBinary()
					_ = yym1278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1273[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1279 := z.EncBinary()
					_ = yym1279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1273[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1273[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1281 := z.DecBinary()
	_ = yym1281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1282 := r.ContainerType()
		if yyct1282 == codecSelferValueTypeMap1234 {
			yyl1282 := r.ReadMapStart()
			if yyl1282 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1282, d)
			}
		} else if yyct1282 == codecSelferValueTypeArray1234 {
			yyl1282 := r.ReadArrayStart()
			if yyl1282 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1283Slc
	var yyhl1283 bool = l >= 0
	for yyj1283 := 0; ; yyj1283++ {
		if yyhl1283 {
			if yyj1283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1283Slc = r.DecodeBytes(yys1283Slc, true, true)
		yys1283 := string(yys1283Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1283 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1283)
		} // end switch yys1283
	} // end for yyj1283
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1287 int
	var yyb1287 bool
	var yyhl1287 bool = l >= 0
	yyj1287++
	if yyhl1287 {
		yyb1287 = yyj1287 > l
	} else {
		yyb1287 = r.CheckBreak()
	}
	if yyb1287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1287++
	if yyhl1287 {
		yyb1287 = yyj1287 > l
	} else {
		yyb1287 = r.CheckBreak()
	}
	if yyb1287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1287++
	if yyhl1287 {
		yyb1287 = yyj1287 > l
	} else {
		yyb1287 = r.CheckBreak()
	}
	if yyb1287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1287++
		if yyhl1287 {
			yyb1287 = yyj1287 > l
		} else {
			yyb1287 = r.CheckBreak()
		}
		if yyb1287 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1287-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1291 := z.EncBinary()
		_ = yym1291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1292 := !z.EncBinary()
			yy2arr1292 := z.EncBasicHandle().StructToArray
			var yyq1292 [4]bool
			_, _, _ = yysep1292, yyq1292, yy2arr1292
			const yyr1292 bool = false
			yyq1292[0] = x.FieldRef != nil
			yyq1292[1] = x.ResourceFieldRef != nil
			yyq1292[2] = x.ConfigMapKeyRef != nil
			yyq1292[3] = x.SecretKeyRef != nil
			var yynn1292 int
			if yyr1292 || yy2arr1292 {
				r.EncodeArrayStart(4)
			} else {
				yynn1292 = 0
				for _, b := range yyq1292 {
					if b {
						yynn1292++
					}
				}
				r.EncodeMapStart(yynn1292)
				yynn1292 = 0
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1292[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1292[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1292[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1292[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1297 := z.DecBinary()
	_ = yym1297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1298 := r.ContainerType()
		if yyct1298 == codecSelferValueTypeMap1234 {
			yyl1298 := r.ReadMapStart()
			if yyl1298 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1298, d)
			}
		} else if yyct1298 == codecSelferValueTypeArray1234 {
			yyl1298 := r.ReadArrayStart()
			if yyl1298 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1299Slc
	var yyhl1299 bool = l >= 0
	for yyj1299 := 0; ; yyj1299++ {
		if yyhl1299 {
			if yyj1299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1299Slc = r.DecodeBytes(yys1299Slc, true, true)
		yys1299 := string(yys1299Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1299 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1299)
		} // end switch yys1299
	} // end for yyj1299
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1304 int
	var yyb1304 bool
	var yyhl1304 bool = l >= 0
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1304++
		if yyhl1304 {
			yyb1304 = yyj1304 > l
		} else {
			yyb1304 = r.CheckBreak()
		}
		if yyb1304 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1304-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1309 := z.EncBinary()
		_ = yym1309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1310 := !z.EncBinary()
			yy2arr1310 := z.EncBasicHandle().StructToArray
			var yyq1310 [2]bool
			_, _, _ = yysep1310, yyq1310, yy2arr1310
			const yyr1310 bool = false
			var yynn1310 int
			if yyr1310 || yy2arr1310 {
				r.EncodeArrayStart(2)
			} else {
				yynn1310 = 2
				for _, b := range yyq1310 {
					if b {
						yynn1310++
					}
				}
				r.EncodeMapStart(yynn1310)
				yynn1310 = 0
			}
			if yyr1310 || yy2arr1310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1312 := z.EncBinary()
				_ = yym1312
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1313 := z.EncBinary()
				_ = yym1313
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1310 || yy2arr1310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1315 := z.EncBinary()
				_ = yym1315
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1316 := z.EncBinary()
				_ = yym1316
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1310 || yy2arr1310 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1317 := z.DecBinary()
	_ = yym1317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1318 := r.ContainerType()
		if yyct1318 == codecSelferValueTypeMap1234 {
			yyl1318 := r.ReadMapStart()
			if yyl1318 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1318, d)
			}
		} else if yyct1318 == codecSelferValueTypeArray1234 {
			yyl1318 := r.ReadArrayStart()
			if yyl1318 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1318, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1319Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1319Slc
	var yyhl1319 bool = l >= 0
	for yyj1319 := 0; ; yyj1319++ {
		if yyhl1319 {
			if yyj1319 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1319Slc = r.DecodeBytes(yys1319Slc, true, true)
		yys1319 := string(yys1319Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1319 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1319)
		} // end switch yys1319
	} // end for yyj1319
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1322 int
	var yyb1322 bool
	var yyhl1322 bool = l >= 0
	yyj1322++
	if yyhl1322 {
		yyb1322 = yyj1322 > l
	} else {
		yyb1322 = r.CheckBreak()
	}
	if yyb1322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1322++
	if yyhl1322 {
		yyb1322 = yyj1322 > l
	} else {
		yyb1322 = r.CheckBreak()
	}
	if yyb1322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1322++
		if yyhl1322 {
			yyb1322 = yyj1322 > l
		} else {
			yyb1322 = r.CheckBreak()
		}
		if yyb1322 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1322-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1325 := z.EncBinary()
		_ = yym1325
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1326 := !z.EncBinary()
			yy2arr1326 := z.EncBasicHandle().StructToArray
			var yyq1326 [3]bool
			_, _, _ = yysep1326, yyq1326, yy2arr1326
			const yyr1326 bool = false
			yyq1326[0] = x.ContainerName != ""
			yyq1326[2] = true
			var yynn1326 int
			if yyr1326 || yy2arr1326 {
				r.EncodeArrayStart(3)
			} else {
				yynn1326 = 1
				for _, b := range yyq1326 {
					if b {
						yynn1326++
					}
				}
				r.EncodeMapStart(yynn1326)
				yynn1326 = 0
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[0] {
					yym1328 := z.EncBinary()
					_ = yym1328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1326[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1329 := z.EncBinary()
					_ = yym1329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1331 := z.EncBinary()
				_ = yym1331
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1332 := z.EncBinary()
				_ = yym1332
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1326[2] {
					yy1334 := &x.Divisor
					yym1335 := z.EncBinary()
					_ = yym1335
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1334) {
					} else if !yym1335 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1334)
					} else {
						z.EncFallback(yy1334)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1326[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1336 := &x.Divisor
					yym1337 := z.EncBinary()
					_ = yym1337
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1336) {
					} else if !yym1337 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1336)
					} else {
						z.EncFallback(yy1336)
					}
				}
			}
			if yyr1326 || yy2arr1326 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1338 := z.DecBinary()
	_ = yym1338
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1339 := r.ContainerType()
		if yyct1339 == codecSelferValueTypeMap1234 {
			yyl1339 := r.ReadMapStart()
			if yyl1339 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1339, d)
			}
		} else if yyct1339 == codecSelferValueTypeArray1234 {
			yyl1339 := r.ReadArrayStart()
			if yyl1339 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1339, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1340Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1340Slc
	var yyhl1340 bool = l >= 0
	for yyj1340 := 0; ; yyj1340++ {
		if yyhl1340 {
			if yyj1340 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1340Slc = r.DecodeBytes(yys1340Slc, true, true)
		yys1340 := string(yys1340Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1340 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1343 := &x.Divisor
				yym1344 := z.DecBinary()
				_ = yym1344
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1343) {
				} else if !yym1344 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1343)
				} else {
					z.DecFallback(yyv1343, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1340)
		} // end switch yys1340
	} // end for yyj1340
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1345 int
	var yyb1345 bool
	var yyhl1345 bool = l >= 0
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1348 := &x.Divisor
		yym1349 := z.DecBinary()
		_ = yym1349
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1348) {
		} else if !yym1349 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1348)
		} else {
			z.DecFallback(yyv1348, false)
		}
	}
	for {
		yyj1345++
		if yyhl1345 {
			yyb1345 = yyj1345 > l
		} else {
			yyb1345 = r.CheckBreak()
		}
		if yyb1345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1350 := z.EncBinary()
		_ = yym1350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1351 := !z.EncBinary()
			yy2arr1351 := z.EncBasicHandle().StructToArray
			var yyq1351 [2]bool
			_, _, _ = yysep1351, yyq1351, yy2arr1351
			const yyr1351 bool = false
			var yynn1351 int
			if yyr1351 || yy2arr1351 {
				r.EncodeArrayStart(2)
			} else {
				yynn1351 = 2
				for _, b := range yyq1351 {
					if b {
						yynn1351++
					}
				}
				r.EncodeMapStart(yynn1351)
				yynn1351 = 0
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1353 := z.EncBinary()
				_ = yym1353
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1354 := z.EncBinary()
				_ = yym1354
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1356 := z.EncBinary()
				_ = yym1356
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1357 := z.EncBinary()
				_ = yym1357
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1351 || yy2arr1351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1358 := z.DecBinary()
	_ = yym1358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1359 := r.ContainerType()
		if yyct1359 == codecSelferValueTypeMap1234 {
			yyl1359 := r.ReadMapStart()
			if yyl1359 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1359, d)
			}
		} else if yyct1359 == codecSelferValueTypeArray1234 {
			yyl1359 := r.ReadArrayStart()
			if yyl1359 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1359, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1360Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1360Slc
	var yyhl1360 bool = l >= 0
	for yyj1360 := 0; ; yyj1360++ {
		if yyhl1360 {
			if yyj1360 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1360Slc = r.DecodeBytes(yys1360Slc, true, true)
		yys1360 := string(yys1360Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1360 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1360)
		} // end switch yys1360
	} // end for yyj1360
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1363 int
	var yyb1363 bool
	var yyhl1363 bool = l >= 0
	yyj1363++
	if yyhl1363 {
		yyb1363 = yyj1363 > l
	} else {
		yyb1363 = r.CheckBreak()
	}
	if yyb1363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1363++
	if yyhl1363 {
		yyb1363 = yyj1363 > l
	} else {
		yyb1363 = r.CheckBreak()
	}
	if yyb1363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1363++
		if yyhl1363 {
			yyb1363 = yyj1363 > l
		} else {
			yyb1363 = r.CheckBreak()
		}
		if yyb1363 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1363-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1366 := z.EncBinary()
		_ = yym1366
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1367 := !z.EncBinary()
			yy2arr1367 := z.EncBasicHandle().StructToArray
			var yyq1367 [2]bool
			_, _, _ = yysep1367, yyq1367, yy2arr1367
			const yyr1367 bool = false
			var yynn1367 int
			if yyr1367 || yy2arr1367 {
				r.EncodeArrayStart(2)
			} else {
				yynn1367 = 2
				for _, b := range yyq1367 {
					if b {
						yynn1367++
					}
				}
				r.EncodeMapStart(yynn1367)
				yynn1367 = 0
			}
			if yyr1367 || yy2arr1367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1369 := z.EncBinary()
				_ = yym1369
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1370 := z.EncBinary()
				_ = yym1370
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1367 || yy2arr1367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1372 := z.EncBinary()
				_ = yym1372
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1373 := z.EncBinary()
				_ = yym1373
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1367 || yy2arr1367 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1374 := z.DecBinary()
	_ = yym1374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1375 := r.ContainerType()
		if yyct1375 == codecSelferValueTypeMap1234 {
			yyl1375 := r.ReadMapStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1375, d)
			}
		} else if yyct1375 == codecSelferValueTypeArray1234 {
			yyl1375 := r.ReadArrayStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1376Slc
	var yyhl1376 bool = l >= 0
	for yyj1376 := 0; ; yyj1376++ {
		if yyhl1376 {
			if yyj1376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1376Slc = r.DecodeBytes(yys1376Slc, true, true)
		yys1376 := string(yys1376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1376 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1376)
		} // end switch yys1376
	} // end for yyj1376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1379 int
	var yyb1379 bool
	var yyhl1379 bool = l >= 0
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1379++
		if yyhl1379 {
			yyb1379 = yyj1379 > l
		} else {
			yyb1379 = r.CheckBreak()
		}
		if yyb1379 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1379-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1382 := z.EncBinary()
		_ = yym1382
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1383 := !z.EncBinary()
			yy2arr1383 := z.EncBasicHandle().StructToArray
			var yyq1383 [2]bool
			_, _, _ = yysep1383, yyq1383, yy2arr1383
			const yyr1383 bool = false
			var yynn1383 int
			if yyr1383 || yy2arr1383 {
				r.EncodeArrayStart(2)
			} else {
				yynn1383 = 2
				for _, b := range yyq1383 {
					if b {
						yynn1383++
					}
				}
				r.EncodeMapStart(yynn1383)
				yynn1383 = 0
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1385 := z.EncBinary()
				_ = yym1385
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1386 := z.EncBinary()
				_ = yym1386
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1388 := z.EncBinary()
				_ = yym1388
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1389 := z.EncBinary()
				_ = yym1389
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1390 := z.DecBinary()
	_ = yym1390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1391 := r.ContainerType()
		if yyct1391 == codecSelferValueTypeMap1234 {
			yyl1391 := r.ReadMapStart()
			if yyl1391 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1391, d)
			}
		} else if yyct1391 == codecSelferValueTypeArray1234 {
			yyl1391 := r.ReadArrayStart()
			if yyl1391 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1391, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1392Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1392Slc
	var yyhl1392 bool = l >= 0
	for yyj1392 := 0; ; yyj1392++ {
		if yyhl1392 {
			if yyj1392 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1392Slc = r.DecodeBytes(yys1392Slc, true, true)
		yys1392 := string(yys1392Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1392 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1392)
		} // end switch yys1392
	} // end for yyj1392
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1395 int
	var yyb1395 bool
	var yyhl1395 bool = l >= 0
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1395++
		if yyhl1395 {
			yyb1395 = yyj1395 > l
		} else {
			yyb1395 = r.CheckBreak()
		}
		if yyb1395 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1395-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1398 := z.EncBinary()
		_ = yym1398
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1399 := !z.EncBinary()
			yy2arr1399 := z.EncBasicHandle().StructToArray
			var yyq1399 [5]bool
			_, _, _ = yysep1399, yyq1399, yy2arr1399
			const yyr1399 bool = false
			yyq1399[0] = x.Path != ""
			yyq1399[1] = true
			yyq1399[2] = x.Host != ""
			yyq1399[3] = x.Scheme != ""
			yyq1399[4] = len(x.HTTPHeaders) != 0
			var yynn1399 int
			if yyr1399 || yy2arr1399 {
				r.EncodeArrayStart(5)
			} else {
				yynn1399 = 0
				for _, b := range yyq1399 {
					if b {
						yynn1399++
					}
				}
				r.EncodeMapStart(yynn1399)
				yynn1399 = 0
			}
			if yyr1399 || yy2arr1399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1399[0] {
					yym1401 := z.EncBinary()
					_ = yym1401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1399[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1399 || yy2arr1399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1399[1] {
					yy1404 := &x.Port
					yym1405 := z.EncBinary()
					_ = yym1405
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1404) {
					} else if !yym1405 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1404)
					} else {
						z.EncFallback(yy1404)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1399[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1406 := &x.Port
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1406) {
					} else if !yym1407 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1406)
					} else {
						z.EncFallback(yy1406)
					}
				}
			}
			if yyr1399 || yy2arr1399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1399[2] {
					yym1409 := z.EncBinary()
					_ = yym1409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1399[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1399 || yy2arr1399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1399[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1399[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1399 || yy2arr1399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1399[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1413 := z.EncBinary()
						_ = yym1413
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1399[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1414 := z.EncBinary()
						_ = yym1414
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1399 || yy2arr1399 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1415 := z.DecBinary()
	_ = yym1415
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1416 := r.ContainerType()
		if yyct1416 == codecSelferValueTypeMap1234 {
			yyl1416 := r.ReadMapStart()
			if yyl1416 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1416, d)
			}
		} else if yyct1416 == codecSelferValueTypeArray1234 {
			yyl1416 := r.ReadArrayStart()
			if yyl1416 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1416, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1417Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1417Slc
	var yyhl1417 bool = l >= 0
	for yyj1417 := 0; ; yyj1417++ {
		if yyhl1417 {
			if yyj1417 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1417Slc = r.DecodeBytes(yys1417Slc, true, true)
		yys1417 := string(yys1417Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1417 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1419 := &x.Port
				yym1420 := z.DecBinary()
				_ = yym1420
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1419) {
				} else if !yym1420 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1419)
				} else {
					z.DecFallback(yyv1419, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1423 := &x.HTTPHeaders
				yym1424 := z.DecBinary()
				_ = yym1424
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1423), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1417)
		} // end switch yys1417
	} // end for yyj1417
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1425 int
	var yyb1425 bool
	var yyhl1425 bool = l >= 0
	yyj1425++
	if yyhl1425 {
		yyb1425 = yyj1425 > l
	} else {
		yyb1425 = r.CheckBreak()
	}
	if yyb1425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1425++
	if yyhl1425 {
		yyb1425 = yyj1425 > l
	} else {
		yyb1425 = r.CheckBreak()
	}
	if yyb1425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1427 := &x.Port
		yym1428 := z.DecBinary()
		_ = yym1428
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1427) {
		} else if !yym1428 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1427)
		} else {
			z.DecFallback(yyv1427, false)
		}
	}
	yyj1425++
	if yyhl1425 {
		yyb1425 = yyj1425 > l
	} else {
		yyb1425 = r.CheckBreak()
	}
	if yyb1425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1425++
	if yyhl1425 {
		yyb1425 = yyj1425 > l
	} else {
		yyb1425 = r.CheckBreak()
	}
	if yyb1425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1425++
	if yyhl1425 {
		yyb1425 = yyj1425 > l
	} else {
		yyb1425 = r.CheckBreak()
	}
	if yyb1425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1431 := &x.HTTPHeaders
		yym1432 := z.DecBinary()
		_ = yym1432
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1431), d)
		}
	}
	for {
		yyj1425++
		if yyhl1425 {
			yyb1425 = yyj1425 > l
		} else {
			yyb1425 = r.CheckBreak()
		}
		if yyb1425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1433 := z.EncBinary()
	_ = yym1433
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1434 := z.DecBinary()
	_ = yym1434
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1435 := z.EncBinary()
		_ = yym1435
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1436 := !z.EncBinary()
			yy2arr1436 := z.EncBasicHandle().StructToArray
			var yyq1436 [1]bool
			_, _, _ = yysep1436, yyq1436, yy2arr1436
			const yyr1436 bool = false
			yyq1436[0] = true
			var yynn1436 int
			if yyr1436 || yy2arr1436 {
				r.EncodeArrayStart(1)
			} else {
				yynn1436 = 0
				for _, b := range yyq1436 {
					if b {
						yynn1436++
					}
				}
				r.EncodeMapStart(yynn1436)
				yynn1436 = 0
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1436[0] {
					yy1438 := &x.Port
					yym1439 := z.EncBinary()
					_ = yym1439
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1438) {
					} else if !yym1439 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1438)
					} else {
						z.EncFallback(yy1438)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1436[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1440 := &x.Port
					yym1441 := z.EncBinary()
					_ = yym1441
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1440) {
					} else if !yym1441 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1440)
					} else {
						z.EncFallback(yy1440)
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1442 := z.DecBinary()
	_ = yym1442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1443 := r.ContainerType()
		if yyct1443 == codecSelferValueTypeMap1234 {
			yyl1443 := r.ReadMapStart()
			if yyl1443 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1443, d)
			}
		} else if yyct1443 == codecSelferValueTypeArray1234 {
			yyl1443 := r.ReadArrayStart()
			if yyl1443 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1444Slc
	var yyhl1444 bool = l >= 0
	for yyj1444 := 0; ; yyj1444++ {
		if yyhl1444 {
			if yyj1444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1444Slc = r.DecodeBytes(yys1444Slc, true, true)
		yys1444 := string(yys1444Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1444 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1445 := &x.Port
				yym1446 := z.DecBinary()
				_ = yym1446
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1445) {
				} else if !yym1446 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1445)
				} else {
					z.DecFallback(yyv1445, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1444)
		} // end switch yys1444
	} // end for yyj1444
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1447 int
	var yyb1447 bool
	var yyhl1447 bool = l >= 0
	yyj1447++
	if yyhl1447 {
		yyb1447 = yyj1447 > l
	} else {
		yyb1447 = r.CheckBreak()
	}
	if yyb1447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1448 := &x.Port
		yym1449 := z.DecBinary()
		_ = yym1449
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1448) {
		} else if !yym1449 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1448)
		} else {
			z.DecFallback(yyv1448, false)
		}
	}
	for {
		yyj1447++
		if yyhl1447 {
			yyb1447 = yyj1447 > l
		} else {
			yyb1447 = r.CheckBreak()
		}
		if yyb1447 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1447-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1450 := z.EncBinary()
		_ = yym1450
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1451 := !z.EncBinary()
			yy2arr1451 := z.EncBasicHandle().StructToArray
			var yyq1451 [1]bool
			_, _, _ = yysep1451, yyq1451, yy2arr1451
			const yyr1451 bool = false
			yyq1451[0] = len(x.Command) != 0
			var yynn1451 int
			if yyr1451 || yy2arr1451 {
				r.EncodeArrayStart(1)
			} else {
				yynn1451 = 0
				for _, b := range yyq1451 {
					if b {
						yynn1451++
					}
				}
				r.EncodeMapStart(yynn1451)
				yynn1451 = 0
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1451[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1453 := z.EncBinary()
						_ = yym1453
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1451[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1454 := z.EncBinary()
						_ = yym1454
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1455 := z.DecBinary()
	_ = yym1455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1456 := r.ContainerType()
		if yyct1456 == codecSelferValueTypeMap1234 {
			yyl1456 := r.ReadMapStart()
			if yyl1456 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1456, d)
			}
		} else if yyct1456 == codecSelferValueTypeArray1234 {
			yyl1456 := r.ReadArrayStart()
			if yyl1456 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1456, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1457Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1457Slc
	var yyhl1457 bool = l >= 0
	for yyj1457 := 0; ; yyj1457++ {
		if yyhl1457 {
			if yyj1457 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1457Slc = r.DecodeBytes(yys1457Slc, true, true)
		yys1457 := string(yys1457Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1457 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1458 := &x.Command
				yym1459 := z.DecBinary()
				_ = yym1459
				if false {
				} else {
					z.F.DecSliceStringX(yyv1458, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1457)
		} // end switch yys1457
	} // end for yyj1457
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1460 int
	var yyb1460 bool
	var yyhl1460 bool = l >= 0
	yyj1460++
	if yyhl1460 {
		yyb1460 = yyj1460 > l
	} else {
		yyb1460 = r.CheckBreak()
	}
	if yyb1460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1461 := &x.Command
		yym1462 := z.DecBinary()
		_ = yym1462
		if false {
		} else {
			z.F.DecSliceStringX(yyv1461, false, d)
		}
	}
	for {
		yyj1460++
		if yyhl1460 {
			yyb1460 = yyj1460 > l
		} else {
			yyb1460 = r.CheckBreak()
		}
		if yyb1460 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1460-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1463 := z.EncBinary()
		_ = yym1463
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1464 := !z.EncBinary()
			yy2arr1464 := z.EncBasicHandle().StructToArray
			var yyq1464 [8]bool
			_, _, _ = yysep1464, yyq1464, yy2arr1464
			const yyr1464 bool = false
			yyq1464[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1464[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1464[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1464[3] = x.InitialDelaySeconds != 0
			yyq1464[4] = x.TimeoutSeconds != 0
			yyq1464[5] = x.PeriodSeconds != 0
			yyq1464[6] = x.SuccessThreshold != 0
			yyq1464[7] = x.FailureThreshold != 0
			var yynn1464 int
			if yyr1464 || yy2arr1464 {
				r.EncodeArrayStart(8)
			} else {
				yynn1464 = 0
				for _, b := range yyq1464 {
					if b {
						yynn1464++
					}
				}
				r.EncodeMapStart(yynn1464)
				yynn1464 = 0
			}
			var yyn1465 bool
			if x.Handler.Exec == nil {
				yyn1465 = true
				goto LABEL1465
			}
		LABEL1465:
			if yyr1464 || yy2arr1464 {
				if yyn1465 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1464[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1464[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1465 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1466 bool
			if x.Handler.HTTPGet == nil {
				yyn1466 = true
				goto LABEL1466
			}
		LABEL1466:
			if yyr1464 || yy2arr1464 {
				if yyn1466 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1464[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1464[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1466 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1467 bool
			if x.Handler.TCPSocket == nil {
				yyn1467 = true
				goto LABEL1467
			}
		LABEL1467:
			if yyr1464 || yy2arr1464 {
				if yyn1467 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1464[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1464[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1467 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1464 || yy2arr1464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1464[3] {
					yym1469 := z.EncBinary()
					_ = yym1469
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1464[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1470 := z.EncBinary()
					_ = yym1470
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1464 || yy2arr1464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1464[4] {
					yym1472 := z.EncBinary()
					_ = yym1472
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1464[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1473 := z.EncBinary()
					_ = yym1473
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1464 || yy2arr1464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1464[5] {
					yym1475 := z.EncBinary()
					_ = yym1475
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1464[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1476 := z.EncBinary()
					_ = yym1476
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1464 || yy2arr1464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1464[6] {
					yym1478 := z.EncBinary()
					_ = yym1478
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1464[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1479 := z.EncBinary()
					_ = yym1479
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1464 || yy2arr1464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1464[7] {
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1464[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1464 || yy2arr1464 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1483 := z.DecBinary()
	_ = yym1483
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1484 := r.ContainerType()
		if yyct1484 == codecSelferValueTypeMap1234 {
			yyl1484 := r.ReadMapStart()
			if yyl1484 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1484, d)
			}
		} else if yyct1484 == codecSelferValueTypeArray1234 {
			yyl1484 := r.ReadArrayStart()
			if yyl1484 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1484, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1485Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1485Slc
	var yyhl1485 bool = l >= 0
	for yyj1485 := 0; ; yyj1485++ {
		if yyhl1485 {
			if yyj1485 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1485Slc = r.DecodeBytes(yys1485Slc, true, true)
		yys1485 := string(yys1485Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1485 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1485)
		} // end switch yys1485
	} // end for yyj1485
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1494 int
	var yyb1494 bool
	var yyhl1494 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1494++
	if yyhl1494 {
		yyb1494 = yyj1494 > l
	} else {
		yyb1494 = r.CheckBreak()
	}
	if yyb1494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1494++
	if yyhl1494 {
		yyb1494 = yyj1494 > l
	} else {
		yyb1494 = r.CheckBreak()
	}
	if yyb1494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1494++
	if yyhl1494 {
		yyb1494 = yyj1494 > l
	} else {
		yyb1494 = r.CheckBreak()
	}
	if yyb1494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1494++
	if yyhl1494 {
		yyb1494 = yyj1494 > l
	} else {
		yyb1494 = r.CheckBreak()
	}
	if yyb1494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1494++
	if yyhl1494 {
		yyb1494 = yyj1494 > l
	} else {
		yyb1494 = r.CheckBreak()
	}
	if yyb1494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1494++
	if yyhl1494 {
		yyb1494 = yyj1494 > l
	} else {
		yyb1494 = r.CheckBreak()
	}
	if yyb1494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1494++
	if yyhl1494 {
		yyb1494 = yyj1494 > l
	} else {
		yyb1494 = r.CheckBreak()
	}
	if yyb1494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1494++
	if yyhl1494 {
		yyb1494 = yyj1494 > l
	} else {
		yyb1494 = r.CheckBreak()
	}
	if yyb1494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1494++
		if yyhl1494 {
			yyb1494 = yyj1494 > l
		} else {
			yyb1494 = r.CheckBreak()
		}
		if yyb1494 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1494-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1503 := z.EncBinary()
	_ = yym1503
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1504 := z.DecBinary()
	_ = yym1504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1505 := z.EncBinary()
	_ = yym1505
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1506 := z.DecBinary()
	_ = yym1506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1507 := z.EncBinary()
		_ = yym1507
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1508 := !z.EncBinary()
			yy2arr1508 := z.EncBasicHandle().StructToArray
			var yyq1508 [2]bool
			_, _, _ = yysep1508, yyq1508, yy2arr1508
			const yyr1508 bool = false
			yyq1508[0] = len(x.Add) != 0
			yyq1508[1] = len(x.Drop) != 0
			var yynn1508 int
			if yyr1508 || yy2arr1508 {
				r.EncodeArrayStart(2)
			} else {
				yynn1508 = 0
				for _, b := range yyq1508 {
					if b {
						yynn1508++
					}
				}
				r.EncodeMapStart(yynn1508)
				yynn1508 = 0
			}
			if yyr1508 || yy2arr1508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1508[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1510 := z.EncBinary()
						_ = yym1510
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1508[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1511 := z.EncBinary()
						_ = yym1511
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1508 || yy2arr1508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1508[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1513 := z.EncBinary()
						_ = yym1513
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1508[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1514 := z.EncBinary()
						_ = yym1514
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1508 || yy2arr1508 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1515 := z.DecBinary()
	_ = yym1515
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1516 := r.ContainerType()
		if yyct1516 == codecSelferValueTypeMap1234 {
			yyl1516 := r.ReadMapStart()
			if yyl1516 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1516, d)
			}
		} else if yyct1516 == codecSelferValueTypeArray1234 {
			yyl1516 := r.ReadArrayStart()
			if yyl1516 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1516, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1517Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1517Slc
	var yyhl1517 bool = l >= 0
	for yyj1517 := 0; ; yyj1517++ {
		if yyhl1517 {
			if yyj1517 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1517Slc = r.DecodeBytes(yys1517Slc, true, true)
		yys1517 := string(yys1517Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1517 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1518 := &x.Add
				yym1519 := z.DecBinary()
				_ = yym1519
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1518), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1520 := &x.Drop
				yym1521 := z.DecBinary()
				_ = yym1521
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1520), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1517)
		} // end switch yys1517
	} // end for yyj1517
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1522 int
	var yyb1522 bool
	var yyhl1522 bool = l >= 0
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1523 := &x.Add
		yym1524 := z.DecBinary()
		_ = yym1524
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1523), d)
		}
	}
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1525 := &x.Drop
		yym1526 := z.DecBinary()
		_ = yym1526
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1525), d)
		}
	}
	for {
		yyj1522++
		if yyhl1522 {
			yyb1522 = yyj1522 > l
		} else {
			yyb1522 = r.CheckBreak()
		}
		if yyb1522 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1522-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1527 := z.EncBinary()
		_ = yym1527
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1528 := !z.EncBinary()
			yy2arr1528 := z.EncBasicHandle().StructToArray
			var yyq1528 [2]bool
			_, _, _ = yysep1528, yyq1528, yy2arr1528
			const yyr1528 bool = false
			yyq1528[0] = len(x.Limits) != 0
			yyq1528[1] = len(x.Requests) != 0
			var yynn1528 int
			if yyr1528 || yy2arr1528 {
				r.EncodeArrayStart(2)
			} else {
				yynn1528 = 0
				for _, b := range yyq1528 {
					if b {
						yynn1528++
					}
				}
				r.EncodeMapStart(yynn1528)
				yynn1528 = 0
			}
			if yyr1528 || yy2arr1528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1528[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1528[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1528 || yy2arr1528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1528[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1528[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1528 || yy2arr1528 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1531 := z.DecBinary()
	_ = yym1531
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1532 := r.ContainerType()
		if yyct1532 == codecSelferValueTypeMap1234 {
			yyl1532 := r.ReadMapStart()
			if yyl1532 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1532, d)
			}
		} else if yyct1532 == codecSelferValueTypeArray1234 {
			yyl1532 := r.ReadArrayStart()
			if yyl1532 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1532, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1533Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1533Slc
	var yyhl1533 bool = l >= 0
	for yyj1533 := 0; ; yyj1533++ {
		if yyhl1533 {
			if yyj1533 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1533Slc = r.DecodeBytes(yys1533Slc, true, true)
		yys1533 := string(yys1533Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1533 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1534 := &x.Limits
				yyv1534.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1535 := &x.Requests
				yyv1535.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1533)
		} // end switch yys1533
	} // end for yyj1533
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1536 int
	var yyb1536 bool
	var yyhl1536 bool = l >= 0
	yyj1536++
	if yyhl1536 {
		yyb1536 = yyj1536 > l
	} else {
		yyb1536 = r.CheckBreak()
	}
	if yyb1536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1537 := &x.Limits
		yyv1537.CodecDecodeSelf(d)
	}
	yyj1536++
	if yyhl1536 {
		yyb1536 = yyj1536 > l
	} else {
		yyb1536 = r.CheckBreak()
	}
	if yyb1536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1538 := &x.Requests
		yyv1538.CodecDecodeSelf(d)
	}
	for {
		yyj1536++
		if yyhl1536 {
			yyb1536 = yyj1536 > l
		} else {
			yyb1536 = r.CheckBreak()
		}
		if yyb1536 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1536-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1539 := z.EncBinary()
		_ = yym1539
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1540 := !z.EncBinary()
			yy2arr1540 := z.EncBasicHandle().StructToArray
			var yyq1540 [18]bool
			_, _, _ = yysep1540, yyq1540, yy2arr1540
			const yyr1540 bool = false
			yyq1540[2] = len(x.Command) != 0
			yyq1540[3] = len(x.Args) != 0
			yyq1540[4] = x.WorkingDir != ""
			yyq1540[5] = len(x.Ports) != 0
			yyq1540[6] = len(x.Env) != 0
			yyq1540[7] = true
			yyq1540[8] = len(x.VolumeMounts) != 0
			yyq1540[9] = x.LivenessProbe != nil
			yyq1540[10] = x.ReadinessProbe != nil
			yyq1540[11] = x.Lifecycle != nil
			yyq1540[12] = x.TerminationMessagePath != ""
			yyq1540[14] = x.SecurityContext != nil
			yyq1540[15] = x.Stdin != false
			yyq1540[16] = x.StdinOnce != false
			yyq1540[17] = x.TTY != false
			var yynn1540 int
			if yyr1540 || yy2arr1540 {
				r.EncodeArrayStart(18)
			} else {
				yynn1540 = 3
				for _, b := range yyq1540 {
					if b {
						yynn1540++
					}
				}
				r.EncodeMapStart(yynn1540)
				yynn1540 = 0
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1542 := z.EncBinary()
				_ = yym1542
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1543 := z.EncBinary()
				_ = yym1543
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1545 := z.EncBinary()
				_ = yym1545
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1546 := z.EncBinary()
				_ = yym1546
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1548 := z.EncBinary()
						_ = yym1548
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1549 := z.EncBinary()
						_ = yym1549
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1551 := z.EncBinary()
						_ = yym1551
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1552 := z.EncBinary()
						_ = yym1552
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[4] {
					yym1554 := z.EncBinary()
					_ = yym1554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1540[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1555 := z.EncBinary()
					_ = yym1555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1557 := z.EncBinary()
						_ = yym1557
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1558 := z.EncBinary()
						_ = yym1558
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1560 := z.EncBinary()
						_ = yym1560
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1561 := z.EncBinary()
						_ = yym1561
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[7] {
					yy1563 := &x.Resources
					yy1563.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1564 := &x.Resources
					yy1564.CodecEncodeSelf(e)
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1566 := z.EncBinary()
						_ = yym1566
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1567 := z.EncBinary()
						_ = yym1567
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[12] {
					yym1572 := z.EncBinary()
					_ = yym1572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1540[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1573 := z.EncBinary()
					_ = yym1573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[15] {
					yym1577 := z.EncBinary()
					_ = yym1577
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1540[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1578 := z.EncBinary()
					_ = yym1578
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[16] {
					yym1580 := z.EncBinary()
					_ = yym1580
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1540[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1581 := z.EncBinary()
					_ = yym1581
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[17] {
					yym1583 := z.EncBinary()
					_ = yym1583
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1540[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1584 := z.EncBinary()
					_ = yym1584
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1585 := z.DecBinary()
	_ = yym1585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1586 := r.ContainerType()
		if yyct1586 == codecSelferValueTypeMap1234 {
			yyl1586 := r.ReadMapStart()
			if yyl1586 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1586, d)
			}
		} else if yyct1586 == codecSelferValueTypeArray1234 {
			yyl1586 := r.ReadArrayStart()
			if yyl1586 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1586, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1587Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1587Slc
	var yyhl1587 bool = l >= 0
	for yyj1587 := 0; ; yyj1587++ {
		if yyhl1587 {
			if yyj1587 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1587Slc = r.DecodeBytes(yys1587Slc, true, true)
		yys1587 := string(yys1587Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1587 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1590 := &x.Command
				yym1591 := z.DecBinary()
				_ = yym1591
				if false {
				} else {
					z.F.DecSliceStringX(yyv1590, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1592 := &x.Args
				yym1593 := z.DecBinary()
				_ = yym1593
				if false {
				} else {
					z.F.DecSliceStringX(yyv1592, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1595 := &x.Ports
				yym1596 := z.DecBinary()
				_ = yym1596
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1595), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1597 := &x.Env
				yym1598 := z.DecBinary()
				_ = yym1598
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1597), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1599 := &x.Resources
				yyv1599.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1600 := &x.VolumeMounts
				yym1601 := z.DecBinary()
				_ = yym1601
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1600), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1587)
		} // end switch yys1587
	} // end for yyj1587
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1611 int
	var yyb1611 bool
	var yyhl1611 bool = l >= 0
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1614 := &x.Command
		yym1615 := z.DecBinary()
		_ = yym1615
		if false {
		} else {
			z.F.DecSliceStringX(yyv1614, false, d)
		}
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1616 := &x.Args
		yym1617 := z.DecBinary()
		_ = yym1617
		if false {
		} else {
			z.F.DecSliceStringX(yyv1616, false, d)
		}
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1619 := &x.Ports
		yym1620 := z.DecBinary()
		_ = yym1620
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1619), d)
		}
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1621 := &x.Env
		yym1622 := z.DecBinary()
		_ = yym1622
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1621), d)
		}
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1623 := &x.Resources
		yyv1623.CodecDecodeSelf(d)
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1624 := &x.VolumeMounts
		yym1625 := z.DecBinary()
		_ = yym1625
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1624), d)
		}
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1611++
		if yyhl1611 {
			yyb1611 = yyj1611 > l
		} else {
			yyb1611 = r.CheckBreak()
		}
		if yyb1611 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1611-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1635 := z.EncBinary()
		_ = yym1635
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1636 := !z.EncBinary()
			yy2arr1636 := z.EncBasicHandle().StructToArray
			var yyq1636 [3]bool
			_, _, _ = yysep1636, yyq1636, yy2arr1636
			const yyr1636 bool = false
			yyq1636[0] = x.Exec != nil
			yyq1636[1] = x.HTTPGet != nil
			yyq1636[2] = x.TCPSocket != nil
			var yynn1636 int
			if yyr1636 || yy2arr1636 {
				r.EncodeArrayStart(3)
			} else {
				yynn1636 = 0
				for _, b := range yyq1636 {
					if b {
						yynn1636++
					}
				}
				r.EncodeMapStart(yynn1636)
				yynn1636 = 0
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1636[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1636[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1636[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1636[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1636[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1636[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1636 || yy2arr1636 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1640 := z.DecBinary()
	_ = yym1640
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1641 := r.ContainerType()
		if yyct1641 == codecSelferValueTypeMap1234 {
			yyl1641 := r.ReadMapStart()
			if yyl1641 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1641, d)
			}
		} else if yyct1641 == codecSelferValueTypeArray1234 {
			yyl1641 := r.ReadArrayStart()
			if yyl1641 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1641, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1642Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1642Slc
	var yyhl1642 bool = l >= 0
	for yyj1642 := 0; ; yyj1642++ {
		if yyhl1642 {
			if yyj1642 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1642Slc = r.DecodeBytes(yys1642Slc, true, true)
		yys1642 := string(yys1642Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1642 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1642)
		} // end switch yys1642
	} // end for yyj1642
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1646 int
	var yyb1646 bool
	var yyhl1646 bool = l >= 0
	yyj1646++
	if yyhl1646 {
		yyb1646 = yyj1646 > l
	} else {
		yyb1646 = r.CheckBreak()
	}
	if yyb1646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1646++
	if yyhl1646 {
		yyb1646 = yyj1646 > l
	} else {
		yyb1646 = r.CheckBreak()
	}
	if yyb1646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1646++
	if yyhl1646 {
		yyb1646 = yyj1646 > l
	} else {
		yyb1646 = r.CheckBreak()
	}
	if yyb1646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1646++
		if yyhl1646 {
			yyb1646 = yyj1646 > l
		} else {
			yyb1646 = r.CheckBreak()
		}
		if yyb1646 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1646-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1650 := z.EncBinary()
		_ = yym1650
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1651 := !z.EncBinary()
			yy2arr1651 := z.EncBasicHandle().StructToArray
			var yyq1651 [2]bool
			_, _, _ = yysep1651, yyq1651, yy2arr1651
			const yyr1651 bool = false
			yyq1651[0] = x.PostStart != nil
			yyq1651[1] = x.PreStop != nil
			var yynn1651 int
			if yyr1651 || yy2arr1651 {
				r.EncodeArrayStart(2)
			} else {
				yynn1651 = 0
				for _, b := range yyq1651 {
					if b {
						yynn1651++
					}
				}
				r.EncodeMapStart(yynn1651)
				yynn1651 = 0
			}
			if yyr1651 || yy2arr1651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1651[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1651[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1651 || yy2arr1651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1651[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1651[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1651 || yy2arr1651 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1654 := z.DecBinary()
	_ = yym1654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1655 := r.ContainerType()
		if yyct1655 == codecSelferValueTypeMap1234 {
			yyl1655 := r.ReadMapStart()
			if yyl1655 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1655, d)
			}
		} else if yyct1655 == codecSelferValueTypeArray1234 {
			yyl1655 := r.ReadArrayStart()
			if yyl1655 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1656Slc
	var yyhl1656 bool = l >= 0
	for yyj1656 := 0; ; yyj1656++ {
		if yyhl1656 {
			if yyj1656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1656Slc = r.DecodeBytes(yys1656Slc, true, true)
		yys1656 := string(yys1656Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1656 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1656)
		} // end switch yys1656
	} // end for yyj1656
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1659 int
	var yyb1659 bool
	var yyhl1659 bool = l >= 0
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1659++
		if yyhl1659 {
			yyb1659 = yyj1659 > l
		} else {
			yyb1659 = r.CheckBreak()
		}
		if yyb1659 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1659-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1662 := z.EncBinary()
	_ = yym1662
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1663 := z.DecBinary()
	_ = yym1663
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1664 := z.EncBinary()
		_ = yym1664
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1665 := !z.EncBinary()
			yy2arr1665 := z.EncBasicHandle().StructToArray
			var yyq1665 [2]bool
			_, _, _ = yysep1665, yyq1665, yy2arr1665
			const yyr1665 bool = false
			yyq1665[0] = x.Reason != ""
			yyq1665[1] = x.Message != ""
			var yynn1665 int
			if yyr1665 || yy2arr1665 {
				r.EncodeArrayStart(2)
			} else {
				yynn1665 = 0
				for _, b := range yyq1665 {
					if b {
						yynn1665++
					}
				}
				r.EncodeMapStart(yynn1665)
				yynn1665 = 0
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1665[0] {
					yym1667 := z.EncBinary()
					_ = yym1667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1665[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1668 := z.EncBinary()
					_ = yym1668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1665[1] {
					yym1670 := z.EncBinary()
					_ = yym1670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1665[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1671 := z.EncBinary()
					_ = yym1671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1672 := z.DecBinary()
	_ = yym1672
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1673 := r.ContainerType()
		if yyct1673 == codecSelferValueTypeMap1234 {
			yyl1673 := r.ReadMapStart()
			if yyl1673 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1673, d)
			}
		} else if yyct1673 == codecSelferValueTypeArray1234 {
			yyl1673 := r.ReadArrayStart()
			if yyl1673 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1673, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1674Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1674Slc
	var yyhl1674 bool = l >= 0
	for yyj1674 := 0; ; yyj1674++ {
		if yyhl1674 {
			if yyj1674 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1674Slc = r.DecodeBytes(yys1674Slc, true, true)
		yys1674 := string(yys1674Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1674 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1674)
		} // end switch yys1674
	} // end for yyj1674
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1677 int
	var yyb1677 bool
	var yyhl1677 bool = l >= 0
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1677++
		if yyhl1677 {
			yyb1677 = yyj1677 > l
		} else {
			yyb1677 = r.CheckBreak()
		}
		if yyb1677 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1677-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1680 := z.EncBinary()
		_ = yym1680
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1681 := !z.EncBinary()
			yy2arr1681 := z.EncBasicHandle().StructToArray
			var yyq1681 [1]bool
			_, _, _ = yysep1681, yyq1681, yy2arr1681
			const yyr1681 bool = false
			yyq1681[0] = true
			var yynn1681 int
			if yyr1681 || yy2arr1681 {
				r.EncodeArrayStart(1)
			} else {
				yynn1681 = 0
				for _, b := range yyq1681 {
					if b {
						yynn1681++
					}
				}
				r.EncodeMapStart(yynn1681)
				yynn1681 = 0
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1681[0] {
					yy1683 := &x.StartedAt
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1683) {
					} else if yym1684 {
						z.EncBinaryMarshal(yy1683)
					} else if !yym1684 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1683)
					} else {
						z.EncFallback(yy1683)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1681[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1685 := &x.StartedAt
					yym1686 := z.EncBinary()
					_ = yym1686
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1685) {
					} else if yym1686 {
						z.EncBinaryMarshal(yy1685)
					} else if !yym1686 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1685)
					} else {
						z.EncFallback(yy1685)
					}
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1687 := z.DecBinary()
	_ = yym1687
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1688 := r.ContainerType()
		if yyct1688 == codecSelferValueTypeMap1234 {
			yyl1688 := r.ReadMapStart()
			if yyl1688 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1688, d)
			}
		} else if yyct1688 == codecSelferValueTypeArray1234 {
			yyl1688 := r.ReadArrayStart()
			if yyl1688 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1688, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1689Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1689Slc
	var yyhl1689 bool = l >= 0
	for yyj1689 := 0; ; yyj1689++ {
		if yyhl1689 {
			if yyj1689 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1689Slc = r.DecodeBytes(yys1689Slc, true, true)
		yys1689 := string(yys1689Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1689 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1690 := &x.StartedAt
				yym1691 := z.DecBinary()
				_ = yym1691
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1690) {
				} else if yym1691 {
					z.DecBinaryUnmarshal(yyv1690)
				} else if !yym1691 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1690)
				} else {
					z.DecFallback(yyv1690, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1689)
		} // end switch yys1689
	} // end for yyj1689
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1692 int
	var yyb1692 bool
	var yyhl1692 bool = l >= 0
	yyj1692++
	if yyhl1692 {
		yyb1692 = yyj1692 > l
	} else {
		yyb1692 = r.CheckBreak()
	}
	if yyb1692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1693 := &x.StartedAt
		yym1694 := z.DecBinary()
		_ = yym1694
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1693) {
		} else if yym1694 {
			z.DecBinaryUnmarshal(yyv1693)
		} else if !yym1694 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1693)
		} else {
			z.DecFallback(yyv1693, false)
		}
	}
	for {
		yyj1692++
		if yyhl1692 {
			yyb1692 = yyj1692 > l
		} else {
			yyb1692 = r.CheckBreak()
		}
		if yyb1692 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1692-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1695 := z.EncBinary()
		_ = yym1695
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1696 := !z.EncBinary()
			yy2arr1696 := z.EncBasicHandle().StructToArray
			var yyq1696 [7]bool
			_, _, _ = yysep1696, yyq1696, yy2arr1696
			const yyr1696 bool = false
			yyq1696[1] = x.Signal != 0
			yyq1696[2] = x.Reason != ""
			yyq1696[3] = x.Message != ""
			yyq1696[4] = true
			yyq1696[5] = true
			yyq1696[6] = x.ContainerID != ""
			var yynn1696 int
			if yyr1696 || yy2arr1696 {
				r.EncodeArrayStart(7)
			} else {
				yynn1696 = 1
				for _, b := range yyq1696 {
					if b {
						yynn1696++
					}
				}
				r.EncodeMapStart(yynn1696)
				yynn1696 = 0
			}
			if yyr1696 || yy2arr1696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1698 := z.EncBinary()
				_ = yym1698
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1699 := z.EncBinary()
				_ = yym1699
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1696 || yy2arr1696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1696[1] {
					yym1701 := z.EncBinary()
					_ = yym1701
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1696[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1702 := z.EncBinary()
					_ = yym1702
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1696 || yy2arr1696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1696[2] {
					yym1704 := z.EncBinary()
					_ = yym1704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1696[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1705 := z.EncBinary()
					_ = yym1705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1696 || yy2arr1696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1696[3] {
					yym1707 := z.EncBinary()
					_ = yym1707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1696[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1708 := z.EncBinary()
					_ = yym1708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1696 || yy2arr1696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1696[4] {
					yy1710 := &x.StartedAt
					yym1711 := z.EncBinary()
					_ = yym1711
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1710) {
					} else if yym1711 {
						z.EncBinaryMarshal(yy1710)
					} else if !yym1711 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1710)
					} else {
						z.EncFallback(yy1710)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1696[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1712 := &x.StartedAt
					yym1713 := z.EncBinary()
					_ = yym1713
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1712) {
					} else if yym1713 {
						z.EncBinaryMarshal(yy1712)
					} else if !yym1713 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1712)
					} else {
						z.EncFallback(yy1712)
					}
				}
			}
			if yyr1696 || yy2arr1696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1696[5] {
					yy1715 := &x.FinishedAt
					yym1716 := z.EncBinary()
					_ = yym1716
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1715) {
					} else if yym1716 {
						z.EncBinaryMarshal(yy1715)
					} else if !yym1716 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1715)
					} else {
						z.EncFallback(yy1715)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1696[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1717 := &x.FinishedAt
					yym1718 := z.EncBinary()
					_ = yym1718
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1717) {
					} else if yym1718 {
						z.EncBinaryMarshal(yy1717)
					} else if !yym1718 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1717)
					} else {
						z.EncFallback(yy1717)
					}
				}
			}
			if yyr1696 || yy2arr1696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1696[6] {
					yym1720 := z.EncBinary()
					_ = yym1720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1696[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1721 := z.EncBinary()
					_ = yym1721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1696 || yy2arr1696 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1722 := z.DecBinary()
	_ = yym1722
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1723 := r.ContainerType()
		if yyct1723 == codecSelferValueTypeMap1234 {
			yyl1723 := r.ReadMapStart()
			if yyl1723 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1723, d)
			}
		} else if yyct1723 == codecSelferValueTypeArray1234 {
			yyl1723 := r.ReadArrayStart()
			if yyl1723 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1723, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1724Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1724Slc
	var yyhl1724 bool = l >= 0
	for yyj1724 := 0; ; yyj1724++ {
		if yyhl1724 {
			if yyj1724 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1724Slc = r.DecodeBytes(yys1724Slc, true, true)
		yys1724 := string(yys1724Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1724 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1729 := &x.StartedAt
				yym1730 := z.DecBinary()
				_ = yym1730
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1729) {
				} else if yym1730 {
					z.DecBinaryUnmarshal(yyv1729)
				} else if !yym1730 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1729)
				} else {
					z.DecFallback(yyv1729, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1731 := &x.FinishedAt
				yym1732 := z.DecBinary()
				_ = yym1732
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1731) {
				} else if yym1732 {
					z.DecBinaryUnmarshal(yyv1731)
				} else if !yym1732 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1731)
				} else {
					z.DecFallback(yyv1731, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1724)
		} // end switch yys1724
	} // end for yyj1724
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1734 int
	var yyb1734 bool
	var yyhl1734 bool = l >= 0
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1739 := &x.StartedAt
		yym1740 := z.DecBinary()
		_ = yym1740
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1739) {
		} else if yym1740 {
			z.DecBinaryUnmarshal(yyv1739)
		} else if !yym1740 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1739)
		} else {
			z.DecFallback(yyv1739, false)
		}
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1741 := &x.FinishedAt
		yym1742 := z.DecBinary()
		_ = yym1742
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1741) {
		} else if yym1742 {
			z.DecBinaryUnmarshal(yyv1741)
		} else if !yym1742 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1741)
		} else {
			z.DecFallback(yyv1741, false)
		}
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1734++
		if yyhl1734 {
			yyb1734 = yyj1734 > l
		} else {
			yyb1734 = r.CheckBreak()
		}
		if yyb1734 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1734-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1744 := z.EncBinary()
		_ = yym1744
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1745 := !z.EncBinary()
			yy2arr1745 := z.EncBasicHandle().StructToArray
			var yyq1745 [3]bool
			_, _, _ = yysep1745, yyq1745, yy2arr1745
			const yyr1745 bool = false
			yyq1745[0] = x.Waiting != nil
			yyq1745[1] = x.Running != nil
			yyq1745[2] = x.Terminated != nil
			var yynn1745 int
			if yyr1745 || yy2arr1745 {
				r.EncodeArrayStart(3)
			} else {
				yynn1745 = 0
				for _, b := range yyq1745 {
					if b {
						yynn1745++
					}
				}
				r.EncodeMapStart(yynn1745)
				yynn1745 = 0
			}
			if yyr1745 || yy2arr1745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1745[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1745[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1745 || yy2arr1745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1745[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1745[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1745 || yy2arr1745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1745[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1745[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1745 || yy2arr1745 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1749 := z.DecBinary()
	_ = yym1749
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1750 := r.ContainerType()
		if yyct1750 == codecSelferValueTypeMap1234 {
			yyl1750 := r.ReadMapStart()
			if yyl1750 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1750, d)
			}
		} else if yyct1750 == codecSelferValueTypeArray1234 {
			yyl1750 := r.ReadArrayStart()
			if yyl1750 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1750, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1751Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1751Slc
	var yyhl1751 bool = l >= 0
	for yyj1751 := 0; ; yyj1751++ {
		if yyhl1751 {
			if yyj1751 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1751Slc = r.DecodeBytes(yys1751Slc, true, true)
		yys1751 := string(yys1751Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1751 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1751)
		} // end switch yys1751
	} // end for yyj1751
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1755 int
	var yyb1755 bool
	var yyhl1755 bool = l >= 0
	yyj1755++
	if yyhl1755 {
		yyb1755 = yyj1755 > l
	} else {
		yyb1755 = r.CheckBreak()
	}
	if yyb1755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1755++
	if yyhl1755 {
		yyb1755 = yyj1755 > l
	} else {
		yyb1755 = r.CheckBreak()
	}
	if yyb1755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1755++
	if yyhl1755 {
		yyb1755 = yyj1755 > l
	} else {
		yyb1755 = r.CheckBreak()
	}
	if yyb1755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1755++
		if yyhl1755 {
			yyb1755 = yyj1755 > l
		} else {
			yyb1755 = r.CheckBreak()
		}
		if yyb1755 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1755-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1759 := z.EncBinary()
		_ = yym1759
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1760 := !z.EncBinary()
			yy2arr1760 := z.EncBasicHandle().StructToArray
			var yyq1760 [8]bool
			_, _, _ = yysep1760, yyq1760, yy2arr1760
			const yyr1760 bool = false
			yyq1760[1] = true
			yyq1760[2] = true
			yyq1760[7] = x.ContainerID != ""
			var yynn1760 int
			if yyr1760 || yy2arr1760 {
				r.EncodeArrayStart(8)
			} else {
				yynn1760 = 5
				for _, b := range yyq1760 {
					if b {
						yynn1760++
					}
				}
				r.EncodeMapStart(yynn1760)
				yynn1760 = 0
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1762 := z.EncBinary()
				_ = yym1762
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1763 := z.EncBinary()
				_ = yym1763
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1760[1] {
					yy1765 := &x.State
					yy1765.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1760[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1766 := &x.State
					yy1766.CodecEncodeSelf(e)
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1760[2] {
					yy1768 := &x.LastTerminationState
					yy1768.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1760[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1769 := &x.LastTerminationState
					yy1769.CodecEncodeSelf(e)
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1771 := z.EncBinary()
				_ = yym1771
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1772 := z.EncBinary()
				_ = yym1772
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1774 := z.EncBinary()
				_ = yym1774
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1775 := z.EncBinary()
				_ = yym1775
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1777 := z.EncBinary()
				_ = yym1777
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1778 := z.EncBinary()
				_ = yym1778
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1780 := z.EncBinary()
				_ = yym1780
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1781 := z.EncBinary()
				_ = yym1781
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1760[7] {
					yym1783 := z.EncBinary()
					_ = yym1783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1760[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1784 := z.EncBinary()
					_ = yym1784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1785 := z.DecBinary()
	_ = yym1785
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1786 := r.ContainerType()
		if yyct1786 == codecSelferValueTypeMap1234 {
			yyl1786 := r.ReadMapStart()
			if yyl1786 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1786, d)
			}
		} else if yyct1786 == codecSelferValueTypeArray1234 {
			yyl1786 := r.ReadArrayStart()
			if yyl1786 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1786, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1787Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1787Slc
	var yyhl1787 bool = l >= 0
	for yyj1787 := 0; ; yyj1787++ {
		if yyhl1787 {
			if yyj1787 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1787Slc = r.DecodeBytes(yys1787Slc, true, true)
		yys1787 := string(yys1787Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1787 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1789 := &x.State
				yyv1789.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1790 := &x.LastTerminationState
				yyv1790.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1787)
		} // end switch yys1787
	} // end for yyj1787
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1796 int
	var yyb1796 bool
	var yyhl1796 bool = l >= 0
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1798 := &x.State
		yyv1798.CodecDecodeSelf(d)
	}
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1799 := &x.LastTerminationState
		yyv1799.CodecDecodeSelf(d)
	}
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1796++
		if yyhl1796 {
			yyb1796 = yyj1796 > l
		} else {
			yyb1796 = r.CheckBreak()
		}
		if yyb1796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1805 := z.EncBinary()
	_ = yym1805
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1806 := z.DecBinary()
	_ = yym1806
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1807 := z.EncBinary()
	_ = yym1807
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1808 := z.DecBinary()
	_ = yym1808
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1809 := z.EncBinary()
		_ = yym1809
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1810 := !z.EncBinary()
			yy2arr1810 := z.EncBasicHandle().StructToArray
			var yyq1810 [6]bool
			_, _, _ = yysep1810, yyq1810, yy2arr1810
			const yyr1810 bool = false
			yyq1810[2] = true
			yyq1810[3] = true
			yyq1810[4] = x.Reason != ""
			yyq1810[5] = x.Message != ""
			var yynn1810 int
			if yyr1810 || yy2arr1810 {
				r.EncodeArrayStart(6)
			} else {
				yynn1810 = 2
				for _, b := range yyq1810 {
					if b {
						yynn1810++
					}
				}
				r.EncodeMapStart(yynn1810)
				yynn1810 = 0
			}
			if yyr1810 || yy2arr1810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1810 || yy2arr1810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1810 || yy2arr1810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1810[2] {
					yy1814 := &x.LastProbeTime
					yym1815 := z.EncBinary()
					_ = yym1815
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1814) {
					} else if yym1815 {
						z.EncBinaryMarshal(yy1814)
					} else if !yym1815 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1814)
					} else {
						z.EncFallback(yy1814)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1810[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1816 := &x.LastProbeTime
					yym1817 := z.EncBinary()
					_ = yym1817
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1816) {
					} else if yym1817 {
						z.EncBinaryMarshal(yy1816)
					} else if !yym1817 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1816)
					} else {
						z.EncFallback(yy1816)
					}
				}
			}
			if yyr1810 || yy2arr1810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1810[3] {
					yy1819 := &x.LastTransitionTime
					yym1820 := z.EncBinary()
					_ = yym1820
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1819) {
					} else if yym1820 {
						z.EncBinaryMarshal(yy1819)
					} else if !yym1820 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1819)
					} else {
						z.EncFallback(yy1819)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1810[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1821 := &x.LastTransitionTime
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1821) {
					} else if yym1822 {
						z.EncBinaryMarshal(yy1821)
					} else if !yym1822 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1821)
					} else {
						z.EncFallback(yy1821)
					}
				}
			}
			if yyr1810 || yy2arr1810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1810[4] {
					yym1824 := z.EncBinary()
					_ = yym1824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1810[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1825 := z.EncBinary()
					_ = yym1825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1810 || yy2arr1810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1810[5] {
					yym1827 := z.EncBinary()
					_ = yym1827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1810[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1828 := z.EncBinary()
					_ = yym1828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1810 || yy2arr1810 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1829 := z.DecBinary()
	_ = yym1829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1830 := r.ContainerType()
		if yyct1830 == codecSelferValueTypeMap1234 {
			yyl1830 := r.ReadMapStart()
			if yyl1830 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1830, d)
			}
		} else if yyct1830 == codecSelferValueTypeArray1234 {
			yyl1830 := r.ReadArrayStart()
			if yyl1830 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1830, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1831Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1831Slc
	var yyhl1831 bool = l >= 0
	for yyj1831 := 0; ; yyj1831++ {
		if yyhl1831 {
			if yyj1831 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1831Slc = r.DecodeBytes(yys1831Slc, true, true)
		yys1831 := string(yys1831Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1831 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1834 := &x.LastProbeTime
				yym1835 := z.DecBinary()
				_ = yym1835
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1834) {
				} else if yym1835 {
					z.DecBinaryUnmarshal(yyv1834)
				} else if !yym1835 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1834)
				} else {
					z.DecFallback(yyv1834, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1836 := &x.LastTransitionTime
				yym1837 := z.DecBinary()
				_ = yym1837
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1836) {
				} else if yym1837 {
					z.DecBinaryUnmarshal(yyv1836)
				} else if !yym1837 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1836)
				} else {
					z.DecFallback(yyv1836, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1831)
		} // end switch yys1831
	} // end for yyj1831
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1840 int
	var yyb1840 bool
	var yyhl1840 bool = l >= 0
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1843 := &x.LastProbeTime
		yym1844 := z.DecBinary()
		_ = yym1844
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1843) {
		} else if yym1844 {
			z.DecBinaryUnmarshal(yyv1843)
		} else if !yym1844 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1843)
		} else {
			z.DecFallback(yyv1843, false)
		}
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1845 := &x.LastTransitionTime
		yym1846 := z.DecBinary()
		_ = yym1846
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1845) {
		} else if yym1846 {
			z.DecBinaryUnmarshal(yyv1845)
		} else if !yym1846 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1845)
		} else {
			z.DecFallback(yyv1845, false)
		}
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1840++
		if yyhl1840 {
			yyb1840 = yyj1840 > l
		} else {
			yyb1840 = r.CheckBreak()
		}
		if yyb1840 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1840-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1849 := z.EncBinary()
	_ = yym1849
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1850 := z.DecBinary()
	_ = yym1850
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1851 := z.EncBinary()
		_ = yym1851
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1852 := !z.EncBinary()
			yy2arr1852 := z.EncBasicHandle().StructToArray
			var yyq1852 [4]bool
			_, _, _ = yysep1852, yyq1852, yy2arr1852
			const yyr1852 bool = false
			yyq1852[0] = x.Kind != ""
			yyq1852[1] = x.APIVersion != ""
			yyq1852[2] = true
			var yynn1852 int
			if yyr1852 || yy2arr1852 {
				r.EncodeArrayStart(4)
			} else {
				yynn1852 = 1
				for _, b := range yyq1852 {
					if b {
						yynn1852++
					}
				}
				r.EncodeMapStart(yynn1852)
				yynn1852 = 0
			}
			if yyr1852 || yy2arr1852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1852[0] {
					yym1854 := z.EncBinary()
					_ = yym1854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1852[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1855 := z.EncBinary()
					_ = yym1855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1852 || yy2arr1852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1852[1] {
					yym1857 := z.EncBinary()
					_ = yym1857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1852[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1858 := z.EncBinary()
					_ = yym1858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1852 || yy2arr1852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1852[2] {
					yy1860 := &x.ListMeta
					yym1861 := z.EncBinary()
					_ = yym1861
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1860) {
					} else {
						z.EncFallback(yy1860)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1852[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1862 := &x.ListMeta
					yym1863 := z.EncBinary()
					_ = yym1863
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1862) {
					} else {
						z.EncFallback(yy1862)
					}
				}
			}
			if yyr1852 || yy2arr1852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1865 := z.EncBinary()
					_ = yym1865
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1866 := z.EncBinary()
					_ = yym1866
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1852 || yy2arr1852 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1867 := z.DecBinary()
	_ = yym1867
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1868 := r.ContainerType()
		if yyct1868 == codecSelferValueTypeMap1234 {
			yyl1868 := r.ReadMapStart()
			if yyl1868 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1868, d)
			}
		} else if yyct1868 == codecSelferValueTypeArray1234 {
			yyl1868 := r.ReadArrayStart()
			if yyl1868 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1868, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1869Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1869Slc
	var yyhl1869 bool = l >= 0
	for yyj1869 := 0; ; yyj1869++ {
		if yyhl1869 {
			if yyj1869 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1869Slc = r.DecodeBytes(yys1869Slc, true, true)
		yys1869 := string(yys1869Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1869 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1872 := &x.ListMeta
				yym1873 := z.DecBinary()
				_ = yym1873
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1872) {
				} else {
					z.DecFallback(yyv1872, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1874 := &x.Items
				yym1875 := z.DecBinary()
				_ = yym1875
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1874), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1869)
		} // end switch yys1869
	} // end for yyj1869
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1876 int
	var yyb1876 bool
	var yyhl1876 bool = l >= 0
	yyj1876++
	if yyhl1876 {
		yyb1876 = yyj1876 > l
	} else {
		yyb1876 = r.CheckBreak()
	}
	if yyb1876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1876++
	if yyhl1876 {
		yyb1876 = yyj1876 > l
	} else {
		yyb1876 = r.CheckBreak()
	}
	if yyb1876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1876++
	if yyhl1876 {
		yyb1876 = yyj1876 > l
	} else {
		yyb1876 = r.CheckBreak()
	}
	if yyb1876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1879 := &x.ListMeta
		yym1880 := z.DecBinary()
		_ = yym1880
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1879) {
		} else {
			z.DecFallback(yyv1879, false)
		}
	}
	yyj1876++
	if yyhl1876 {
		yyb1876 = yyj1876 > l
	} else {
		yyb1876 = r.CheckBreak()
	}
	if yyb1876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1881 := &x.Items
		yym1882 := z.DecBinary()
		_ = yym1882
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1881), d)
		}
	}
	for {
		yyj1876++
		if yyhl1876 {
			yyb1876 = yyj1876 > l
		} else {
			yyb1876 = r.CheckBreak()
		}
		if yyb1876 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1876-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1883 := z.EncBinary()
	_ = yym1883
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1884 := z.DecBinary()
	_ = yym1884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1885 := z.EncBinary()
		_ = yym1885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1886 := !z.EncBinary()
			yy2arr1886 := z.EncBasicHandle().StructToArray
			var yyq1886 [1]bool
			_, _, _ = yysep1886, yyq1886, yy2arr1886
			const yyr1886 bool = false
			var yynn1886 int
			if yyr1886 || yy2arr1886 {
				r.EncodeArrayStart(1)
			} else {
				yynn1886 = 1
				for _, b := range yyq1886 {
					if b {
						yynn1886++
					}
				}
				r.EncodeMapStart(yynn1886)
				yynn1886 = 0
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1888 := z.EncBinary()
					_ = yym1888
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1889 := z.EncBinary()
					_ = yym1889
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1890 := z.DecBinary()
	_ = yym1890
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1891 := r.ContainerType()
		if yyct1891 == codecSelferValueTypeMap1234 {
			yyl1891 := r.ReadMapStart()
			if yyl1891 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1891, d)
			}
		} else if yyct1891 == codecSelferValueTypeArray1234 {
			yyl1891 := r.ReadArrayStart()
			if yyl1891 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1891, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1892Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1892Slc
	var yyhl1892 bool = l >= 0
	for yyj1892 := 0; ; yyj1892++ {
		if yyhl1892 {
			if yyj1892 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1892Slc = r.DecodeBytes(yys1892Slc, true, true)
		yys1892 := string(yys1892Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1892 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1893 := &x.NodeSelectorTerms
				yym1894 := z.DecBinary()
				_ = yym1894
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1893), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1892)
		} // end switch yys1892
	} // end for yyj1892
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1895 int
	var yyb1895 bool
	var yyhl1895 bool = l >= 0
	yyj1895++
	if yyhl1895 {
		yyb1895 = yyj1895 > l
	} else {
		yyb1895 = r.CheckBreak()
	}
	if yyb1895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1896 := &x.NodeSelectorTerms
		yym1897 := z.DecBinary()
		_ = yym1897
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1896), d)
		}
	}
	for {
		yyj1895++
		if yyhl1895 {
			yyb1895 = yyj1895 > l
		} else {
			yyb1895 = r.CheckBreak()
		}
		if yyb1895 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1895-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1898 := z.EncBinary()
		_ = yym1898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1899 := !z.EncBinary()
			yy2arr1899 := z.EncBasicHandle().StructToArray
			var yyq1899 [1]bool
			_, _, _ = yysep1899, yyq1899, yy2arr1899
			const yyr1899 bool = false
			var yynn1899 int
			if yyr1899 || yy2arr1899 {
				r.EncodeArrayStart(1)
			} else {
				yynn1899 = 1
				for _, b := range yyq1899 {
					if b {
						yynn1899++
					}
				}
				r.EncodeMapStart(yynn1899)
				yynn1899 = 0
			}
			if yyr1899 || yy2arr1899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1901 := z.EncBinary()
					_ = yym1901
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1902 := z.EncBinary()
					_ = yym1902
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1899 || yy2arr1899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1903 := z.DecBinary()
	_ = yym1903
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1904 := r.ContainerType()
		if yyct1904 == codecSelferValueTypeMap1234 {
			yyl1904 := r.ReadMapStart()
			if yyl1904 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1904, d)
			}
		} else if yyct1904 == codecSelferValueTypeArray1234 {
			yyl1904 := r.ReadArrayStart()
			if yyl1904 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1904, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1905Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1905Slc
	var yyhl1905 bool = l >= 0
	for yyj1905 := 0; ; yyj1905++ {
		if yyhl1905 {
			if yyj1905 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1905Slc = r.DecodeBytes(yys1905Slc, true, true)
		yys1905 := string(yys1905Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1905 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1906 := &x.MatchExpressions
				yym1907 := z.DecBinary()
				_ = yym1907
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1906), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1905)
		} // end switch yys1905
	} // end for yyj1905
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1908 int
	var yyb1908 bool
	var yyhl1908 bool = l >= 0
	yyj1908++
	if yyhl1908 {
		yyb1908 = yyj1908 > l
	} else {
		yyb1908 = r.CheckBreak()
	}
	if yyb1908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1909 := &x.MatchExpressions
		yym1910 := z.DecBinary()
		_ = yym1910
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1909), d)
		}
	}
	for {
		yyj1908++
		if yyhl1908 {
			yyb1908 = yyj1908 > l
		} else {
			yyb1908 = r.CheckBreak()
		}
		if yyb1908 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1908-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1911 := z.EncBinary()
		_ = yym1911
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1912 := !z.EncBinary()
			yy2arr1912 := z.EncBasicHandle().StructToArray
			var yyq1912 [3]bool
			_, _, _ = yysep1912, yyq1912, yy2arr1912
			const yyr1912 bool = false
			yyq1912[2] = len(x.Values) != 0
			var yynn1912 int
			if yyr1912 || yy2arr1912 {
				r.EncodeArrayStart(3)
			} else {
				yynn1912 = 2
				for _, b := range yyq1912 {
					if b {
						yynn1912++
					}
				}
				r.EncodeMapStart(yynn1912)
				yynn1912 = 0
			}
			if yyr1912 || yy2arr1912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1914 := z.EncBinary()
				_ = yym1914
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1915 := z.EncBinary()
				_ = yym1915
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1912 || yy2arr1912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1912 || yy2arr1912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1912[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1918 := z.EncBinary()
						_ = yym1918
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1912[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1919 := z.EncBinary()
						_ = yym1919
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1912 || yy2arr1912 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1920 := z.DecBinary()
	_ = yym1920
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1921 := r.ContainerType()
		if yyct1921 == codecSelferValueTypeMap1234 {
			yyl1921 := r.ReadMapStart()
			if yyl1921 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1921, d)
			}
		} else if yyct1921 == codecSelferValueTypeArray1234 {
			yyl1921 := r.ReadArrayStart()
			if yyl1921 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1921, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1922Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1922Slc
	var yyhl1922 bool = l >= 0
	for yyj1922 := 0; ; yyj1922++ {
		if yyhl1922 {
			if yyj1922 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1922Slc = r.DecodeBytes(yys1922Slc, true, true)
		yys1922 := string(yys1922Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1922 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1925 := &x.Values
				yym1926 := z.DecBinary()
				_ = yym1926
				if false {
				} else {
					z.F.DecSliceStringX(yyv1925, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1922)
		} // end switch yys1922
	} // end for yyj1922
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1927 int
	var yyb1927 bool
	var yyhl1927 bool = l >= 0
	yyj1927++
	if yyhl1927 {
		yyb1927 = yyj1927 > l
	} else {
		yyb1927 = r.CheckBreak()
	}
	if yyb1927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1927++
	if yyhl1927 {
		yyb1927 = yyj1927 > l
	} else {
		yyb1927 = r.CheckBreak()
	}
	if yyb1927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1927++
	if yyhl1927 {
		yyb1927 = yyj1927 > l
	} else {
		yyb1927 = r.CheckBreak()
	}
	if yyb1927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1930 := &x.Values
		yym1931 := z.DecBinary()
		_ = yym1931
		if false {
		} else {
			z.F.DecSliceStringX(yyv1930, false, d)
		}
	}
	for {
		yyj1927++
		if yyhl1927 {
			yyb1927 = yyj1927 > l
		} else {
			yyb1927 = r.CheckBreak()
		}
		if yyb1927 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1927-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1932 := z.EncBinary()
	_ = yym1932
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1933 := z.DecBinary()
	_ = yym1933
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1934 := z.EncBinary()
		_ = yym1934
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1935 := !z.EncBinary()
			yy2arr1935 := z.EncBasicHandle().StructToArray
			var yyq1935 [3]bool
			_, _, _ = yysep1935, yyq1935, yy2arr1935
			const yyr1935 bool = false
			yyq1935[0] = x.NodeAffinity != nil
			yyq1935[1] = x.PodAffinity != nil
			yyq1935[2] = x.PodAntiAffinity != nil
			var yynn1935 int
			if yyr1935 || yy2arr1935 {
				r.EncodeArrayStart(3)
			} else {
				yynn1935 = 0
				for _, b := range yyq1935 {
					if b {
						yynn1935++
					}
				}
				r.EncodeMapStart(yynn1935)
				yynn1935 = 0
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1935[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1935[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1935[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1935[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1935[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1935[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1939 := z.DecBinary()
	_ = yym1939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1940 := r.ContainerType()
		if yyct1940 == codecSelferValueTypeMap1234 {
			yyl1940 := r.ReadMapStart()
			if yyl1940 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1940, d)
			}
		} else if yyct1940 == codecSelferValueTypeArray1234 {
			yyl1940 := r.ReadArrayStart()
			if yyl1940 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1940, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1941Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1941Slc
	var yyhl1941 bool = l >= 0
	for yyj1941 := 0; ; yyj1941++ {
		if yyhl1941 {
			if yyj1941 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1941Slc = r.DecodeBytes(yys1941Slc, true, true)
		yys1941 := string(yys1941Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1941 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1941)
		} // end switch yys1941
	} // end for yyj1941
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1945 int
	var yyb1945 bool
	var yyhl1945 bool = l >= 0
	yyj1945++
	if yyhl1945 {
		yyb1945 = yyj1945 > l
	} else {
		yyb1945 = r.CheckBreak()
	}
	if yyb1945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1945++
	if yyhl1945 {
		yyb1945 = yyj1945 > l
	} else {
		yyb1945 = r.CheckBreak()
	}
	if yyb1945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1945++
	if yyhl1945 {
		yyb1945 = yyj1945 > l
	} else {
		yyb1945 = r.CheckBreak()
	}
	if yyb1945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1945++
		if yyhl1945 {
			yyb1945 = yyj1945 > l
		} else {
			yyb1945 = r.CheckBreak()
		}
		if yyb1945 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1945-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1949 := z.EncBinary()
		_ = yym1949
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1950 := !z.EncBinary()
			yy2arr1950 := z.EncBasicHandle().StructToArray
			var yyq1950 [2]bool
			_, _, _ = yysep1950, yyq1950, yy2arr1950
			const yyr1950 bool = false
			yyq1950[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1950[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1950 int
			if yyr1950 || yy2arr1950 {
				r.EncodeArrayStart(2)
			} else {
				yynn1950 = 0
				for _, b := range yyq1950 {
					if b {
						yynn1950++
					}
				}
				r.EncodeMapStart(yynn1950)
				yynn1950 = 0
			}
			if yyr1950 || yy2arr1950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1950[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1952 := z.EncBinary()
						_ = yym1952
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1950[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1953 := z.EncBinary()
						_ = yym1953
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1950 || yy2arr1950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1950[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1955 := z.EncBinary()
						_ = yym1955
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1950[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1956 := z.EncBinary()
						_ = yym1956
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1950 || yy2arr1950 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1957 := z.DecBinary()
	_ = yym1957
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1958 := r.ContainerType()
		if yyct1958 == codecSelferValueTypeMap1234 {
			yyl1958 := r.ReadMapStart()
			if yyl1958 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1958, d)
			}
		} else if yyct1958 == codecSelferValueTypeArray1234 {
			yyl1958 := r.ReadArrayStart()
			if yyl1958 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1958, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1959Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1959Slc
	var yyhl1959 bool = l >= 0
	for yyj1959 := 0; ; yyj1959++ {
		if yyhl1959 {
			if yyj1959 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1959Slc = r.DecodeBytes(yys1959Slc, true, true)
		yys1959 := string(yys1959Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1959 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1960 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1961 := z.DecBinary()
				_ = yym1961
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1960), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1962 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1963 := z.DecBinary()
				_ = yym1963
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1962), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1959)
		} // end switch yys1959
	} // end for yyj1959
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1964 int
	var yyb1964 bool
	var yyhl1964 bool = l >= 0
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1965 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1966 := z.DecBinary()
		_ = yym1966
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1965), d)
		}
	}
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1967 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1968 := z.DecBinary()
		_ = yym1968
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1967), d)
		}
	}
	for {
		yyj1964++
		if yyhl1964 {
			yyb1964 = yyj1964 > l
		} else {
			yyb1964 = r.CheckBreak()
		}
		if yyb1964 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1964-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1969 := z.EncBinary()
		_ = yym1969
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1970 := !z.EncBinary()
			yy2arr1970 := z.EncBasicHandle().StructToArray
			var yyq1970 [2]bool
			_, _, _ = yysep1970, yyq1970, yy2arr1970
			const yyr1970 bool = false
			yyq1970[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1970[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1970 int
			if yyr1970 || yy2arr1970 {
				r.EncodeArrayStart(2)
			} else {
				yynn1970 = 0
				for _, b := range yyq1970 {
					if b {
						yynn1970++
					}
				}
				r.EncodeMapStart(yynn1970)
				yynn1970 = 0
			}
			if yyr1970 || yy2arr1970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1970[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1972 := z.EncBinary()
						_ = yym1972
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1970[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1973 := z.EncBinary()
						_ = yym1973
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1970 || yy2arr1970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1970[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1975 := z.EncBinary()
						_ = yym1975
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1970[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1976 := z.EncBinary()
						_ = yym1976
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1970 || yy2arr1970 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1977 := z.DecBinary()
	_ = yym1977
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1978 := r.ContainerType()
		if yyct1978 == codecSelferValueTypeMap1234 {
			yyl1978 := r.ReadMapStart()
			if yyl1978 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1978, d)
			}
		} else if yyct1978 == codecSelferValueTypeArray1234 {
			yyl1978 := r.ReadArrayStart()
			if yyl1978 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1978, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1979Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1979Slc
	var yyhl1979 bool = l >= 0
	for yyj1979 := 0; ; yyj1979++ {
		if yyhl1979 {
			if yyj1979 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1979Slc = r.DecodeBytes(yys1979Slc, true, true)
		yys1979 := string(yys1979Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1979 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1980 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1981 := z.DecBinary()
				_ = yym1981
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1980), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1982 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1983 := z.DecBinary()
				_ = yym1983
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1982), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1979)
		} // end switch yys1979
	} // end for yyj1979
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1984 int
	var yyb1984 bool
	var yyhl1984 bool = l >= 0
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1985 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1986 := z.DecBinary()
		_ = yym1986
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1985), d)
		}
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1987 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1988 := z.DecBinary()
		_ = yym1988
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1987), d)
		}
	}
	for {
		yyj1984++
		if yyhl1984 {
			yyb1984 = yyj1984 > l
		} else {
			yyb1984 = r.CheckBreak()
		}
		if yyb1984 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1984-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1989 := z.EncBinary()
		_ = yym1989
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1990 := !z.EncBinary()
			yy2arr1990 := z.EncBasicHandle().StructToArray
			var yyq1990 [2]bool
			_, _, _ = yysep1990, yyq1990, yy2arr1990
			const yyr1990 bool = false
			var yynn1990 int
			if yyr1990 || yy2arr1990 {
				r.EncodeArrayStart(2)
			} else {
				yynn1990 = 2
				for _, b := range yyq1990 {
					if b {
						yynn1990++
					}
				}
				r.EncodeMapStart(yynn1990)
				yynn1990 = 0
			}
			if yyr1990 || yy2arr1990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1992 := z.EncBinary()
				_ = yym1992
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1993 := z.EncBinary()
				_ = yym1993
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1990 || yy2arr1990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1995 := &x.PodAffinityTerm
				yy1995.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1996 := &x.PodAffinityTerm
				yy1996.CodecEncodeSelf(e)
			}
			if yyr1990 || yy2arr1990 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1997 := z.DecBinary()
	_ = yym1997
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1998 := r.ContainerType()
		if yyct1998 == codecSelferValueTypeMap1234 {
			yyl1998 := r.ReadMapStart()
			if yyl1998 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1998, d)
			}
		} else if yyct1998 == codecSelferValueTypeArray1234 {
			yyl1998 := r.ReadArrayStart()
			if yyl1998 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1998, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1999Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1999Slc
	var yyhl1999 bool = l >= 0
	for yyj1999 := 0; ; yyj1999++ {
		if yyhl1999 {
			if yyj1999 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1999Slc = r.DecodeBytes(yys1999Slc, true, true)
		yys1999 := string(yys1999Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1999 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv2001 := &x.PodAffinityTerm
				yyv2001.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1999)
		} // end switch yys1999
	} // end for yyj1999
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2002 int
	var yyb2002 bool
	var yyhl2002 bool = l >= 0
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv2004 := &x.PodAffinityTerm
		yyv2004.CodecDecodeSelf(d)
	}
	for {
		yyj2002++
		if yyhl2002 {
			yyb2002 = yyj2002 > l
		} else {
			yyb2002 = r.CheckBreak()
		}
		if yyb2002 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2002-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2005 := z.EncBinary()
		_ = yym2005
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2006 := !z.EncBinary()
			yy2arr2006 := z.EncBasicHandle().StructToArray
			var yyq2006 [3]bool
			_, _, _ = yysep2006, yyq2006, yy2arr2006
			const yyr2006 bool = false
			yyq2006[0] = x.LabelSelector != nil
			yyq2006[2] = x.TopologyKey != ""
			var yynn2006 int
			if yyr2006 || yy2arr2006 {
				r.EncodeArrayStart(3)
			} else {
				yynn2006 = 1
				for _, b := range yyq2006 {
					if b {
						yynn2006++
					}
				}
				r.EncodeMapStart(yynn2006)
				yynn2006 = 0
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym2008 := z.EncBinary()
						_ = yym2008
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2006[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym2009 := z.EncBinary()
						_ = yym2009
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2011 := z.EncBinary()
					_ = yym2011
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2012 := z.EncBinary()
					_ = yym2012
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2006[2] {
					yym2014 := z.EncBinary()
					_ = yym2014
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2006[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2015 := z.EncBinary()
					_ = yym2015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr2006 || yy2arr2006 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2016 := z.DecBinary()
	_ = yym2016
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2017 := r.ContainerType()
		if yyct2017 == codecSelferValueTypeMap1234 {
			yyl2017 := r.ReadMapStart()
			if yyl2017 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2017, d)
			}
		} else if yyct2017 == codecSelferValueTypeArray1234 {
			yyl2017 := r.ReadArrayStart()
			if yyl2017 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2017, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2018Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2018Slc
	var yyhl2018 bool = l >= 0
	for yyj2018 := 0; ; yyj2018++ {
		if yyhl2018 {
			if yyj2018 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2018Slc = r.DecodeBytes(yys2018Slc, true, true)
		yys2018 := string(yys2018Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2018 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym2020 := z.DecBinary()
				_ = yym2020
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv2021 := &x.Namespaces
				yym2022 := z.DecBinary()
				_ = yym2022
				if false {
				} else {
					z.F.DecSliceStringX(yyv2021, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2018)
		} // end switch yys2018
	} // end for yyj2018
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2024 int
	var yyb2024 bool
	var yyhl2024 bool = l >= 0
	yyj2024++
	if yyhl2024 {
		yyb2024 = yyj2024 > l
	} else {
		yyb2024 = r.CheckBreak()
	}
	if yyb2024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym2026 := z.DecBinary()
		_ = yym2026
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj2024++
	if yyhl2024 {
		yyb2024 = yyj2024 > l
	} else {
		yyb2024 = r.CheckBreak()
	}
	if yyb2024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv2027 := &x.Namespaces
		yym2028 := z.DecBinary()
		_ = yym2028
		if false {
		} else {
			z.F.DecSliceStringX(yyv2027, false, d)
		}
	}
	yyj2024++
	if yyhl2024 {
		yyb2024 = yyj2024 > l
	} else {
		yyb2024 = r.CheckBreak()
	}
	if yyb2024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj2024++
		if yyhl2024 {
			yyb2024 = yyj2024 > l
		} else {
			yyb2024 = r.CheckBreak()
		}
		if yyb2024 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2024-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2030 := z.EncBinary()
		_ = yym2030
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2031 := !z.EncBinary()
			yy2arr2031 := z.EncBasicHandle().StructToArray
			var yyq2031 [2]bool
			_, _, _ = yysep2031, yyq2031, yy2arr2031
			const yyr2031 bool = false
			yyq2031[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq2031[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn2031 int
			if yyr2031 || yy2arr2031 {
				r.EncodeArrayStart(2)
			} else {
				yynn2031 = 0
				for _, b := range yyq2031 {
					if b {
						yynn2031++
					}
				}
				r.EncodeMapStart(yynn2031)
				yynn2031 = 0
			}
			if yyr2031 || yy2arr2031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2031[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2031[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2031 || yy2arr2031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2031[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2034 := z.EncBinary()
						_ = yym2034
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2031[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2035 := z.EncBinary()
						_ = yym2035
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr2031 || yy2arr2031 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2036 := z.DecBinary()
	_ = yym2036
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2037 := r.ContainerType()
		if yyct2037 == codecSelferValueTypeMap1234 {
			yyl2037 := r.ReadMapStart()
			if yyl2037 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2037, d)
			}
		} else if yyct2037 == codecSelferValueTypeArray1234 {
			yyl2037 := r.ReadArrayStart()
			if yyl2037 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2037, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2038Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2038Slc
	var yyhl2038 bool = l >= 0
	for yyj2038 := 0; ; yyj2038++ {
		if yyhl2038 {
			if yyj2038 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2038Slc = r.DecodeBytes(yys2038Slc, true, true)
		yys2038 := string(yys2038Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2038 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2040 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2041 := z.DecBinary()
				_ = yym2041
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2040), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2038)
		} // end switch yys2038
	} // end for yyj2038
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2042 int
	var yyb2042 bool
	var yyhl2042 bool = l >= 0
	yyj2042++
	if yyhl2042 {
		yyb2042 = yyj2042 > l
	} else {
		yyb2042 = r.CheckBreak()
	}
	if yyb2042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj2042++
	if yyhl2042 {
		yyb2042 = yyj2042 > l
	} else {
		yyb2042 = r.CheckBreak()
	}
	if yyb2042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2044 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2045 := z.DecBinary()
		_ = yym2045
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2044), d)
		}
	}
	for {
		yyj2042++
		if yyhl2042 {
			yyb2042 = yyj2042 > l
		} else {
			yyb2042 = r.CheckBreak()
		}
		if yyb2042 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2042-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2046 := z.EncBinary()
		_ = yym2046
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2047 := !z.EncBinary()
			yy2arr2047 := z.EncBasicHandle().StructToArray
			var yyq2047 [2]bool
			_, _, _ = yysep2047, yyq2047, yy2arr2047
			const yyr2047 bool = false
			var yynn2047 int
			if yyr2047 || yy2arr2047 {
				r.EncodeArrayStart(2)
			} else {
				yynn2047 = 2
				for _, b := range yyq2047 {
					if b {
						yynn2047++
					}
				}
				r.EncodeMapStart(yynn2047)
				yynn2047 = 0
			}
			if yyr2047 || yy2arr2047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2049 := z.EncBinary()
				_ = yym2049
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2050 := z.EncBinary()
				_ = yym2050
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2047 || yy2arr2047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2052 := &x.Preference
				yy2052.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2053 := &x.Preference
				yy2053.CodecEncodeSelf(e)
			}
			if yyr2047 || yy2arr2047 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2054 := z.DecBinary()
	_ = yym2054
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2055 := r.ContainerType()
		if yyct2055 == codecSelferValueTypeMap1234 {
			yyl2055 := r.ReadMapStart()
			if yyl2055 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2055, d)
			}
		} else if yyct2055 == codecSelferValueTypeArray1234 {
			yyl2055 := r.ReadArrayStart()
			if yyl2055 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2055, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2056Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2056Slc
	var yyhl2056 bool = l >= 0
	for yyj2056 := 0; ; yyj2056++ {
		if yyhl2056 {
			if yyj2056 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2056Slc = r.DecodeBytes(yys2056Slc, true, true)
		yys2056 := string(yys2056Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2056 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv2058 := &x.Preference
				yyv2058.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2056)
		} // end switch yys2056
	} // end for yyj2056
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2059 int
	var yyb2059 bool
	var yyhl2059 bool = l >= 0
	yyj2059++
	if yyhl2059 {
		yyb2059 = yyj2059 > l
	} else {
		yyb2059 = r.CheckBreak()
	}
	if yyb2059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2059++
	if yyhl2059 {
		yyb2059 = yyj2059 > l
	} else {
		yyb2059 = r.CheckBreak()
	}
	if yyb2059 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv2061 := &x.Preference
		yyv2061.CodecDecodeSelf(d)
	}
	for {
		yyj2059++
		if yyhl2059 {
			yyb2059 = yyj2059 > l
		} else {
			yyb2059 = r.CheckBreak()
		}
		if yyb2059 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2059-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2062 := z.EncBinary()
		_ = yym2062
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2063 := !z.EncBinary()
			yy2arr2063 := z.EncBasicHandle().StructToArray
			var yyq2063 [3]bool
			_, _, _ = yysep2063, yyq2063, yy2arr2063
			const yyr2063 bool = false
			yyq2063[1] = x.Value != ""
			var yynn2063 int
			if yyr2063 || yy2arr2063 {
				r.EncodeArrayStart(3)
			} else {
				yynn2063 = 2
				for _, b := range yyq2063 {
					if b {
						yynn2063++
					}
				}
				r.EncodeMapStart(yynn2063)
				yynn2063 = 0
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2065 := z.EncBinary()
				_ = yym2065
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2066 := z.EncBinary()
				_ = yym2066
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2063[1] {
					yym2068 := z.EncBinary()
					_ = yym2068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2063[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2069 := z.EncBinary()
					_ = yym2069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2071 := z.DecBinary()
	_ = yym2071
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2072 := r.ContainerType()
		if yyct2072 == codecSelferValueTypeMap1234 {
			yyl2072 := r.ReadMapStart()
			if yyl2072 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2072, d)
			}
		} else if yyct2072 == codecSelferValueTypeArray1234 {
			yyl2072 := r.ReadArrayStart()
			if yyl2072 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2072, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2073Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2073Slc
	var yyhl2073 bool = l >= 0
	for yyj2073 := 0; ; yyj2073++ {
		if yyhl2073 {
			if yyj2073 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2073Slc = r.DecodeBytes(yys2073Slc, true, true)
		yys2073 := string(yys2073Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2073 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2073)
		} // end switch yys2073
	} // end for yyj2073
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2077 int
	var yyb2077 bool
	var yyhl2077 bool = l >= 0
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2077++
		if yyhl2077 {
			yyb2077 = yyj2077 > l
		} else {
			yyb2077 = r.CheckBreak()
		}
		if yyb2077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2081 := z.EncBinary()
	_ = yym2081
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2082 := z.DecBinary()
	_ = yym2082
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2083 := z.EncBinary()
		_ = yym2083
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2084 := !z.EncBinary()
			yy2arr2084 := z.EncBasicHandle().StructToArray
			var yyq2084 [4]bool
			_, _, _ = yysep2084, yyq2084, yy2arr2084
			const yyr2084 bool = false
			yyq2084[0] = x.Key != ""
			yyq2084[1] = x.Operator != ""
			yyq2084[2] = x.Value != ""
			yyq2084[3] = x.Effect != ""
			var yynn2084 int
			if yyr2084 || yy2arr2084 {
				r.EncodeArrayStart(4)
			} else {
				yynn2084 = 0
				for _, b := range yyq2084 {
					if b {
						yynn2084++
					}
				}
				r.EncodeMapStart(yynn2084)
				yynn2084 = 0
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2084[0] {
					yym2086 := z.EncBinary()
					_ = yym2086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2084[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2087 := z.EncBinary()
					_ = yym2087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2084[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2084[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2084[2] {
					yym2090 := z.EncBinary()
					_ = yym2090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2084[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2091 := z.EncBinary()
					_ = yym2091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2084[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2084[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2084 || yy2arr2084 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2093 := z.DecBinary()
	_ = yym2093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2094 := r.ContainerType()
		if yyct2094 == codecSelferValueTypeMap1234 {
			yyl2094 := r.ReadMapStart()
			if yyl2094 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2094, d)
			}
		} else if yyct2094 == codecSelferValueTypeArray1234 {
			yyl2094 := r.ReadArrayStart()
			if yyl2094 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2094, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2095Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2095Slc
	var yyhl2095 bool = l >= 0
	for yyj2095 := 0; ; yyj2095++ {
		if yyhl2095 {
			if yyj2095 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2095Slc = r.DecodeBytes(yys2095Slc, true, true)
		yys2095 := string(yys2095Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2095 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2095)
		} // end switch yys2095
	} // end for yyj2095
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2100 int
	var yyb2100 bool
	var yyhl2100 bool = l >= 0
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2100++
		if yyhl2100 {
			yyb2100 = yyj2100 > l
		} else {
			yyb2100 = r.CheckBreak()
		}
		if yyb2100 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2100-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2105 := z.EncBinary()
	_ = yym2105
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2106 := z.DecBinary()
	_ = yym2106
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2107 := z.EncBinary()
		_ = yym2107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2108 := !z.EncBinary()
			yy2arr2108 := z.EncBasicHandle().StructToArray
			var yyq2108 [13]bool
			_, _, _ = yysep2108, yyq2108, yy2arr2108
			const yyr2108 bool = false
			yyq2108[2] = x.RestartPolicy != ""
			yyq2108[3] = x.TerminationGracePeriodSeconds != nil
			yyq2108[4] = x.ActiveDeadlineSeconds != nil
			yyq2108[5] = x.DNSPolicy != ""
			yyq2108[6] = len(x.NodeSelector) != 0
			yyq2108[8] = x.NodeName != ""
			yyq2108[9] = x.SecurityContext != nil
			yyq2108[10] = len(x.ImagePullSecrets) != 0
			yyq2108[11] = x.Hostname != ""
			yyq2108[12] = x.Subdomain != ""
			var yynn2108 int
			if yyr2108 || yy2arr2108 {
				r.EncodeArrayStart(13)
			} else {
				yynn2108 = 3
				for _, b := range yyq2108 {
					if b {
						yynn2108++
					}
				}
				r.EncodeMapStart(yynn2108)
				yynn2108 = 0
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2110 := z.EncBinary()
					_ = yym2110
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2111 := z.EncBinary()
					_ = yym2111
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2113 := z.EncBinary()
					_ = yym2113
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2114 := z.EncBinary()
					_ = yym2114
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2108[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2108[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2108[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2117 := *x.TerminationGracePeriodSeconds
						yym2118 := z.EncBinary()
						_ = yym2118
						if false {
						} else {
							r.EncodeInt(int64(yy2117))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2108[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2119 := *x.TerminationGracePeriodSeconds
						yym2120 := z.EncBinary()
						_ = yym2120
						if false {
						} else {
							r.EncodeInt(int64(yy2119))
						}
					}
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2108[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2122 := *x.ActiveDeadlineSeconds
						yym2123 := z.EncBinary()
						_ = yym2123
						if false {
						} else {
							r.EncodeInt(int64(yy2122))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2108[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2124 := *x.ActiveDeadlineSeconds
						yym2125 := z.EncBinary()
						_ = yym2125
						if false {
						} else {
							r.EncodeInt(int64(yy2124))
						}
					}
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2108[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2108[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2108[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2128 := z.EncBinary()
						_ = yym2128
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2108[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2129 := z.EncBinary()
						_ = yym2129
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2131 := z.EncBinary()
				_ = yym2131
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2132 := z.EncBinary()
				_ = yym2132
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2108[8] {
					yym2134 := z.EncBinary()
					_ = yym2134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2108[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2135 := z.EncBinary()
					_ = yym2135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2108[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2108[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2108[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2138 := z.EncBinary()
						_ = yym2138
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2108[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2139 := z.EncBinary()
						_ = yym2139
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2108[11] {
					yym2141 := z.EncBinary()
					_ = yym2141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2108[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2142 := z.EncBinary()
					_ = yym2142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2108[12] {
					yym2144 := z.EncBinary()
					_ = yym2144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2108[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2145 := z.EncBinary()
					_ = yym2145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2146 := z.DecBinary()
	_ = yym2146
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2147 := r.ContainerType()
		if yyct2147 == codecSelferValueTypeMap1234 {
			yyl2147 := r.ReadMapStart()
			if yyl2147 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2147, d)
			}
		} else if yyct2147 == codecSelferValueTypeArray1234 {
			yyl2147 := r.ReadArrayStart()
			if yyl2147 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2147, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2148Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2148Slc
	var yyhl2148 bool = l >= 0
	for yyj2148 := 0; ; yyj2148++ {
		if yyhl2148 {
			if yyj2148 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2148Slc = r.DecodeBytes(yys2148Slc, true, true)
		yys2148 := string(yys2148Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2148 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2149 := &x.Volumes
				yym2150 := z.DecBinary()
				_ = yym2150
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2149), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2151 := &x.Containers
				yym2152 := z.DecBinary()
				_ = yym2152
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2151), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2155 := z.DecBinary()
				_ = yym2155
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2157 := z.DecBinary()
				_ = yym2157
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2159 := &x.NodeSelector
				yym2160 := z.DecBinary()
				_ = yym2160
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2159, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2164 := &x.ImagePullSecrets
				yym2165 := z.DecBinary()
				_ = yym2165
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2164), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2148)
		} // end switch yys2148
	} // end for yyj2148
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2168 int
	var yyb2168 bool
	var yyhl2168 bool = l >= 0
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2169 := &x.Volumes
		yym2170 := z.DecBinary()
		_ = yym2170
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2169), d)
		}
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2171 := &x.Containers
		yym2172 := z.DecBinary()
		_ = yym2172
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2171), d)
		}
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2175 := z.DecBinary()
		_ = yym2175
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2177 := z.DecBinary()
		_ = yym2177
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2179 := &x.NodeSelector
		yym2180 := z.DecBinary()
		_ = yym2180
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2179, false, d)
		}
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2184 := &x.ImagePullSecrets
		yym2185 := z.DecBinary()
		_ = yym2185
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2184), d)
		}
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2168++
		if yyhl2168 {
			yyb2168 = yyj2168 > l
		} else {
			yyb2168 = r.CheckBreak()
		}
		if yyb2168 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2168-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Sysctl) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2188 := z.EncBinary()
		_ = yym2188
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2189 := !z.EncBinary()
			yy2arr2189 := z.EncBasicHandle().StructToArray
			var yyq2189 [2]bool
			_, _, _ = yysep2189, yyq2189, yy2arr2189
			const yyr2189 bool = false
			var yynn2189 int
			if yyr2189 || yy2arr2189 {
				r.EncodeArrayStart(2)
			} else {
				yynn2189 = 2
				for _, b := range yyq2189 {
					if b {
						yynn2189++
					}
				}
				r.EncodeMapStart(yynn2189)
				yynn2189 = 0
			}
			if yyr2189 || yy2arr2189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2191 := z.EncBinary()
				_ = yym2191
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2192 := z.EncBinary()
				_ = yym2192
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2189 || yy2arr2189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2194 := z.EncBinary()
				_ = yym2194
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2195 := z.EncBinary()
				_ = yym2195
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr2189 || yy2arr2189 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Sysctl) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2196 := z.DecBinary()
	_ = yym2196
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2197 := r.ContainerType()
		if yyct2197 == codecSelferValueTypeMap1234 {
			yyl2197 := r.ReadMapStart()
			if yyl2197 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2197, d)
			}
		} else if yyct2197 == codecSelferValueTypeArray1234 {
			yyl2197 := r.ReadArrayStart()
			if yyl2197 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2197, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Sysctl) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2198Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2198Slc
	var yyhl2198 bool = l >= 0
	for yyj2198 := 0; ; yyj2198++ {
		if yyhl2198 {
			if yyj2198 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2198Slc = r.DecodeBytes(yys2198Slc, true, true)
		yys2198 := string(yys2198Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2198 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2198)
		} // end switch yys2198
	} // end for yyj2198
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Sysctl) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2201 int
	var yyb2201 bool
	var yyhl2201 bool = l >= 0
	yyj2201++
	if yyhl2201 {
		yyb2201 = yyj2201 > l
	} else {
		yyb2201 = r.CheckBreak()
	}
	if yyb2201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2201++
	if yyhl2201 {
		yyb2201 = yyj2201 > l
	} else {
		yyb2201 = r.CheckBreak()
	}
	if yyb2201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj2201++
		if yyhl2201 {
			yyb2201 = yyj2201 > l
		} else {
			yyb2201 = r.CheckBreak()
		}
		if yyb2201 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2201-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2204 := z.EncBinary()
		_ = yym2204
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2205 := !z.EncBinary()
			yy2arr2205 := z.EncBasicHandle().StructToArray
			var yyq2205 [8]bool
			_, _, _ = yysep2205, yyq2205, yy2arr2205
			const yyr2205 bool = false
			yyq2205[0] = x.HostNetwork != false
			yyq2205[1] = x.HostPID != false
			yyq2205[2] = x.HostIPC != false
			yyq2205[3] = x.SELinuxOptions != nil
			yyq2205[4] = x.RunAsUser != nil
			yyq2205[5] = x.RunAsNonRoot != nil
			yyq2205[6] = len(x.SupplementalGroups) != 0
			yyq2205[7] = x.FSGroup != nil
			var yynn2205 int
			if yyr2205 || yy2arr2205 {
				r.EncodeArrayStart(8)
			} else {
				yynn2205 = 0
				for _, b := range yyq2205 {
					if b {
						yynn2205++
					}
				}
				r.EncodeMapStart(yynn2205)
				yynn2205 = 0
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[0] {
					yym2207 := z.EncBinary()
					_ = yym2207
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2205[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2208 := z.EncBinary()
					_ = yym2208
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[1] {
					yym2210 := z.EncBinary()
					_ = yym2210
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2205[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2211 := z.EncBinary()
					_ = yym2211
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[2] {
					yym2213 := z.EncBinary()
					_ = yym2213
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2205[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2214 := z.EncBinary()
					_ = yym2214
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2205[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2217 := *x.RunAsUser
						yym2218 := z.EncBinary()
						_ = yym2218
						if false {
						} else {
							r.EncodeInt(int64(yy2217))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2205[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2219 := *x.RunAsUser
						yym2220 := z.EncBinary()
						_ = yym2220
						if false {
						} else {
							r.EncodeInt(int64(yy2219))
						}
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2222 := *x.RunAsNonRoot
						yym2223 := z.EncBinary()
						_ = yym2223
						if false {
						} else {
							r.EncodeBool(bool(yy2222))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2205[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2224 := *x.RunAsNonRoot
						yym2225 := z.EncBinary()
						_ = yym2225
						if false {
						} else {
							r.EncodeBool(bool(yy2224))
						}
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2227 := z.EncBinary()
						_ = yym2227
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2205[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2228 := z.EncBinary()
						_ = yym2228
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2230 := *x.FSGroup
						yym2231 := z.EncBinary()
						_ = yym2231
						if false {
						} else {
							r.EncodeInt(int64(yy2230))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2205[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2232 := *x.FSGroup
						yym2233 := z.EncBinary()
						_ = yym2233
						if false {
						} else {
							r.EncodeInt(int64(yy2232))
						}
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2234 := z.DecBinary()
	_ = yym2234
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2235 := r.ContainerType()
		if yyct2235 == codecSelferValueTypeMap1234 {
			yyl2235 := r.ReadMapStart()
			if yyl2235 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2235, d)
			}
		} else if yyct2235 == codecSelferValueTypeArray1234 {
			yyl2235 := r.ReadArrayStart()
			if yyl2235 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2235, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2236Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2236Slc
	var yyhl2236 bool = l >= 0
	for yyj2236 := 0; ; yyj2236++ {
		if yyhl2236 {
			if yyj2236 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2236Slc = r.DecodeBytes(yys2236Slc, true, true)
		yys2236 := string(yys2236Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2236 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2242 := z.DecBinary()
				_ = yym2242
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2244 := z.DecBinary()
				_ = yym2244
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2245 := &x.SupplementalGroups
				yym2246 := z.DecBinary()
				_ = yym2246
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2245, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2248 := z.DecBinary()
				_ = yym2248
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2236)
		} // end switch yys2236
	} // end for yyj2236
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2249 int
	var yyb2249 bool
	var yyhl2249 bool = l >= 0
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2255 := z.DecBinary()
		_ = yym2255
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2257 := z.DecBinary()
		_ = yym2257
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2258 := &x.SupplementalGroups
		yym2259 := z.DecBinary()
		_ = yym2259
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2258, false, d)
		}
	}
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2261 := z.DecBinary()
		_ = yym2261
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2249++
		if yyhl2249 {
			yyb2249 = yyj2249 > l
		} else {
			yyb2249 = r.CheckBreak()
		}
		if yyb2249 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2249-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2262 := z.EncBinary()
		_ = yym2262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2263 := !z.EncBinary()
			yy2arr2263 := z.EncBasicHandle().StructToArray
			var yyq2263 [8]bool
			_, _, _ = yysep2263, yyq2263, yy2arr2263
			const yyr2263 bool = false
			yyq2263[0] = x.Phase != ""
			yyq2263[1] = len(x.Conditions) != 0
			yyq2263[2] = x.Message != ""
			yyq2263[3] = x.Reason != ""
			yyq2263[4] = x.HostIP != ""
			yyq2263[5] = x.PodIP != ""
			yyq2263[6] = x.StartTime != nil
			yyq2263[7] = len(x.ContainerStatuses) != 0
			var yynn2263 int
			if yyr2263 || yy2arr2263 {
				r.EncodeArrayStart(8)
			} else {
				yynn2263 = 0
				for _, b := range yyq2263 {
					if b {
						yynn2263++
					}
				}
				r.EncodeMapStart(yynn2263)
				yynn2263 = 0
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2263[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2263[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2263[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2266 := z.EncBinary()
						_ = yym2266
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2263[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2267 := z.EncBinary()
						_ = yym2267
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2263[2] {
					yym2269 := z.EncBinary()
					_ = yym2269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2263[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2270 := z.EncBinary()
					_ = yym2270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2263[3] {
					yym2272 := z.EncBinary()
					_ = yym2272
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2263[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2273 := z.EncBinary()
					_ = yym2273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2263[4] {
					yym2275 := z.EncBinary()
					_ = yym2275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2263[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2276 := z.EncBinary()
					_ = yym2276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2263[5] {
					yym2278 := z.EncBinary()
					_ = yym2278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2263[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2279 := z.EncBinary()
					_ = yym2279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2263[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2281 := z.EncBinary()
						_ = yym2281
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2281 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2281 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2263[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2282 := z.EncBinary()
						_ = yym2282
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2282 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2282 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2263[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2284 := z.EncBinary()
						_ = yym2284
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2263[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2285 := z.EncBinary()
						_ = yym2285
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2286 := z.DecBinary()
	_ = yym2286
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2287 := r.ContainerType()
		if yyct2287 == codecSelferValueTypeMap1234 {
			yyl2287 := r.ReadMapStart()
			if yyl2287 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2287, d)
			}
		} else if yyct2287 == codecSelferValueTypeArray1234 {
			yyl2287 := r.ReadArrayStart()
			if yyl2287 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2287, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2288Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2288Slc
	var yyhl2288 bool = l >= 0
	for yyj2288 := 0; ; yyj2288++ {
		if yyhl2288 {
			if yyj2288 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2288Slc = r.DecodeBytes(yys2288Slc, true, true)
		yys2288 := string(yys2288Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2288 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2290 := &x.Conditions
				yym2291 := z.DecBinary()
				_ = yym2291
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2290), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2297 := z.DecBinary()
				_ = yym2297
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2297 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2297 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2298 := &x.ContainerStatuses
				yym2299 := z.DecBinary()
				_ = yym2299
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2298), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2288)
		} // end switch yys2288
	} // end for yyj2288
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2300 int
	var yyb2300 bool
	var yyhl2300 bool = l >= 0
	yyj2300++
	if yyhl2300 {
		yyb2300 = yyj2300 > l
	} else {
		yyb2300 = r.CheckBreak()
	}
	if yyb2300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2300++
	if yyhl2300 {
		yyb2300 = yyj2300 > l
	} else {
		yyb2300 = r.CheckBreak()
	}
	if yyb2300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2302 := &x.Conditions
		yym2303 := z.DecBinary()
		_ = yym2303
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2302), d)
		}
	}
	yyj2300++
	if yyhl2300 {
		yyb2300 = yyj2300 > l
	} else {
		yyb2300 = r.CheckBreak()
	}
	if yyb2300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2300++
	if yyhl2300 {
		yyb2300 = yyj2300 > l
	} else {
		yyb2300 = r.CheckBreak()
	}
	if yyb2300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2300++
	if yyhl2300 {
		yyb2300 = yyj2300 > l
	} else {
		yyb2300 = r.CheckBreak()
	}
	if yyb2300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2300++
	if yyhl2300 {
		yyb2300 = yyj2300 > l
	} else {
		yyb2300 = r.CheckBreak()
	}
	if yyb2300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2300++
	if yyhl2300 {
		yyb2300 = yyj2300 > l
	} else {
		yyb2300 = r.CheckBreak()
	}
	if yyb2300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2309 := z.DecBinary()
		_ = yym2309
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2309 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2309 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2300++
	if yyhl2300 {
		yyb2300 = yyj2300 > l
	} else {
		yyb2300 = r.CheckBreak()
	}
	if yyb2300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2310 := &x.ContainerStatuses
		yym2311 := z.DecBinary()
		_ = yym2311
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2310), d)
		}
	}
	for {
		yyj2300++
		if yyhl2300 {
			yyb2300 = yyj2300 > l
		} else {
			yyb2300 = r.CheckBreak()
		}
		if yyb2300 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2300-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2312 := z.EncBinary()
		_ = yym2312
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2313 := !z.EncBinary()
			yy2arr2313 := z.EncBasicHandle().StructToArray
			var yyq2313 [4]bool
			_, _, _ = yysep2313, yyq2313, yy2arr2313
			const yyr2313 bool = false
			yyq2313[0] = x.Kind != ""
			yyq2313[1] = x.APIVersion != ""
			yyq2313[2] = true
			yyq2313[3] = true
			var yynn2313 int
			if yyr2313 || yy2arr2313 {
				r.EncodeArrayStart(4)
			} else {
				yynn2313 = 0
				for _, b := range yyq2313 {
					if b {
						yynn2313++
					}
				}
				r.EncodeMapStart(yynn2313)
				yynn2313 = 0
			}
			if yyr2313 || yy2arr2313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2313[0] {
					yym2315 := z.EncBinary()
					_ = yym2315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2313[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2316 := z.EncBinary()
					_ = yym2316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2313 || yy2arr2313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2313[1] {
					yym2318 := z.EncBinary()
					_ = yym2318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2313[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2319 := z.EncBinary()
					_ = yym2319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2313 || yy2arr2313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2313[2] {
					yy2321 := &x.ObjectMeta
					yy2321.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2313[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2322 := &x.ObjectMeta
					yy2322.CodecEncodeSelf(e)
				}
			}
			if yyr2313 || yy2arr2313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2313[3] {
					yy2324 := &x.Status
					yy2324.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2313[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2325 := &x.Status
					yy2325.CodecEncodeSelf(e)
				}
			}
			if yyr2313 || yy2arr2313 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2326 := z.DecBinary()
	_ = yym2326
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2327 := r.ContainerType()
		if yyct2327 == codecSelferValueTypeMap1234 {
			yyl2327 := r.ReadMapStart()
			if yyl2327 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2327, d)
			}
		} else if yyct2327 == codecSelferValueTypeArray1234 {
			yyl2327 := r.ReadArrayStart()
			if yyl2327 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2327, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2328Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2328Slc
	var yyhl2328 bool = l >= 0
	for yyj2328 := 0; ; yyj2328++ {
		if yyhl2328 {
			if yyj2328 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2328Slc = r.DecodeBytes(yys2328Slc, true, true)
		yys2328 := string(yys2328Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2328 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2331 := &x.ObjectMeta
				yyv2331.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2332 := &x.Status
				yyv2332.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2328)
		} // end switch yys2328
	} // end for yyj2328
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2333 int
	var yyb2333 bool
	var yyhl2333 bool = l >= 0
	yyj2333++
	if yyhl2333 {
		yyb2333 = yyj2333 > l
	} else {
		yyb2333 = r.CheckBreak()
	}
	if yyb2333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2333++
	if yyhl2333 {
		yyb2333 = yyj2333 > l
	} else {
		yyb2333 = r.CheckBreak()
	}
	if yyb2333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2333++
	if yyhl2333 {
		yyb2333 = yyj2333 > l
	} else {
		yyb2333 = r.CheckBreak()
	}
	if yyb2333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2336 := &x.ObjectMeta
		yyv2336.CodecDecodeSelf(d)
	}
	yyj2333++
	if yyhl2333 {
		yyb2333 = yyj2333 > l
	} else {
		yyb2333 = r.CheckBreak()
	}
	if yyb2333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2337 := &x.Status
		yyv2337.CodecDecodeSelf(d)
	}
	for {
		yyj2333++
		if yyhl2333 {
			yyb2333 = yyj2333 > l
		} else {
			yyb2333 = r.CheckBreak()
		}
		if yyb2333 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2333-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2338 := z.EncBinary()
		_ = yym2338
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2339 := !z.EncBinary()
			yy2arr2339 := z.EncBasicHandle().StructToArray
			var yyq2339 [5]bool
			_, _, _ = yysep2339, yyq2339, yy2arr2339
			const yyr2339 bool = false
			yyq2339[0] = x.Kind != ""
			yyq2339[1] = x.APIVersion != ""
			yyq2339[2] = true
			yyq2339[3] = true
			yyq2339[4] = true
			var yynn2339 int
			if yyr2339 || yy2arr2339 {
				r.EncodeArrayStart(5)
			} else {
				yynn2339 = 0
				for _, b := range yyq2339 {
					if b {
						yynn2339++
					}
				}
				r.EncodeMapStart(yynn2339)
				yynn2339 = 0
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[0] {
					yym2341 := z.EncBinary()
					_ = yym2341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2339[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2342 := z.EncBinary()
					_ = yym2342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[1] {
					yym2344 := z.EncBinary()
					_ = yym2344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2339[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2345 := z.EncBinary()
					_ = yym2345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[2] {
					yy2347 := &x.ObjectMeta
					yy2347.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2339[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2348 := &x.ObjectMeta
					yy2348.CodecEncodeSelf(e)
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[3] {
					yy2350 := &x.Spec
					yy2350.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2339[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2351 := &x.Spec
					yy2351.CodecEncodeSelf(e)
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[4] {
					yy2353 := &x.Status
					yy2353.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2339[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2354 := &x.Status
					yy2354.CodecEncodeSelf(e)
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2355 := z.DecBinary()
	_ = yym2355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2356 := r.ContainerType()
		if yyct2356 == codecSelferValueTypeMap1234 {
			yyl2356 := r.ReadMapStart()
			if yyl2356 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2356, d)
			}
		} else if yyct2356 == codecSelferValueTypeArray1234 {
			yyl2356 := r.ReadArrayStart()
			if yyl2356 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2356, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2357Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2357Slc
	var yyhl2357 bool = l >= 0
	for yyj2357 := 0; ; yyj2357++ {
		if yyhl2357 {
			if yyj2357 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2357Slc = r.DecodeBytes(yys2357Slc, true, true)
		yys2357 := string(yys2357Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2357 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2360 := &x.ObjectMeta
				yyv2360.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2361 := &x.Spec
				yyv2361.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2362 := &x.Status
				yyv2362.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2357)
		} // end switch yys2357
	} // end for yyj2357
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2363 int
	var yyb2363 bool
	var yyhl2363 bool = l >= 0
	yyj2363++
	if yyhl2363 {
		yyb2363 = yyj2363 > l
	} else {
		yyb2363 = r.CheckBreak()
	}
	if yyb2363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2363++
	if yyhl2363 {
		yyb2363 = yyj2363 > l
	} else {
		yyb2363 = r.CheckBreak()
	}
	if yyb2363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2363++
	if yyhl2363 {
		yyb2363 = yyj2363 > l
	} else {
		yyb2363 = r.CheckBreak()
	}
	if yyb2363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2366 := &x.ObjectMeta
		yyv2366.CodecDecodeSelf(d)
	}
	yyj2363++
	if yyhl2363 {
		yyb2363 = yyj2363 > l
	} else {
		yyb2363 = r.CheckBreak()
	}
	if yyb2363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2367 := &x.Spec
		yyv2367.CodecDecodeSelf(d)
	}
	yyj2363++
	if yyhl2363 {
		yyb2363 = yyj2363 > l
	} else {
		yyb2363 = r.CheckBreak()
	}
	if yyb2363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2368 := &x.Status
		yyv2368.CodecDecodeSelf(d)
	}
	for {
		yyj2363++
		if yyhl2363 {
			yyb2363 = yyj2363 > l
		} else {
			yyb2363 = r.CheckBreak()
		}
		if yyb2363 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2363-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2369 := z.EncBinary()
		_ = yym2369
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2370 := !z.EncBinary()
			yy2arr2370 := z.EncBasicHandle().StructToArray
			var yyq2370 [2]bool
			_, _, _ = yysep2370, yyq2370, yy2arr2370
			const yyr2370 bool = false
			yyq2370[0] = true
			yyq2370[1] = true
			var yynn2370 int
			if yyr2370 || yy2arr2370 {
				r.EncodeArrayStart(2)
			} else {
				yynn2370 = 0
				for _, b := range yyq2370 {
					if b {
						yynn2370++
					}
				}
				r.EncodeMapStart(yynn2370)
				yynn2370 = 0
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2370[0] {
					yy2372 := &x.ObjectMeta
					yy2372.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2370[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2373 := &x.ObjectMeta
					yy2373.CodecEncodeSelf(e)
				}
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2370[1] {
					yy2375 := &x.Spec
					yy2375.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2370[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2376 := &x.Spec
					yy2376.CodecEncodeSelf(e)
				}
			}
			if yyr2370 || yy2arr2370 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2377 := z.DecBinary()
	_ = yym2377
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2378 := r.ContainerType()
		if yyct2378 == codecSelferValueTypeMap1234 {
			yyl2378 := r.ReadMapStart()
			if yyl2378 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2378, d)
			}
		} else if yyct2378 == codecSelferValueTypeArray1234 {
			yyl2378 := r.ReadArrayStart()
			if yyl2378 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2378, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2379Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2379Slc
	var yyhl2379 bool = l >= 0
	for yyj2379 := 0; ; yyj2379++ {
		if yyhl2379 {
			if yyj2379 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2379Slc = r.DecodeBytes(yys2379Slc, true, true)
		yys2379 := string(yys2379Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2379 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2380 := &x.ObjectMeta
				yyv2380.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2381 := &x.Spec
				yyv2381.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2379)
		} // end switch yys2379
	} // end for yyj2379
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2382 int
	var yyb2382 bool
	var yyhl2382 bool = l >= 0
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2383 := &x.ObjectMeta
		yyv2383.CodecDecodeSelf(d)
	}
	yyj2382++
	if yyhl2382 {
		yyb2382 = yyj2382 > l
	} else {
		yyb2382 = r.CheckBreak()
	}
	if yyb2382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2384 := &x.Spec
		yyv2384.CodecDecodeSelf(d)
	}
	for {
		yyj2382++
		if yyhl2382 {
			yyb2382 = yyj2382 > l
		} else {
			yyb2382 = r.CheckBreak()
		}
		if yyb2382 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2382-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2385 := z.EncBinary()
		_ = yym2385
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2386 := !z.EncBinary()
			yy2arr2386 := z.EncBasicHandle().StructToArray
			var yyq2386 [4]bool
			_, _, _ = yysep2386, yyq2386, yy2arr2386
			const yyr2386 bool = false
			yyq2386[0] = x.Kind != ""
			yyq2386[1] = x.APIVersion != ""
			yyq2386[2] = true
			yyq2386[3] = true
			var yynn2386 int
			if yyr2386 || yy2arr2386 {
				r.EncodeArrayStart(4)
			} else {
				yynn2386 = 0
				for _, b := range yyq2386 {
					if b {
						yynn2386++
					}
				}
				r.EncodeMapStart(yynn2386)
				yynn2386 = 0
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[0] {
					yym2388 := z.EncBinary()
					_ = yym2388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2386[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2389 := z.EncBinary()
					_ = yym2389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[1] {
					yym2391 := z.EncBinary()
					_ = yym2391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2386[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2392 := z.EncBinary()
					_ = yym2392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[2] {
					yy2394 := &x.ObjectMeta
					yy2394.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2386[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2395 := &x.ObjectMeta
					yy2395.CodecEncodeSelf(e)
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2386[3] {
					yy2397 := &x.Template
					yy2397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2386[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2398 := &x.Template
					yy2398.CodecEncodeSelf(e)
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2399 := z.DecBinary()
	_ = yym2399
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2400 := r.ContainerType()
		if yyct2400 == codecSelferValueTypeMap1234 {
			yyl2400 := r.ReadMapStart()
			if yyl2400 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2400, d)
			}
		} else if yyct2400 == codecSelferValueTypeArray1234 {
			yyl2400 := r.ReadArrayStart()
			if yyl2400 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2400, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2401Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2401Slc
	var yyhl2401 bool = l >= 0
	for yyj2401 := 0; ; yyj2401++ {
		if yyhl2401 {
			if yyj2401 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2401Slc = r.DecodeBytes(yys2401Slc, true, true)
		yys2401 := string(yys2401Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2401 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2404 := &x.ObjectMeta
				yyv2404.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2405 := &x.Template
				yyv2405.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2401)
		} // end switch yys2401
	} // end for yyj2401
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2406 int
	var yyb2406 bool
	var yyhl2406 bool = l >= 0
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2409 := &x.ObjectMeta
		yyv2409.CodecDecodeSelf(d)
	}
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2410 := &x.Template
		yyv2410.CodecDecodeSelf(d)
	}
	for {
		yyj2406++
		if yyhl2406 {
			yyb2406 = yyj2406 > l
		} else {
			yyb2406 = r.CheckBreak()
		}
		if yyb2406 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2406-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2411 := z.EncBinary()
		_ = yym2411
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2412 := !z.EncBinary()
			yy2arr2412 := z.EncBasicHandle().StructToArray
			var yyq2412 [4]bool
			_, _, _ = yysep2412, yyq2412, yy2arr2412
			const yyr2412 bool = false
			yyq2412[0] = x.Kind != ""
			yyq2412[1] = x.APIVersion != ""
			yyq2412[2] = true
			var yynn2412 int
			if yyr2412 || yy2arr2412 {
				r.EncodeArrayStart(4)
			} else {
				yynn2412 = 1
				for _, b := range yyq2412 {
					if b {
						yynn2412++
					}
				}
				r.EncodeMapStart(yynn2412)
				yynn2412 = 0
			}
			if yyr2412 || yy2arr2412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2412[0] {
					yym2414 := z.EncBinary()
					_ = yym2414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2412[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2412 || yy2arr2412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2412[1] {
					yym2417 := z.EncBinary()
					_ = yym2417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2412[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2412 || yy2arr2412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2412[2] {
					yy2420 := &x.ListMeta
					yym2421 := z.EncBinary()
					_ = yym2421
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2420) {
					} else {
						z.EncFallback(yy2420)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2412[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2422 := &x.ListMeta
					yym2423 := z.EncBinary()
					_ = yym2423
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2422) {
					} else {
						z.EncFallback(yy2422)
					}
				}
			}
			if yyr2412 || yy2arr2412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2425 := z.EncBinary()
					_ = yym2425
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2426 := z.EncBinary()
					_ = yym2426
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2412 || yy2arr2412 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2427 := z.DecBinary()
	_ = yym2427
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2428 := r.ContainerType()
		if yyct2428 == codecSelferValueTypeMap1234 {
			yyl2428 := r.ReadMapStart()
			if yyl2428 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2428, d)
			}
		} else if yyct2428 == codecSelferValueTypeArray1234 {
			yyl2428 := r.ReadArrayStart()
			if yyl2428 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2428, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2429Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2429Slc
	var yyhl2429 bool = l >= 0
	for yyj2429 := 0; ; yyj2429++ {
		if yyhl2429 {
			if yyj2429 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2429Slc = r.DecodeBytes(yys2429Slc, true, true)
		yys2429 := string(yys2429Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2429 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2432 := &x.ListMeta
				yym2433 := z.DecBinary()
				_ = yym2433
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2432) {
				} else {
					z.DecFallback(yyv2432, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2434 := &x.Items
				yym2435 := z.DecBinary()
				_ = yym2435
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2434), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2429)
		} // end switch yys2429
	} // end for yyj2429
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2436 int
	var yyb2436 bool
	var yyhl2436 bool = l >= 0
	yyj2436++
	if yyhl2436 {
		yyb2436 = yyj2436 > l
	} else {
		yyb2436 = r.CheckBreak()
	}
	if yyb2436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2436++
	if yyhl2436 {
		yyb2436 = yyj2436 > l
	} else {
		yyb2436 = r.CheckBreak()
	}
	if yyb2436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2436++
	if yyhl2436 {
		yyb2436 = yyj2436 > l
	} else {
		yyb2436 = r.CheckBreak()
	}
	if yyb2436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2439 := &x.ListMeta
		yym2440 := z.DecBinary()
		_ = yym2440
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2439) {
		} else {
			z.DecFallback(yyv2439, false)
		}
	}
	yyj2436++
	if yyhl2436 {
		yyb2436 = yyj2436 > l
	} else {
		yyb2436 = r.CheckBreak()
	}
	if yyb2436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2441 := &x.Items
		yym2442 := z.DecBinary()
		_ = yym2442
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2441), d)
		}
	}
	for {
		yyj2436++
		if yyhl2436 {
			yyb2436 = yyj2436 > l
		} else {
			yyb2436 = r.CheckBreak()
		}
		if yyb2436 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2436-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2443 := z.EncBinary()
		_ = yym2443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2444 := !z.EncBinary()
			yy2arr2444 := z.EncBasicHandle().StructToArray
			var yyq2444 [3]bool
			_, _, _ = yysep2444, yyq2444, yy2arr2444
			const yyr2444 bool = false
			yyq2444[2] = x.Template != nil
			var yynn2444 int
			if yyr2444 || yy2arr2444 {
				r.EncodeArrayStart(3)
			} else {
				yynn2444 = 2
				for _, b := range yyq2444 {
					if b {
						yynn2444++
					}
				}
				r.EncodeMapStart(yynn2444)
				yynn2444 = 0
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2446 := z.EncBinary()
				_ = yym2446
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2447 := z.EncBinary()
				_ = yym2447
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2444[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2444[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2452 := z.DecBinary()
	_ = yym2452
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2453 := r.ContainerType()
		if yyct2453 == codecSelferValueTypeMap1234 {
			yyl2453 := r.ReadMapStart()
			if yyl2453 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2453, d)
			}
		} else if yyct2453 == codecSelferValueTypeArray1234 {
			yyl2453 := r.ReadArrayStart()
			if yyl2453 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2453, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2454Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2454Slc
	var yyhl2454 bool = l >= 0
	for yyj2454 := 0; ; yyj2454++ {
		if yyhl2454 {
			if yyj2454 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2454Slc = r.DecodeBytes(yys2454Slc, true, true)
		yys2454 := string(yys2454Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2454 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2456 := &x.Selector
				yym2457 := z.DecBinary()
				_ = yym2457
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2456, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2454)
		} // end switch yys2454
	} // end for yyj2454
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2459 int
	var yyb2459 bool
	var yyhl2459 bool = l >= 0
	yyj2459++
	if yyhl2459 {
		yyb2459 = yyj2459 > l
	} else {
		yyb2459 = r.CheckBreak()
	}
	if yyb2459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2459++
	if yyhl2459 {
		yyb2459 = yyj2459 > l
	} else {
		yyb2459 = r.CheckBreak()
	}
	if yyb2459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2461 := &x.Selector
		yym2462 := z.DecBinary()
		_ = yym2462
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2461, false, d)
		}
	}
	yyj2459++
	if yyhl2459 {
		yyb2459 = yyj2459 > l
	} else {
		yyb2459 = r.CheckBreak()
	}
	if yyb2459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2459++
		if yyhl2459 {
			yyb2459 = yyj2459 > l
		} else {
			yyb2459 = r.CheckBreak()
		}
		if yyb2459 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2459-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2464 := z.EncBinary()
		_ = yym2464
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2465 := !z.EncBinary()
			yy2arr2465 := z.EncBasicHandle().StructToArray
			var yyq2465 [4]bool
			_, _, _ = yysep2465, yyq2465, yy2arr2465
			const yyr2465 bool = false
			yyq2465[1] = x.FullyLabeledReplicas != 0
			yyq2465[2] = x.ReadyReplicas != 0
			yyq2465[3] = x.ObservedGeneration != 0
			var yynn2465 int
			if yyr2465 || yy2arr2465 {
				r.EncodeArrayStart(4)
			} else {
				yynn2465 = 1
				for _, b := range yyq2465 {
					if b {
						yynn2465++
					}
				}
				r.EncodeMapStart(yynn2465)
				yynn2465 = 0
			}
			if yyr2465 || yy2arr2465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2467 := z.EncBinary()
				_ = yym2467
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2468 := z.EncBinary()
				_ = yym2468
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2465 || yy2arr2465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2465[1] {
					yym2470 := z.EncBinary()
					_ = yym2470
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2465[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2471 := z.EncBinary()
					_ = yym2471
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2465 || yy2arr2465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2465[2] {
					yym2473 := z.EncBinary()
					_ = yym2473
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2465[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2474 := z.EncBinary()
					_ = yym2474
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2465 || yy2arr2465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2465[3] {
					yym2476 := z.EncBinary()
					_ = yym2476
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2465[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2477 := z.EncBinary()
					_ = yym2477
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2465 || yy2arr2465 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2478 := z.DecBinary()
	_ = yym2478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2479 := r.ContainerType()
		if yyct2479 == codecSelferValueTypeMap1234 {
			yyl2479 := r.ReadMapStart()
			if yyl2479 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2479, d)
			}
		} else if yyct2479 == codecSelferValueTypeArray1234 {
			yyl2479 := r.ReadArrayStart()
			if yyl2479 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2480Slc
	var yyhl2480 bool = l >= 0
	for yyj2480 := 0; ; yyj2480++ {
		if yyhl2480 {
			if yyj2480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2480Slc = r.DecodeBytes(yys2480Slc, true, true)
		yys2480 := string(yys2480Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2480 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2480)
		} // end switch yys2480
	} // end for yyj2480
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2485 int
	var yyb2485 bool
	var yyhl2485 bool = l >= 0
	yyj2485++
	if yyhl2485 {
		yyb2485 = yyj2485 > l
	} else {
		yyb2485 = r.CheckBreak()
	}
	if yyb2485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2485++
	if yyhl2485 {
		yyb2485 = yyj2485 > l
	} else {
		yyb2485 = r.CheckBreak()
	}
	if yyb2485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2485++
	if yyhl2485 {
		yyb2485 = yyj2485 > l
	} else {
		yyb2485 = r.CheckBreak()
	}
	if yyb2485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2485++
	if yyhl2485 {
		yyb2485 = yyj2485 > l
	} else {
		yyb2485 = r.CheckBreak()
	}
	if yyb2485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2485++
		if yyhl2485 {
			yyb2485 = yyj2485 > l
		} else {
			yyb2485 = r.CheckBreak()
		}
		if yyb2485 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2485-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2490 := z.EncBinary()
		_ = yym2490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2491 := !z.EncBinary()
			yy2arr2491 := z.EncBasicHandle().StructToArray
			var yyq2491 [5]bool
			_, _, _ = yysep2491, yyq2491, yy2arr2491
			const yyr2491 bool = false
			yyq2491[0] = x.Kind != ""
			yyq2491[1] = x.APIVersion != ""
			yyq2491[2] = true
			yyq2491[3] = true
			yyq2491[4] = true
			var yynn2491 int
			if yyr2491 || yy2arr2491 {
				r.EncodeArrayStart(5)
			} else {
				yynn2491 = 0
				for _, b := range yyq2491 {
					if b {
						yynn2491++
					}
				}
				r.EncodeMapStart(yynn2491)
				yynn2491 = 0
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2491[0] {
					yym2493 := z.EncBinary()
					_ = yym2493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2491[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2494 := z.EncBinary()
					_ = yym2494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2491[1] {
					yym2496 := z.EncBinary()
					_ = yym2496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2491[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2497 := z.EncBinary()
					_ = yym2497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2491[2] {
					yy2499 := &x.ObjectMeta
					yy2499.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2491[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2500 := &x.ObjectMeta
					yy2500.CodecEncodeSelf(e)
				}
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2491[3] {
					yy2502 := &x.Spec
					yy2502.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2491[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2503 := &x.Spec
					yy2503.CodecEncodeSelf(e)
				}
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2491[4] {
					yy2505 := &x.Status
					yy2505.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2491[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2506 := &x.Status
					yy2506.CodecEncodeSelf(e)
				}
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2507 := z.DecBinary()
	_ = yym2507
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2508 := r.ContainerType()
		if yyct2508 == codecSelferValueTypeMap1234 {
			yyl2508 := r.ReadMapStart()
			if yyl2508 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2508, d)
			}
		} else if yyct2508 == codecSelferValueTypeArray1234 {
			yyl2508 := r.ReadArrayStart()
			if yyl2508 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2508, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2509Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2509Slc
	var yyhl2509 bool = l >= 0
	for yyj2509 := 0; ; yyj2509++ {
		if yyhl2509 {
			if yyj2509 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2509Slc = r.DecodeBytes(yys2509Slc, true, true)
		yys2509 := string(yys2509Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2509 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2512 := &x.ObjectMeta
				yyv2512.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2513 := &x.Spec
				yyv2513.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2514 := &x.Status
				yyv2514.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2509)
		} // end switch yys2509
	} // end for yyj2509
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2515 int
	var yyb2515 bool
	var yyhl2515 bool = l >= 0
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2518 := &x.ObjectMeta
		yyv2518.CodecDecodeSelf(d)
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2519 := &x.Spec
		yyv2519.CodecDecodeSelf(d)
	}
	yyj2515++
	if yyhl2515 {
		yyb2515 = yyj2515 > l
	} else {
		yyb2515 = r.CheckBreak()
	}
	if yyb2515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2520 := &x.Status
		yyv2520.CodecDecodeSelf(d)
	}
	for {
		yyj2515++
		if yyhl2515 {
			yyb2515 = yyj2515 > l
		} else {
			yyb2515 = r.CheckBreak()
		}
		if yyb2515 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2515-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2521 := z.EncBinary()
		_ = yym2521
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2522 := !z.EncBinary()
			yy2arr2522 := z.EncBasicHandle().StructToArray
			var yyq2522 [4]bool
			_, _, _ = yysep2522, yyq2522, yy2arr2522
			const yyr2522 bool = false
			yyq2522[0] = x.Kind != ""
			yyq2522[1] = x.APIVersion != ""
			yyq2522[2] = true
			var yynn2522 int
			if yyr2522 || yy2arr2522 {
				r.EncodeArrayStart(4)
			} else {
				yynn2522 = 1
				for _, b := range yyq2522 {
					if b {
						yynn2522++
					}
				}
				r.EncodeMapStart(yynn2522)
				yynn2522 = 0
			}
			if yyr2522 || yy2arr2522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2522[0] {
					yym2524 := z.EncBinary()
					_ = yym2524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2522[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2525 := z.EncBinary()
					_ = yym2525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2522 || yy2arr2522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2522[1] {
					yym2527 := z.EncBinary()
					_ = yym2527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2522[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2522 || yy2arr2522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2522[2] {
					yy2530 := &x.ListMeta
					yym2531 := z.EncBinary()
					_ = yym2531
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2530) {
					} else {
						z.EncFallback(yy2530)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2522[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2532 := &x.ListMeta
					yym2533 := z.EncBinary()
					_ = yym2533
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2532) {
					} else {
						z.EncFallback(yy2532)
					}
				}
			}
			if yyr2522 || yy2arr2522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2535 := z.EncBinary()
					_ = yym2535
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2536 := z.EncBinary()
					_ = yym2536
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2522 || yy2arr2522 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2537 := z.DecBinary()
	_ = yym2537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2538 := r.ContainerType()
		if yyct2538 == codecSelferValueTypeMap1234 {
			yyl2538 := r.ReadMapStart()
			if yyl2538 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2538, d)
			}
		} else if yyct2538 == codecSelferValueTypeArray1234 {
			yyl2538 := r.ReadArrayStart()
			if yyl2538 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2539Slc
	var yyhl2539 bool = l >= 0
	for yyj2539 := 0; ; yyj2539++ {
		if yyhl2539 {
			if yyj2539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2539Slc = r.DecodeBytes(yys2539Slc, true, true)
		yys2539 := string(yys2539Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2539 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2542 := &x.ListMeta
				yym2543 := z.DecBinary()
				_ = yym2543
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2542) {
				} else {
					z.DecFallback(yyv2542, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2544 := &x.Items
				yym2545 := z.DecBinary()
				_ = yym2545
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2544), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2539)
		} // end switch yys2539
	} // end for yyj2539
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2546 int
	var yyb2546 bool
	var yyhl2546 bool = l >= 0
	yyj2546++
	if yyhl2546 {
		yyb2546 = yyj2546 > l
	} else {
		yyb2546 = r.CheckBreak()
	}
	if yyb2546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2546++
	if yyhl2546 {
		yyb2546 = yyj2546 > l
	} else {
		yyb2546 = r.CheckBreak()
	}
	if yyb2546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2546++
	if yyhl2546 {
		yyb2546 = yyj2546 > l
	} else {
		yyb2546 = r.CheckBreak()
	}
	if yyb2546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2549 := &x.ListMeta
		yym2550 := z.DecBinary()
		_ = yym2550
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2549) {
		} else {
			z.DecFallback(yyv2549, false)
		}
	}
	yyj2546++
	if yyhl2546 {
		yyb2546 = yyj2546 > l
	} else {
		yyb2546 = r.CheckBreak()
	}
	if yyb2546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2551 := &x.Items
		yym2552 := z.DecBinary()
		_ = yym2552
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2551), d)
		}
	}
	for {
		yyj2546++
		if yyhl2546 {
			yyb2546 = yyj2546 > l
		} else {
			yyb2546 = r.CheckBreak()
		}
		if yyb2546 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2546-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2553 := z.EncBinary()
		_ = yym2553
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2554 := !z.EncBinary()
			yy2arr2554 := z.EncBasicHandle().StructToArray
			var yyq2554 [4]bool
			_, _, _ = yysep2554, yyq2554, yy2arr2554
			const yyr2554 bool = false
			yyq2554[0] = x.Kind != ""
			yyq2554[1] = x.APIVersion != ""
			yyq2554[2] = true
			var yynn2554 int
			if yyr2554 || yy2arr2554 {
				r.EncodeArrayStart(4)
			} else {
				yynn2554 = 1
				for _, b := range yyq2554 {
					if b {
						yynn2554++
					}
				}
				r.EncodeMapStart(yynn2554)
				yynn2554 = 0
			}
			if yyr2554 || yy2arr2554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2554[0] {
					yym2556 := z.EncBinary()
					_ = yym2556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2554[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2557 := z.EncBinary()
					_ = yym2557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2554 || yy2arr2554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2554[1] {
					yym2559 := z.EncBinary()
					_ = yym2559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2554[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2560 := z.EncBinary()
					_ = yym2560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2554 || yy2arr2554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2554[2] {
					yy2562 := &x.ListMeta
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2562) {
					} else {
						z.EncFallback(yy2562)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2554[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2564 := &x.ListMeta
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2564) {
					} else {
						z.EncFallback(yy2564)
					}
				}
			}
			if yyr2554 || yy2arr2554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2567 := z.EncBinary()
					_ = yym2567
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2568 := z.EncBinary()
					_ = yym2568
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2554 || yy2arr2554 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2569 := z.DecBinary()
	_ = yym2569
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2570 := r.ContainerType()
		if yyct2570 == codecSelferValueTypeMap1234 {
			yyl2570 := r.ReadMapStart()
			if yyl2570 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2570, d)
			}
		} else if yyct2570 == codecSelferValueTypeArray1234 {
			yyl2570 := r.ReadArrayStart()
			if yyl2570 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2570, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2571Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2571Slc
	var yyhl2571 bool = l >= 0
	for yyj2571 := 0; ; yyj2571++ {
		if yyhl2571 {
			if yyj2571 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2571Slc = r.DecodeBytes(yys2571Slc, true, true)
		yys2571 := string(yys2571Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2571 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2574 := &x.ListMeta
				yym2575 := z.DecBinary()
				_ = yym2575
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2574) {
				} else {
					z.DecFallback(yyv2574, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2576 := &x.Items
				yym2577 := z.DecBinary()
				_ = yym2577
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2576), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2571)
		} // end switch yys2571
	} // end for yyj2571
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2578 int
	var yyb2578 bool
	var yyhl2578 bool = l >= 0
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2581 := &x.ListMeta
		yym2582 := z.DecBinary()
		_ = yym2582
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2581) {
		} else {
			z.DecFallback(yyv2581, false)
		}
	}
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2583 := &x.Items
		yym2584 := z.DecBinary()
		_ = yym2584
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2583), d)
		}
	}
	for {
		yyj2578++
		if yyhl2578 {
			yyb2578 = yyj2578 > l
		} else {
			yyb2578 = r.CheckBreak()
		}
		if yyb2578 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2578-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2585 := z.EncBinary()
	_ = yym2585
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2586 := z.DecBinary()
	_ = yym2586
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2587 := z.EncBinary()
	_ = yym2587
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2588 := z.DecBinary()
	_ = yym2588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2589 := z.EncBinary()
		_ = yym2589
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2590 := !z.EncBinary()
			yy2arr2590 := z.EncBasicHandle().StructToArray
			var yyq2590 [1]bool
			_, _, _ = yysep2590, yyq2590, yy2arr2590
			const yyr2590 bool = false
			yyq2590[0] = true
			var yynn2590 int
			if yyr2590 || yy2arr2590 {
				r.EncodeArrayStart(1)
			} else {
				yynn2590 = 0
				for _, b := range yyq2590 {
					if b {
						yynn2590++
					}
				}
				r.EncodeMapStart(yynn2590)
				yynn2590 = 0
			}
			if yyr2590 || yy2arr2590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2590[0] {
					yy2592 := &x.LoadBalancer
					yy2592.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2590[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2593 := &x.LoadBalancer
					yy2593.CodecEncodeSelf(e)
				}
			}
			if yyr2590 || yy2arr2590 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2594 := z.DecBinary()
	_ = yym2594
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2595 := r.ContainerType()
		if yyct2595 == codecSelferValueTypeMap1234 {
			yyl2595 := r.ReadMapStart()
			if yyl2595 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2595, d)
			}
		} else if yyct2595 == codecSelferValueTypeArray1234 {
			yyl2595 := r.ReadArrayStart()
			if yyl2595 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2595, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2596Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2596Slc
	var yyhl2596 bool = l >= 0
	for yyj2596 := 0; ; yyj2596++ {
		if yyhl2596 {
			if yyj2596 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2596Slc = r.DecodeBytes(yys2596Slc, true, true)
		yys2596 := string(yys2596Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2596 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2597 := &x.LoadBalancer
				yyv2597.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2596)
		} // end switch yys2596
	} // end for yyj2596
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2598 int
	var yyb2598 bool
	var yyhl2598 bool = l >= 0
	yyj2598++
	if yyhl2598 {
		yyb2598 = yyj2598 > l
	} else {
		yyb2598 = r.CheckBreak()
	}
	if yyb2598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2599 := &x.LoadBalancer
		yyv2599.CodecDecodeSelf(d)
	}
	for {
		yyj2598++
		if yyhl2598 {
			yyb2598 = yyj2598 > l
		} else {
			yyb2598 = r.CheckBreak()
		}
		if yyb2598 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2598-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2600 := z.EncBinary()
		_ = yym2600
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2601 := !z.EncBinary()
			yy2arr2601 := z.EncBasicHandle().StructToArray
			var yyq2601 [1]bool
			_, _, _ = yysep2601, yyq2601, yy2arr2601
			const yyr2601 bool = false
			yyq2601[0] = len(x.Ingress) != 0
			var yynn2601 int
			if yyr2601 || yy2arr2601 {
				r.EncodeArrayStart(1)
			} else {
				yynn2601 = 0
				for _, b := range yyq2601 {
					if b {
						yynn2601++
					}
				}
				r.EncodeMapStart(yynn2601)
				yynn2601 = 0
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2601[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2603 := z.EncBinary()
						_ = yym2603
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2601[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2604 := z.EncBinary()
						_ = yym2604
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2605 := z.DecBinary()
	_ = yym2605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2606 := r.ContainerType()
		if yyct2606 == codecSelferValueTypeMap1234 {
			yyl2606 := r.ReadMapStart()
			if yyl2606 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2606, d)
			}
		} else if yyct2606 == codecSelferValueTypeArray1234 {
			yyl2606 := r.ReadArrayStart()
			if yyl2606 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2607Slc
	var yyhl2607 bool = l >= 0
	for yyj2607 := 0; ; yyj2607++ {
		if yyhl2607 {
			if yyj2607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2607Slc = r.DecodeBytes(yys2607Slc, true, true)
		yys2607 := string(yys2607Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2607 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2608 := &x.Ingress
				yym2609 := z.DecBinary()
				_ = yym2609
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2608), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2607)
		} // end switch yys2607
	} // end for yyj2607
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2610 int
	var yyb2610 bool
	var yyhl2610 bool = l >= 0
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2611 := &x.Ingress
		yym2612 := z.DecBinary()
		_ = yym2612
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2611), d)
		}
	}
	for {
		yyj2610++
		if yyhl2610 {
			yyb2610 = yyj2610 > l
		} else {
			yyb2610 = r.CheckBreak()
		}
		if yyb2610 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2610-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2613 := z.EncBinary()
		_ = yym2613
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2614 := !z.EncBinary()
			yy2arr2614 := z.EncBasicHandle().StructToArray
			var yyq2614 [2]bool
			_, _, _ = yysep2614, yyq2614, yy2arr2614
			const yyr2614 bool = false
			yyq2614[0] = x.IP != ""
			yyq2614[1] = x.Hostname != ""
			var yynn2614 int
			if yyr2614 || yy2arr2614 {
				r.EncodeArrayStart(2)
			} else {
				yynn2614 = 0
				for _, b := range yyq2614 {
					if b {
						yynn2614++
					}
				}
				r.EncodeMapStart(yynn2614)
				yynn2614 = 0
			}
			if yyr2614 || yy2arr2614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2614[0] {
					yym2616 := z.EncBinary()
					_ = yym2616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2614[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2614 || yy2arr2614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2614[1] {
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2614[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2614 || yy2arr2614 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2621 := z.DecBinary()
	_ = yym2621
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2622 := r.ContainerType()
		if yyct2622 == codecSelferValueTypeMap1234 {
			yyl2622 := r.ReadMapStart()
			if yyl2622 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2622, d)
			}
		} else if yyct2622 == codecSelferValueTypeArray1234 {
			yyl2622 := r.ReadArrayStart()
			if yyl2622 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2622, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2623Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2623Slc
	var yyhl2623 bool = l >= 0
	for yyj2623 := 0; ; yyj2623++ {
		if yyhl2623 {
			if yyj2623 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2623Slc = r.DecodeBytes(yys2623Slc, true, true)
		yys2623 := string(yys2623Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2623 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2623)
		} // end switch yys2623
	} // end for yyj2623
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2626 int
	var yyb2626 bool
	var yyhl2626 bool = l >= 0
	yyj2626++
	if yyhl2626 {
		yyb2626 = yyj2626 > l
	} else {
		yyb2626 = r.CheckBreak()
	}
	if yyb2626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2626++
	if yyhl2626 {
		yyb2626 = yyj2626 > l
	} else {
		yyb2626 = r.CheckBreak()
	}
	if yyb2626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2626++
		if yyhl2626 {
			yyb2626 = yyj2626 > l
		} else {
			yyb2626 = r.CheckBreak()
		}
		if yyb2626 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2626-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2629 := z.EncBinary()
		_ = yym2629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2630 := !z.EncBinary()
			yy2arr2630 := z.EncBasicHandle().StructToArray
			var yyq2630 [9]bool
			_, _, _ = yysep2630, yyq2630, yy2arr2630
			const yyr2630 bool = false
			yyq2630[0] = x.Type != ""
			yyq2630[3] = x.ClusterIP != ""
			yyq2630[5] = len(x.ExternalIPs) != 0
			yyq2630[6] = x.LoadBalancerIP != ""
			yyq2630[7] = x.SessionAffinity != ""
			yyq2630[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2630 int
			if yyr2630 || yy2arr2630 {
				r.EncodeArrayStart(9)
			} else {
				yynn2630 = 3
				for _, b := range yyq2630 {
					if b {
						yynn2630++
					}
				}
				r.EncodeMapStart(yynn2630)
				yynn2630 = 0
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2630[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2630[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2633 := z.EncBinary()
					_ = yym2633
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2634 := z.EncBinary()
					_ = yym2634
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2636 := z.EncBinary()
					_ = yym2636
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2637 := z.EncBinary()
					_ = yym2637
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2630[3] {
					yym2639 := z.EncBinary()
					_ = yym2639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2630[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2642 := z.EncBinary()
				_ = yym2642
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ExternalName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2643 := z.EncBinary()
				_ = yym2643
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2630[5] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2645 := z.EncBinary()
						_ = yym2645
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2630[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2646 := z.EncBinary()
						_ = yym2646
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2630[6] {
					yym2648 := z.EncBinary()
					_ = yym2648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2630[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2630[7] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2630[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2630[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2652 := z.EncBinary()
						_ = yym2652
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2630[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2653 := z.EncBinary()
						_ = yym2653
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2654 := z.DecBinary()
	_ = yym2654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2655 := r.ContainerType()
		if yyct2655 == codecSelferValueTypeMap1234 {
			yyl2655 := r.ReadMapStart()
			if yyl2655 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2655, d)
			}
		} else if yyct2655 == codecSelferValueTypeArray1234 {
			yyl2655 := r.ReadArrayStart()
			if yyl2655 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2656Slc
	var yyhl2656 bool = l >= 0
	for yyj2656 := 0; ; yyj2656++ {
		if yyhl2656 {
			if yyj2656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2656Slc = r.DecodeBytes(yys2656Slc, true, true)
		yys2656 := string(yys2656Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2656 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2658 := &x.Ports
				yym2659 := z.DecBinary()
				_ = yym2659
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2658), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2660 := &x.Selector
				yym2661 := z.DecBinary()
				_ = yym2661
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2660, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "ExternalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2664 := &x.ExternalIPs
				yym2665 := z.DecBinary()
				_ = yym2665
				if false {
				} else {
					z.F.DecSliceStringX(yyv2664, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2668 := &x.LoadBalancerSourceRanges
				yym2669 := z.DecBinary()
				_ = yym2669
				if false {
				} else {
					z.F.DecSliceStringX(yyv2668, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2656)
		} // end switch yys2656
	} // end for yyj2656
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2670 int
	var yyb2670 bool
	var yyhl2670 bool = l >= 0
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2672 := &x.Ports
		yym2673 := z.DecBinary()
		_ = yym2673
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2672), d)
		}
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2674 := &x.Selector
		yym2675 := z.DecBinary()
		_ = yym2675
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2674, false, d)
		}
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2678 := &x.ExternalIPs
		yym2679 := z.DecBinary()
		_ = yym2679
		if false {
		} else {
			z.F.DecSliceStringX(yyv2678, false, d)
		}
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2682 := &x.LoadBalancerSourceRanges
		yym2683 := z.DecBinary()
		_ = yym2683
		if false {
		} else {
			z.F.DecSliceStringX(yyv2682, false, d)
		}
	}
	for {
		yyj2670++
		if yyhl2670 {
			yyb2670 = yyj2670 > l
		} else {
			yyb2670 = r.CheckBreak()
		}
		if yyb2670 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2670-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2684 := z.EncBinary()
		_ = yym2684
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2685 := !z.EncBinary()
			yy2arr2685 := z.EncBasicHandle().StructToArray
			var yyq2685 [5]bool
			_, _, _ = yysep2685, yyq2685, yy2arr2685
			const yyr2685 bool = false
			var yynn2685 int
			if yyr2685 || yy2arr2685 {
				r.EncodeArrayStart(5)
			} else {
				yynn2685 = 5
				for _, b := range yyq2685 {
					if b {
						yynn2685++
					}
				}
				r.EncodeMapStart(yynn2685)
				yynn2685 = 0
			}
			if yyr2685 || yy2arr2685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2687 := z.EncBinary()
				_ = yym2687
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2688 := z.EncBinary()
				_ = yym2688
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2685 || yy2arr2685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2685 || yy2arr2685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2691 := z.EncBinary()
				_ = yym2691
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2692 := z.EncBinary()
				_ = yym2692
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2685 || yy2arr2685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2694 := &x.TargetPort
				yym2695 := z.EncBinary()
				_ = yym2695
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2694) {
				} else if !yym2695 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2694)
				} else {
					z.EncFallback(yy2694)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2696 := &x.TargetPort
				yym2697 := z.EncBinary()
				_ = yym2697
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2696) {
				} else if !yym2697 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2696)
				} else {
					z.EncFallback(yy2696)
				}
			}
			if yyr2685 || yy2arr2685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2699 := z.EncBinary()
				_ = yym2699
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2700 := z.EncBinary()
				_ = yym2700
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2685 || yy2arr2685 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2701 := z.DecBinary()
	_ = yym2701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2702 := r.ContainerType()
		if yyct2702 == codecSelferValueTypeMap1234 {
			yyl2702 := r.ReadMapStart()
			if yyl2702 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2702, d)
			}
		} else if yyct2702 == codecSelferValueTypeArray1234 {
			yyl2702 := r.ReadArrayStart()
			if yyl2702 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2702, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2703Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2703Slc
	var yyhl2703 bool = l >= 0
	for yyj2703 := 0; ; yyj2703++ {
		if yyhl2703 {
			if yyj2703 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2703Slc = r.DecodeBytes(yys2703Slc, true, true)
		yys2703 := string(yys2703Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2703 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2707 := &x.TargetPort
				yym2708 := z.DecBinary()
				_ = yym2708
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2707) {
				} else if !yym2708 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2707)
				} else {
					z.DecFallback(yyv2707, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2703)
		} // end switch yys2703
	} // end for yyj2703
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2710 int
	var yyb2710 bool
	var yyhl2710 bool = l >= 0
	yyj2710++
	if yyhl2710 {
		yyb2710 = yyj2710 > l
	} else {
		yyb2710 = r.CheckBreak()
	}
	if yyb2710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2710++
	if yyhl2710 {
		yyb2710 = yyj2710 > l
	} else {
		yyb2710 = r.CheckBreak()
	}
	if yyb2710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2710++
	if yyhl2710 {
		yyb2710 = yyj2710 > l
	} else {
		yyb2710 = r.CheckBreak()
	}
	if yyb2710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2710++
	if yyhl2710 {
		yyb2710 = yyj2710 > l
	} else {
		yyb2710 = r.CheckBreak()
	}
	if yyb2710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2714 := &x.TargetPort
		yym2715 := z.DecBinary()
		_ = yym2715
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2714) {
		} else if !yym2715 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2714)
		} else {
			z.DecFallback(yyv2714, false)
		}
	}
	yyj2710++
	if yyhl2710 {
		yyb2710 = yyj2710 > l
	} else {
		yyb2710 = r.CheckBreak()
	}
	if yyb2710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2710++
		if yyhl2710 {
			yyb2710 = yyj2710 > l
		} else {
			yyb2710 = r.CheckBreak()
		}
		if yyb2710 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2710-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2717 := z.EncBinary()
		_ = yym2717
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2718 := !z.EncBinary()
			yy2arr2718 := z.EncBasicHandle().StructToArray
			var yyq2718 [5]bool
			_, _, _ = yysep2718, yyq2718, yy2arr2718
			const yyr2718 bool = false
			yyq2718[0] = x.Kind != ""
			yyq2718[1] = x.APIVersion != ""
			yyq2718[2] = true
			yyq2718[3] = true
			yyq2718[4] = true
			var yynn2718 int
			if yyr2718 || yy2arr2718 {
				r.EncodeArrayStart(5)
			} else {
				yynn2718 = 0
				for _, b := range yyq2718 {
					if b {
						yynn2718++
					}
				}
				r.EncodeMapStart(yynn2718)
				yynn2718 = 0
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2718[0] {
					yym2720 := z.EncBinary()
					_ = yym2720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2718[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2718[1] {
					yym2723 := z.EncBinary()
					_ = yym2723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2718[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2718[2] {
					yy2726 := &x.ObjectMeta
					yy2726.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2718[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2727 := &x.ObjectMeta
					yy2727.CodecEncodeSelf(e)
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2718[3] {
					yy2729 := &x.Spec
					yy2729.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2718[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2730 := &x.Spec
					yy2730.CodecEncodeSelf(e)
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2718[4] {
					yy2732 := &x.Status
					yy2732.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2718[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2733 := &x.Status
					yy2733.CodecEncodeSelf(e)
				}
			}
			if yyr2718 || yy2arr2718 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2734 := z.DecBinary()
	_ = yym2734
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2735 := r.ContainerType()
		if yyct2735 == codecSelferValueTypeMap1234 {
			yyl2735 := r.ReadMapStart()
			if yyl2735 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2735, d)
			}
		} else if yyct2735 == codecSelferValueTypeArray1234 {
			yyl2735 := r.ReadArrayStart()
			if yyl2735 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2735, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2736Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2736Slc
	var yyhl2736 bool = l >= 0
	for yyj2736 := 0; ; yyj2736++ {
		if yyhl2736 {
			if yyj2736 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2736Slc = r.DecodeBytes(yys2736Slc, true, true)
		yys2736 := string(yys2736Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2736 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2739 := &x.ObjectMeta
				yyv2739.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2740 := &x.Spec
				yyv2740.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2741 := &x.Status
				yyv2741.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2736)
		} // end switch yys2736
	} // end for yyj2736
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2742 int
	var yyb2742 bool
	var yyhl2742 bool = l >= 0
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2745 := &x.ObjectMeta
		yyv2745.CodecDecodeSelf(d)
	}
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2746 := &x.Spec
		yyv2746.CodecDecodeSelf(d)
	}
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2747 := &x.Status
		yyv2747.CodecDecodeSelf(d)
	}
	for {
		yyj2742++
		if yyhl2742 {
			yyb2742 = yyj2742 > l
		} else {
			yyb2742 = r.CheckBreak()
		}
		if yyb2742 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2742-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2748 := z.EncBinary()
		_ = yym2748
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2749 := !z.EncBinary()
			yy2arr2749 := z.EncBasicHandle().StructToArray
			var yyq2749 [5]bool
			_, _, _ = yysep2749, yyq2749, yy2arr2749
			const yyr2749 bool = false
			yyq2749[0] = x.Kind != ""
			yyq2749[1] = x.APIVersion != ""
			yyq2749[2] = true
			yyq2749[4] = len(x.ImagePullSecrets) != 0
			var yynn2749 int
			if yyr2749 || yy2arr2749 {
				r.EncodeArrayStart(5)
			} else {
				yynn2749 = 1
				for _, b := range yyq2749 {
					if b {
						yynn2749++
					}
				}
				r.EncodeMapStart(yynn2749)
				yynn2749 = 0
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2749[0] {
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2749[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2749[1] {
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2749[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2749[2] {
					yy2757 := &x.ObjectMeta
					yy2757.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2749[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2758 := &x.ObjectMeta
					yy2758.CodecEncodeSelf(e)
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2760 := z.EncBinary()
					_ = yym2760
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2749[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2763 := z.EncBinary()
						_ = yym2763
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2749[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2764 := z.EncBinary()
						_ = yym2764
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2765 := z.DecBinary()
	_ = yym2765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2766 := r.ContainerType()
		if yyct2766 == codecSelferValueTypeMap1234 {
			yyl2766 := r.ReadMapStart()
			if yyl2766 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2766, d)
			}
		} else if yyct2766 == codecSelferValueTypeArray1234 {
			yyl2766 := r.ReadArrayStart()
			if yyl2766 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2767Slc
	var yyhl2767 bool = l >= 0
	for yyj2767 := 0; ; yyj2767++ {
		if yyhl2767 {
			if yyj2767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2767Slc = r.DecodeBytes(yys2767Slc, true, true)
		yys2767 := string(yys2767Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2767 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2770 := &x.ObjectMeta
				yyv2770.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2771 := &x.Secrets
				yym2772 := z.DecBinary()
				_ = yym2772
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2771), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2773 := &x.ImagePullSecrets
				yym2774 := z.DecBinary()
				_ = yym2774
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2773), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2767)
		} // end switch yys2767
	} // end for yyj2767
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2775 int
	var yyb2775 bool
	var yyhl2775 bool = l >= 0
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2778 := &x.ObjectMeta
		yyv2778.CodecDecodeSelf(d)
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2779 := &x.Secrets
		yym2780 := z.DecBinary()
		_ = yym2780
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2779), d)
		}
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2781 := &x.ImagePullSecrets
		yym2782 := z.DecBinary()
		_ = yym2782
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2781), d)
		}
	}
	for {
		yyj2775++
		if yyhl2775 {
			yyb2775 = yyj2775 > l
		} else {
			yyb2775 = r.CheckBreak()
		}
		if yyb2775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2783 := z.EncBinary()
		_ = yym2783
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2784 := !z.EncBinary()
			yy2arr2784 := z.EncBasicHandle().StructToArray
			var yyq2784 [4]bool
			_, _, _ = yysep2784, yyq2784, yy2arr2784
			const yyr2784 bool = false
			yyq2784[0] = x.Kind != ""
			yyq2784[1] = x.APIVersion != ""
			yyq2784[2] = true
			var yynn2784 int
			if yyr2784 || yy2arr2784 {
				r.EncodeArrayStart(4)
			} else {
				yynn2784 = 1
				for _, b := range yyq2784 {
					if b {
						yynn2784++
					}
				}
				r.EncodeMapStart(yynn2784)
				yynn2784 = 0
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2784[0] {
					yym2786 := z.EncBinary()
					_ = yym2786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2784[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2787 := z.EncBinary()
					_ = yym2787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2784[1] {
					yym2789 := z.EncBinary()
					_ = yym2789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2784[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2790 := z.EncBinary()
					_ = yym2790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2784[2] {
					yy2792 := &x.ListMeta
					yym2793 := z.EncBinary()
					_ = yym2793
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2792) {
					} else {
						z.EncFallback(yy2792)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2784[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2794 := &x.ListMeta
					yym2795 := z.EncBinary()
					_ = yym2795
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2794) {
					} else {
						z.EncFallback(yy2794)
					}
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2798 := z.EncBinary()
					_ = yym2798
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2799 := z.DecBinary()
	_ = yym2799
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2800 := r.ContainerType()
		if yyct2800 == codecSelferValueTypeMap1234 {
			yyl2800 := r.ReadMapStart()
			if yyl2800 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2800, d)
			}
		} else if yyct2800 == codecSelferValueTypeArray1234 {
			yyl2800 := r.ReadArrayStart()
			if yyl2800 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2800, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2801Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2801Slc
	var yyhl2801 bool = l >= 0
	for yyj2801 := 0; ; yyj2801++ {
		if yyhl2801 {
			if yyj2801 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2801Slc = r.DecodeBytes(yys2801Slc, true, true)
		yys2801 := string(yys2801Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2801 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2804 := &x.ListMeta
				yym2805 := z.DecBinary()
				_ = yym2805
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2804) {
				} else {
					z.DecFallback(yyv2804, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2806 := &x.Items
				yym2807 := z.DecBinary()
				_ = yym2807
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2806), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2801)
		} // end switch yys2801
	} // end for yyj2801
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2808 int
	var yyb2808 bool
	var yyhl2808 bool = l >= 0
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2811 := &x.ListMeta
		yym2812 := z.DecBinary()
		_ = yym2812
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2811) {
		} else {
			z.DecFallback(yyv2811, false)
		}
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2813 := &x.Items
		yym2814 := z.DecBinary()
		_ = yym2814
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2813), d)
		}
	}
	for {
		yyj2808++
		if yyhl2808 {
			yyb2808 = yyj2808 > l
		} else {
			yyb2808 = r.CheckBreak()
		}
		if yyb2808 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2808-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2815 := z.EncBinary()
		_ = yym2815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2816 := !z.EncBinary()
			yy2arr2816 := z.EncBasicHandle().StructToArray
			var yyq2816 [4]bool
			_, _, _ = yysep2816, yyq2816, yy2arr2816
			const yyr2816 bool = false
			yyq2816[0] = x.Kind != ""
			yyq2816[1] = x.APIVersion != ""
			yyq2816[2] = true
			var yynn2816 int
			if yyr2816 || yy2arr2816 {
				r.EncodeArrayStart(4)
			} else {
				yynn2816 = 1
				for _, b := range yyq2816 {
					if b {
						yynn2816++
					}
				}
				r.EncodeMapStart(yynn2816)
				yynn2816 = 0
			}
			if yyr2816 || yy2arr2816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2816[0] {
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2816[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2819 := z.EncBinary()
					_ = yym2819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2816 || yy2arr2816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2816[1] {
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2816[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2816 || yy2arr2816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2816[2] {
					yy2824 := &x.ObjectMeta
					yy2824.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2816[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2825 := &x.ObjectMeta
					yy2825.CodecEncodeSelf(e)
				}
			}
			if yyr2816 || yy2arr2816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2827 := z.EncBinary()
					_ = yym2827
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2828 := z.EncBinary()
					_ = yym2828
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2816 || yy2arr2816 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2829 := z.DecBinary()
	_ = yym2829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2830 := r.ContainerType()
		if yyct2830 == codecSelferValueTypeMap1234 {
			yyl2830 := r.ReadMapStart()
			if yyl2830 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2830, d)
			}
		} else if yyct2830 == codecSelferValueTypeArray1234 {
			yyl2830 := r.ReadArrayStart()
			if yyl2830 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2830, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2831Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2831Slc
	var yyhl2831 bool = l >= 0
	for yyj2831 := 0; ; yyj2831++ {
		if yyhl2831 {
			if yyj2831 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2831Slc = r.DecodeBytes(yys2831Slc, true, true)
		yys2831 := string(yys2831Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2831 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2834 := &x.ObjectMeta
				yyv2834.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2835 := &x.Subsets
				yym2836 := z.DecBinary()
				_ = yym2836
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2835), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2831)
		} // end switch yys2831
	} // end for yyj2831
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2837 int
	var yyb2837 bool
	var yyhl2837 bool = l >= 0
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2840 := &x.ObjectMeta
		yyv2840.CodecDecodeSelf(d)
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2841 := &x.Subsets
		yym2842 := z.DecBinary()
		_ = yym2842
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2841), d)
		}
	}
	for {
		yyj2837++
		if yyhl2837 {
			yyb2837 = yyj2837 > l
		} else {
			yyb2837 = r.CheckBreak()
		}
		if yyb2837 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2837-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2843 := z.EncBinary()
		_ = yym2843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2844 := !z.EncBinary()
			yy2arr2844 := z.EncBasicHandle().StructToArray
			var yyq2844 [3]bool
			_, _, _ = yysep2844, yyq2844, yy2arr2844
			const yyr2844 bool = false
			var yynn2844 int
			if yyr2844 || yy2arr2844 {
				r.EncodeArrayStart(3)
			} else {
				yynn2844 = 3
				for _, b := range yyq2844 {
					if b {
						yynn2844++
					}
				}
				r.EncodeMapStart(yynn2844)
				yynn2844 = 0
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2846 := z.EncBinary()
					_ = yym2846
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2847 := z.EncBinary()
					_ = yym2847
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2849 := z.EncBinary()
					_ = yym2849
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2852 := z.EncBinary()
					_ = yym2852
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2854 := z.DecBinary()
	_ = yym2854
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2855 := r.ContainerType()
		if yyct2855 == codecSelferValueTypeMap1234 {
			yyl2855 := r.ReadMapStart()
			if yyl2855 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2855, d)
			}
		} else if yyct2855 == codecSelferValueTypeArray1234 {
			yyl2855 := r.ReadArrayStart()
			if yyl2855 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2855, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2856Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2856Slc
	var yyhl2856 bool = l >= 0
	for yyj2856 := 0; ; yyj2856++ {
		if yyhl2856 {
			if yyj2856 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2856Slc = r.DecodeBytes(yys2856Slc, true, true)
		yys2856 := string(yys2856Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2856 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2857 := &x.Addresses
				yym2858 := z.DecBinary()
				_ = yym2858
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2857), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2859 := &x.NotReadyAddresses
				yym2860 := z.DecBinary()
				_ = yym2860
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2859), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2861 := &x.Ports
				yym2862 := z.DecBinary()
				_ = yym2862
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2861), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2856)
		} // end switch yys2856
	} // end for yyj2856
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2863 int
	var yyb2863 bool
	var yyhl2863 bool = l >= 0
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2864 := &x.Addresses
		yym2865 := z.DecBinary()
		_ = yym2865
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2864), d)
		}
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2866 := &x.NotReadyAddresses
		yym2867 := z.DecBinary()
		_ = yym2867
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2866), d)
		}
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2868 := &x.Ports
		yym2869 := z.DecBinary()
		_ = yym2869
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2868), d)
		}
	}
	for {
		yyj2863++
		if yyhl2863 {
			yyb2863 = yyj2863 > l
		} else {
			yyb2863 = r.CheckBreak()
		}
		if yyb2863 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2863-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2870 := z.EncBinary()
		_ = yym2870
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2871 := !z.EncBinary()
			yy2arr2871 := z.EncBasicHandle().StructToArray
			var yyq2871 [4]bool
			_, _, _ = yysep2871, yyq2871, yy2arr2871
			const yyr2871 bool = false
			yyq2871[1] = x.Hostname != ""
			yyq2871[2] = x.NodeName != nil
			var yynn2871 int
			if yyr2871 || yy2arr2871 {
				r.EncodeArrayStart(4)
			} else {
				yynn2871 = 2
				for _, b := range yyq2871 {
					if b {
						yynn2871++
					}
				}
				r.EncodeMapStart(yynn2871)
				yynn2871 = 0
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2873 := z.EncBinary()
				_ = yym2873
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2874 := z.EncBinary()
				_ = yym2874
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[1] {
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2871[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2877 := z.EncBinary()
					_ = yym2877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2879 := *x.NodeName
						yym2880 := z.EncBinary()
						_ = yym2880
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2879))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2871[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2881 := *x.NodeName
						yym2882 := z.EncBinary()
						_ = yym2882
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2881))
						}
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2884 := z.DecBinary()
	_ = yym2884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2885 := r.ContainerType()
		if yyct2885 == codecSelferValueTypeMap1234 {
			yyl2885 := r.ReadMapStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2885, d)
			}
		} else if yyct2885 == codecSelferValueTypeArray1234 {
			yyl2885 := r.ReadArrayStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2886Slc
	var yyhl2886 bool = l >= 0
	for yyj2886 := 0; ; yyj2886++ {
		if yyhl2886 {
			if yyj2886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2886Slc = r.DecodeBytes(yys2886Slc, true, true)
		yys2886 := string(yys2886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2886 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2890 := z.DecBinary()
				_ = yym2890
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2886)
		} // end switch yys2886
	} // end for yyj2886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2892 int
	var yyb2892 bool
	var yyhl2892 bool = l >= 0
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2896 := z.DecBinary()
		_ = yym2896
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2892++
		if yyhl2892 {
			yyb2892 = yyj2892 > l
		} else {
			yyb2892 = r.CheckBreak()
		}
		if yyb2892 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2892-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2898 := z.EncBinary()
		_ = yym2898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2899 := !z.EncBinary()
			yy2arr2899 := z.EncBasicHandle().StructToArray
			var yyq2899 [3]bool
			_, _, _ = yysep2899, yyq2899, yy2arr2899
			const yyr2899 bool = false
			var yynn2899 int
			if yyr2899 || yy2arr2899 {
				r.EncodeArrayStart(3)
			} else {
				yynn2899 = 3
				for _, b := range yyq2899 {
					if b {
						yynn2899++
					}
				}
				r.EncodeMapStart(yynn2899)
				yynn2899 = 0
			}
			if yyr2899 || yy2arr2899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2901 := z.EncBinary()
				_ = yym2901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2902 := z.EncBinary()
				_ = yym2902
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2899 || yy2arr2899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2904 := z.EncBinary()
				_ = yym2904
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2905 := z.EncBinary()
				_ = yym2905
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2899 || yy2arr2899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2899 || yy2arr2899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2907 := z.DecBinary()
	_ = yym2907
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2908 := r.ContainerType()
		if yyct2908 == codecSelferValueTypeMap1234 {
			yyl2908 := r.ReadMapStart()
			if yyl2908 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2908, d)
			}
		} else if yyct2908 == codecSelferValueTypeArray1234 {
			yyl2908 := r.ReadArrayStart()
			if yyl2908 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2908, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2909Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2909Slc
	var yyhl2909 bool = l >= 0
	for yyj2909 := 0; ; yyj2909++ {
		if yyhl2909 {
			if yyj2909 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2909Slc = r.DecodeBytes(yys2909Slc, true, true)
		yys2909 := string(yys2909Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2909 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2909)
		} // end switch yys2909
	} // end for yyj2909
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2913 int
	var yyb2913 bool
	var yyhl2913 bool = l >= 0
	yyj2913++
	if yyhl2913 {
		yyb2913 = yyj2913 > l
	} else {
		yyb2913 = r.CheckBreak()
	}
	if yyb2913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2913++
	if yyhl2913 {
		yyb2913 = yyj2913 > l
	} else {
		yyb2913 = r.CheckBreak()
	}
	if yyb2913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2913++
	if yyhl2913 {
		yyb2913 = yyj2913 > l
	} else {
		yyb2913 = r.CheckBreak()
	}
	if yyb2913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2913++
		if yyhl2913 {
			yyb2913 = yyj2913 > l
		} else {
			yyb2913 = r.CheckBreak()
		}
		if yyb2913 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2913-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2917 := z.EncBinary()
		_ = yym2917
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2918 := !z.EncBinary()
			yy2arr2918 := z.EncBasicHandle().StructToArray
			var yyq2918 [4]bool
			_, _, _ = yysep2918, yyq2918, yy2arr2918
			const yyr2918 bool = false
			yyq2918[0] = x.Kind != ""
			yyq2918[1] = x.APIVersion != ""
			yyq2918[2] = true
			var yynn2918 int
			if yyr2918 || yy2arr2918 {
				r.EncodeArrayStart(4)
			} else {
				yynn2918 = 1
				for _, b := range yyq2918 {
					if b {
						yynn2918++
					}
				}
				r.EncodeMapStart(yynn2918)
				yynn2918 = 0
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2918[0] {
					yym2920 := z.EncBinary()
					_ = yym2920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2918[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2921 := z.EncBinary()
					_ = yym2921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2918[1] {
					yym2923 := z.EncBinary()
					_ = yym2923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2918[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2918[2] {
					yy2926 := &x.ListMeta
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2926) {
					} else {
						z.EncFallback(yy2926)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2918[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2928 := &x.ListMeta
					yym2929 := z.EncBinary()
					_ = yym2929
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2928) {
					} else {
						z.EncFallback(yy2928)
					}
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2932 := z.EncBinary()
					_ = yym2932
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2918 || yy2arr2918 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2933 := z.DecBinary()
	_ = yym2933
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2934 := r.ContainerType()
		if yyct2934 == codecSelferValueTypeMap1234 {
			yyl2934 := r.ReadMapStart()
			if yyl2934 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2934, d)
			}
		} else if yyct2934 == codecSelferValueTypeArray1234 {
			yyl2934 := r.ReadArrayStart()
			if yyl2934 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2934, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2935Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2935Slc
	var yyhl2935 bool = l >= 0
	for yyj2935 := 0; ; yyj2935++ {
		if yyhl2935 {
			if yyj2935 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2935Slc = r.DecodeBytes(yys2935Slc, true, true)
		yys2935 := string(yys2935Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2935 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2938 := &x.ListMeta
				yym2939 := z.DecBinary()
				_ = yym2939
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2938) {
				} else {
					z.DecFallback(yyv2938, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2940 := &x.Items
				yym2941 := z.DecBinary()
				_ = yym2941
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2940), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2935)
		} // end switch yys2935
	} // end for yyj2935
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2942 int
	var yyb2942 bool
	var yyhl2942 bool = l >= 0
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2945 := &x.ListMeta
		yym2946 := z.DecBinary()
		_ = yym2946
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2945) {
		} else {
			z.DecFallback(yyv2945, false)
		}
	}
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2947 := &x.Items
		yym2948 := z.DecBinary()
		_ = yym2948
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2947), d)
		}
	}
	for {
		yyj2942++
		if yyhl2942 {
			yyb2942 = yyj2942 > l
		} else {
			yyb2942 = r.CheckBreak()
		}
		if yyb2942 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2942-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2949 := z.EncBinary()
		_ = yym2949
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2950 := !z.EncBinary()
			yy2arr2950 := z.EncBasicHandle().StructToArray
			var yyq2950 [4]bool
			_, _, _ = yysep2950, yyq2950, yy2arr2950
			const yyr2950 bool = false
			yyq2950[0] = x.PodCIDR != ""
			yyq2950[1] = x.ExternalID != ""
			yyq2950[2] = x.ProviderID != ""
			yyq2950[3] = x.Unschedulable != false
			var yynn2950 int
			if yyr2950 || yy2arr2950 {
				r.EncodeArrayStart(4)
			} else {
				yynn2950 = 0
				for _, b := range yyq2950 {
					if b {
						yynn2950++
					}
				}
				r.EncodeMapStart(yynn2950)
				yynn2950 = 0
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2950[0] {
					yym2952 := z.EncBinary()
					_ = yym2952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2950[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2953 := z.EncBinary()
					_ = yym2953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2950[1] {
					yym2955 := z.EncBinary()
					_ = yym2955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2950[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2956 := z.EncBinary()
					_ = yym2956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2950[2] {
					yym2958 := z.EncBinary()
					_ = yym2958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2950[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2959 := z.EncBinary()
					_ = yym2959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2950[3] {
					yym2961 := z.EncBinary()
					_ = yym2961
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2950[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2950 || yy2arr2950 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2963 := z.DecBinary()
	_ = yym2963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2964 := r.ContainerType()
		if yyct2964 == codecSelferValueTypeMap1234 {
			yyl2964 := r.ReadMapStart()
			if yyl2964 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2964, d)
			}
		} else if yyct2964 == codecSelferValueTypeArray1234 {
			yyl2964 := r.ReadArrayStart()
			if yyl2964 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2965Slc
	var yyhl2965 bool = l >= 0
	for yyj2965 := 0; ; yyj2965++ {
		if yyhl2965 {
			if yyj2965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2965Slc = r.DecodeBytes(yys2965Slc, true, true)
		yys2965 := string(yys2965Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2965 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2965)
		} // end switch yys2965
	} // end for yyj2965
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2970 int
	var yyb2970 bool
	var yyhl2970 bool = l >= 0
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2970++
	if yyhl2970 {
		yyb2970 = yyj2970 > l
	} else {
		yyb2970 = r.CheckBreak()
	}
	if yyb2970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2970++
		if yyhl2970 {
			yyb2970 = yyj2970 > l
		} else {
			yyb2970 = r.CheckBreak()
		}
		if yyb2970 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2970-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2975 := z.EncBinary()
		_ = yym2975
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2976 := !z.EncBinary()
			yy2arr2976 := z.EncBasicHandle().StructToArray
			var yyq2976 [1]bool
			_, _, _ = yysep2976, yyq2976, yy2arr2976
			const yyr2976 bool = false
			var yynn2976 int
			if yyr2976 || yy2arr2976 {
				r.EncodeArrayStart(1)
			} else {
				yynn2976 = 1
				for _, b := range yyq2976 {
					if b {
						yynn2976++
					}
				}
				r.EncodeMapStart(yynn2976)
				yynn2976 = 0
			}
			if yyr2976 || yy2arr2976 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2978 := z.EncBinary()
				_ = yym2978
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2979 := z.EncBinary()
				_ = yym2979
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2976 || yy2arr2976 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2980 := z.DecBinary()
	_ = yym2980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2981 := r.ContainerType()
		if yyct2981 == codecSelferValueTypeMap1234 {
			yyl2981 := r.ReadMapStart()
			if yyl2981 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2981, d)
			}
		} else if yyct2981 == codecSelferValueTypeArray1234 {
			yyl2981 := r.ReadArrayStart()
			if yyl2981 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2982Slc
	var yyhl2982 bool = l >= 0
	for yyj2982 := 0; ; yyj2982++ {
		if yyhl2982 {
			if yyj2982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2982Slc = r.DecodeBytes(yys2982Slc, true, true)
		yys2982 := string(yys2982Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2982 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2982)
		} // end switch yys2982
	} // end for yyj2982
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2984 int
	var yyb2984 bool
	var yyhl2984 bool = l >= 0
	yyj2984++
	if yyhl2984 {
		yyb2984 = yyj2984 > l
	} else {
		yyb2984 = r.CheckBreak()
	}
	if yyb2984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2984++
		if yyhl2984 {
			yyb2984 = yyj2984 > l
		} else {
			yyb2984 = r.CheckBreak()
		}
		if yyb2984 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2984-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2986 := z.EncBinary()
		_ = yym2986
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2987 := !z.EncBinary()
			yy2arr2987 := z.EncBasicHandle().StructToArray
			var yyq2987 [1]bool
			_, _, _ = yysep2987, yyq2987, yy2arr2987
			const yyr2987 bool = false
			yyq2987[0] = true
			var yynn2987 int
			if yyr2987 || yy2arr2987 {
				r.EncodeArrayStart(1)
			} else {
				yynn2987 = 0
				for _, b := range yyq2987 {
					if b {
						yynn2987++
					}
				}
				r.EncodeMapStart(yynn2987)
				yynn2987 = 0
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2987[0] {
					yy2989 := &x.KubeletEndpoint
					yy2989.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2987[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2990 := &x.KubeletEndpoint
					yy2990.CodecEncodeSelf(e)
				}
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2991 := z.DecBinary()
	_ = yym2991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2992 := r.ContainerType()
		if yyct2992 == codecSelferValueTypeMap1234 {
			yyl2992 := r.ReadMapStart()
			if yyl2992 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2992, d)
			}
		} else if yyct2992 == codecSelferValueTypeArray1234 {
			yyl2992 := r.ReadArrayStart()
			if yyl2992 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2993Slc
	var yyhl2993 bool = l >= 0
	for yyj2993 := 0; ; yyj2993++ {
		if yyhl2993 {
			if yyj2993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2993Slc = r.DecodeBytes(yys2993Slc, true, true)
		yys2993 := string(yys2993Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2993 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2994 := &x.KubeletEndpoint
				yyv2994.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2993)
		} // end switch yys2993
	} // end for yyj2993
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2995 int
	var yyb2995 bool
	var yyhl2995 bool = l >= 0
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2996 := &x.KubeletEndpoint
		yyv2996.CodecDecodeSelf(d)
	}
	for {
		yyj2995++
		if yyhl2995 {
			yyb2995 = yyj2995 > l
		} else {
			yyb2995 = r.CheckBreak()
		}
		if yyb2995 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2995-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2997 := z.EncBinary()
		_ = yym2997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2998 := !z.EncBinary()
			yy2arr2998 := z.EncBasicHandle().StructToArray
			var yyq2998 [10]bool
			_, _, _ = yysep2998, yyq2998, yy2arr2998
			const yyr2998 bool = false
			var yynn2998 int
			if yyr2998 || yy2arr2998 {
				r.EncodeArrayStart(10)
			} else {
				yynn2998 = 10
				for _, b := range yyq2998 {
					if b {
						yynn2998++
					}
				}
				r.EncodeMapStart(yynn2998)
				yynn2998 = 0
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3000 := z.EncBinary()
				_ = yym3000
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3001 := z.EncBinary()
				_ = yym3001
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3003 := z.EncBinary()
				_ = yym3003
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3004 := z.EncBinary()
				_ = yym3004
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3006 := z.EncBinary()
				_ = yym3006
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3007 := z.EncBinary()
				_ = yym3007
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3009 := z.EncBinary()
				_ = yym3009
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3010 := z.EncBinary()
				_ = yym3010
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3012 := z.EncBinary()
				_ = yym3012
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3013 := z.EncBinary()
				_ = yym3013
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3015 := z.EncBinary()
				_ = yym3015
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3016 := z.EncBinary()
				_ = yym3016
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3018 := z.EncBinary()
				_ = yym3018
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3019 := z.EncBinary()
				_ = yym3019
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3021 := z.EncBinary()
				_ = yym3021
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3022 := z.EncBinary()
				_ = yym3022
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3024 := z.EncBinary()
				_ = yym3024
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3025 := z.EncBinary()
				_ = yym3025
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3027 := z.EncBinary()
				_ = yym3027
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3028 := z.EncBinary()
				_ = yym3028
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2998 || yy2arr2998 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3029 := z.DecBinary()
	_ = yym3029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3030 := r.ContainerType()
		if yyct3030 == codecSelferValueTypeMap1234 {
			yyl3030 := r.ReadMapStart()
			if yyl3030 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3030, d)
			}
		} else if yyct3030 == codecSelferValueTypeArray1234 {
			yyl3030 := r.ReadArrayStart()
			if yyl3030 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3030, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3031Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3031Slc
	var yyhl3031 bool = l >= 0
	for yyj3031 := 0; ; yyj3031++ {
		if yyhl3031 {
			if yyj3031 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3031Slc = r.DecodeBytes(yys3031Slc, true, true)
		yys3031 := string(yys3031Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3031 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3031)
		} // end switch yys3031
	} // end for yyj3031
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3042 int
	var yyb3042 bool
	var yyhl3042 bool = l >= 0
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3042++
	if yyhl3042 {
		yyb3042 = yyj3042 > l
	} else {
		yyb3042 = r.CheckBreak()
	}
	if yyb3042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3042++
		if yyhl3042 {
			yyb3042 = yyj3042 > l
		} else {
			yyb3042 = r.CheckBreak()
		}
		if yyb3042 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3042-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3053 := z.EncBinary()
		_ = yym3053
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3054 := !z.EncBinary()
			yy2arr3054 := z.EncBasicHandle().StructToArray
			var yyq3054 [10]bool
			_, _, _ = yysep3054, yyq3054, yy2arr3054
			const yyr3054 bool = false
			yyq3054[0] = len(x.Capacity) != 0
			yyq3054[1] = len(x.Allocatable) != 0
			yyq3054[2] = x.Phase != ""
			yyq3054[3] = len(x.Conditions) != 0
			yyq3054[4] = len(x.Addresses) != 0
			yyq3054[5] = true
			yyq3054[6] = true
			yyq3054[7] = len(x.Images) != 0
			yyq3054[8] = len(x.VolumesInUse) != 0
			yyq3054[9] = len(x.VolumesAttached) != 0
			var yynn3054 int
			if yyr3054 || yy2arr3054 {
				r.EncodeArrayStart(10)
			} else {
				yynn3054 = 0
				for _, b := range yyq3054 {
					if b {
						yynn3054++
					}
				}
				r.EncodeMapStart(yynn3054)
				yynn3054 = 0
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3054[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3059 := z.EncBinary()
						_ = yym3059
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3060 := z.EncBinary()
						_ = yym3060
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3062 := z.EncBinary()
						_ = yym3062
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3063 := z.EncBinary()
						_ = yym3063
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[5] {
					yy3065 := &x.DaemonEndpoints
					yy3065.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3066 := &x.DaemonEndpoints
					yy3066.CodecEncodeSelf(e)
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[6] {
					yy3068 := &x.NodeInfo
					yy3068.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3069 := &x.NodeInfo
					yy3069.CodecEncodeSelf(e)
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3071 := z.EncBinary()
						_ = yym3071
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3072 := z.EncBinary()
						_ = yym3072
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3074 := z.EncBinary()
						_ = yym3074
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3075 := z.EncBinary()
						_ = yym3075
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3054[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3077 := z.EncBinary()
						_ = yym3077
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3054[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3078 := z.EncBinary()
						_ = yym3078
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3054 || yy2arr3054 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3079 := z.DecBinary()
	_ = yym3079
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3080 := r.ContainerType()
		if yyct3080 == codecSelferValueTypeMap1234 {
			yyl3080 := r.ReadMapStart()
			if yyl3080 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3080, d)
			}
		} else if yyct3080 == codecSelferValueTypeArray1234 {
			yyl3080 := r.ReadArrayStart()
			if yyl3080 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3080, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3081Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3081Slc
	var yyhl3081 bool = l >= 0
	for yyj3081 := 0; ; yyj3081++ {
		if yyhl3081 {
			if yyj3081 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3081Slc = r.DecodeBytes(yys3081Slc, true, true)
		yys3081 := string(yys3081Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3081 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3082 := &x.Capacity
				yyv3082.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3083 := &x.Allocatable
				yyv3083.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3085 := &x.Conditions
				yym3086 := z.DecBinary()
				_ = yym3086
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3085), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3087 := &x.Addresses
				yym3088 := z.DecBinary()
				_ = yym3088
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3087), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3089 := &x.DaemonEndpoints
				yyv3089.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3090 := &x.NodeInfo
				yyv3090.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3091 := &x.Images
				yym3092 := z.DecBinary()
				_ = yym3092
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3091), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3093 := &x.VolumesInUse
				yym3094 := z.DecBinary()
				_ = yym3094
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3093), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3095 := &x.VolumesAttached
				yym3096 := z.DecBinary()
				_ = yym3096
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3095), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3081)
		} // end switch yys3081
	} // end for yyj3081
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3097 int
	var yyb3097 bool
	var yyhl3097 bool = l >= 0
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3098 := &x.Capacity
		yyv3098.CodecDecodeSelf(d)
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3099 := &x.Allocatable
		yyv3099.CodecDecodeSelf(d)
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3101 := &x.Conditions
		yym3102 := z.DecBinary()
		_ = yym3102
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3101), d)
		}
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3103 := &x.Addresses
		yym3104 := z.DecBinary()
		_ = yym3104
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3103), d)
		}
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3105 := &x.DaemonEndpoints
		yyv3105.CodecDecodeSelf(d)
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3106 := &x.NodeInfo
		yyv3106.CodecDecodeSelf(d)
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3107 := &x.Images
		yym3108 := z.DecBinary()
		_ = yym3108
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3107), d)
		}
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3109 := &x.VolumesInUse
		yym3110 := z.DecBinary()
		_ = yym3110
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3109), d)
		}
	}
	yyj3097++
	if yyhl3097 {
		yyb3097 = yyj3097 > l
	} else {
		yyb3097 = r.CheckBreak()
	}
	if yyb3097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3111 := &x.VolumesAttached
		yym3112 := z.DecBinary()
		_ = yym3112
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3111), d)
		}
	}
	for {
		yyj3097++
		if yyhl3097 {
			yyb3097 = yyj3097 > l
		} else {
			yyb3097 = r.CheckBreak()
		}
		if yyb3097 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3097-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3113 := z.EncBinary()
	_ = yym3113
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3114 := z.DecBinary()
	_ = yym3114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3115 := z.EncBinary()
		_ = yym3115
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3116 := !z.EncBinary()
			yy2arr3116 := z.EncBasicHandle().StructToArray
			var yyq3116 [2]bool
			_, _, _ = yysep3116, yyq3116, yy2arr3116
			const yyr3116 bool = false
			var yynn3116 int
			if yyr3116 || yy2arr3116 {
				r.EncodeArrayStart(2)
			} else {
				yynn3116 = 2
				for _, b := range yyq3116 {
					if b {
						yynn3116++
					}
				}
				r.EncodeMapStart(yynn3116)
				yynn3116 = 0
			}
			if yyr3116 || yy2arr3116 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3116 || yy2arr3116 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3119 := z.EncBinary()
				_ = yym3119
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3120 := z.EncBinary()
				_ = yym3120
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3116 || yy2arr3116 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3121 := z.DecBinary()
	_ = yym3121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3122 := r.ContainerType()
		if yyct3122 == codecSelferValueTypeMap1234 {
			yyl3122 := r.ReadMapStart()
			if yyl3122 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3122, d)
			}
		} else if yyct3122 == codecSelferValueTypeArray1234 {
			yyl3122 := r.ReadArrayStart()
			if yyl3122 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3122, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3123Slc
	var yyhl3123 bool = l >= 0
	for yyj3123 := 0; ; yyj3123++ {
		if yyhl3123 {
			if yyj3123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3123Slc = r.DecodeBytes(yys3123Slc, true, true)
		yys3123 := string(yys3123Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3123 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3123)
		} // end switch yys3123
	} // end for yyj3123
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3126 int
	var yyb3126 bool
	var yyhl3126 bool = l >= 0
	yyj3126++
	if yyhl3126 {
		yyb3126 = yyj3126 > l
	} else {
		yyb3126 = r.CheckBreak()
	}
	if yyb3126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3126++
	if yyhl3126 {
		yyb3126 = yyj3126 > l
	} else {
		yyb3126 = r.CheckBreak()
	}
	if yyb3126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3126++
		if yyhl3126 {
			yyb3126 = yyj3126 > l
		} else {
			yyb3126 = r.CheckBreak()
		}
		if yyb3126 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3126-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3129 := z.EncBinary()
		_ = yym3129
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3130 := !z.EncBinary()
			yy2arr3130 := z.EncBasicHandle().StructToArray
			var yyq3130 [1]bool
			_, _, _ = yysep3130, yyq3130, yy2arr3130
			const yyr3130 bool = false
			yyq3130[0] = len(x.PreferAvoidPods) != 0
			var yynn3130 int
			if yyr3130 || yy2arr3130 {
				r.EncodeArrayStart(1)
			} else {
				yynn3130 = 0
				for _, b := range yyq3130 {
					if b {
						yynn3130++
					}
				}
				r.EncodeMapStart(yynn3130)
				yynn3130 = 0
			}
			if yyr3130 || yy2arr3130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3130[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3132 := z.EncBinary()
						_ = yym3132
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3130[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3133 := z.EncBinary()
						_ = yym3133
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3130 || yy2arr3130 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3134 := z.DecBinary()
	_ = yym3134
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3135 := r.ContainerType()
		if yyct3135 == codecSelferValueTypeMap1234 {
			yyl3135 := r.ReadMapStart()
			if yyl3135 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3135, d)
			}
		} else if yyct3135 == codecSelferValueTypeArray1234 {
			yyl3135 := r.ReadArrayStart()
			if yyl3135 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3135, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3136Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3136Slc
	var yyhl3136 bool = l >= 0
	for yyj3136 := 0; ; yyj3136++ {
		if yyhl3136 {
			if yyj3136 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3136Slc = r.DecodeBytes(yys3136Slc, true, true)
		yys3136 := string(yys3136Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3136 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3137 := &x.PreferAvoidPods
				yym3138 := z.DecBinary()
				_ = yym3138
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3137), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3136)
		} // end switch yys3136
	} // end for yyj3136
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3139 int
	var yyb3139 bool
	var yyhl3139 bool = l >= 0
	yyj3139++
	if yyhl3139 {
		yyb3139 = yyj3139 > l
	} else {
		yyb3139 = r.CheckBreak()
	}
	if yyb3139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3140 := &x.PreferAvoidPods
		yym3141 := z.DecBinary()
		_ = yym3141
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3140), d)
		}
	}
	for {
		yyj3139++
		if yyhl3139 {
			yyb3139 = yyj3139 > l
		} else {
			yyb3139 = r.CheckBreak()
		}
		if yyb3139 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3139-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3142 := z.EncBinary()
		_ = yym3142
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3143 := !z.EncBinary()
			yy2arr3143 := z.EncBasicHandle().StructToArray
			var yyq3143 [4]bool
			_, _, _ = yysep3143, yyq3143, yy2arr3143
			const yyr3143 bool = false
			yyq3143[1] = true
			yyq3143[2] = x.Reason != ""
			yyq3143[3] = x.Message != ""
			var yynn3143 int
			if yyr3143 || yy2arr3143 {
				r.EncodeArrayStart(4)
			} else {
				yynn3143 = 1
				for _, b := range yyq3143 {
					if b {
						yynn3143++
					}
				}
				r.EncodeMapStart(yynn3143)
				yynn3143 = 0
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3145 := &x.PodSignature
				yy3145.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3146 := &x.PodSignature
				yy3146.CodecEncodeSelf(e)
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3143[1] {
					yy3148 := &x.EvictionTime
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3148) {
					} else if yym3149 {
						z.EncBinaryMarshal(yy3148)
					} else if !yym3149 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3148)
					} else {
						z.EncFallback(yy3148)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3143[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3150 := &x.EvictionTime
					yym3151 := z.EncBinary()
					_ = yym3151
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3150) {
					} else if yym3151 {
						z.EncBinaryMarshal(yy3150)
					} else if !yym3151 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3150)
					} else {
						z.EncFallback(yy3150)
					}
				}
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3143[2] {
					yym3153 := z.EncBinary()
					_ = yym3153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3143[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3154 := z.EncBinary()
					_ = yym3154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3143[3] {
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3143[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3143 || yy2arr3143 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3158 := z.DecBinary()
	_ = yym3158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3159 := r.ContainerType()
		if yyct3159 == codecSelferValueTypeMap1234 {
			yyl3159 := r.ReadMapStart()
			if yyl3159 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3159, d)
			}
		} else if yyct3159 == codecSelferValueTypeArray1234 {
			yyl3159 := r.ReadArrayStart()
			if yyl3159 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3160Slc
	var yyhl3160 bool = l >= 0
	for yyj3160 := 0; ; yyj3160++ {
		if yyhl3160 {
			if yyj3160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3160Slc = r.DecodeBytes(yys3160Slc, true, true)
		yys3160 := string(yys3160Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3160 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3161 := &x.PodSignature
				yyv3161.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3162 := &x.EvictionTime
				yym3163 := z.DecBinary()
				_ = yym3163
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3162) {
				} else if yym3163 {
					z.DecBinaryUnmarshal(yyv3162)
				} else if !yym3163 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3162)
				} else {
					z.DecFallback(yyv3162, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3160)
		} // end switch yys3160
	} // end for yyj3160
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3166 int
	var yyb3166 bool
	var yyhl3166 bool = l >= 0
	yyj3166++
	if yyhl3166 {
		yyb3166 = yyj3166 > l
	} else {
		yyb3166 = r.CheckBreak()
	}
	if yyb3166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3167 := &x.PodSignature
		yyv3167.CodecDecodeSelf(d)
	}
	yyj3166++
	if yyhl3166 {
		yyb3166 = yyj3166 > l
	} else {
		yyb3166 = r.CheckBreak()
	}
	if yyb3166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3168 := &x.EvictionTime
		yym3169 := z.DecBinary()
		_ = yym3169
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3168) {
		} else if yym3169 {
			z.DecBinaryUnmarshal(yyv3168)
		} else if !yym3169 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3168)
		} else {
			z.DecFallback(yyv3168, false)
		}
	}
	yyj3166++
	if yyhl3166 {
		yyb3166 = yyj3166 > l
	} else {
		yyb3166 = r.CheckBreak()
	}
	if yyb3166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3166++
	if yyhl3166 {
		yyb3166 = yyj3166 > l
	} else {
		yyb3166 = r.CheckBreak()
	}
	if yyb3166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3166++
		if yyhl3166 {
			yyb3166 = yyj3166 > l
		} else {
			yyb3166 = r.CheckBreak()
		}
		if yyb3166 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3166-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3172 := z.EncBinary()
		_ = yym3172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3173 := !z.EncBinary()
			yy2arr3173 := z.EncBasicHandle().StructToArray
			var yyq3173 [1]bool
			_, _, _ = yysep3173, yyq3173, yy2arr3173
			const yyr3173 bool = false
			yyq3173[0] = x.PodController != nil
			var yynn3173 int
			if yyr3173 || yy2arr3173 {
				r.EncodeArrayStart(1)
			} else {
				yynn3173 = 0
				for _, b := range yyq3173 {
					if b {
						yynn3173++
					}
				}
				r.EncodeMapStart(yynn3173)
				yynn3173 = 0
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3173[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3175 := z.DecBinary()
	_ = yym3175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3176 := r.ContainerType()
		if yyct3176 == codecSelferValueTypeMap1234 {
			yyl3176 := r.ReadMapStart()
			if yyl3176 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3176, d)
			}
		} else if yyct3176 == codecSelferValueTypeArray1234 {
			yyl3176 := r.ReadArrayStart()
			if yyl3176 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3176, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3177Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3177Slc
	var yyhl3177 bool = l >= 0
	for yyj3177 := 0; ; yyj3177++ {
		if yyhl3177 {
			if yyj3177 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3177Slc = r.DecodeBytes(yys3177Slc, true, true)
		yys3177 := string(yys3177Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3177 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3177)
		} // end switch yys3177
	} // end for yyj3177
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3179 int
	var yyb3179 bool
	var yyhl3179 bool = l >= 0
	yyj3179++
	if yyhl3179 {
		yyb3179 = yyj3179 > l
	} else {
		yyb3179 = r.CheckBreak()
	}
	if yyb3179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3179++
		if yyhl3179 {
			yyb3179 = yyj3179 > l
		} else {
			yyb3179 = r.CheckBreak()
		}
		if yyb3179 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3179-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3181 := z.EncBinary()
		_ = yym3181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3182 := !z.EncBinary()
			yy2arr3182 := z.EncBasicHandle().StructToArray
			var yyq3182 [2]bool
			_, _, _ = yysep3182, yyq3182, yy2arr3182
			const yyr3182 bool = false
			yyq3182[1] = x.SizeBytes != 0
			var yynn3182 int
			if yyr3182 || yy2arr3182 {
				r.EncodeArrayStart(2)
			} else {
				yynn3182 = 1
				for _, b := range yyq3182 {
					if b {
						yynn3182++
					}
				}
				r.EncodeMapStart(yynn3182)
				yynn3182 = 0
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3184 := z.EncBinary()
					_ = yym3184
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[1] {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3182[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3189 := z.DecBinary()
	_ = yym3189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3190 := r.ContainerType()
		if yyct3190 == codecSelferValueTypeMap1234 {
			yyl3190 := r.ReadMapStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3190, d)
			}
		} else if yyct3190 == codecSelferValueTypeArray1234 {
			yyl3190 := r.ReadArrayStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3191Slc
	var yyhl3191 bool = l >= 0
	for yyj3191 := 0; ; yyj3191++ {
		if yyhl3191 {
			if yyj3191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3191Slc = r.DecodeBytes(yys3191Slc, true, true)
		yys3191 := string(yys3191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3191 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3192 := &x.Names
				yym3193 := z.DecBinary()
				_ = yym3193
				if false {
				} else {
					z.F.DecSliceStringX(yyv3192, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3191)
		} // end switch yys3191
	} // end for yyj3191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3195 int
	var yyb3195 bool
	var yyhl3195 bool = l >= 0
	yyj3195++
	if yyhl3195 {
		yyb3195 = yyj3195 > l
	} else {
		yyb3195 = r.CheckBreak()
	}
	if yyb3195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3196 := &x.Names
		yym3197 := z.DecBinary()
		_ = yym3197
		if false {
		} else {
			z.F.DecSliceStringX(yyv3196, false, d)
		}
	}
	yyj3195++
	if yyhl3195 {
		yyb3195 = yyj3195 > l
	} else {
		yyb3195 = r.CheckBreak()
	}
	if yyb3195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3195++
		if yyhl3195 {
			yyb3195 = yyj3195 > l
		} else {
			yyb3195 = r.CheckBreak()
		}
		if yyb3195 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3195-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3199 := z.EncBinary()
	_ = yym3199
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3200 := z.DecBinary()
	_ = yym3200
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3201 := z.EncBinary()
	_ = yym3201
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3202 := z.DecBinary()
	_ = yym3202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3203 := z.EncBinary()
		_ = yym3203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3204 := !z.EncBinary()
			yy2arr3204 := z.EncBasicHandle().StructToArray
			var yyq3204 [6]bool
			_, _, _ = yysep3204, yyq3204, yy2arr3204
			const yyr3204 bool = false
			yyq3204[2] = true
			yyq3204[3] = true
			yyq3204[4] = x.Reason != ""
			yyq3204[5] = x.Message != ""
			var yynn3204 int
			if yyr3204 || yy2arr3204 {
				r.EncodeArrayStart(6)
			} else {
				yynn3204 = 2
				for _, b := range yyq3204 {
					if b {
						yynn3204++
					}
				}
				r.EncodeMapStart(yynn3204)
				yynn3204 = 0
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[2] {
					yy3208 := &x.LastHeartbeatTime
					yym3209 := z.EncBinary()
					_ = yym3209
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3208) {
					} else if yym3209 {
						z.EncBinaryMarshal(yy3208)
					} else if !yym3209 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3208)
					} else {
						z.EncFallback(yy3208)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3204[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3210 := &x.LastHeartbeatTime
					yym3211 := z.EncBinary()
					_ = yym3211
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3210) {
					} else if yym3211 {
						z.EncBinaryMarshal(yy3210)
					} else if !yym3211 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3210)
					} else {
						z.EncFallback(yy3210)
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[3] {
					yy3213 := &x.LastTransitionTime
					yym3214 := z.EncBinary()
					_ = yym3214
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3213) {
					} else if yym3214 {
						z.EncBinaryMarshal(yy3213)
					} else if !yym3214 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3213)
					} else {
						z.EncFallback(yy3213)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3204[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3215 := &x.LastTransitionTime
					yym3216 := z.EncBinary()
					_ = yym3216
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3215) {
					} else if yym3216 {
						z.EncBinaryMarshal(yy3215)
					} else if !yym3216 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3215)
					} else {
						z.EncFallback(yy3215)
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[4] {
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3204[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3219 := z.EncBinary()
					_ = yym3219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[5] {
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3204[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3223 := z.DecBinary()
	_ = yym3223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3224 := r.ContainerType()
		if yyct3224 == codecSelferValueTypeMap1234 {
			yyl3224 := r.ReadMapStart()
			if yyl3224 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3224, d)
			}
		} else if yyct3224 == codecSelferValueTypeArray1234 {
			yyl3224 := r.ReadArrayStart()
			if yyl3224 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3225Slc
	var yyhl3225 bool = l >= 0
	for yyj3225 := 0; ; yyj3225++ {
		if yyhl3225 {
			if yyj3225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3225Slc = r.DecodeBytes(yys3225Slc, true, true)
		yys3225 := string(yys3225Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3225 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3228 := &x.LastHeartbeatTime
				yym3229 := z.DecBinary()
				_ = yym3229
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3228) {
				} else if yym3229 {
					z.DecBinaryUnmarshal(yyv3228)
				} else if !yym3229 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3228)
				} else {
					z.DecFallback(yyv3228, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3230 := &x.LastTransitionTime
				yym3231 := z.DecBinary()
				_ = yym3231
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3230) {
				} else if yym3231 {
					z.DecBinaryUnmarshal(yyv3230)
				} else if !yym3231 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3230)
				} else {
					z.DecFallback(yyv3230, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3225)
		} // end switch yys3225
	} // end for yyj3225
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3234 int
	var yyb3234 bool
	var yyhl3234 bool = l >= 0
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3237 := &x.LastHeartbeatTime
		yym3238 := z.DecBinary()
		_ = yym3238
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3237) {
		} else if yym3238 {
			z.DecBinaryUnmarshal(yyv3237)
		} else if !yym3238 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3237)
		} else {
			z.DecFallback(yyv3237, false)
		}
	}
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3239 := &x.LastTransitionTime
		yym3240 := z.DecBinary()
		_ = yym3240
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3239) {
		} else if yym3240 {
			z.DecBinaryUnmarshal(yyv3239)
		} else if !yym3240 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3239)
		} else {
			z.DecFallback(yyv3239, false)
		}
	}
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3234++
		if yyhl3234 {
			yyb3234 = yyj3234 > l
		} else {
			yyb3234 = r.CheckBreak()
		}
		if yyb3234 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3234-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3243 := z.EncBinary()
	_ = yym3243
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3244 := z.DecBinary()
	_ = yym3244
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3245 := z.EncBinary()
		_ = yym3245
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3246 := !z.EncBinary()
			yy2arr3246 := z.EncBasicHandle().StructToArray
			var yyq3246 [2]bool
			_, _, _ = yysep3246, yyq3246, yy2arr3246
			const yyr3246 bool = false
			var yynn3246 int
			if yyr3246 || yy2arr3246 {
				r.EncodeArrayStart(2)
			} else {
				yynn3246 = 2
				for _, b := range yyq3246 {
					if b {
						yynn3246++
					}
				}
				r.EncodeMapStart(yynn3246)
				yynn3246 = 0
			}
			if yyr3246 || yy2arr3246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3246 || yy2arr3246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3249 := z.EncBinary()
				_ = yym3249
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3250 := z.EncBinary()
				_ = yym3250
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3246 || yy2arr3246 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3251 := z.DecBinary()
	_ = yym3251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3252 := r.ContainerType()
		if yyct3252 == codecSelferValueTypeMap1234 {
			yyl3252 := r.ReadMapStart()
			if yyl3252 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3252, d)
			}
		} else if yyct3252 == codecSelferValueTypeArray1234 {
			yyl3252 := r.ReadArrayStart()
			if yyl3252 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3253Slc
	var yyhl3253 bool = l >= 0
	for yyj3253 := 0; ; yyj3253++ {
		if yyhl3253 {
			if yyj3253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3253Slc = r.DecodeBytes(yys3253Slc, true, true)
		yys3253 := string(yys3253Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3253 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3253)
		} // end switch yys3253
	} // end for yyj3253
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3256 int
	var yyb3256 bool
	var yyhl3256 bool = l >= 0
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3256++
		if yyhl3256 {
			yyb3256 = yyj3256 > l
		} else {
			yyb3256 = r.CheckBreak()
		}
		if yyb3256 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3256-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3259 := z.EncBinary()
		_ = yym3259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3260 := !z.EncBinary()
			yy2arr3260 := z.EncBasicHandle().StructToArray
			var yyq3260 [1]bool
			_, _, _ = yysep3260, yyq3260, yy2arr3260
			const yyr3260 bool = false
			yyq3260[0] = len(x.Capacity) != 0
			var yynn3260 int
			if yyr3260 || yy2arr3260 {
				r.EncodeArrayStart(1)
			} else {
				yynn3260 = 0
				for _, b := range yyq3260 {
					if b {
						yynn3260++
					}
				}
				r.EncodeMapStart(yynn3260)
				yynn3260 = 0
			}
			if yyr3260 || yy2arr3260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3260[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3260[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3260 || yy2arr3260 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3262 := z.DecBinary()
	_ = yym3262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3263 := r.ContainerType()
		if yyct3263 == codecSelferValueTypeMap1234 {
			yyl3263 := r.ReadMapStart()
			if yyl3263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3263, d)
			}
		} else if yyct3263 == codecSelferValueTypeArray1234 {
			yyl3263 := r.ReadArrayStart()
			if yyl3263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3264Slc
	var yyhl3264 bool = l >= 0
	for yyj3264 := 0; ; yyj3264++ {
		if yyhl3264 {
			if yyj3264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3264Slc = r.DecodeBytes(yys3264Slc, true, true)
		yys3264 := string(yys3264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3264 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3265 := &x.Capacity
				yyv3265.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3264)
		} // end switch yys3264
	} // end for yyj3264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3266 int
	var yyb3266 bool
	var yyhl3266 bool = l >= 0
	yyj3266++
	if yyhl3266 {
		yyb3266 = yyj3266 > l
	} else {
		yyb3266 = r.CheckBreak()
	}
	if yyb3266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3267 := &x.Capacity
		yyv3267.CodecDecodeSelf(d)
	}
	for {
		yyj3266++
		if yyhl3266 {
			yyb3266 = yyj3266 > l
		} else {
			yyb3266 = r.CheckBreak()
		}
		if yyb3266 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3266-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3268 := z.EncBinary()
	_ = yym3268
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3269 := z.DecBinary()
	_ = yym3269
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3270 := z.EncBinary()
		_ = yym3270
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3271 := z.DecBinary()
	_ = yym3271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3272 := z.EncBinary()
		_ = yym3272
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3273 := !z.EncBinary()
			yy2arr3273 := z.EncBasicHandle().StructToArray
			var yyq3273 [5]bool
			_, _, _ = yysep3273, yyq3273, yy2arr3273
			const yyr3273 bool = false
			yyq3273[0] = x.Kind != ""
			yyq3273[1] = x.APIVersion != ""
			yyq3273[2] = true
			yyq3273[3] = true
			yyq3273[4] = true
			var yynn3273 int
			if yyr3273 || yy2arr3273 {
				r.EncodeArrayStart(5)
			} else {
				yynn3273 = 0
				for _, b := range yyq3273 {
					if b {
						yynn3273++
					}
				}
				r.EncodeMapStart(yynn3273)
				yynn3273 = 0
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3273[0] {
					yym3275 := z.EncBinary()
					_ = yym3275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3273[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3273[1] {
					yym3278 := z.EncBinary()
					_ = yym3278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3273[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3279 := z.EncBinary()
					_ = yym3279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3273[2] {
					yy3281 := &x.ObjectMeta
					yy3281.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3273[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3282 := &x.ObjectMeta
					yy3282.CodecEncodeSelf(e)
				}
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3273[3] {
					yy3284 := &x.Spec
					yy3284.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3273[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3285 := &x.Spec
					yy3285.CodecEncodeSelf(e)
				}
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3273[4] {
					yy3287 := &x.Status
					yy3287.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3273[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3288 := &x.Status
					yy3288.CodecEncodeSelf(e)
				}
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3289 := z.DecBinary()
	_ = yym3289
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3290 := r.ContainerType()
		if yyct3290 == codecSelferValueTypeMap1234 {
			yyl3290 := r.ReadMapStart()
			if yyl3290 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3290, d)
			}
		} else if yyct3290 == codecSelferValueTypeArray1234 {
			yyl3290 := r.ReadArrayStart()
			if yyl3290 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3290, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3291Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3291Slc
	var yyhl3291 bool = l >= 0
	for yyj3291 := 0; ; yyj3291++ {
		if yyhl3291 {
			if yyj3291 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3291Slc = r.DecodeBytes(yys3291Slc, true, true)
		yys3291 := string(yys3291Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3291 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3294 := &x.ObjectMeta
				yyv3294.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3295 := &x.Spec
				yyv3295.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3296 := &x.Status
				yyv3296.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3291)
		} // end switch yys3291
	} // end for yyj3291
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3297 int
	var yyb3297 bool
	var yyhl3297 bool = l >= 0
	yyj3297++
	if yyhl3297 {
		yyb3297 = yyj3297 > l
	} else {
		yyb3297 = r.CheckBreak()
	}
	if yyb3297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3297++
	if yyhl3297 {
		yyb3297 = yyj3297 > l
	} else {
		yyb3297 = r.CheckBreak()
	}
	if yyb3297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3297++
	if yyhl3297 {
		yyb3297 = yyj3297 > l
	} else {
		yyb3297 = r.CheckBreak()
	}
	if yyb3297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3300 := &x.ObjectMeta
		yyv3300.CodecDecodeSelf(d)
	}
	yyj3297++
	if yyhl3297 {
		yyb3297 = yyj3297 > l
	} else {
		yyb3297 = r.CheckBreak()
	}
	if yyb3297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3301 := &x.Spec
		yyv3301.CodecDecodeSelf(d)
	}
	yyj3297++
	if yyhl3297 {
		yyb3297 = yyj3297 > l
	} else {
		yyb3297 = r.CheckBreak()
	}
	if yyb3297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3302 := &x.Status
		yyv3302.CodecDecodeSelf(d)
	}
	for {
		yyj3297++
		if yyhl3297 {
			yyb3297 = yyj3297 > l
		} else {
			yyb3297 = r.CheckBreak()
		}
		if yyb3297 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3297-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3303 := z.EncBinary()
		_ = yym3303
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3304 := !z.EncBinary()
			yy2arr3304 := z.EncBasicHandle().StructToArray
			var yyq3304 [4]bool
			_, _, _ = yysep3304, yyq3304, yy2arr3304
			const yyr3304 bool = false
			yyq3304[0] = x.Kind != ""
			yyq3304[1] = x.APIVersion != ""
			yyq3304[2] = true
			var yynn3304 int
			if yyr3304 || yy2arr3304 {
				r.EncodeArrayStart(4)
			} else {
				yynn3304 = 1
				for _, b := range yyq3304 {
					if b {
						yynn3304++
					}
				}
				r.EncodeMapStart(yynn3304)
				yynn3304 = 0
			}
			if yyr3304 || yy2arr3304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3304[0] {
					yym3306 := z.EncBinary()
					_ = yym3306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3304[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3307 := z.EncBinary()
					_ = yym3307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3304 || yy2arr3304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3304[1] {
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3304[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3310 := z.EncBinary()
					_ = yym3310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3304 || yy2arr3304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3304[2] {
					yy3312 := &x.ListMeta
					yym3313 := z.EncBinary()
					_ = yym3313
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3312) {
					} else {
						z.EncFallback(yy3312)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3304[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3314 := &x.ListMeta
					yym3315 := z.EncBinary()
					_ = yym3315
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3314) {
					} else {
						z.EncFallback(yy3314)
					}
				}
			}
			if yyr3304 || yy2arr3304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3317 := z.EncBinary()
					_ = yym3317
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3318 := z.EncBinary()
					_ = yym3318
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3304 || yy2arr3304 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3319 := z.DecBinary()
	_ = yym3319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3320 := r.ContainerType()
		if yyct3320 == codecSelferValueTypeMap1234 {
			yyl3320 := r.ReadMapStart()
			if yyl3320 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3320, d)
			}
		} else if yyct3320 == codecSelferValueTypeArray1234 {
			yyl3320 := r.ReadArrayStart()
			if yyl3320 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3321Slc
	var yyhl3321 bool = l >= 0
	for yyj3321 := 0; ; yyj3321++ {
		if yyhl3321 {
			if yyj3321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3321Slc = r.DecodeBytes(yys3321Slc, true, true)
		yys3321 := string(yys3321Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3321 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3324 := &x.ListMeta
				yym3325 := z.DecBinary()
				_ = yym3325
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3324) {
				} else {
					z.DecFallback(yyv3324, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3326 := &x.Items
				yym3327 := z.DecBinary()
				_ = yym3327
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3326), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3321)
		} // end switch yys3321
	} // end for yyj3321
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3328 int
	var yyb3328 bool
	var yyhl3328 bool = l >= 0
	yyj3328++
	if yyhl3328 {
		yyb3328 = yyj3328 > l
	} else {
		yyb3328 = r.CheckBreak()
	}
	if yyb3328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3328++
	if yyhl3328 {
		yyb3328 = yyj3328 > l
	} else {
		yyb3328 = r.CheckBreak()
	}
	if yyb3328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3328++
	if yyhl3328 {
		yyb3328 = yyj3328 > l
	} else {
		yyb3328 = r.CheckBreak()
	}
	if yyb3328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3331 := &x.ListMeta
		yym3332 := z.DecBinary()
		_ = yym3332
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3331) {
		} else {
			z.DecFallback(yyv3331, false)
		}
	}
	yyj3328++
	if yyhl3328 {
		yyb3328 = yyj3328 > l
	} else {
		yyb3328 = r.CheckBreak()
	}
	if yyb3328 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3333 := &x.Items
		yym3334 := z.DecBinary()
		_ = yym3334
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3333), d)
		}
	}
	for {
		yyj3328++
		if yyhl3328 {
			yyb3328 = yyj3328 > l
		} else {
			yyb3328 = r.CheckBreak()
		}
		if yyb3328 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3328-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3335 := z.EncBinary()
		_ = yym3335
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3336 := !z.EncBinary()
			yy2arr3336 := z.EncBasicHandle().StructToArray
			var yyq3336 [1]bool
			_, _, _ = yysep3336, yyq3336, yy2arr3336
			const yyr3336 bool = false
			var yynn3336 int
			if yyr3336 || yy2arr3336 {
				r.EncodeArrayStart(1)
			} else {
				yynn3336 = 1
				for _, b := range yyq3336 {
					if b {
						yynn3336++
					}
				}
				r.EncodeMapStart(yynn3336)
				yynn3336 = 0
			}
			if yyr3336 || yy2arr3336 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3338 := z.EncBinary()
					_ = yym3338
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3339 := z.EncBinary()
					_ = yym3339
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3336 || yy2arr3336 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3340 := z.DecBinary()
	_ = yym3340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3341 := r.ContainerType()
		if yyct3341 == codecSelferValueTypeMap1234 {
			yyl3341 := r.ReadMapStart()
			if yyl3341 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3341, d)
			}
		} else if yyct3341 == codecSelferValueTypeArray1234 {
			yyl3341 := r.ReadArrayStart()
			if yyl3341 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3341, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3342Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3342Slc
	var yyhl3342 bool = l >= 0
	for yyj3342 := 0; ; yyj3342++ {
		if yyhl3342 {
			if yyj3342 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3342Slc = r.DecodeBytes(yys3342Slc, true, true)
		yys3342 := string(yys3342Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3342 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3343 := &x.Finalizers
				yym3344 := z.DecBinary()
				_ = yym3344
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3343), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3342)
		} // end switch yys3342
	} // end for yyj3342
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3345 int
	var yyb3345 bool
	var yyhl3345 bool = l >= 0
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3346 := &x.Finalizers
		yym3347 := z.DecBinary()
		_ = yym3347
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3346), d)
		}
	}
	for {
		yyj3345++
		if yyhl3345 {
			yyb3345 = yyj3345 > l
		} else {
			yyb3345 = r.CheckBreak()
		}
		if yyb3345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3348 := z.EncBinary()
	_ = yym3348
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3349 := z.DecBinary()
	_ = yym3349
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3350 := z.EncBinary()
		_ = yym3350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3351 := !z.EncBinary()
			yy2arr3351 := z.EncBasicHandle().StructToArray
			var yyq3351 [1]bool
			_, _, _ = yysep3351, yyq3351, yy2arr3351
			const yyr3351 bool = false
			yyq3351[0] = x.Phase != ""
			var yynn3351 int
			if yyr3351 || yy2arr3351 {
				r.EncodeArrayStart(1)
			} else {
				yynn3351 = 0
				for _, b := range yyq3351 {
					if b {
						yynn3351++
					}
				}
				r.EncodeMapStart(yynn3351)
				yynn3351 = 0
			}
			if yyr3351 || yy2arr3351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3351[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3351[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3351 || yy2arr3351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3353 := z.DecBinary()
	_ = yym3353
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3354 := r.ContainerType()
		if yyct3354 == codecSelferValueTypeMap1234 {
			yyl3354 := r.ReadMapStart()
			if yyl3354 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3354, d)
			}
		} else if yyct3354 == codecSelferValueTypeArray1234 {
			yyl3354 := r.ReadArrayStart()
			if yyl3354 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3354, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3355Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3355Slc
	var yyhl3355 bool = l >= 0
	for yyj3355 := 0; ; yyj3355++ {
		if yyhl3355 {
			if yyj3355 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3355Slc = r.DecodeBytes(yys3355Slc, true, true)
		yys3355 := string(yys3355Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3355 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3355)
		} // end switch yys3355
	} // end for yyj3355
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3357 int
	var yyb3357 bool
	var yyhl3357 bool = l >= 0
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3357++
		if yyhl3357 {
			yyb3357 = yyj3357 > l
		} else {
			yyb3357 = r.CheckBreak()
		}
		if yyb3357 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3357-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3359 := z.EncBinary()
	_ = yym3359
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3360 := z.DecBinary()
	_ = yym3360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3361 := z.EncBinary()
		_ = yym3361
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3362 := !z.EncBinary()
			yy2arr3362 := z.EncBasicHandle().StructToArray
			var yyq3362 [5]bool
			_, _, _ = yysep3362, yyq3362, yy2arr3362
			const yyr3362 bool = false
			yyq3362[0] = x.Kind != ""
			yyq3362[1] = x.APIVersion != ""
			yyq3362[2] = true
			yyq3362[3] = true
			yyq3362[4] = true
			var yynn3362 int
			if yyr3362 || yy2arr3362 {
				r.EncodeArrayStart(5)
			} else {
				yynn3362 = 0
				for _, b := range yyq3362 {
					if b {
						yynn3362++
					}
				}
				r.EncodeMapStart(yynn3362)
				yynn3362 = 0
			}
			if yyr3362 || yy2arr3362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3362[0] {
					yym3364 := z.EncBinary()
					_ = yym3364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3362[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3365 := z.EncBinary()
					_ = yym3365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3362 || yy2arr3362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3362[1] {
					yym3367 := z.EncBinary()
					_ = yym3367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3362[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3368 := z.EncBinary()
					_ = yym3368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3362 || yy2arr3362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3362[2] {
					yy3370 := &x.ObjectMeta
					yy3370.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3362[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3371 := &x.ObjectMeta
					yy3371.CodecEncodeSelf(e)
				}
			}
			if yyr3362 || yy2arr3362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3362[3] {
					yy3373 := &x.Spec
					yy3373.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3362[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3374 := &x.Spec
					yy3374.CodecEncodeSelf(e)
				}
			}
			if yyr3362 || yy2arr3362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3362[4] {
					yy3376 := &x.Status
					yy3376.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3362[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3377 := &x.Status
					yy3377.CodecEncodeSelf(e)
				}
			}
			if yyr3362 || yy2arr3362 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3378 := z.DecBinary()
	_ = yym3378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3379 := r.ContainerType()
		if yyct3379 == codecSelferValueTypeMap1234 {
			yyl3379 := r.ReadMapStart()
			if yyl3379 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3379, d)
			}
		} else if yyct3379 == codecSelferValueTypeArray1234 {
			yyl3379 := r.ReadArrayStart()
			if yyl3379 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3380Slc
	var yyhl3380 bool = l >= 0
	for yyj3380 := 0; ; yyj3380++ {
		if yyhl3380 {
			if yyj3380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3380Slc = r.DecodeBytes(yys3380Slc, true, true)
		yys3380 := string(yys3380Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3383 := &x.ObjectMeta
				yyv3383.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3384 := &x.Spec
				yyv3384.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3385 := &x.Status
				yyv3385.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3380)
		} // end switch yys3380
	} // end for yyj3380
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3386 int
	var yyb3386 bool
	var yyhl3386 bool = l >= 0
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3389 := &x.ObjectMeta
		yyv3389.CodecDecodeSelf(d)
	}
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3390 := &x.Spec
		yyv3390.CodecDecodeSelf(d)
	}
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3391 := &x.Status
		yyv3391.CodecDecodeSelf(d)
	}
	for {
		yyj3386++
		if yyhl3386 {
			yyb3386 = yyj3386 > l
		} else {
			yyb3386 = r.CheckBreak()
		}
		if yyb3386 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3386-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3392 := z.EncBinary()
		_ = yym3392
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3393 := !z.EncBinary()
			yy2arr3393 := z.EncBasicHandle().StructToArray
			var yyq3393 [4]bool
			_, _, _ = yysep3393, yyq3393, yy2arr3393
			const yyr3393 bool = false
			yyq3393[0] = x.Kind != ""
			yyq3393[1] = x.APIVersion != ""
			yyq3393[2] = true
			var yynn3393 int
			if yyr3393 || yy2arr3393 {
				r.EncodeArrayStart(4)
			} else {
				yynn3393 = 1
				for _, b := range yyq3393 {
					if b {
						yynn3393++
					}
				}
				r.EncodeMapStart(yynn3393)
				yynn3393 = 0
			}
			if yyr3393 || yy2arr3393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3393[0] {
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3393[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3393 || yy2arr3393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3393[1] {
					yym3398 := z.EncBinary()
					_ = yym3398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3393[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3393 || yy2arr3393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3393[2] {
					yy3401 := &x.ListMeta
					yym3402 := z.EncBinary()
					_ = yym3402
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3401) {
					} else {
						z.EncFallback(yy3401)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3393[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3403 := &x.ListMeta
					yym3404 := z.EncBinary()
					_ = yym3404
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3403) {
					} else {
						z.EncFallback(yy3403)
					}
				}
			}
			if yyr3393 || yy2arr3393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3406 := z.EncBinary()
					_ = yym3406
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3407 := z.EncBinary()
					_ = yym3407
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3393 || yy2arr3393 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3408 := z.DecBinary()
	_ = yym3408
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3409 := r.ContainerType()
		if yyct3409 == codecSelferValueTypeMap1234 {
			yyl3409 := r.ReadMapStart()
			if yyl3409 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3409, d)
			}
		} else if yyct3409 == codecSelferValueTypeArray1234 {
			yyl3409 := r.ReadArrayStart()
			if yyl3409 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3409, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3410Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3410Slc
	var yyhl3410 bool = l >= 0
	for yyj3410 := 0; ; yyj3410++ {
		if yyhl3410 {
			if yyj3410 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3410Slc = r.DecodeBytes(yys3410Slc, true, true)
		yys3410 := string(yys3410Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3410 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3413 := &x.ListMeta
				yym3414 := z.DecBinary()
				_ = yym3414
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3413) {
				} else {
					z.DecFallback(yyv3413, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3415 := &x.Items
				yym3416 := z.DecBinary()
				_ = yym3416
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3415), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3410)
		} // end switch yys3410
	} // end for yyj3410
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3417 int
	var yyb3417 bool
	var yyhl3417 bool = l >= 0
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3420 := &x.ListMeta
		yym3421 := z.DecBinary()
		_ = yym3421
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3420) {
		} else {
			z.DecFallback(yyv3420, false)
		}
	}
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3422 := &x.Items
		yym3423 := z.DecBinary()
		_ = yym3423
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3422), d)
		}
	}
	for {
		yyj3417++
		if yyhl3417 {
			yyb3417 = yyj3417 > l
		} else {
			yyb3417 = r.CheckBreak()
		}
		if yyb3417 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3417-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3424 := z.EncBinary()
		_ = yym3424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3425 := !z.EncBinary()
			yy2arr3425 := z.EncBasicHandle().StructToArray
			var yyq3425 [4]bool
			_, _, _ = yysep3425, yyq3425, yy2arr3425
			const yyr3425 bool = false
			yyq3425[0] = x.Kind != ""
			yyq3425[1] = x.APIVersion != ""
			yyq3425[2] = true
			var yynn3425 int
			if yyr3425 || yy2arr3425 {
				r.EncodeArrayStart(4)
			} else {
				yynn3425 = 1
				for _, b := range yyq3425 {
					if b {
						yynn3425++
					}
				}
				r.EncodeMapStart(yynn3425)
				yynn3425 = 0
			}
			if yyr3425 || yy2arr3425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3425[0] {
					yym3427 := z.EncBinary()
					_ = yym3427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3425[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3428 := z.EncBinary()
					_ = yym3428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3425 || yy2arr3425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3425[1] {
					yym3430 := z.EncBinary()
					_ = yym3430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3425[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3431 := z.EncBinary()
					_ = yym3431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3425 || yy2arr3425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3425[2] {
					yy3433 := &x.ObjectMeta
					yy3433.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3425[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3434 := &x.ObjectMeta
					yy3434.CodecEncodeSelf(e)
				}
			}
			if yyr3425 || yy2arr3425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3436 := &x.Target
				yy3436.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3437 := &x.Target
				yy3437.CodecEncodeSelf(e)
			}
			if yyr3425 || yy2arr3425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3438 := z.DecBinary()
	_ = yym3438
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3439 := r.ContainerType()
		if yyct3439 == codecSelferValueTypeMap1234 {
			yyl3439 := r.ReadMapStart()
			if yyl3439 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3439, d)
			}
		} else if yyct3439 == codecSelferValueTypeArray1234 {
			yyl3439 := r.ReadArrayStart()
			if yyl3439 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3439, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3440Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3440Slc
	var yyhl3440 bool = l >= 0
	for yyj3440 := 0; ; yyj3440++ {
		if yyhl3440 {
			if yyj3440 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3440Slc = r.DecodeBytes(yys3440Slc, true, true)
		yys3440 := string(yys3440Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3440 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3443 := &x.ObjectMeta
				yyv3443.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3444 := &x.Target
				yyv3444.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3440)
		} // end switch yys3440
	} // end for yyj3440
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3445 int
	var yyb3445 bool
	var yyhl3445 bool = l >= 0
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3448 := &x.ObjectMeta
		yyv3448.CodecDecodeSelf(d)
	}
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3449 := &x.Target
		yyv3449.CodecDecodeSelf(d)
	}
	for {
		yyj3445++
		if yyhl3445 {
			yyb3445 = yyj3445 > l
		} else {
			yyb3445 = r.CheckBreak()
		}
		if yyb3445 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3445-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3450 := z.EncBinary()
		_ = yym3450
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3451 := !z.EncBinary()
			yy2arr3451 := z.EncBasicHandle().StructToArray
			var yyq3451 [1]bool
			_, _, _ = yysep3451, yyq3451, yy2arr3451
			const yyr3451 bool = false
			yyq3451[0] = x.UID != nil
			var yynn3451 int
			if yyr3451 || yy2arr3451 {
				r.EncodeArrayStart(1)
			} else {
				yynn3451 = 0
				for _, b := range yyq3451 {
					if b {
						yynn3451++
					}
				}
				r.EncodeMapStart(yynn3451)
				yynn3451 = 0
			}
			if yyr3451 || yy2arr3451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3451[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3453 := *x.UID
						yym3454 := z.EncBinary()
						_ = yym3454
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3453) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3453))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3451[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3455 := *x.UID
						yym3456 := z.EncBinary()
						_ = yym3456
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3455) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3455))
						}
					}
				}
			}
			if yyr3451 || yy2arr3451 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3457 := z.DecBinary()
	_ = yym3457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3458 := r.ContainerType()
		if yyct3458 == codecSelferValueTypeMap1234 {
			yyl3458 := r.ReadMapStart()
			if yyl3458 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3458, d)
			}
		} else if yyct3458 == codecSelferValueTypeArray1234 {
			yyl3458 := r.ReadArrayStart()
			if yyl3458 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3458, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3459Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3459Slc
	var yyhl3459 bool = l >= 0
	for yyj3459 := 0; ; yyj3459++ {
		if yyhl3459 {
			if yyj3459 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3459Slc = r.DecodeBytes(yys3459Slc, true, true)
		yys3459 := string(yys3459Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3459 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3461 := z.DecBinary()
				_ = yym3461
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3459)
		} // end switch yys3459
	} // end for yyj3459
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3462 int
	var yyb3462 bool
	var yyhl3462 bool = l >= 0
	yyj3462++
	if yyhl3462 {
		yyb3462 = yyj3462 > l
	} else {
		yyb3462 = r.CheckBreak()
	}
	if yyb3462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3464 := z.DecBinary()
		_ = yym3464
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3462++
		if yyhl3462 {
			yyb3462 = yyj3462 > l
		} else {
			yyb3462 = r.CheckBreak()
		}
		if yyb3462 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3462-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3465 := z.EncBinary()
		_ = yym3465
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3466 := !z.EncBinary()
			yy2arr3466 := z.EncBasicHandle().StructToArray
			var yyq3466 [5]bool
			_, _, _ = yysep3466, yyq3466, yy2arr3466
			const yyr3466 bool = false
			yyq3466[0] = x.Kind != ""
			yyq3466[1] = x.APIVersion != ""
			yyq3466[2] = x.GracePeriodSeconds != nil
			yyq3466[3] = x.Preconditions != nil
			yyq3466[4] = x.OrphanDependents != nil
			var yynn3466 int
			if yyr3466 || yy2arr3466 {
				r.EncodeArrayStart(5)
			} else {
				yynn3466 = 0
				for _, b := range yyq3466 {
					if b {
						yynn3466++
					}
				}
				r.EncodeMapStart(yynn3466)
				yynn3466 = 0
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3466[0] {
					yym3468 := z.EncBinary()
					_ = yym3468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3466[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3469 := z.EncBinary()
					_ = yym3469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3466[1] {
					yym3471 := z.EncBinary()
					_ = yym3471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3466[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3472 := z.EncBinary()
					_ = yym3472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3466[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3474 := *x.GracePeriodSeconds
						yym3475 := z.EncBinary()
						_ = yym3475
						if false {
						} else {
							r.EncodeInt(int64(yy3474))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3466[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3476 := *x.GracePeriodSeconds
						yym3477 := z.EncBinary()
						_ = yym3477
						if false {
						} else {
							r.EncodeInt(int64(yy3476))
						}
					}
				}
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3466[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3466[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3466[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3480 := *x.OrphanDependents
						yym3481 := z.EncBinary()
						_ = yym3481
						if false {
						} else {
							r.EncodeBool(bool(yy3480))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3466[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3482 := *x.OrphanDependents
						yym3483 := z.EncBinary()
						_ = yym3483
						if false {
						} else {
							r.EncodeBool(bool(yy3482))
						}
					}
				}
			}
			if yyr3466 || yy2arr3466 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3484 := z.DecBinary()
	_ = yym3484
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3485 := r.ContainerType()
		if yyct3485 == codecSelferValueTypeMap1234 {
			yyl3485 := r.ReadMapStart()
			if yyl3485 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3485, d)
			}
		} else if yyct3485 == codecSelferValueTypeArray1234 {
			yyl3485 := r.ReadArrayStart()
			if yyl3485 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3485, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3486Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3486Slc
	var yyhl3486 bool = l >= 0
	for yyj3486 := 0; ; yyj3486++ {
		if yyhl3486 {
			if yyj3486 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3486Slc = r.DecodeBytes(yys3486Slc, true, true)
		yys3486 := string(yys3486Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3486 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3490 := z.DecBinary()
				_ = yym3490
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3493 := z.DecBinary()
				_ = yym3493
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3486)
		} // end switch yys3486
	} // end for yyj3486
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3494 int
	var yyb3494 bool
	var yyhl3494 bool = l >= 0
	yyj3494++
	if yyhl3494 {
		yyb3494 = yyj3494 > l
	} else {
		yyb3494 = r.CheckBreak()
	}
	if yyb3494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3494++
	if yyhl3494 {
		yyb3494 = yyj3494 > l
	} else {
		yyb3494 = r.CheckBreak()
	}
	if yyb3494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3494++
	if yyhl3494 {
		yyb3494 = yyj3494 > l
	} else {
		yyb3494 = r.CheckBreak()
	}
	if yyb3494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3498 := z.DecBinary()
		_ = yym3498
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3494++
	if yyhl3494 {
		yyb3494 = yyj3494 > l
	} else {
		yyb3494 = r.CheckBreak()
	}
	if yyb3494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3494++
	if yyhl3494 {
		yyb3494 = yyj3494 > l
	} else {
		yyb3494 = r.CheckBreak()
	}
	if yyb3494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3501 := z.DecBinary()
		_ = yym3501
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3494++
		if yyhl3494 {
			yyb3494 = yyj3494 > l
		} else {
			yyb3494 = r.CheckBreak()
		}
		if yyb3494 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3494-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3502 := z.EncBinary()
		_ = yym3502
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3503 := !z.EncBinary()
			yy2arr3503 := z.EncBasicHandle().StructToArray
			var yyq3503 [4]bool
			_, _, _ = yysep3503, yyq3503, yy2arr3503
			const yyr3503 bool = false
			yyq3503[0] = x.Kind != ""
			yyq3503[1] = x.APIVersion != ""
			var yynn3503 int
			if yyr3503 || yy2arr3503 {
				r.EncodeArrayStart(4)
			} else {
				yynn3503 = 2
				for _, b := range yyq3503 {
					if b {
						yynn3503++
					}
				}
				r.EncodeMapStart(yynn3503)
				yynn3503 = 0
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[0] {
					yym3505 := z.EncBinary()
					_ = yym3505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3503[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3506 := z.EncBinary()
					_ = yym3506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[1] {
					yym3508 := z.EncBinary()
					_ = yym3508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3503[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3509 := z.EncBinary()
					_ = yym3509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3511 := z.EncBinary()
				_ = yym3511
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3512 := z.EncBinary()
				_ = yym3512
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3514 := z.EncBinary()
				_ = yym3514
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3515 := z.EncBinary()
				_ = yym3515
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3516 := z.DecBinary()
	_ = yym3516
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3517 := r.ContainerType()
		if yyct3517 == codecSelferValueTypeMap1234 {
			yyl3517 := r.ReadMapStart()
			if yyl3517 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3517, d)
			}
		} else if yyct3517 == codecSelferValueTypeArray1234 {
			yyl3517 := r.ReadArrayStart()
			if yyl3517 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3517, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3518Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3518Slc
	var yyhl3518 bool = l >= 0
	for yyj3518 := 0; ; yyj3518++ {
		if yyhl3518 {
			if yyj3518 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3518Slc = r.DecodeBytes(yys3518Slc, true, true)
		yys3518 := string(yys3518Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3518 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3518)
		} // end switch yys3518
	} // end for yyj3518
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3523 int
	var yyb3523 bool
	var yyhl3523 bool = l >= 0
	yyj3523++
	if yyhl3523 {
		yyb3523 = yyj3523 > l
	} else {
		yyb3523 = r.CheckBreak()
	}
	if yyb3523 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3523++
	if yyhl3523 {
		yyb3523 = yyj3523 > l
	} else {
		yyb3523 = r.CheckBreak()
	}
	if yyb3523 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3523++
	if yyhl3523 {
		yyb3523 = yyj3523 > l
	} else {
		yyb3523 = r.CheckBreak()
	}
	if yyb3523 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3523++
	if yyhl3523 {
		yyb3523 = yyj3523 > l
	} else {
		yyb3523 = r.CheckBreak()
	}
	if yyb3523 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3523++
		if yyhl3523 {
			yyb3523 = yyj3523 > l
		} else {
			yyb3523 = r.CheckBreak()
		}
		if yyb3523 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3523-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3528 := z.EncBinary()
		_ = yym3528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3529 := !z.EncBinary()
			yy2arr3529 := z.EncBasicHandle().StructToArray
			var yyq3529 [7]bool
			_, _, _ = yysep3529, yyq3529, yy2arr3529
			const yyr3529 bool = false
			yyq3529[0] = x.Kind != ""
			yyq3529[1] = x.APIVersion != ""
			var yynn3529 int
			if yyr3529 || yy2arr3529 {
				r.EncodeArrayStart(7)
			} else {
				yynn3529 = 5
				for _, b := range yyq3529 {
					if b {
						yynn3529++
					}
				}
				r.EncodeMapStart(yynn3529)
				yynn3529 = 0
			}
			if yyr3529 || yy2arr3529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3529[0] {
					yym3531 := z.EncBinary()
					_ = yym3531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3529[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3532 := z.EncBinary()
					_ = yym3532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3529 || yy2arr3529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3529[1] {
					yym3534 := z.EncBinary()
					_ = yym3534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3529[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3535 := z.EncBinary()
					_ = yym3535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3529 || yy2arr3529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3537 := z.EncBinary()
					_ = yym3537
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3538 := z.EncBinary()
					_ = yym3538
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3529 || yy2arr3529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3540 := z.EncBinary()
					_ = yym3540
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3541 := z.EncBinary()
					_ = yym3541
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3529 || yy2arr3529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3543 := z.EncBinary()
				_ = yym3543
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3544 := z.EncBinary()
				_ = yym3544
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3529 || yy2arr3529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3546 := z.EncBinary()
				_ = yym3546
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3547 := z.EncBinary()
				_ = yym3547
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3529 || yy2arr3529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3549 := *x.TimeoutSeconds
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeInt(int64(yy3549))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3551 := *x.TimeoutSeconds
					yym3552 := z.EncBinary()
					_ = yym3552
					if false {
					} else {
						r.EncodeInt(int64(yy3551))
					}
				}
			}
			if yyr3529 || yy2arr3529 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3553 := z.DecBinary()
	_ = yym3553
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3554 := r.ContainerType()
		if yyct3554 == codecSelferValueTypeMap1234 {
			yyl3554 := r.ReadMapStart()
			if yyl3554 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3554, d)
			}
		} else if yyct3554 == codecSelferValueTypeArray1234 {
			yyl3554 := r.ReadArrayStart()
			if yyl3554 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3554, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3555Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3555Slc
	var yyhl3555 bool = l >= 0
	for yyj3555 := 0; ; yyj3555++ {
		if yyhl3555 {
			if yyj3555 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3555Slc = r.DecodeBytes(yys3555Slc, true, true)
		yys3555 := string(yys3555Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3555 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3558 := &x.LabelSelector
				yym3559 := z.DecBinary()
				_ = yym3559
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3558) {
				} else {
					z.DecFallback(yyv3558, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3560 := &x.FieldSelector
				yym3561 := z.DecBinary()
				_ = yym3561
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3560) {
				} else {
					z.DecFallback(yyv3560, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3565 := z.DecBinary()
				_ = yym3565
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3555)
		} // end switch yys3555
	} // end for yyj3555
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3566 int
	var yyb3566 bool
	var yyhl3566 bool = l >= 0
	yyj3566++
	if yyhl3566 {
		yyb3566 = yyj3566 > l
	} else {
		yyb3566 = r.CheckBreak()
	}
	if yyb3566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3566++
	if yyhl3566 {
		yyb3566 = yyj3566 > l
	} else {
		yyb3566 = r.CheckBreak()
	}
	if yyb3566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3566++
	if yyhl3566 {
		yyb3566 = yyj3566 > l
	} else {
		yyb3566 = r.CheckBreak()
	}
	if yyb3566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3569 := &x.LabelSelector
		yym3570 := z.DecBinary()
		_ = yym3570
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3569) {
		} else {
			z.DecFallback(yyv3569, true)
		}
	}
	yyj3566++
	if yyhl3566 {
		yyb3566 = yyj3566 > l
	} else {
		yyb3566 = r.CheckBreak()
	}
	if yyb3566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3571 := &x.FieldSelector
		yym3572 := z.DecBinary()
		_ = yym3572
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3571) {
		} else {
			z.DecFallback(yyv3571, true)
		}
	}
	yyj3566++
	if yyhl3566 {
		yyb3566 = yyj3566 > l
	} else {
		yyb3566 = r.CheckBreak()
	}
	if yyb3566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3566++
	if yyhl3566 {
		yyb3566 = yyj3566 > l
	} else {
		yyb3566 = r.CheckBreak()
	}
	if yyb3566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3566++
	if yyhl3566 {
		yyb3566 = yyj3566 > l
	} else {
		yyb3566 = r.CheckBreak()
	}
	if yyb3566 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3576 := z.DecBinary()
		_ = yym3576
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3566++
		if yyhl3566 {
			yyb3566 = yyj3566 > l
		} else {
			yyb3566 = r.CheckBreak()
		}
		if yyb3566 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3566-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3577 := z.EncBinary()
		_ = yym3577
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3578 := !z.EncBinary()
			yy2arr3578 := z.EncBasicHandle().StructToArray
			var yyq3578 [10]bool
			_, _, _ = yysep3578, yyq3578, yy2arr3578
			const yyr3578 bool = false
			yyq3578[0] = x.Kind != ""
			yyq3578[1] = x.APIVersion != ""
			var yynn3578 int
			if yyr3578 || yy2arr3578 {
				r.EncodeArrayStart(10)
			} else {
				yynn3578 = 8
				for _, b := range yyq3578 {
					if b {
						yynn3578++
					}
				}
				r.EncodeMapStart(yynn3578)
				yynn3578 = 0
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3578[0] {
					yym3580 := z.EncBinary()
					_ = yym3580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3578[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3581 := z.EncBinary()
					_ = yym3581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3578[1] {
					yym3583 := z.EncBinary()
					_ = yym3583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3578[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3584 := z.EncBinary()
					_ = yym3584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3586 := z.EncBinary()
				_ = yym3586
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3587 := z.EncBinary()
				_ = yym3587
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3589 := z.EncBinary()
				_ = yym3589
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3590 := z.EncBinary()
				_ = yym3590
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3592 := z.EncBinary()
				_ = yym3592
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3593 := z.EncBinary()
				_ = yym3593
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3595 := *x.SinceSeconds
					yym3596 := z.EncBinary()
					_ = yym3596
					if false {
					} else {
						r.EncodeInt(int64(yy3595))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3597 := *x.SinceSeconds
					yym3598 := z.EncBinary()
					_ = yym3598
					if false {
					} else {
						r.EncodeInt(int64(yy3597))
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3600 := z.EncBinary()
					_ = yym3600
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3600 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3600 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3601 := z.EncBinary()
					_ = yym3601
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3601 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3601 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3603 := z.EncBinary()
				_ = yym3603
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3604 := z.EncBinary()
				_ = yym3604
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3606 := *x.TailLines
					yym3607 := z.EncBinary()
					_ = yym3607
					if false {
					} else {
						r.EncodeInt(int64(yy3606))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3608 := *x.TailLines
					yym3609 := z.EncBinary()
					_ = yym3609
					if false {
					} else {
						r.EncodeInt(int64(yy3608))
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3611 := *x.LimitBytes
					yym3612 := z.EncBinary()
					_ = yym3612
					if false {
					} else {
						r.EncodeInt(int64(yy3611))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3613 := *x.LimitBytes
					yym3614 := z.EncBinary()
					_ = yym3614
					if false {
					} else {
						r.EncodeInt(int64(yy3613))
					}
				}
			}
			if yyr3578 || yy2arr3578 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3615 := z.DecBinary()
	_ = yym3615
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3616 := r.ContainerType()
		if yyct3616 == codecSelferValueTypeMap1234 {
			yyl3616 := r.ReadMapStart()
			if yyl3616 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3616, d)
			}
		} else if yyct3616 == codecSelferValueTypeArray1234 {
			yyl3616 := r.ReadArrayStart()
			if yyl3616 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3616, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3617Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3617Slc
	var yyhl3617 bool = l >= 0
	for yyj3617 := 0; ; yyj3617++ {
		if yyhl3617 {
			if yyj3617 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3617Slc = r.DecodeBytes(yys3617Slc, true, true)
		yys3617 := string(yys3617Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3617 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3624 := z.DecBinary()
				_ = yym3624
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3626 := z.DecBinary()
				_ = yym3626
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3626 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3626 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3629 := z.DecBinary()
				_ = yym3629
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3631 := z.DecBinary()
				_ = yym3631
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3617)
		} // end switch yys3617
	} // end for yyj3617
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3632 int
	var yyb3632 bool
	var yyhl3632 bool = l >= 0
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3639 := z.DecBinary()
		_ = yym3639
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3641 := z.DecBinary()
		_ = yym3641
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3641 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3641 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3644 := z.DecBinary()
		_ = yym3644
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3646 := z.DecBinary()
		_ = yym3646
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3632++
		if yyhl3632 {
			yyb3632 = yyj3632 > l
		} else {
			yyb3632 = r.CheckBreak()
		}
		if yyb3632 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3632-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3647 := z.EncBinary()
		_ = yym3647
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3648 := !z.EncBinary()
			yy2arr3648 := z.EncBasicHandle().StructToArray
			var yyq3648 [7]bool
			_, _, _ = yysep3648, yyq3648, yy2arr3648
			const yyr3648 bool = false
			yyq3648[0] = x.Kind != ""
			yyq3648[1] = x.APIVersion != ""
			yyq3648[2] = x.Stdin != false
			yyq3648[3] = x.Stdout != false
			yyq3648[4] = x.Stderr != false
			yyq3648[5] = x.TTY != false
			yyq3648[6] = x.Container != ""
			var yynn3648 int
			if yyr3648 || yy2arr3648 {
				r.EncodeArrayStart(7)
			} else {
				yynn3648 = 0
				for _, b := range yyq3648 {
					if b {
						yynn3648++
					}
				}
				r.EncodeMapStart(yynn3648)
				yynn3648 = 0
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[0] {
					yym3650 := z.EncBinary()
					_ = yym3650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3648[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3651 := z.EncBinary()
					_ = yym3651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[1] {
					yym3653 := z.EncBinary()
					_ = yym3653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3648[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3654 := z.EncBinary()
					_ = yym3654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[2] {
					yym3656 := z.EncBinary()
					_ = yym3656
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3648[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3657 := z.EncBinary()
					_ = yym3657
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[3] {
					yym3659 := z.EncBinary()
					_ = yym3659
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3648[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3660 := z.EncBinary()
					_ = yym3660
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[4] {
					yym3662 := z.EncBinary()
					_ = yym3662
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3648[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3663 := z.EncBinary()
					_ = yym3663
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[5] {
					yym3665 := z.EncBinary()
					_ = yym3665
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3648[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3666 := z.EncBinary()
					_ = yym3666
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3648[6] {
					yym3668 := z.EncBinary()
					_ = yym3668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3648[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3669 := z.EncBinary()
					_ = yym3669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3648 || yy2arr3648 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3670 := z.DecBinary()
	_ = yym3670
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3671 := r.ContainerType()
		if yyct3671 == codecSelferValueTypeMap1234 {
			yyl3671 := r.ReadMapStart()
			if yyl3671 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3671, d)
			}
		} else if yyct3671 == codecSelferValueTypeArray1234 {
			yyl3671 := r.ReadArrayStart()
			if yyl3671 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3671, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3672Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3672Slc
	var yyhl3672 bool = l >= 0
	for yyj3672 := 0; ; yyj3672++ {
		if yyhl3672 {
			if yyj3672 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3672Slc = r.DecodeBytes(yys3672Slc, true, true)
		yys3672 := string(yys3672Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3672 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3672)
		} // end switch yys3672
	} // end for yyj3672
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3680 int
	var yyb3680 bool
	var yyhl3680 bool = l >= 0
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3680++
	if yyhl3680 {
		yyb3680 = yyj3680 > l
	} else {
		yyb3680 = r.CheckBreak()
	}
	if yyb3680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3680++
		if yyhl3680 {
			yyb3680 = yyj3680 > l
		} else {
			yyb3680 = r.CheckBreak()
		}
		if yyb3680 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3680-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3688 := z.EncBinary()
		_ = yym3688
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3689 := !z.EncBinary()
			yy2arr3689 := z.EncBasicHandle().StructToArray
			var yyq3689 [8]bool
			_, _, _ = yysep3689, yyq3689, yy2arr3689
			const yyr3689 bool = false
			yyq3689[0] = x.Kind != ""
			yyq3689[1] = x.APIVersion != ""
			var yynn3689 int
			if yyr3689 || yy2arr3689 {
				r.EncodeArrayStart(8)
			} else {
				yynn3689 = 6
				for _, b := range yyq3689 {
					if b {
						yynn3689++
					}
				}
				r.EncodeMapStart(yynn3689)
				yynn3689 = 0
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3689[0] {
					yym3691 := z.EncBinary()
					_ = yym3691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3689[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3692 := z.EncBinary()
					_ = yym3692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3689[1] {
					yym3694 := z.EncBinary()
					_ = yym3694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3689[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3695 := z.EncBinary()
					_ = yym3695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3697 := z.EncBinary()
				_ = yym3697
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3698 := z.EncBinary()
				_ = yym3698
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3700 := z.EncBinary()
				_ = yym3700
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3701 := z.EncBinary()
				_ = yym3701
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3703 := z.EncBinary()
				_ = yym3703
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3704 := z.EncBinary()
				_ = yym3704
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3706 := z.EncBinary()
				_ = yym3706
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3707 := z.EncBinary()
				_ = yym3707
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3709 := z.EncBinary()
				_ = yym3709
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3710 := z.EncBinary()
				_ = yym3710
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3712 := z.EncBinary()
					_ = yym3712
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3713 := z.EncBinary()
					_ = yym3713
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3689 || yy2arr3689 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3714 := z.DecBinary()
	_ = yym3714
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3715 := r.ContainerType()
		if yyct3715 == codecSelferValueTypeMap1234 {
			yyl3715 := r.ReadMapStart()
			if yyl3715 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3715, d)
			}
		} else if yyct3715 == codecSelferValueTypeArray1234 {
			yyl3715 := r.ReadArrayStart()
			if yyl3715 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3715, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3716Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3716Slc
	var yyhl3716 bool = l >= 0
	for yyj3716 := 0; ; yyj3716++ {
		if yyhl3716 {
			if yyj3716 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3716Slc = r.DecodeBytes(yys3716Slc, true, true)
		yys3716 := string(yys3716Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3716 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3724 := &x.Command
				yym3725 := z.DecBinary()
				_ = yym3725
				if false {
				} else {
					z.F.DecSliceStringX(yyv3724, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3716)
		} // end switch yys3716
	} // end for yyj3716
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3726 int
	var yyb3726 bool
	var yyhl3726 bool = l >= 0
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3734 := &x.Command
		yym3735 := z.DecBinary()
		_ = yym3735
		if false {
		} else {
			z.F.DecSliceStringX(yyv3734, false, d)
		}
	}
	for {
		yyj3726++
		if yyhl3726 {
			yyb3726 = yyj3726 > l
		} else {
			yyb3726 = r.CheckBreak()
		}
		if yyb3726 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3726-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3736 := z.EncBinary()
		_ = yym3736
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3737 := !z.EncBinary()
			yy2arr3737 := z.EncBasicHandle().StructToArray
			var yyq3737 [3]bool
			_, _, _ = yysep3737, yyq3737, yy2arr3737
			const yyr3737 bool = false
			yyq3737[0] = x.Kind != ""
			yyq3737[1] = x.APIVersion != ""
			var yynn3737 int
			if yyr3737 || yy2arr3737 {
				r.EncodeArrayStart(3)
			} else {
				yynn3737 = 1
				for _, b := range yyq3737 {
					if b {
						yynn3737++
					}
				}
				r.EncodeMapStart(yynn3737)
				yynn3737 = 0
			}
			if yyr3737 || yy2arr3737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3737[0] {
					yym3739 := z.EncBinary()
					_ = yym3739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3737[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3740 := z.EncBinary()
					_ = yym3740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3737 || yy2arr3737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3737[1] {
					yym3742 := z.EncBinary()
					_ = yym3742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3737[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3743 := z.EncBinary()
					_ = yym3743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3737 || yy2arr3737 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3745 := z.EncBinary()
				_ = yym3745
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3746 := z.EncBinary()
				_ = yym3746
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3737 || yy2arr3737 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3747 := z.DecBinary()
	_ = yym3747
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3748 := r.ContainerType()
		if yyct3748 == codecSelferValueTypeMap1234 {
			yyl3748 := r.ReadMapStart()
			if yyl3748 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3748, d)
			}
		} else if yyct3748 == codecSelferValueTypeArray1234 {
			yyl3748 := r.ReadArrayStart()
			if yyl3748 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3748, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3749Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3749Slc
	var yyhl3749 bool = l >= 0
	for yyj3749 := 0; ; yyj3749++ {
		if yyhl3749 {
			if yyj3749 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3749Slc = r.DecodeBytes(yys3749Slc, true, true)
		yys3749 := string(yys3749Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3749 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3749)
		} // end switch yys3749
	} // end for yyj3749
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3753 int
	var yyb3753 bool
	var yyhl3753 bool = l >= 0
	yyj3753++
	if yyhl3753 {
		yyb3753 = yyj3753 > l
	} else {
		yyb3753 = r.CheckBreak()
	}
	if yyb3753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3753++
	if yyhl3753 {
		yyb3753 = yyj3753 > l
	} else {
		yyb3753 = r.CheckBreak()
	}
	if yyb3753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3753++
	if yyhl3753 {
		yyb3753 = yyj3753 > l
	} else {
		yyb3753 = r.CheckBreak()
	}
	if yyb3753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3753++
		if yyhl3753 {
			yyb3753 = yyj3753 > l
		} else {
			yyb3753 = r.CheckBreak()
		}
		if yyb3753 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3753-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3757 := z.EncBinary()
		_ = yym3757
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3758 := !z.EncBinary()
			yy2arr3758 := z.EncBasicHandle().StructToArray
			var yyq3758 [3]bool
			_, _, _ = yysep3758, yyq3758, yy2arr3758
			const yyr3758 bool = false
			yyq3758[0] = x.Kind != ""
			yyq3758[1] = x.APIVersion != ""
			var yynn3758 int
			if yyr3758 || yy2arr3758 {
				r.EncodeArrayStart(3)
			} else {
				yynn3758 = 1
				for _, b := range yyq3758 {
					if b {
						yynn3758++
					}
				}
				r.EncodeMapStart(yynn3758)
				yynn3758 = 0
			}
			if yyr3758 || yy2arr3758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3758[0] {
					yym3760 := z.EncBinary()
					_ = yym3760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3758[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3761 := z.EncBinary()
					_ = yym3761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3758 || yy2arr3758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3758[1] {
					yym3763 := z.EncBinary()
					_ = yym3763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3758[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3764 := z.EncBinary()
					_ = yym3764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3758 || yy2arr3758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3766 := z.EncBinary()
				_ = yym3766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3767 := z.EncBinary()
				_ = yym3767
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3758 || yy2arr3758 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3768 := z.DecBinary()
	_ = yym3768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3769 := r.ContainerType()
		if yyct3769 == codecSelferValueTypeMap1234 {
			yyl3769 := r.ReadMapStart()
			if yyl3769 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3769, d)
			}
		} else if yyct3769 == codecSelferValueTypeArray1234 {
			yyl3769 := r.ReadArrayStart()
			if yyl3769 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3770Slc
	var yyhl3770 bool = l >= 0
	for yyj3770 := 0; ; yyj3770++ {
		if yyhl3770 {
			if yyj3770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3770Slc = r.DecodeBytes(yys3770Slc, true, true)
		yys3770 := string(yys3770Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3770 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3770)
		} // end switch yys3770
	} // end for yyj3770
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3774 int
	var yyb3774 bool
	var yyhl3774 bool = l >= 0
	yyj3774++
	if yyhl3774 {
		yyb3774 = yyj3774 > l
	} else {
		yyb3774 = r.CheckBreak()
	}
	if yyb3774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3774++
	if yyhl3774 {
		yyb3774 = yyj3774 > l
	} else {
		yyb3774 = r.CheckBreak()
	}
	if yyb3774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3774++
	if yyhl3774 {
		yyb3774 = yyj3774 > l
	} else {
		yyb3774 = r.CheckBreak()
	}
	if yyb3774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3774++
		if yyhl3774 {
			yyb3774 = yyj3774 > l
		} else {
			yyb3774 = r.CheckBreak()
		}
		if yyb3774 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3774-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3778 := z.EncBinary()
		_ = yym3778
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3779 := !z.EncBinary()
			yy2arr3779 := z.EncBasicHandle().StructToArray
			var yyq3779 [3]bool
			_, _, _ = yysep3779, yyq3779, yy2arr3779
			const yyr3779 bool = false
			yyq3779[0] = x.Kind != ""
			yyq3779[1] = x.APIVersion != ""
			var yynn3779 int
			if yyr3779 || yy2arr3779 {
				r.EncodeArrayStart(3)
			} else {
				yynn3779 = 1
				for _, b := range yyq3779 {
					if b {
						yynn3779++
					}
				}
				r.EncodeMapStart(yynn3779)
				yynn3779 = 0
			}
			if yyr3779 || yy2arr3779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3779[0] {
					yym3781 := z.EncBinary()
					_ = yym3781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3779[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3782 := z.EncBinary()
					_ = yym3782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3779 || yy2arr3779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3779[1] {
					yym3784 := z.EncBinary()
					_ = yym3784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3779[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3785 := z.EncBinary()
					_ = yym3785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3779 || yy2arr3779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3787 := z.EncBinary()
				_ = yym3787
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3788 := z.EncBinary()
				_ = yym3788
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3779 || yy2arr3779 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3789 := z.DecBinary()
	_ = yym3789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3790 := r.ContainerType()
		if yyct3790 == codecSelferValueTypeMap1234 {
			yyl3790 := r.ReadMapStart()
			if yyl3790 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3790, d)
			}
		} else if yyct3790 == codecSelferValueTypeArray1234 {
			yyl3790 := r.ReadArrayStart()
			if yyl3790 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3791Slc
	var yyhl3791 bool = l >= 0
	for yyj3791 := 0; ; yyj3791++ {
		if yyhl3791 {
			if yyj3791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3791Slc = r.DecodeBytes(yys3791Slc, true, true)
		yys3791 := string(yys3791Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3791 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3791)
		} // end switch yys3791
	} // end for yyj3791
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3795 int
	var yyb3795 bool
	var yyhl3795 bool = l >= 0
	yyj3795++
	if yyhl3795 {
		yyb3795 = yyj3795 > l
	} else {
		yyb3795 = r.CheckBreak()
	}
	if yyb3795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3795++
	if yyhl3795 {
		yyb3795 = yyj3795 > l
	} else {
		yyb3795 = r.CheckBreak()
	}
	if yyb3795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3795++
	if yyhl3795 {
		yyb3795 = yyj3795 > l
	} else {
		yyb3795 = r.CheckBreak()
	}
	if yyb3795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3795++
		if yyhl3795 {
			yyb3795 = yyj3795 > l
		} else {
			yyb3795 = r.CheckBreak()
		}
		if yyb3795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3799 := z.EncBinary()
		_ = yym3799
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3800 := !z.EncBinary()
			yy2arr3800 := z.EncBasicHandle().StructToArray
			var yyq3800 [5]bool
			_, _, _ = yysep3800, yyq3800, yy2arr3800
			const yyr3800 bool = false
			yyq3800[4] = x.Controller != nil
			var yynn3800 int
			if yyr3800 || yy2arr3800 {
				r.EncodeArrayStart(5)
			} else {
				yynn3800 = 4
				for _, b := range yyq3800 {
					if b {
						yynn3800++
					}
				}
				r.EncodeMapStart(yynn3800)
				yynn3800 = 0
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3802 := z.EncBinary()
				_ = yym3802
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3803 := z.EncBinary()
				_ = yym3803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3805 := z.EncBinary()
				_ = yym3805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3806 := z.EncBinary()
				_ = yym3806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3808 := z.EncBinary()
				_ = yym3808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3809 := z.EncBinary()
				_ = yym3809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3811 := z.EncBinary()
				_ = yym3811
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3812 := z.EncBinary()
				_ = yym3812
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3800[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3814 := *x.Controller
						yym3815 := z.EncBinary()
						_ = yym3815
						if false {
						} else {
							r.EncodeBool(bool(yy3814))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3800[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3816 := *x.Controller
						yym3817 := z.EncBinary()
						_ = yym3817
						if false {
						} else {
							r.EncodeBool(bool(yy3816))
						}
					}
				}
			}
			if yyr3800 || yy2arr3800 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3818 := z.DecBinary()
	_ = yym3818
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3819 := r.ContainerType()
		if yyct3819 == codecSelferValueTypeMap1234 {
			yyl3819 := r.ReadMapStart()
			if yyl3819 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3819, d)
			}
		} else if yyct3819 == codecSelferValueTypeArray1234 {
			yyl3819 := r.ReadArrayStart()
			if yyl3819 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3819, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3820Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3820Slc
	var yyhl3820 bool = l >= 0
	for yyj3820 := 0; ; yyj3820++ {
		if yyhl3820 {
			if yyj3820 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3820Slc = r.DecodeBytes(yys3820Slc, true, true)
		yys3820 := string(yys3820Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3820 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3826 := z.DecBinary()
				_ = yym3826
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3820)
		} // end switch yys3820
	} // end for yyj3820
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3827 int
	var yyb3827 bool
	var yyhl3827 bool = l >= 0
	yyj3827++
	if yyhl3827 {
		yyb3827 = yyj3827 > l
	} else {
		yyb3827 = r.CheckBreak()
	}
	if yyb3827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3827++
	if yyhl3827 {
		yyb3827 = yyj3827 > l
	} else {
		yyb3827 = r.CheckBreak()
	}
	if yyb3827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3827++
	if yyhl3827 {
		yyb3827 = yyj3827 > l
	} else {
		yyb3827 = r.CheckBreak()
	}
	if yyb3827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3827++
	if yyhl3827 {
		yyb3827 = yyj3827 > l
	} else {
		yyb3827 = r.CheckBreak()
	}
	if yyb3827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3827++
	if yyhl3827 {
		yyb3827 = yyj3827 > l
	} else {
		yyb3827 = r.CheckBreak()
	}
	if yyb3827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3833 := z.DecBinary()
		_ = yym3833
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3827++
		if yyhl3827 {
			yyb3827 = yyj3827 > l
		} else {
			yyb3827 = r.CheckBreak()
		}
		if yyb3827 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3827-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3834 := z.EncBinary()
		_ = yym3834
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3835 := !z.EncBinary()
			yy2arr3835 := z.EncBasicHandle().StructToArray
			var yyq3835 [7]bool
			_, _, _ = yysep3835, yyq3835, yy2arr3835
			const yyr3835 bool = false
			yyq3835[0] = x.Kind != ""
			yyq3835[1] = x.Namespace != ""
			yyq3835[2] = x.Name != ""
			yyq3835[3] = x.UID != ""
			yyq3835[4] = x.APIVersion != ""
			yyq3835[5] = x.ResourceVersion != ""
			yyq3835[6] = x.FieldPath != ""
			var yynn3835 int
			if yyr3835 || yy2arr3835 {
				r.EncodeArrayStart(7)
			} else {
				yynn3835 = 0
				for _, b := range yyq3835 {
					if b {
						yynn3835++
					}
				}
				r.EncodeMapStart(yynn3835)
				yynn3835 = 0
			}
			if yyr3835 || yy2arr3835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3835[0] {
					yym3837 := z.EncBinary()
					_ = yym3837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3835[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3838 := z.EncBinary()
					_ = yym3838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3835 || yy2arr3835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3835[1] {
					yym3840 := z.EncBinary()
					_ = yym3840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3835[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3841 := z.EncBinary()
					_ = yym3841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3835 || yy2arr3835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3835[2] {
					yym3843 := z.EncBinary()
					_ = yym3843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3835[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3844 := z.EncBinary()
					_ = yym3844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3835 || yy2arr3835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3835[3] {
					yym3846 := z.EncBinary()
					_ = yym3846
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3835[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3847 := z.EncBinary()
					_ = yym3847
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3835 || yy2arr3835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3835[4] {
					yym3849 := z.EncBinary()
					_ = yym3849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3835[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3850 := z.EncBinary()
					_ = yym3850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3835 || yy2arr3835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3835[5] {
					yym3852 := z.EncBinary()
					_ = yym3852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3835[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3853 := z.EncBinary()
					_ = yym3853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3835 || yy2arr3835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3835[6] {
					yym3855 := z.EncBinary()
					_ = yym3855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3835[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3856 := z.EncBinary()
					_ = yym3856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3835 || yy2arr3835 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3857 := z.DecBinary()
	_ = yym3857
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3858 := r.ContainerType()
		if yyct3858 == codecSelferValueTypeMap1234 {
			yyl3858 := r.ReadMapStart()
			if yyl3858 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3858, d)
			}
		} else if yyct3858 == codecSelferValueTypeArray1234 {
			yyl3858 := r.ReadArrayStart()
			if yyl3858 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3858, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3859Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3859Slc
	var yyhl3859 bool = l >= 0
	for yyj3859 := 0; ; yyj3859++ {
		if yyhl3859 {
			if yyj3859 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3859Slc = r.DecodeBytes(yys3859Slc, true, true)
		yys3859 := string(yys3859Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3859 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3859)
		} // end switch yys3859
	} // end for yyj3859
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3867 int
	var yyb3867 bool
	var yyhl3867 bool = l >= 0
	yyj3867++
	if yyhl3867 {
		yyb3867 = yyj3867 > l
	} else {
		yyb3867 = r.CheckBreak()
	}
	if yyb3867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3867++
	if yyhl3867 {
		yyb3867 = yyj3867 > l
	} else {
		yyb3867 = r.CheckBreak()
	}
	if yyb3867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3867++
	if yyhl3867 {
		yyb3867 = yyj3867 > l
	} else {
		yyb3867 = r.CheckBreak()
	}
	if yyb3867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3867++
	if yyhl3867 {
		yyb3867 = yyj3867 > l
	} else {
		yyb3867 = r.CheckBreak()
	}
	if yyb3867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3867++
	if yyhl3867 {
		yyb3867 = yyj3867 > l
	} else {
		yyb3867 = r.CheckBreak()
	}
	if yyb3867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3867++
	if yyhl3867 {
		yyb3867 = yyj3867 > l
	} else {
		yyb3867 = r.CheckBreak()
	}
	if yyb3867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3867++
	if yyhl3867 {
		yyb3867 = yyj3867 > l
	} else {
		yyb3867 = r.CheckBreak()
	}
	if yyb3867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3867++
		if yyhl3867 {
			yyb3867 = yyj3867 > l
		} else {
			yyb3867 = r.CheckBreak()
		}
		if yyb3867 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3867-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3875 := z.EncBinary()
		_ = yym3875
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3876 := !z.EncBinary()
			yy2arr3876 := z.EncBasicHandle().StructToArray
			var yyq3876 [1]bool
			_, _, _ = yysep3876, yyq3876, yy2arr3876
			const yyr3876 bool = false
			var yynn3876 int
			if yyr3876 || yy2arr3876 {
				r.EncodeArrayStart(1)
			} else {
				yynn3876 = 1
				for _, b := range yyq3876 {
					if b {
						yynn3876++
					}
				}
				r.EncodeMapStart(yynn3876)
				yynn3876 = 0
			}
			if yyr3876 || yy2arr3876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3878 := z.EncBinary()
				_ = yym3878
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3879 := z.EncBinary()
				_ = yym3879
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3876 || yy2arr3876 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3880 := z.DecBinary()
	_ = yym3880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3881 := r.ContainerType()
		if yyct3881 == codecSelferValueTypeMap1234 {
			yyl3881 := r.ReadMapStart()
			if yyl3881 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3881, d)
			}
		} else if yyct3881 == codecSelferValueTypeArray1234 {
			yyl3881 := r.ReadArrayStart()
			if yyl3881 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3881, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3882Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3882Slc
	var yyhl3882 bool = l >= 0
	for yyj3882 := 0; ; yyj3882++ {
		if yyhl3882 {
			if yyj3882 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3882Slc = r.DecodeBytes(yys3882Slc, true, true)
		yys3882 := string(yys3882Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3882 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3882)
		} // end switch yys3882
	} // end for yyj3882
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3884 int
	var yyb3884 bool
	var yyhl3884 bool = l >= 0
	yyj3884++
	if yyhl3884 {
		yyb3884 = yyj3884 > l
	} else {
		yyb3884 = r.CheckBreak()
	}
	if yyb3884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3884++
		if yyhl3884 {
			yyb3884 = yyj3884 > l
		} else {
			yyb3884 = r.CheckBreak()
		}
		if yyb3884 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3884-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3886 := z.EncBinary()
		_ = yym3886
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3887 := !z.EncBinary()
			yy2arr3887 := z.EncBasicHandle().StructToArray
			var yyq3887 [3]bool
			_, _, _ = yysep3887, yyq3887, yy2arr3887
			const yyr3887 bool = false
			yyq3887[0] = x.Kind != ""
			yyq3887[1] = x.APIVersion != ""
			yyq3887[2] = true
			var yynn3887 int
			if yyr3887 || yy2arr3887 {
				r.EncodeArrayStart(3)
			} else {
				yynn3887 = 0
				for _, b := range yyq3887 {
					if b {
						yynn3887++
					}
				}
				r.EncodeMapStart(yynn3887)
				yynn3887 = 0
			}
			if yyr3887 || yy2arr3887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3887[0] {
					yym3889 := z.EncBinary()
					_ = yym3889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3887[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3890 := z.EncBinary()
					_ = yym3890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3887 || yy2arr3887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3887[1] {
					yym3892 := z.EncBinary()
					_ = yym3892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3887[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3893 := z.EncBinary()
					_ = yym3893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3887 || yy2arr3887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3887[2] {
					yy3895 := &x.Reference
					yy3895.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3887[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3896 := &x.Reference
					yy3896.CodecEncodeSelf(e)
				}
			}
			if yyr3887 || yy2arr3887 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3897 := z.DecBinary()
	_ = yym3897
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3898 := r.ContainerType()
		if yyct3898 == codecSelferValueTypeMap1234 {
			yyl3898 := r.ReadMapStart()
			if yyl3898 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3898, d)
			}
		} else if yyct3898 == codecSelferValueTypeArray1234 {
			yyl3898 := r.ReadArrayStart()
			if yyl3898 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3898, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3899Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3899Slc
	var yyhl3899 bool = l >= 0
	for yyj3899 := 0; ; yyj3899++ {
		if yyhl3899 {
			if yyj3899 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3899Slc = r.DecodeBytes(yys3899Slc, true, true)
		yys3899 := string(yys3899Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3899 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3902 := &x.Reference
				yyv3902.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3899)
		} // end switch yys3899
	} // end for yyj3899
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3903 int
	var yyb3903 bool
	var yyhl3903 bool = l >= 0
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3903++
	if yyhl3903 {
		yyb3903 = yyj3903 > l
	} else {
		yyb3903 = r.CheckBreak()
	}
	if yyb3903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3906 := &x.Reference
		yyv3906.CodecDecodeSelf(d)
	}
	for {
		yyj3903++
		if yyhl3903 {
			yyb3903 = yyj3903 > l
		} else {
			yyb3903 = r.CheckBreak()
		}
		if yyb3903 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3903-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3907 := z.EncBinary()
		_ = yym3907
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3908 := !z.EncBinary()
			yy2arr3908 := z.EncBasicHandle().StructToArray
			var yyq3908 [2]bool
			_, _, _ = yysep3908, yyq3908, yy2arr3908
			const yyr3908 bool = false
			yyq3908[0] = x.Component != ""
			yyq3908[1] = x.Host != ""
			var yynn3908 int
			if yyr3908 || yy2arr3908 {
				r.EncodeArrayStart(2)
			} else {
				yynn3908 = 0
				for _, b := range yyq3908 {
					if b {
						yynn3908++
					}
				}
				r.EncodeMapStart(yynn3908)
				yynn3908 = 0
			}
			if yyr3908 || yy2arr3908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3908[0] {
					yym3910 := z.EncBinary()
					_ = yym3910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3908[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3911 := z.EncBinary()
					_ = yym3911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3908 || yy2arr3908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3908[1] {
					yym3913 := z.EncBinary()
					_ = yym3913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3908[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3914 := z.EncBinary()
					_ = yym3914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3908 || yy2arr3908 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3915 := z.DecBinary()
	_ = yym3915
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3916 := r.ContainerType()
		if yyct3916 == codecSelferValueTypeMap1234 {
			yyl3916 := r.ReadMapStart()
			if yyl3916 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3916, d)
			}
		} else if yyct3916 == codecSelferValueTypeArray1234 {
			yyl3916 := r.ReadArrayStart()
			if yyl3916 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3916, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3917Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3917Slc
	var yyhl3917 bool = l >= 0
	for yyj3917 := 0; ; yyj3917++ {
		if yyhl3917 {
			if yyj3917 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3917Slc = r.DecodeBytes(yys3917Slc, true, true)
		yys3917 := string(yys3917Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3917 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3917)
		} // end switch yys3917
	} // end for yyj3917
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3920 int
	var yyb3920 bool
	var yyhl3920 bool = l >= 0
	yyj3920++
	if yyhl3920 {
		yyb3920 = yyj3920 > l
	} else {
		yyb3920 = r.CheckBreak()
	}
	if yyb3920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3920++
	if yyhl3920 {
		yyb3920 = yyj3920 > l
	} else {
		yyb3920 = r.CheckBreak()
	}
	if yyb3920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3920++
		if yyhl3920 {
			yyb3920 = yyj3920 > l
		} else {
			yyb3920 = r.CheckBreak()
		}
		if yyb3920 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3920-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3923 := z.EncBinary()
		_ = yym3923
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3924 := !z.EncBinary()
			yy2arr3924 := z.EncBasicHandle().StructToArray
			var yyq3924 [11]bool
			_, _, _ = yysep3924, yyq3924, yy2arr3924
			const yyr3924 bool = false
			yyq3924[0] = x.Kind != ""
			yyq3924[1] = x.APIVersion != ""
			yyq3924[2] = true
			yyq3924[3] = true
			yyq3924[4] = x.Reason != ""
			yyq3924[5] = x.Message != ""
			yyq3924[6] = true
			yyq3924[7] = true
			yyq3924[8] = true
			yyq3924[9] = x.Count != 0
			yyq3924[10] = x.Type != ""
			var yynn3924 int
			if yyr3924 || yy2arr3924 {
				r.EncodeArrayStart(11)
			} else {
				yynn3924 = 0
				for _, b := range yyq3924 {
					if b {
						yynn3924++
					}
				}
				r.EncodeMapStart(yynn3924)
				yynn3924 = 0
			}
			if yyr3924 || yy2arr3924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3924[0] {
					yym3926 := z.EncBinary()
					_ = yym3926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3924[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3927 := z.EncBinary()
					_ = yym3927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3924 || yy2arr3924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3924[1] {
					yym3929 := z.EncBinary()
					_ = yym3929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3924[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3930 := z.EncBinary()
					_ = yym3930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3924 || yy2arr3924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3924[2] {
					yy3932 := &x.ObjectMeta
					yy3932.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3924[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3933 := &x.ObjectMeta
					yy3933.CodecEncodeSelf(e)
				}
			}
			if yyr3924 || yy2arr3924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3924[3] {
					yy3935 := &x.InvolvedObject
					yy3935.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3924[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3936 := &x.InvolvedObject
					yy3936.CodecEncodeSelf(e)
				}
			}
			if yyr3924 || yy2arr3924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3924[4] {
					yym3938 := z.EncBinary()
					_ = yym3938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3924[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3924 || yy2arr3924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3924[5] {
					yym3941 := z.EncBinary()
					_ = yym3941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3924[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3942 := z.EncBinary()
					_ = yym3942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3924 || yy2arr3924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3924[6] {
					yy3944 := &x.Source
					yy3944.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3924[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3945 := &x.Source
					yy3945.CodecEncodeSelf(e)
				}
			}
			if yyr3924 || yy2arr3924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3924[7] {
					yy3947 := &x.FirstTimestamp
					yym3948 := z.EncBinary()
					_ = yym3948
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3947) {
					} else if yym3948 {
						z.EncBinaryMarshal(yy3947)
					} else if !yym3948 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3947)
					} else {
						z.EncFallback(yy3947)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3924[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3949 := &x.FirstTimestamp
					yym3950 := z.EncBinary()
					_ = yym3950
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3949) {
					} else if yym3950 {
						z.EncBinaryMarshal(yy3949)
					} else if !yym3950 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3949)
					} else {
						z.EncFallback(yy3949)
					}
				}
			}
			if yyr3924 || yy2arr3924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3924[8] {
					yy3952 := &x.LastTimestamp
					yym3953 := z.EncBinary()
					_ = yym3953
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3952) {
					} else if yym3953 {
						z.EncBinaryMarshal(yy3952)
					} else if !yym3953 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3952)
					} else {
						z.EncFallback(yy3952)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3924[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3954 := &x.LastTimestamp
					yym3955 := z.EncBinary()
					_ = yym3955
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3954) {
					} else if yym3955 {
						z.EncBinaryMarshal(yy3954)
					} else if !yym3955 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3954)
					} else {
						z.EncFallback(yy3954)
					}
				}
			}
			if yyr3924 || yy2arr3924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3924[9] {
					yym3957 := z.EncBinary()
					_ = yym3957
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3924[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3958 := z.EncBinary()
					_ = yym3958
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3924 || yy2arr3924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3924[10] {
					yym3960 := z.EncBinary()
					_ = yym3960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3924[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3961 := z.EncBinary()
					_ = yym3961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3924 || yy2arr3924 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3962 := z.DecBinary()
	_ = yym3962
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3963 := r.ContainerType()
		if yyct3963 == codecSelferValueTypeMap1234 {
			yyl3963 := r.ReadMapStart()
			if yyl3963 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3963, d)
			}
		} else if yyct3963 == codecSelferValueTypeArray1234 {
			yyl3963 := r.ReadArrayStart()
			if yyl3963 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3963, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3964Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3964Slc
	var yyhl3964 bool = l >= 0
	for yyj3964 := 0; ; yyj3964++ {
		if yyhl3964 {
			if yyj3964 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3964Slc = r.DecodeBytes(yys3964Slc, true, true)
		yys3964 := string(yys3964Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3964 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3967 := &x.ObjectMeta
				yyv3967.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3968 := &x.InvolvedObject
				yyv3968.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3971 := &x.Source
				yyv3971.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3972 := &x.FirstTimestamp
				yym3973 := z.DecBinary()
				_ = yym3973
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3972) {
				} else if yym3973 {
					z.DecBinaryUnmarshal(yyv3972)
				} else if !yym3973 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3972)
				} else {
					z.DecFallback(yyv3972, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3974 := &x.LastTimestamp
				yym3975 := z.DecBinary()
				_ = yym3975
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3974) {
				} else if yym3975 {
					z.DecBinaryUnmarshal(yyv3974)
				} else if !yym3975 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3974)
				} else {
					z.DecFallback(yyv3974, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3964)
		} // end switch yys3964
	} // end for yyj3964
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3978 int
	var yyb3978 bool
	var yyhl3978 bool = l >= 0
	yyj3978++
	if yyhl3978 {
		yyb3978 = yyj3978 > l
	} else {
		yyb3978 = r.CheckBreak()
	}
	if yyb3978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3978++
	if yyhl3978 {
		yyb3978 = yyj3978 > l
	} else {
		yyb3978 = r.CheckBreak()
	}
	if yyb3978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3978++
	if yyhl3978 {
		yyb3978 = yyj3978 > l
	} else {
		yyb3978 = r.CheckBreak()
	}
	if yyb3978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3981 := &x.ObjectMeta
		yyv3981.CodecDecodeSelf(d)
	}
	yyj3978++
	if yyhl3978 {
		yyb3978 = yyj3978 > l
	} else {
		yyb3978 = r.CheckBreak()
	}
	if yyb3978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3982 := &x.InvolvedObject
		yyv3982.CodecDecodeSelf(d)
	}
	yyj3978++
	if yyhl3978 {
		yyb3978 = yyj3978 > l
	} else {
		yyb3978 = r.CheckBreak()
	}
	if yyb3978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3978++
	if yyhl3978 {
		yyb3978 = yyj3978 > l
	} else {
		yyb3978 = r.CheckBreak()
	}
	if yyb3978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3978++
	if yyhl3978 {
		yyb3978 = yyj3978 > l
	} else {
		yyb3978 = r.CheckBreak()
	}
	if yyb3978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3985 := &x.Source
		yyv3985.CodecDecodeSelf(d)
	}
	yyj3978++
	if yyhl3978 {
		yyb3978 = yyj3978 > l
	} else {
		yyb3978 = r.CheckBreak()
	}
	if yyb3978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3986 := &x.FirstTimestamp
		yym3987 := z.DecBinary()
		_ = yym3987
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3986) {
		} else if yym3987 {
			z.DecBinaryUnmarshal(yyv3986)
		} else if !yym3987 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3986)
		} else {
			z.DecFallback(yyv3986, false)
		}
	}
	yyj3978++
	if yyhl3978 {
		yyb3978 = yyj3978 > l
	} else {
		yyb3978 = r.CheckBreak()
	}
	if yyb3978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3988 := &x.LastTimestamp
		yym3989 := z.DecBinary()
		_ = yym3989
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3988) {
		} else if yym3989 {
			z.DecBinaryUnmarshal(yyv3988)
		} else if !yym3989 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3988)
		} else {
			z.DecFallback(yyv3988, false)
		}
	}
	yyj3978++
	if yyhl3978 {
		yyb3978 = yyj3978 > l
	} else {
		yyb3978 = r.CheckBreak()
	}
	if yyb3978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3978++
	if yyhl3978 {
		yyb3978 = yyj3978 > l
	} else {
		yyb3978 = r.CheckBreak()
	}
	if yyb3978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3978++
		if yyhl3978 {
			yyb3978 = yyj3978 > l
		} else {
			yyb3978 = r.CheckBreak()
		}
		if yyb3978 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3978-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3992 := z.EncBinary()
		_ = yym3992
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3993 := !z.EncBinary()
			yy2arr3993 := z.EncBasicHandle().StructToArray
			var yyq3993 [4]bool
			_, _, _ = yysep3993, yyq3993, yy2arr3993
			const yyr3993 bool = false
			yyq3993[0] = x.Kind != ""
			yyq3993[1] = x.APIVersion != ""
			yyq3993[2] = true
			var yynn3993 int
			if yyr3993 || yy2arr3993 {
				r.EncodeArrayStart(4)
			} else {
				yynn3993 = 1
				for _, b := range yyq3993 {
					if b {
						yynn3993++
					}
				}
				r.EncodeMapStart(yynn3993)
				yynn3993 = 0
			}
			if yyr3993 || yy2arr3993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3993[0] {
					yym3995 := z.EncBinary()
					_ = yym3995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3993[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3996 := z.EncBinary()
					_ = yym3996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3993 || yy2arr3993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3993[1] {
					yym3998 := z.EncBinary()
					_ = yym3998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3993[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3999 := z.EncBinary()
					_ = yym3999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3993 || yy2arr3993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3993[2] {
					yy4001 := &x.ListMeta
					yym4002 := z.EncBinary()
					_ = yym4002
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4001) {
					} else {
						z.EncFallback(yy4001)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3993[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4003 := &x.ListMeta
					yym4004 := z.EncBinary()
					_ = yym4004
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4003) {
					} else {
						z.EncFallback(yy4003)
					}
				}
			}
			if yyr3993 || yy2arr3993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4006 := z.EncBinary()
					_ = yym4006
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4007 := z.EncBinary()
					_ = yym4007
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3993 || yy2arr3993 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4008 := z.DecBinary()
	_ = yym4008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4009 := r.ContainerType()
		if yyct4009 == codecSelferValueTypeMap1234 {
			yyl4009 := r.ReadMapStart()
			if yyl4009 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4009, d)
			}
		} else if yyct4009 == codecSelferValueTypeArray1234 {
			yyl4009 := r.ReadArrayStart()
			if yyl4009 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4010Slc
	var yyhl4010 bool = l >= 0
	for yyj4010 := 0; ; yyj4010++ {
		if yyhl4010 {
			if yyj4010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4010Slc = r.DecodeBytes(yys4010Slc, true, true)
		yys4010 := string(yys4010Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4010 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4013 := &x.ListMeta
				yym4014 := z.DecBinary()
				_ = yym4014
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4013) {
				} else {
					z.DecFallback(yyv4013, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4015 := &x.Items
				yym4016 := z.DecBinary()
				_ = yym4016
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv4015), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4010)
		} // end switch yys4010
	} // end for yyj4010
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4017 int
	var yyb4017 bool
	var yyhl4017 bool = l >= 0
	yyj4017++
	if yyhl4017 {
		yyb4017 = yyj4017 > l
	} else {
		yyb4017 = r.CheckBreak()
	}
	if yyb4017 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4017++
	if yyhl4017 {
		yyb4017 = yyj4017 > l
	} else {
		yyb4017 = r.CheckBreak()
	}
	if yyb4017 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4017++
	if yyhl4017 {
		yyb4017 = yyj4017 > l
	} else {
		yyb4017 = r.CheckBreak()
	}
	if yyb4017 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4020 := &x.ListMeta
		yym4021 := z.DecBinary()
		_ = yym4021
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4020) {
		} else {
			z.DecFallback(yyv4020, false)
		}
	}
	yyj4017++
	if yyhl4017 {
		yyb4017 = yyj4017 > l
	} else {
		yyb4017 = r.CheckBreak()
	}
	if yyb4017 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4022 := &x.Items
		yym4023 := z.DecBinary()
		_ = yym4023
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv4022), d)
		}
	}
	for {
		yyj4017++
		if yyhl4017 {
			yyb4017 = yyj4017 > l
		} else {
			yyb4017 = r.CheckBreak()
		}
		if yyb4017 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4017-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4024 := z.EncBinary()
		_ = yym4024
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4025 := !z.EncBinary()
			yy2arr4025 := z.EncBasicHandle().StructToArray
			var yyq4025 [4]bool
			_, _, _ = yysep4025, yyq4025, yy2arr4025
			const yyr4025 bool = false
			yyq4025[0] = x.Kind != ""
			yyq4025[1] = x.APIVersion != ""
			yyq4025[2] = true
			var yynn4025 int
			if yyr4025 || yy2arr4025 {
				r.EncodeArrayStart(4)
			} else {
				yynn4025 = 1
				for _, b := range yyq4025 {
					if b {
						yynn4025++
					}
				}
				r.EncodeMapStart(yynn4025)
				yynn4025 = 0
			}
			if yyr4025 || yy2arr4025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4025[0] {
					yym4027 := z.EncBinary()
					_ = yym4027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4025[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4028 := z.EncBinary()
					_ = yym4028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4025 || yy2arr4025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4025[1] {
					yym4030 := z.EncBinary()
					_ = yym4030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4025[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4031 := z.EncBinary()
					_ = yym4031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4025 || yy2arr4025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4025[2] {
					yy4033 := &x.ListMeta
					yym4034 := z.EncBinary()
					_ = yym4034
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4033) {
					} else {
						z.EncFallback(yy4033)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4025[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4035 := &x.ListMeta
					yym4036 := z.EncBinary()
					_ = yym4036
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4035) {
					} else {
						z.EncFallback(yy4035)
					}
				}
			}
			if yyr4025 || yy2arr4025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4038 := z.EncBinary()
					_ = yym4038
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4039 := z.EncBinary()
					_ = yym4039
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr4025 || yy2arr4025 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4040 := z.DecBinary()
	_ = yym4040
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4041 := r.ContainerType()
		if yyct4041 == codecSelferValueTypeMap1234 {
			yyl4041 := r.ReadMapStart()
			if yyl4041 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4041, d)
			}
		} else if yyct4041 == codecSelferValueTypeArray1234 {
			yyl4041 := r.ReadArrayStart()
			if yyl4041 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4041, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4042Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4042Slc
	var yyhl4042 bool = l >= 0
	for yyj4042 := 0; ; yyj4042++ {
		if yyhl4042 {
			if yyj4042 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4042Slc = r.DecodeBytes(yys4042Slc, true, true)
		yys4042 := string(yys4042Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4042 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4045 := &x.ListMeta
				yym4046 := z.DecBinary()
				_ = yym4046
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4045) {
				} else {
					z.DecFallback(yyv4045, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4047 := &x.Items
				yym4048 := z.DecBinary()
				_ = yym4048
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4047), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4042)
		} // end switch yys4042
	} // end for yyj4042
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4049 int
	var yyb4049 bool
	var yyhl4049 bool = l >= 0
	yyj4049++
	if yyhl4049 {
		yyb4049 = yyj4049 > l
	} else {
		yyb4049 = r.CheckBreak()
	}
	if yyb4049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4049++
	if yyhl4049 {
		yyb4049 = yyj4049 > l
	} else {
		yyb4049 = r.CheckBreak()
	}
	if yyb4049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4049++
	if yyhl4049 {
		yyb4049 = yyj4049 > l
	} else {
		yyb4049 = r.CheckBreak()
	}
	if yyb4049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4052 := &x.ListMeta
		yym4053 := z.DecBinary()
		_ = yym4053
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4052) {
		} else {
			z.DecFallback(yyv4052, false)
		}
	}
	yyj4049++
	if yyhl4049 {
		yyb4049 = yyj4049 > l
	} else {
		yyb4049 = r.CheckBreak()
	}
	if yyb4049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4054 := &x.Items
		yym4055 := z.DecBinary()
		_ = yym4055
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4054), d)
		}
	}
	for {
		yyj4049++
		if yyhl4049 {
			yyb4049 = yyj4049 > l
		} else {
			yyb4049 = r.CheckBreak()
		}
		if yyb4049 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4049-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4056 := z.EncBinary()
	_ = yym4056
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4057 := z.DecBinary()
	_ = yym4057
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4058 := z.EncBinary()
		_ = yym4058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4059 := !z.EncBinary()
			yy2arr4059 := z.EncBasicHandle().StructToArray
			var yyq4059 [6]bool
			_, _, _ = yysep4059, yyq4059, yy2arr4059
			const yyr4059 bool = false
			yyq4059[0] = x.Type != ""
			yyq4059[1] = len(x.Max) != 0
			yyq4059[2] = len(x.Min) != 0
			yyq4059[3] = len(x.Default) != 0
			yyq4059[4] = len(x.DefaultRequest) != 0
			yyq4059[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4059 int
			if yyr4059 || yy2arr4059 {
				r.EncodeArrayStart(6)
			} else {
				yynn4059 = 0
				for _, b := range yyq4059 {
					if b {
						yynn4059++
					}
				}
				r.EncodeMapStart(yynn4059)
				yynn4059 = 0
			}
			if yyr4059 || yy2arr4059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4059[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4059[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4059 || yy2arr4059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4059[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4059[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4059 || yy2arr4059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4059[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4059[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4059 || yy2arr4059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4059[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4059[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4059 || yy2arr4059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4059[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4059[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4059 || yy2arr4059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4059[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4059[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4059 || yy2arr4059 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4066 := z.DecBinary()
	_ = yym4066
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4067 := r.ContainerType()
		if yyct4067 == codecSelferValueTypeMap1234 {
			yyl4067 := r.ReadMapStart()
			if yyl4067 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4067, d)
			}
		} else if yyct4067 == codecSelferValueTypeArray1234 {
			yyl4067 := r.ReadArrayStart()
			if yyl4067 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4067, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4068Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4068Slc
	var yyhl4068 bool = l >= 0
	for yyj4068 := 0; ; yyj4068++ {
		if yyhl4068 {
			if yyj4068 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4068Slc = r.DecodeBytes(yys4068Slc, true, true)
		yys4068 := string(yys4068Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4068 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4070 := &x.Max
				yyv4070.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4071 := &x.Min
				yyv4071.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4072 := &x.Default
				yyv4072.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4073 := &x.DefaultRequest
				yyv4073.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4074 := &x.MaxLimitRequestRatio
				yyv4074.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4068)
		} // end switch yys4068
	} // end for yyj4068
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4075 int
	var yyb4075 bool
	var yyhl4075 bool = l >= 0
	yyj4075++
	if yyhl4075 {
		yyb4075 = yyj4075 > l
	} else {
		yyb4075 = r.CheckBreak()
	}
	if yyb4075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4075++
	if yyhl4075 {
		yyb4075 = yyj4075 > l
	} else {
		yyb4075 = r.CheckBreak()
	}
	if yyb4075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4077 := &x.Max
		yyv4077.CodecDecodeSelf(d)
	}
	yyj4075++
	if yyhl4075 {
		yyb4075 = yyj4075 > l
	} else {
		yyb4075 = r.CheckBreak()
	}
	if yyb4075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4078 := &x.Min
		yyv4078.CodecDecodeSelf(d)
	}
	yyj4075++
	if yyhl4075 {
		yyb4075 = yyj4075 > l
	} else {
		yyb4075 = r.CheckBreak()
	}
	if yyb4075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4079 := &x.Default
		yyv4079.CodecDecodeSelf(d)
	}
	yyj4075++
	if yyhl4075 {
		yyb4075 = yyj4075 > l
	} else {
		yyb4075 = r.CheckBreak()
	}
	if yyb4075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4080 := &x.DefaultRequest
		yyv4080.CodecDecodeSelf(d)
	}
	yyj4075++
	if yyhl4075 {
		yyb4075 = yyj4075 > l
	} else {
		yyb4075 = r.CheckBreak()
	}
	if yyb4075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4081 := &x.MaxLimitRequestRatio
		yyv4081.CodecDecodeSelf(d)
	}
	for {
		yyj4075++
		if yyhl4075 {
			yyb4075 = yyj4075 > l
		} else {
			yyb4075 = r.CheckBreak()
		}
		if yyb4075 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4075-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4082 := z.EncBinary()
		_ = yym4082
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4083 := !z.EncBinary()
			yy2arr4083 := z.EncBasicHandle().StructToArray
			var yyq4083 [1]bool
			_, _, _ = yysep4083, yyq4083, yy2arr4083
			const yyr4083 bool = false
			var yynn4083 int
			if yyr4083 || yy2arr4083 {
				r.EncodeArrayStart(1)
			} else {
				yynn4083 = 1
				for _, b := range yyq4083 {
					if b {
						yynn4083++
					}
				}
				r.EncodeMapStart(yynn4083)
				yynn4083 = 0
			}
			if yyr4083 || yy2arr4083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4085 := z.EncBinary()
					_ = yym4085
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4086 := z.EncBinary()
					_ = yym4086
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4083 || yy2arr4083 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4087 := z.DecBinary()
	_ = yym4087
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4088 := r.ContainerType()
		if yyct4088 == codecSelferValueTypeMap1234 {
			yyl4088 := r.ReadMapStart()
			if yyl4088 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4088, d)
			}
		} else if yyct4088 == codecSelferValueTypeArray1234 {
			yyl4088 := r.ReadArrayStart()
			if yyl4088 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4088, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4089Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4089Slc
	var yyhl4089 bool = l >= 0
	for yyj4089 := 0; ; yyj4089++ {
		if yyhl4089 {
			if yyj4089 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4089Slc = r.DecodeBytes(yys4089Slc, true, true)
		yys4089 := string(yys4089Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4089 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4090 := &x.Limits
				yym4091 := z.DecBinary()
				_ = yym4091
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4090), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4089)
		} // end switch yys4089
	} // end for yyj4089
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4092 int
	var yyb4092 bool
	var yyhl4092 bool = l >= 0
	yyj4092++
	if yyhl4092 {
		yyb4092 = yyj4092 > l
	} else {
		yyb4092 = r.CheckBreak()
	}
	if yyb4092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4093 := &x.Limits
		yym4094 := z.DecBinary()
		_ = yym4094
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4093), d)
		}
	}
	for {
		yyj4092++
		if yyhl4092 {
			yyb4092 = yyj4092 > l
		} else {
			yyb4092 = r.CheckBreak()
		}
		if yyb4092 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4092-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4095 := z.EncBinary()
		_ = yym4095
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4096 := !z.EncBinary()
			yy2arr4096 := z.EncBasicHandle().StructToArray
			var yyq4096 [4]bool
			_, _, _ = yysep4096, yyq4096, yy2arr4096
			const yyr4096 bool = false
			yyq4096[0] = x.Kind != ""
			yyq4096[1] = x.APIVersion != ""
			yyq4096[2] = true
			yyq4096[3] = true
			var yynn4096 int
			if yyr4096 || yy2arr4096 {
				r.EncodeArrayStart(4)
			} else {
				yynn4096 = 0
				for _, b := range yyq4096 {
					if b {
						yynn4096++
					}
				}
				r.EncodeMapStart(yynn4096)
				yynn4096 = 0
			}
			if yyr4096 || yy2arr4096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4096[0] {
					yym4098 := z.EncBinary()
					_ = yym4098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4096[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4099 := z.EncBinary()
					_ = yym4099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4096 || yy2arr4096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4096[1] {
					yym4101 := z.EncBinary()
					_ = yym4101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4096[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4102 := z.EncBinary()
					_ = yym4102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4096 || yy2arr4096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4096[2] {
					yy4104 := &x.ObjectMeta
					yy4104.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4096[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4105 := &x.ObjectMeta
					yy4105.CodecEncodeSelf(e)
				}
			}
			if yyr4096 || yy2arr4096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4096[3] {
					yy4107 := &x.Spec
					yy4107.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4096[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4108 := &x.Spec
					yy4108.CodecEncodeSelf(e)
				}
			}
			if yyr4096 || yy2arr4096 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4109 := z.DecBinary()
	_ = yym4109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4110 := r.ContainerType()
		if yyct4110 == codecSelferValueTypeMap1234 {
			yyl4110 := r.ReadMapStart()
			if yyl4110 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4110, d)
			}
		} else if yyct4110 == codecSelferValueTypeArray1234 {
			yyl4110 := r.ReadArrayStart()
			if yyl4110 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4110, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4111Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4111Slc
	var yyhl4111 bool = l >= 0
	for yyj4111 := 0; ; yyj4111++ {
		if yyhl4111 {
			if yyj4111 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4111Slc = r.DecodeBytes(yys4111Slc, true, true)
		yys4111 := string(yys4111Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4111 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4114 := &x.ObjectMeta
				yyv4114.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4115 := &x.Spec
				yyv4115.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4111)
		} // end switch yys4111
	} // end for yyj4111
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4116 int
	var yyb4116 bool
	var yyhl4116 bool = l >= 0
	yyj4116++
	if yyhl4116 {
		yyb4116 = yyj4116 > l
	} else {
		yyb4116 = r.CheckBreak()
	}
	if yyb4116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4116++
	if yyhl4116 {
		yyb4116 = yyj4116 > l
	} else {
		yyb4116 = r.CheckBreak()
	}
	if yyb4116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4116++
	if yyhl4116 {
		yyb4116 = yyj4116 > l
	} else {
		yyb4116 = r.CheckBreak()
	}
	if yyb4116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4119 := &x.ObjectMeta
		yyv4119.CodecDecodeSelf(d)
	}
	yyj4116++
	if yyhl4116 {
		yyb4116 = yyj4116 > l
	} else {
		yyb4116 = r.CheckBreak()
	}
	if yyb4116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4120 := &x.Spec
		yyv4120.CodecDecodeSelf(d)
	}
	for {
		yyj4116++
		if yyhl4116 {
			yyb4116 = yyj4116 > l
		} else {
			yyb4116 = r.CheckBreak()
		}
		if yyb4116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4121 := z.EncBinary()
		_ = yym4121
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4122 := !z.EncBinary()
			yy2arr4122 := z.EncBasicHandle().StructToArray
			var yyq4122 [4]bool
			_, _, _ = yysep4122, yyq4122, yy2arr4122
			const yyr4122 bool = false
			yyq4122[0] = x.Kind != ""
			yyq4122[1] = x.APIVersion != ""
			yyq4122[2] = true
			var yynn4122 int
			if yyr4122 || yy2arr4122 {
				r.EncodeArrayStart(4)
			} else {
				yynn4122 = 1
				for _, b := range yyq4122 {
					if b {
						yynn4122++
					}
				}
				r.EncodeMapStart(yynn4122)
				yynn4122 = 0
			}
			if yyr4122 || yy2arr4122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4122[0] {
					yym4124 := z.EncBinary()
					_ = yym4124
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4122[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4125 := z.EncBinary()
					_ = yym4125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4122 || yy2arr4122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4122[1] {
					yym4127 := z.EncBinary()
					_ = yym4127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4122[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4128 := z.EncBinary()
					_ = yym4128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4122 || yy2arr4122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4122[2] {
					yy4130 := &x.ListMeta
					yym4131 := z.EncBinary()
					_ = yym4131
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4130) {
					} else {
						z.EncFallback(yy4130)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4122[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4132 := &x.ListMeta
					yym4133 := z.EncBinary()
					_ = yym4133
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4132) {
					} else {
						z.EncFallback(yy4132)
					}
				}
			}
			if yyr4122 || yy2arr4122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4135 := z.EncBinary()
					_ = yym4135
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4136 := z.EncBinary()
					_ = yym4136
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4122 || yy2arr4122 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4137 := z.DecBinary()
	_ = yym4137
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4138 := r.ContainerType()
		if yyct4138 == codecSelferValueTypeMap1234 {
			yyl4138 := r.ReadMapStart()
			if yyl4138 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4138, d)
			}
		} else if yyct4138 == codecSelferValueTypeArray1234 {
			yyl4138 := r.ReadArrayStart()
			if yyl4138 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4138, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4139Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4139Slc
	var yyhl4139 bool = l >= 0
	for yyj4139 := 0; ; yyj4139++ {
		if yyhl4139 {
			if yyj4139 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4139Slc = r.DecodeBytes(yys4139Slc, true, true)
		yys4139 := string(yys4139Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4139 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4142 := &x.ListMeta
				yym4143 := z.DecBinary()
				_ = yym4143
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4142) {
				} else {
					z.DecFallback(yyv4142, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4144 := &x.Items
				yym4145 := z.DecBinary()
				_ = yym4145
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4144), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4139)
		} // end switch yys4139
	} // end for yyj4139
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4146 int
	var yyb4146 bool
	var yyhl4146 bool = l >= 0
	yyj4146++
	if yyhl4146 {
		yyb4146 = yyj4146 > l
	} else {
		yyb4146 = r.CheckBreak()
	}
	if yyb4146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4146++
	if yyhl4146 {
		yyb4146 = yyj4146 > l
	} else {
		yyb4146 = r.CheckBreak()
	}
	if yyb4146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4146++
	if yyhl4146 {
		yyb4146 = yyj4146 > l
	} else {
		yyb4146 = r.CheckBreak()
	}
	if yyb4146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4149 := &x.ListMeta
		yym4150 := z.DecBinary()
		_ = yym4150
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4149) {
		} else {
			z.DecFallback(yyv4149, false)
		}
	}
	yyj4146++
	if yyhl4146 {
		yyb4146 = yyj4146 > l
	} else {
		yyb4146 = r.CheckBreak()
	}
	if yyb4146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4151 := &x.Items
		yym4152 := z.DecBinary()
		_ = yym4152
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4151), d)
		}
	}
	for {
		yyj4146++
		if yyhl4146 {
			yyb4146 = yyj4146 > l
		} else {
			yyb4146 = r.CheckBreak()
		}
		if yyb4146 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4146-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4153 := z.EncBinary()
	_ = yym4153
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4154 := z.DecBinary()
	_ = yym4154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4155 := z.EncBinary()
		_ = yym4155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4156 := !z.EncBinary()
			yy2arr4156 := z.EncBasicHandle().StructToArray
			var yyq4156 [2]bool
			_, _, _ = yysep4156, yyq4156, yy2arr4156
			const yyr4156 bool = false
			yyq4156[0] = len(x.Hard) != 0
			yyq4156[1] = len(x.Scopes) != 0
			var yynn4156 int
			if yyr4156 || yy2arr4156 {
				r.EncodeArrayStart(2)
			} else {
				yynn4156 = 0
				for _, b := range yyq4156 {
					if b {
						yynn4156++
					}
				}
				r.EncodeMapStart(yynn4156)
				yynn4156 = 0
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4156[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4156[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4159 := z.EncBinary()
						_ = yym4159
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4156[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4160 := z.EncBinary()
						_ = yym4160
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4156 || yy2arr4156 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4161 := z.DecBinary()
	_ = yym4161
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4162 := r.ContainerType()
		if yyct4162 == codecSelferValueTypeMap1234 {
			yyl4162 := r.ReadMapStart()
			if yyl4162 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4162, d)
			}
		} else if yyct4162 == codecSelferValueTypeArray1234 {
			yyl4162 := r.ReadArrayStart()
			if yyl4162 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4162, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4163Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4163Slc
	var yyhl4163 bool = l >= 0
	for yyj4163 := 0; ; yyj4163++ {
		if yyhl4163 {
			if yyj4163 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4163Slc = r.DecodeBytes(yys4163Slc, true, true)
		yys4163 := string(yys4163Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4163 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4164 := &x.Hard
				yyv4164.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4165 := &x.Scopes
				yym4166 := z.DecBinary()
				_ = yym4166
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4165), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4163)
		} // end switch yys4163
	} // end for yyj4163
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4167 int
	var yyb4167 bool
	var yyhl4167 bool = l >= 0
	yyj4167++
	if yyhl4167 {
		yyb4167 = yyj4167 > l
	} else {
		yyb4167 = r.CheckBreak()
	}
	if yyb4167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4168 := &x.Hard
		yyv4168.CodecDecodeSelf(d)
	}
	yyj4167++
	if yyhl4167 {
		yyb4167 = yyj4167 > l
	} else {
		yyb4167 = r.CheckBreak()
	}
	if yyb4167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4169 := &x.Scopes
		yym4170 := z.DecBinary()
		_ = yym4170
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4169), d)
		}
	}
	for {
		yyj4167++
		if yyhl4167 {
			yyb4167 = yyj4167 > l
		} else {
			yyb4167 = r.CheckBreak()
		}
		if yyb4167 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4167-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4171 := z.EncBinary()
		_ = yym4171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4172 := !z.EncBinary()
			yy2arr4172 := z.EncBasicHandle().StructToArray
			var yyq4172 [2]bool
			_, _, _ = yysep4172, yyq4172, yy2arr4172
			const yyr4172 bool = false
			yyq4172[0] = len(x.Hard) != 0
			yyq4172[1] = len(x.Used) != 0
			var yynn4172 int
			if yyr4172 || yy2arr4172 {
				r.EncodeArrayStart(2)
			} else {
				yynn4172 = 0
				for _, b := range yyq4172 {
					if b {
						yynn4172++
					}
				}
				r.EncodeMapStart(yynn4172)
				yynn4172 = 0
			}
			if yyr4172 || yy2arr4172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4172[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4172[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4172 || yy2arr4172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4172[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4172[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4172 || yy2arr4172 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4175 := z.DecBinary()
	_ = yym4175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4176 := r.ContainerType()
		if yyct4176 == codecSelferValueTypeMap1234 {
			yyl4176 := r.ReadMapStart()
			if yyl4176 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4176, d)
			}
		} else if yyct4176 == codecSelferValueTypeArray1234 {
			yyl4176 := r.ReadArrayStart()
			if yyl4176 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4176, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4177Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4177Slc
	var yyhl4177 bool = l >= 0
	for yyj4177 := 0; ; yyj4177++ {
		if yyhl4177 {
			if yyj4177 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4177Slc = r.DecodeBytes(yys4177Slc, true, true)
		yys4177 := string(yys4177Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4177 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4178 := &x.Hard
				yyv4178.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4179 := &x.Used
				yyv4179.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4177)
		} // end switch yys4177
	} // end for yyj4177
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4180 int
	var yyb4180 bool
	var yyhl4180 bool = l >= 0
	yyj4180++
	if yyhl4180 {
		yyb4180 = yyj4180 > l
	} else {
		yyb4180 = r.CheckBreak()
	}
	if yyb4180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4181 := &x.Hard
		yyv4181.CodecDecodeSelf(d)
	}
	yyj4180++
	if yyhl4180 {
		yyb4180 = yyj4180 > l
	} else {
		yyb4180 = r.CheckBreak()
	}
	if yyb4180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4182 := &x.Used
		yyv4182.CodecDecodeSelf(d)
	}
	for {
		yyj4180++
		if yyhl4180 {
			yyb4180 = yyj4180 > l
		} else {
			yyb4180 = r.CheckBreak()
		}
		if yyb4180 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4180-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4183 := z.EncBinary()
		_ = yym4183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4184 := !z.EncBinary()
			yy2arr4184 := z.EncBasicHandle().StructToArray
			var yyq4184 [5]bool
			_, _, _ = yysep4184, yyq4184, yy2arr4184
			const yyr4184 bool = false
			yyq4184[0] = x.Kind != ""
			yyq4184[1] = x.APIVersion != ""
			yyq4184[2] = true
			yyq4184[3] = true
			yyq4184[4] = true
			var yynn4184 int
			if yyr4184 || yy2arr4184 {
				r.EncodeArrayStart(5)
			} else {
				yynn4184 = 0
				for _, b := range yyq4184 {
					if b {
						yynn4184++
					}
				}
				r.EncodeMapStart(yynn4184)
				yynn4184 = 0
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4184[0] {
					yym4186 := z.EncBinary()
					_ = yym4186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4184[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4187 := z.EncBinary()
					_ = yym4187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4184[1] {
					yym4189 := z.EncBinary()
					_ = yym4189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4184[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4190 := z.EncBinary()
					_ = yym4190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4184[2] {
					yy4192 := &x.ObjectMeta
					yy4192.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4184[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4193 := &x.ObjectMeta
					yy4193.CodecEncodeSelf(e)
				}
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4184[3] {
					yy4195 := &x.Spec
					yy4195.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4184[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4196 := &x.Spec
					yy4196.CodecEncodeSelf(e)
				}
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4184[4] {
					yy4198 := &x.Status
					yy4198.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4184[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4199 := &x.Status
					yy4199.CodecEncodeSelf(e)
				}
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4200 := z.DecBinary()
	_ = yym4200
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4201 := r.ContainerType()
		if yyct4201 == codecSelferValueTypeMap1234 {
			yyl4201 := r.ReadMapStart()
			if yyl4201 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4201, d)
			}
		} else if yyct4201 == codecSelferValueTypeArray1234 {
			yyl4201 := r.ReadArrayStart()
			if yyl4201 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4201, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4202Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4202Slc
	var yyhl4202 bool = l >= 0
	for yyj4202 := 0; ; yyj4202++ {
		if yyhl4202 {
			if yyj4202 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4202Slc = r.DecodeBytes(yys4202Slc, true, true)
		yys4202 := string(yys4202Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4202 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4205 := &x.ObjectMeta
				yyv4205.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4206 := &x.Spec
				yyv4206.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4207 := &x.Status
				yyv4207.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4202)
		} // end switch yys4202
	} // end for yyj4202
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4208 int
	var yyb4208 bool
	var yyhl4208 bool = l >= 0
	yyj4208++
	if yyhl4208 {
		yyb4208 = yyj4208 > l
	} else {
		yyb4208 = r.CheckBreak()
	}
	if yyb4208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4208++
	if yyhl4208 {
		yyb4208 = yyj4208 > l
	} else {
		yyb4208 = r.CheckBreak()
	}
	if yyb4208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4208++
	if yyhl4208 {
		yyb4208 = yyj4208 > l
	} else {
		yyb4208 = r.CheckBreak()
	}
	if yyb4208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4211 := &x.ObjectMeta
		yyv4211.CodecDecodeSelf(d)
	}
	yyj4208++
	if yyhl4208 {
		yyb4208 = yyj4208 > l
	} else {
		yyb4208 = r.CheckBreak()
	}
	if yyb4208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4212 := &x.Spec
		yyv4212.CodecDecodeSelf(d)
	}
	yyj4208++
	if yyhl4208 {
		yyb4208 = yyj4208 > l
	} else {
		yyb4208 = r.CheckBreak()
	}
	if yyb4208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4213 := &x.Status
		yyv4213.CodecDecodeSelf(d)
	}
	for {
		yyj4208++
		if yyhl4208 {
			yyb4208 = yyj4208 > l
		} else {
			yyb4208 = r.CheckBreak()
		}
		if yyb4208 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4208-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4214 := z.EncBinary()
		_ = yym4214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4215 := !z.EncBinary()
			yy2arr4215 := z.EncBasicHandle().StructToArray
			var yyq4215 [4]bool
			_, _, _ = yysep4215, yyq4215, yy2arr4215
			const yyr4215 bool = false
			yyq4215[0] = x.Kind != ""
			yyq4215[1] = x.APIVersion != ""
			yyq4215[2] = true
			var yynn4215 int
			if yyr4215 || yy2arr4215 {
				r.EncodeArrayStart(4)
			} else {
				yynn4215 = 1
				for _, b := range yyq4215 {
					if b {
						yynn4215++
					}
				}
				r.EncodeMapStart(yynn4215)
				yynn4215 = 0
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4215[0] {
					yym4217 := z.EncBinary()
					_ = yym4217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4215[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4218 := z.EncBinary()
					_ = yym4218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4215[1] {
					yym4220 := z.EncBinary()
					_ = yym4220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4215[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4221 := z.EncBinary()
					_ = yym4221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4215[2] {
					yy4223 := &x.ListMeta
					yym4224 := z.EncBinary()
					_ = yym4224
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4223) {
					} else {
						z.EncFallback(yy4223)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4215[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4225 := &x.ListMeta
					yym4226 := z.EncBinary()
					_ = yym4226
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4225) {
					} else {
						z.EncFallback(yy4225)
					}
				}
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4228 := z.EncBinary()
					_ = yym4228
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4229 := z.EncBinary()
					_ = yym4229
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4230 := z.DecBinary()
	_ = yym4230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4231 := r.ContainerType()
		if yyct4231 == codecSelferValueTypeMap1234 {
			yyl4231 := r.ReadMapStart()
			if yyl4231 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4231, d)
			}
		} else if yyct4231 == codecSelferValueTypeArray1234 {
			yyl4231 := r.ReadArrayStart()
			if yyl4231 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4231, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4232Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4232Slc
	var yyhl4232 bool = l >= 0
	for yyj4232 := 0; ; yyj4232++ {
		if yyhl4232 {
			if yyj4232 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4232Slc = r.DecodeBytes(yys4232Slc, true, true)
		yys4232 := string(yys4232Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4232 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4235 := &x.ListMeta
				yym4236 := z.DecBinary()
				_ = yym4236
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4235) {
				} else {
					z.DecFallback(yyv4235, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4237 := &x.Items
				yym4238 := z.DecBinary()
				_ = yym4238
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4237), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4232)
		} // end switch yys4232
	} // end for yyj4232
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4239 int
	var yyb4239 bool
	var yyhl4239 bool = l >= 0
	yyj4239++
	if yyhl4239 {
		yyb4239 = yyj4239 > l
	} else {
		yyb4239 = r.CheckBreak()
	}
	if yyb4239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4239++
	if yyhl4239 {
		yyb4239 = yyj4239 > l
	} else {
		yyb4239 = r.CheckBreak()
	}
	if yyb4239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4239++
	if yyhl4239 {
		yyb4239 = yyj4239 > l
	} else {
		yyb4239 = r.CheckBreak()
	}
	if yyb4239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4242 := &x.ListMeta
		yym4243 := z.DecBinary()
		_ = yym4243
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4242) {
		} else {
			z.DecFallback(yyv4242, false)
		}
	}
	yyj4239++
	if yyhl4239 {
		yyb4239 = yyj4239 > l
	} else {
		yyb4239 = r.CheckBreak()
	}
	if yyb4239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4244 := &x.Items
		yym4245 := z.DecBinary()
		_ = yym4245
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4244), d)
		}
	}
	for {
		yyj4239++
		if yyhl4239 {
			yyb4239 = yyj4239 > l
		} else {
			yyb4239 = r.CheckBreak()
		}
		if yyb4239 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4239-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4246 := z.EncBinary()
		_ = yym4246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4247 := !z.EncBinary()
			yy2arr4247 := z.EncBasicHandle().StructToArray
			var yyq4247 [5]bool
			_, _, _ = yysep4247, yyq4247, yy2arr4247
			const yyr4247 bool = false
			yyq4247[0] = x.Kind != ""
			yyq4247[1] = x.APIVersion != ""
			yyq4247[2] = true
			yyq4247[3] = len(x.Data) != 0
			yyq4247[4] = x.Type != ""
			var yynn4247 int
			if yyr4247 || yy2arr4247 {
				r.EncodeArrayStart(5)
			} else {
				yynn4247 = 0
				for _, b := range yyq4247 {
					if b {
						yynn4247++
					}
				}
				r.EncodeMapStart(yynn4247)
				yynn4247 = 0
			}
			if yyr4247 || yy2arr4247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4247[0] {
					yym4249 := z.EncBinary()
					_ = yym4249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4247[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4250 := z.EncBinary()
					_ = yym4250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4247 || yy2arr4247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4247[1] {
					yym4252 := z.EncBinary()
					_ = yym4252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4247[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4253 := z.EncBinary()
					_ = yym4253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4247 || yy2arr4247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4247[2] {
					yy4255 := &x.ObjectMeta
					yy4255.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4247[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4256 := &x.ObjectMeta
					yy4256.CodecEncodeSelf(e)
				}
			}
			if yyr4247 || yy2arr4247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4247[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4258 := z.EncBinary()
						_ = yym4258
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4247[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4259 := z.EncBinary()
						_ = yym4259
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4247 || yy2arr4247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4247[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4247[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4247 || yy2arr4247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4261 := z.DecBinary()
	_ = yym4261
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4262 := r.ContainerType()
		if yyct4262 == codecSelferValueTypeMap1234 {
			yyl4262 := r.ReadMapStart()
			if yyl4262 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4262, d)
			}
		} else if yyct4262 == codecSelferValueTypeArray1234 {
			yyl4262 := r.ReadArrayStart()
			if yyl4262 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4262, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4263Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4263Slc
	var yyhl4263 bool = l >= 0
	for yyj4263 := 0; ; yyj4263++ {
		if yyhl4263 {
			if yyj4263 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4263Slc = r.DecodeBytes(yys4263Slc, true, true)
		yys4263 := string(yys4263Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4263 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4266 := &x.ObjectMeta
				yyv4266.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4267 := &x.Data
				yym4268 := z.DecBinary()
				_ = yym4268
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4267), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4263)
		} // end switch yys4263
	} // end for yyj4263
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4270 int
	var yyb4270 bool
	var yyhl4270 bool = l >= 0
	yyj4270++
	if yyhl4270 {
		yyb4270 = yyj4270 > l
	} else {
		yyb4270 = r.CheckBreak()
	}
	if yyb4270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4270++
	if yyhl4270 {
		yyb4270 = yyj4270 > l
	} else {
		yyb4270 = r.CheckBreak()
	}
	if yyb4270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4270++
	if yyhl4270 {
		yyb4270 = yyj4270 > l
	} else {
		yyb4270 = r.CheckBreak()
	}
	if yyb4270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4273 := &x.ObjectMeta
		yyv4273.CodecDecodeSelf(d)
	}
	yyj4270++
	if yyhl4270 {
		yyb4270 = yyj4270 > l
	} else {
		yyb4270 = r.CheckBreak()
	}
	if yyb4270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4274 := &x.Data
		yym4275 := z.DecBinary()
		_ = yym4275
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4274), d)
		}
	}
	yyj4270++
	if yyhl4270 {
		yyb4270 = yyj4270 > l
	} else {
		yyb4270 = r.CheckBreak()
	}
	if yyb4270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4270++
		if yyhl4270 {
			yyb4270 = yyj4270 > l
		} else {
			yyb4270 = r.CheckBreak()
		}
		if yyb4270 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4270-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4277 := z.EncBinary()
	_ = yym4277
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4278 := z.DecBinary()
	_ = yym4278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4279 := z.EncBinary()
		_ = yym4279
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4280 := !z.EncBinary()
			yy2arr4280 := z.EncBasicHandle().StructToArray
			var yyq4280 [4]bool
			_, _, _ = yysep4280, yyq4280, yy2arr4280
			const yyr4280 bool = false
			yyq4280[0] = x.Kind != ""
			yyq4280[1] = x.APIVersion != ""
			yyq4280[2] = true
			var yynn4280 int
			if yyr4280 || yy2arr4280 {
				r.EncodeArrayStart(4)
			} else {
				yynn4280 = 1
				for _, b := range yyq4280 {
					if b {
						yynn4280++
					}
				}
				r.EncodeMapStart(yynn4280)
				yynn4280 = 0
			}
			if yyr4280 || yy2arr4280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4280[0] {
					yym4282 := z.EncBinary()
					_ = yym4282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4280[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4283 := z.EncBinary()
					_ = yym4283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4280 || yy2arr4280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4280[1] {
					yym4285 := z.EncBinary()
					_ = yym4285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4280[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4286 := z.EncBinary()
					_ = yym4286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4280 || yy2arr4280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4280[2] {
					yy4288 := &x.ListMeta
					yym4289 := z.EncBinary()
					_ = yym4289
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4288) {
					} else {
						z.EncFallback(yy4288)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4280[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4290 := &x.ListMeta
					yym4291 := z.EncBinary()
					_ = yym4291
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4290) {
					} else {
						z.EncFallback(yy4290)
					}
				}
			}
			if yyr4280 || yy2arr4280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4293 := z.EncBinary()
					_ = yym4293
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4294 := z.EncBinary()
					_ = yym4294
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4280 || yy2arr4280 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4295 := z.DecBinary()
	_ = yym4295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4296 := r.ContainerType()
		if yyct4296 == codecSelferValueTypeMap1234 {
			yyl4296 := r.ReadMapStart()
			if yyl4296 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4296, d)
			}
		} else if yyct4296 == codecSelferValueTypeArray1234 {
			yyl4296 := r.ReadArrayStart()
			if yyl4296 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4296, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4297Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4297Slc
	var yyhl4297 bool = l >= 0
	for yyj4297 := 0; ; yyj4297++ {
		if yyhl4297 {
			if yyj4297 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4297Slc = r.DecodeBytes(yys4297Slc, true, true)
		yys4297 := string(yys4297Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4297 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4300 := &x.ListMeta
				yym4301 := z.DecBinary()
				_ = yym4301
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4300) {
				} else {
					z.DecFallback(yyv4300, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4302 := &x.Items
				yym4303 := z.DecBinary()
				_ = yym4303
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4302), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4297)
		} // end switch yys4297
	} // end for yyj4297
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4304 int
	var yyb4304 bool
	var yyhl4304 bool = l >= 0
	yyj4304++
	if yyhl4304 {
		yyb4304 = yyj4304 > l
	} else {
		yyb4304 = r.CheckBreak()
	}
	if yyb4304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4304++
	if yyhl4304 {
		yyb4304 = yyj4304 > l
	} else {
		yyb4304 = r.CheckBreak()
	}
	if yyb4304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4304++
	if yyhl4304 {
		yyb4304 = yyj4304 > l
	} else {
		yyb4304 = r.CheckBreak()
	}
	if yyb4304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4307 := &x.ListMeta
		yym4308 := z.DecBinary()
		_ = yym4308
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4307) {
		} else {
			z.DecFallback(yyv4307, false)
		}
	}
	yyj4304++
	if yyhl4304 {
		yyb4304 = yyj4304 > l
	} else {
		yyb4304 = r.CheckBreak()
	}
	if yyb4304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4309 := &x.Items
		yym4310 := z.DecBinary()
		_ = yym4310
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4309), d)
		}
	}
	for {
		yyj4304++
		if yyhl4304 {
			yyb4304 = yyj4304 > l
		} else {
			yyb4304 = r.CheckBreak()
		}
		if yyb4304 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4304-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4311 := z.EncBinary()
		_ = yym4311
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4312 := !z.EncBinary()
			yy2arr4312 := z.EncBasicHandle().StructToArray
			var yyq4312 [4]bool
			_, _, _ = yysep4312, yyq4312, yy2arr4312
			const yyr4312 bool = false
			yyq4312[0] = x.Kind != ""
			yyq4312[1] = x.APIVersion != ""
			yyq4312[2] = true
			yyq4312[3] = len(x.Data) != 0
			var yynn4312 int
			if yyr4312 || yy2arr4312 {
				r.EncodeArrayStart(4)
			} else {
				yynn4312 = 0
				for _, b := range yyq4312 {
					if b {
						yynn4312++
					}
				}
				r.EncodeMapStart(yynn4312)
				yynn4312 = 0
			}
			if yyr4312 || yy2arr4312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4312[0] {
					yym4314 := z.EncBinary()
					_ = yym4314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4312[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4315 := z.EncBinary()
					_ = yym4315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4312 || yy2arr4312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4312[1] {
					yym4317 := z.EncBinary()
					_ = yym4317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4312[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4318 := z.EncBinary()
					_ = yym4318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4312 || yy2arr4312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4312[2] {
					yy4320 := &x.ObjectMeta
					yy4320.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4312[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4321 := &x.ObjectMeta
					yy4321.CodecEncodeSelf(e)
				}
			}
			if yyr4312 || yy2arr4312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4312[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4323 := z.EncBinary()
						_ = yym4323
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4312[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4324 := z.EncBinary()
						_ = yym4324
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4312 || yy2arr4312 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4325 := z.DecBinary()
	_ = yym4325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4326 := r.ContainerType()
		if yyct4326 == codecSelferValueTypeMap1234 {
			yyl4326 := r.ReadMapStart()
			if yyl4326 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4326, d)
			}
		} else if yyct4326 == codecSelferValueTypeArray1234 {
			yyl4326 := r.ReadArrayStart()
			if yyl4326 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4326, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4327Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4327Slc
	var yyhl4327 bool = l >= 0
	for yyj4327 := 0; ; yyj4327++ {
		if yyhl4327 {
			if yyj4327 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4327Slc = r.DecodeBytes(yys4327Slc, true, true)
		yys4327 := string(yys4327Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4327 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4330 := &x.ObjectMeta
				yyv4330.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4331 := &x.Data
				yym4332 := z.DecBinary()
				_ = yym4332
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4331, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4327)
		} // end switch yys4327
	} // end for yyj4327
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4333 int
	var yyb4333 bool
	var yyhl4333 bool = l >= 0
	yyj4333++
	if yyhl4333 {
		yyb4333 = yyj4333 > l
	} else {
		yyb4333 = r.CheckBreak()
	}
	if yyb4333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4333++
	if yyhl4333 {
		yyb4333 = yyj4333 > l
	} else {
		yyb4333 = r.CheckBreak()
	}
	if yyb4333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4333++
	if yyhl4333 {
		yyb4333 = yyj4333 > l
	} else {
		yyb4333 = r.CheckBreak()
	}
	if yyb4333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4336 := &x.ObjectMeta
		yyv4336.CodecDecodeSelf(d)
	}
	yyj4333++
	if yyhl4333 {
		yyb4333 = yyj4333 > l
	} else {
		yyb4333 = r.CheckBreak()
	}
	if yyb4333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4337 := &x.Data
		yym4338 := z.DecBinary()
		_ = yym4338
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4337, false, d)
		}
	}
	for {
		yyj4333++
		if yyhl4333 {
			yyb4333 = yyj4333 > l
		} else {
			yyb4333 = r.CheckBreak()
		}
		if yyb4333 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4333-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4339 := z.EncBinary()
		_ = yym4339
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4340 := !z.EncBinary()
			yy2arr4340 := z.EncBasicHandle().StructToArray
			var yyq4340 [4]bool
			_, _, _ = yysep4340, yyq4340, yy2arr4340
			const yyr4340 bool = false
			yyq4340[0] = x.Kind != ""
			yyq4340[1] = x.APIVersion != ""
			yyq4340[2] = true
			var yynn4340 int
			if yyr4340 || yy2arr4340 {
				r.EncodeArrayStart(4)
			} else {
				yynn4340 = 1
				for _, b := range yyq4340 {
					if b {
						yynn4340++
					}
				}
				r.EncodeMapStart(yynn4340)
				yynn4340 = 0
			}
			if yyr4340 || yy2arr4340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4340[0] {
					yym4342 := z.EncBinary()
					_ = yym4342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4340[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4343 := z.EncBinary()
					_ = yym4343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4340 || yy2arr4340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4340[1] {
					yym4345 := z.EncBinary()
					_ = yym4345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4340[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4346 := z.EncBinary()
					_ = yym4346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4340 || yy2arr4340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4340[2] {
					yy4348 := &x.ListMeta
					yym4349 := z.EncBinary()
					_ = yym4349
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4348) {
					} else {
						z.EncFallback(yy4348)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4340[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4350 := &x.ListMeta
					yym4351 := z.EncBinary()
					_ = yym4351
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4350) {
					} else {
						z.EncFallback(yy4350)
					}
				}
			}
			if yyr4340 || yy2arr4340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4353 := z.EncBinary()
					_ = yym4353
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4354 := z.EncBinary()
					_ = yym4354
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4340 || yy2arr4340 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4355 := z.DecBinary()
	_ = yym4355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4356 := r.ContainerType()
		if yyct4356 == codecSelferValueTypeMap1234 {
			yyl4356 := r.ReadMapStart()
			if yyl4356 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4356, d)
			}
		} else if yyct4356 == codecSelferValueTypeArray1234 {
			yyl4356 := r.ReadArrayStart()
			if yyl4356 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4356, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4357Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4357Slc
	var yyhl4357 bool = l >= 0
	for yyj4357 := 0; ; yyj4357++ {
		if yyhl4357 {
			if yyj4357 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4357Slc = r.DecodeBytes(yys4357Slc, true, true)
		yys4357 := string(yys4357Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4357 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4360 := &x.ListMeta
				yym4361 := z.DecBinary()
				_ = yym4361
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4360) {
				} else {
					z.DecFallback(yyv4360, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4362 := &x.Items
				yym4363 := z.DecBinary()
				_ = yym4363
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4362), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4357)
		} // end switch yys4357
	} // end for yyj4357
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4364 int
	var yyb4364 bool
	var yyhl4364 bool = l >= 0
	yyj4364++
	if yyhl4364 {
		yyb4364 = yyj4364 > l
	} else {
		yyb4364 = r.CheckBreak()
	}
	if yyb4364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4364++
	if yyhl4364 {
		yyb4364 = yyj4364 > l
	} else {
		yyb4364 = r.CheckBreak()
	}
	if yyb4364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4364++
	if yyhl4364 {
		yyb4364 = yyj4364 > l
	} else {
		yyb4364 = r.CheckBreak()
	}
	if yyb4364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4367 := &x.ListMeta
		yym4368 := z.DecBinary()
		_ = yym4368
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4367) {
		} else {
			z.DecFallback(yyv4367, false)
		}
	}
	yyj4364++
	if yyhl4364 {
		yyb4364 = yyj4364 > l
	} else {
		yyb4364 = r.CheckBreak()
	}
	if yyb4364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4369 := &x.Items
		yym4370 := z.DecBinary()
		_ = yym4370
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4369), d)
		}
	}
	for {
		yyj4364++
		if yyhl4364 {
			yyb4364 = yyj4364 > l
		} else {
			yyb4364 = r.CheckBreak()
		}
		if yyb4364 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4364-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4371 := z.EncBinary()
	_ = yym4371
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4372 := z.DecBinary()
	_ = yym4372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4373 := z.EncBinary()
	_ = yym4373
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4374 := z.DecBinary()
	_ = yym4374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4375 := z.EncBinary()
		_ = yym4375
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4376 := !z.EncBinary()
			yy2arr4376 := z.EncBasicHandle().StructToArray
			var yyq4376 [4]bool
			_, _, _ = yysep4376, yyq4376, yy2arr4376
			const yyr4376 bool = false
			yyq4376[2] = x.Message != ""
			yyq4376[3] = x.Error != ""
			var yynn4376 int
			if yyr4376 || yy2arr4376 {
				r.EncodeArrayStart(4)
			} else {
				yynn4376 = 2
				for _, b := range yyq4376 {
					if b {
						yynn4376++
					}
				}
				r.EncodeMapStart(yynn4376)
				yynn4376 = 0
			}
			if yyr4376 || yy2arr4376 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4376 || yy2arr4376 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4376 || yy2arr4376 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4376[2] {
					yym4380 := z.EncBinary()
					_ = yym4380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4376[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4381 := z.EncBinary()
					_ = yym4381
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4376 || yy2arr4376 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4376[3] {
					yym4383 := z.EncBinary()
					_ = yym4383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4376[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4384 := z.EncBinary()
					_ = yym4384
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4376 || yy2arr4376 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4385 := z.DecBinary()
	_ = yym4385
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4386 := r.ContainerType()
		if yyct4386 == codecSelferValueTypeMap1234 {
			yyl4386 := r.ReadMapStart()
			if yyl4386 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4386, d)
			}
		} else if yyct4386 == codecSelferValueTypeArray1234 {
			yyl4386 := r.ReadArrayStart()
			if yyl4386 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4386, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4387Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4387Slc
	var yyhl4387 bool = l >= 0
	for yyj4387 := 0; ; yyj4387++ {
		if yyhl4387 {
			if yyj4387 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4387Slc = r.DecodeBytes(yys4387Slc, true, true)
		yys4387 := string(yys4387Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4387 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4387)
		} // end switch yys4387
	} // end for yyj4387
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4392 int
	var yyb4392 bool
	var yyhl4392 bool = l >= 0
	yyj4392++
	if yyhl4392 {
		yyb4392 = yyj4392 > l
	} else {
		yyb4392 = r.CheckBreak()
	}
	if yyb4392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4392++
	if yyhl4392 {
		yyb4392 = yyj4392 > l
	} else {
		yyb4392 = r.CheckBreak()
	}
	if yyb4392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4392++
	if yyhl4392 {
		yyb4392 = yyj4392 > l
	} else {
		yyb4392 = r.CheckBreak()
	}
	if yyb4392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4392++
	if yyhl4392 {
		yyb4392 = yyj4392 > l
	} else {
		yyb4392 = r.CheckBreak()
	}
	if yyb4392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4392++
		if yyhl4392 {
			yyb4392 = yyj4392 > l
		} else {
			yyb4392 = r.CheckBreak()
		}
		if yyb4392 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4392-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4397 := z.EncBinary()
		_ = yym4397
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4398 := !z.EncBinary()
			yy2arr4398 := z.EncBasicHandle().StructToArray
			var yyq4398 [4]bool
			_, _, _ = yysep4398, yyq4398, yy2arr4398
			const yyr4398 bool = false
			yyq4398[0] = x.Kind != ""
			yyq4398[1] = x.APIVersion != ""
			yyq4398[2] = true
			yyq4398[3] = len(x.Conditions) != 0
			var yynn4398 int
			if yyr4398 || yy2arr4398 {
				r.EncodeArrayStart(4)
			} else {
				yynn4398 = 0
				for _, b := range yyq4398 {
					if b {
						yynn4398++
					}
				}
				r.EncodeMapStart(yynn4398)
				yynn4398 = 0
			}
			if yyr4398 || yy2arr4398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4398[0] {
					yym4400 := z.EncBinary()
					_ = yym4400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4398[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4401 := z.EncBinary()
					_ = yym4401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4398 || yy2arr4398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4398[1] {
					yym4403 := z.EncBinary()
					_ = yym4403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4398[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4404 := z.EncBinary()
					_ = yym4404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4398 || yy2arr4398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4398[2] {
					yy4406 := &x.ObjectMeta
					yy4406.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4398[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4407 := &x.ObjectMeta
					yy4407.CodecEncodeSelf(e)
				}
			}
			if yyr4398 || yy2arr4398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4398[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4409 := z.EncBinary()
						_ = yym4409
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4398[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4410 := z.EncBinary()
						_ = yym4410
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4398 || yy2arr4398 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4411 := z.DecBinary()
	_ = yym4411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4412 := r.ContainerType()
		if yyct4412 == codecSelferValueTypeMap1234 {
			yyl4412 := r.ReadMapStart()
			if yyl4412 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4412, d)
			}
		} else if yyct4412 == codecSelferValueTypeArray1234 {
			yyl4412 := r.ReadArrayStart()
			if yyl4412 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4412, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4413Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4413Slc
	var yyhl4413 bool = l >= 0
	for yyj4413 := 0; ; yyj4413++ {
		if yyhl4413 {
			if yyj4413 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4413Slc = r.DecodeBytes(yys4413Slc, true, true)
		yys4413 := string(yys4413Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4413 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4416 := &x.ObjectMeta
				yyv4416.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4417 := &x.Conditions
				yym4418 := z.DecBinary()
				_ = yym4418
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4417), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4413)
		} // end switch yys4413
	} // end for yyj4413
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4419 int
	var yyb4419 bool
	var yyhl4419 bool = l >= 0
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4422 := &x.ObjectMeta
		yyv4422.CodecDecodeSelf(d)
	}
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4423 := &x.Conditions
		yym4424 := z.DecBinary()
		_ = yym4424
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4423), d)
		}
	}
	for {
		yyj4419++
		if yyhl4419 {
			yyb4419 = yyj4419 > l
		} else {
			yyb4419 = r.CheckBreak()
		}
		if yyb4419 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4419-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4425 := z.EncBinary()
		_ = yym4425
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4426 := !z.EncBinary()
			yy2arr4426 := z.EncBasicHandle().StructToArray
			var yyq4426 [4]bool
			_, _, _ = yysep4426, yyq4426, yy2arr4426
			const yyr4426 bool = false
			yyq4426[0] = x.Kind != ""
			yyq4426[1] = x.APIVersion != ""
			yyq4426[2] = true
			var yynn4426 int
			if yyr4426 || yy2arr4426 {
				r.EncodeArrayStart(4)
			} else {
				yynn4426 = 1
				for _, b := range yyq4426 {
					if b {
						yynn4426++
					}
				}
				r.EncodeMapStart(yynn4426)
				yynn4426 = 0
			}
			if yyr4426 || yy2arr4426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4426[0] {
					yym4428 := z.EncBinary()
					_ = yym4428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4426[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4429 := z.EncBinary()
					_ = yym4429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4426 || yy2arr4426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4426[1] {
					yym4431 := z.EncBinary()
					_ = yym4431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4426[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4432 := z.EncBinary()
					_ = yym4432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4426 || yy2arr4426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4426[2] {
					yy4434 := &x.ListMeta
					yym4435 := z.EncBinary()
					_ = yym4435
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4434) {
					} else {
						z.EncFallback(yy4434)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4426[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4436 := &x.ListMeta
					yym4437 := z.EncBinary()
					_ = yym4437
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4436) {
					} else {
						z.EncFallback(yy4436)
					}
				}
			}
			if yyr4426 || yy2arr4426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4439 := z.EncBinary()
					_ = yym4439
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4440 := z.EncBinary()
					_ = yym4440
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4426 || yy2arr4426 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4441 := z.DecBinary()
	_ = yym4441
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4442 := r.ContainerType()
		if yyct4442 == codecSelferValueTypeMap1234 {
			yyl4442 := r.ReadMapStart()
			if yyl4442 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4442, d)
			}
		} else if yyct4442 == codecSelferValueTypeArray1234 {
			yyl4442 := r.ReadArrayStart()
			if yyl4442 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4442, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4443Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4443Slc
	var yyhl4443 bool = l >= 0
	for yyj4443 := 0; ; yyj4443++ {
		if yyhl4443 {
			if yyj4443 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4443Slc = r.DecodeBytes(yys4443Slc, true, true)
		yys4443 := string(yys4443Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4443 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4446 := &x.ListMeta
				yym4447 := z.DecBinary()
				_ = yym4447
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4446) {
				} else {
					z.DecFallback(yyv4446, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4448 := &x.Items
				yym4449 := z.DecBinary()
				_ = yym4449
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4448), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4443)
		} // end switch yys4443
	} // end for yyj4443
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4450 int
	var yyb4450 bool
	var yyhl4450 bool = l >= 0
	yyj4450++
	if yyhl4450 {
		yyb4450 = yyj4450 > l
	} else {
		yyb4450 = r.CheckBreak()
	}
	if yyb4450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4450++
	if yyhl4450 {
		yyb4450 = yyj4450 > l
	} else {
		yyb4450 = r.CheckBreak()
	}
	if yyb4450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4450++
	if yyhl4450 {
		yyb4450 = yyj4450 > l
	} else {
		yyb4450 = r.CheckBreak()
	}
	if yyb4450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4453 := &x.ListMeta
		yym4454 := z.DecBinary()
		_ = yym4454
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4453) {
		} else {
			z.DecFallback(yyv4453, false)
		}
	}
	yyj4450++
	if yyhl4450 {
		yyb4450 = yyj4450 > l
	} else {
		yyb4450 = r.CheckBreak()
	}
	if yyb4450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4455 := &x.Items
		yym4456 := z.DecBinary()
		_ = yym4456
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4455), d)
		}
	}
	for {
		yyj4450++
		if yyhl4450 {
			yyb4450 = yyj4450 > l
		} else {
			yyb4450 = r.CheckBreak()
		}
		if yyb4450 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4450-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4457 := z.EncBinary()
		_ = yym4457
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4458 := !z.EncBinary()
			yy2arr4458 := z.EncBasicHandle().StructToArray
			var yyq4458 [6]bool
			_, _, _ = yysep4458, yyq4458, yy2arr4458
			const yyr4458 bool = false
			yyq4458[0] = x.Capabilities != nil
			yyq4458[1] = x.Privileged != nil
			yyq4458[2] = x.SELinuxOptions != nil
			yyq4458[3] = x.RunAsUser != nil
			yyq4458[4] = x.RunAsNonRoot != nil
			yyq4458[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4458 int
			if yyr4458 || yy2arr4458 {
				r.EncodeArrayStart(6)
			} else {
				yynn4458 = 0
				for _, b := range yyq4458 {
					if b {
						yynn4458++
					}
				}
				r.EncodeMapStart(yynn4458)
				yynn4458 = 0
			}
			if yyr4458 || yy2arr4458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4458[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4458[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4458 || yy2arr4458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4458[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4461 := *x.Privileged
						yym4462 := z.EncBinary()
						_ = yym4462
						if false {
						} else {
							r.EncodeBool(bool(yy4461))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4458[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4463 := *x.Privileged
						yym4464 := z.EncBinary()
						_ = yym4464
						if false {
						} else {
							r.EncodeBool(bool(yy4463))
						}
					}
				}
			}
			if yyr4458 || yy2arr4458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4458[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4458[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4458 || yy2arr4458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4458[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4467 := *x.RunAsUser
						yym4468 := z.EncBinary()
						_ = yym4468
						if false {
						} else {
							r.EncodeInt(int64(yy4467))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4458[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4469 := *x.RunAsUser
						yym4470 := z.EncBinary()
						_ = yym4470
						if false {
						} else {
							r.EncodeInt(int64(yy4469))
						}
					}
				}
			}
			if yyr4458 || yy2arr4458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4458[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4472 := *x.RunAsNonRoot
						yym4473 := z.EncBinary()
						_ = yym4473
						if false {
						} else {
							r.EncodeBool(bool(yy4472))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4458[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4474 := *x.RunAsNonRoot
						yym4475 := z.EncBinary()
						_ = yym4475
						if false {
						} else {
							r.EncodeBool(bool(yy4474))
						}
					}
				}
			}
			if yyr4458 || yy2arr4458 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4458[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4477 := *x.ReadOnlyRootFilesystem
						yym4478 := z.EncBinary()
						_ = yym4478
						if false {
						} else {
							r.EncodeBool(bool(yy4477))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4458[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4479 := *x.ReadOnlyRootFilesystem
						yym4480 := z.EncBinary()
						_ = yym4480
						if false {
						} else {
							r.EncodeBool(bool(yy4479))
						}
					}
				}
			}
			if yyr4458 || yy2arr4458 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4481 := z.DecBinary()
	_ = yym4481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4482 := r.ContainerType()
		if yyct4482 == codecSelferValueTypeMap1234 {
			yyl4482 := r.ReadMapStart()
			if yyl4482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4482, d)
			}
		} else if yyct4482 == codecSelferValueTypeArray1234 {
			yyl4482 := r.ReadArrayStart()
			if yyl4482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4483Slc
	var yyhl4483 bool = l >= 0
	for yyj4483 := 0; ; yyj4483++ {
		if yyhl4483 {
			if yyj4483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4483Slc = r.DecodeBytes(yys4483Slc, true, true)
		yys4483 := string(yys4483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4483 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4486 := z.DecBinary()
				_ = yym4486
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4489 := z.DecBinary()
				_ = yym4489
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4491 := z.DecBinary()
				_ = yym4491
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4493 := z.DecBinary()
				_ = yym4493
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4483)
		} // end switch yys4483
	} // end for yyj4483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4494 int
	var yyb4494 bool
	var yyhl4494 bool = l >= 0
	yyj4494++
	if yyhl4494 {
		yyb4494 = yyj4494 > l
	} else {
		yyb4494 = r.CheckBreak()
	}
	if yyb4494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4494++
	if yyhl4494 {
		yyb4494 = yyj4494 > l
	} else {
		yyb4494 = r.CheckBreak()
	}
	if yyb4494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4497 := z.DecBinary()
		_ = yym4497
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4494++
	if yyhl4494 {
		yyb4494 = yyj4494 > l
	} else {
		yyb4494 = r.CheckBreak()
	}
	if yyb4494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4494++
	if yyhl4494 {
		yyb4494 = yyj4494 > l
	} else {
		yyb4494 = r.CheckBreak()
	}
	if yyb4494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4500 := z.DecBinary()
		_ = yym4500
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4494++
	if yyhl4494 {
		yyb4494 = yyj4494 > l
	} else {
		yyb4494 = r.CheckBreak()
	}
	if yyb4494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4502 := z.DecBinary()
		_ = yym4502
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4494++
	if yyhl4494 {
		yyb4494 = yyj4494 > l
	} else {
		yyb4494 = r.CheckBreak()
	}
	if yyb4494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4504 := z.DecBinary()
		_ = yym4504
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4494++
		if yyhl4494 {
			yyb4494 = yyj4494 > l
		} else {
			yyb4494 = r.CheckBreak()
		}
		if yyb4494 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4494-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4505 := z.EncBinary()
		_ = yym4505
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4506 := !z.EncBinary()
			yy2arr4506 := z.EncBasicHandle().StructToArray
			var yyq4506 [4]bool
			_, _, _ = yysep4506, yyq4506, yy2arr4506
			const yyr4506 bool = false
			yyq4506[0] = x.User != ""
			yyq4506[1] = x.Role != ""
			yyq4506[2] = x.Type != ""
			yyq4506[3] = x.Level != ""
			var yynn4506 int
			if yyr4506 || yy2arr4506 {
				r.EncodeArrayStart(4)
			} else {
				yynn4506 = 0
				for _, b := range yyq4506 {
					if b {
						yynn4506++
					}
				}
				r.EncodeMapStart(yynn4506)
				yynn4506 = 0
			}
			if yyr4506 || yy2arr4506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4506[0] {
					yym4508 := z.EncBinary()
					_ = yym4508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4506[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4509 := z.EncBinary()
					_ = yym4509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4506 || yy2arr4506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4506[1] {
					yym4511 := z.EncBinary()
					_ = yym4511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4506[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4512 := z.EncBinary()
					_ = yym4512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4506 || yy2arr4506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4506[2] {
					yym4514 := z.EncBinary()
					_ = yym4514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4506[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4515 := z.EncBinary()
					_ = yym4515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4506 || yy2arr4506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4506[3] {
					yym4517 := z.EncBinary()
					_ = yym4517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4506[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4518 := z.EncBinary()
					_ = yym4518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4506 || yy2arr4506 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4519 := z.DecBinary()
	_ = yym4519
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4520 := r.ContainerType()
		if yyct4520 == codecSelferValueTypeMap1234 {
			yyl4520 := r.ReadMapStart()
			if yyl4520 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4520, d)
			}
		} else if yyct4520 == codecSelferValueTypeArray1234 {
			yyl4520 := r.ReadArrayStart()
			if yyl4520 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4520, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4521Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4521Slc
	var yyhl4521 bool = l >= 0
	for yyj4521 := 0; ; yyj4521++ {
		if yyhl4521 {
			if yyj4521 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4521Slc = r.DecodeBytes(yys4521Slc, true, true)
		yys4521 := string(yys4521Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4521 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4521)
		} // end switch yys4521
	} // end for yyj4521
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4526 int
	var yyb4526 bool
	var yyhl4526 bool = l >= 0
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4526++
		if yyhl4526 {
			yyb4526 = yyj4526 > l
		} else {
			yyb4526 = r.CheckBreak()
		}
		if yyb4526 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4526-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4531 := z.EncBinary()
		_ = yym4531
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4532 := !z.EncBinary()
			yy2arr4532 := z.EncBasicHandle().StructToArray
			var yyq4532 [5]bool
			_, _, _ = yysep4532, yyq4532, yy2arr4532
			const yyr4532 bool = false
			yyq4532[0] = x.Kind != ""
			yyq4532[1] = x.APIVersion != ""
			yyq4532[2] = true
			var yynn4532 int
			if yyr4532 || yy2arr4532 {
				r.EncodeArrayStart(5)
			} else {
				yynn4532 = 2
				for _, b := range yyq4532 {
					if b {
						yynn4532++
					}
				}
				r.EncodeMapStart(yynn4532)
				yynn4532 = 0
			}
			if yyr4532 || yy2arr4532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4532[0] {
					yym4534 := z.EncBinary()
					_ = yym4534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4532[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4535 := z.EncBinary()
					_ = yym4535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4532 || yy2arr4532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4532[1] {
					yym4537 := z.EncBinary()
					_ = yym4537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4532[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4538 := z.EncBinary()
					_ = yym4538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4532 || yy2arr4532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4532[2] {
					yy4540 := &x.ObjectMeta
					yy4540.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4532[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4541 := &x.ObjectMeta
					yy4541.CodecEncodeSelf(e)
				}
			}
			if yyr4532 || yy2arr4532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4543 := z.EncBinary()
				_ = yym4543
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4544 := z.EncBinary()
				_ = yym4544
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4532 || yy2arr4532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4546 := z.EncBinary()
					_ = yym4546
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4547 := z.EncBinary()
					_ = yym4547
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4532 || yy2arr4532 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4548 := z.DecBinary()
	_ = yym4548
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4549 := r.ContainerType()
		if yyct4549 == codecSelferValueTypeMap1234 {
			yyl4549 := r.ReadMapStart()
			if yyl4549 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4549, d)
			}
		} else if yyct4549 == codecSelferValueTypeArray1234 {
			yyl4549 := r.ReadArrayStart()
			if yyl4549 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4549, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4550Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4550Slc
	var yyhl4550 bool = l >= 0
	for yyj4550 := 0; ; yyj4550++ {
		if yyhl4550 {
			if yyj4550 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4550Slc = r.DecodeBytes(yys4550Slc, true, true)
		yys4550 := string(yys4550Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4550 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4553 := &x.ObjectMeta
				yyv4553.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4555 := &x.Data
				yym4556 := z.DecBinary()
				_ = yym4556
				if false {
				} else {
					*yyv4555 = r.DecodeBytes(*(*[]byte)(yyv4555), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4550)
		} // end switch yys4550
	} // end for yyj4550
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4557 int
	var yyb4557 bool
	var yyhl4557 bool = l >= 0
	yyj4557++
	if yyhl4557 {
		yyb4557 = yyj4557 > l
	} else {
		yyb4557 = r.CheckBreak()
	}
	if yyb4557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4557++
	if yyhl4557 {
		yyb4557 = yyj4557 > l
	} else {
		yyb4557 = r.CheckBreak()
	}
	if yyb4557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4557++
	if yyhl4557 {
		yyb4557 = yyj4557 > l
	} else {
		yyb4557 = r.CheckBreak()
	}
	if yyb4557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4560 := &x.ObjectMeta
		yyv4560.CodecDecodeSelf(d)
	}
	yyj4557++
	if yyhl4557 {
		yyb4557 = yyj4557 > l
	} else {
		yyb4557 = r.CheckBreak()
	}
	if yyb4557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4557++
	if yyhl4557 {
		yyb4557 = yyj4557 > l
	} else {
		yyb4557 = r.CheckBreak()
	}
	if yyb4557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4562 := &x.Data
		yym4563 := z.DecBinary()
		_ = yym4563
		if false {
		} else {
			*yyv4562 = r.DecodeBytes(*(*[]byte)(yyv4562), false, false)
		}
	}
	for {
		yyj4557++
		if yyhl4557 {
			yyb4557 = yyj4557 > l
		} else {
			yyb4557 = r.CheckBreak()
		}
		if yyb4557 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4557-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4564 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4565 := &yyv4564
		yy4565.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4566 := *v
	yyh4566, yyl4566 := z.DecSliceHelperStart()
	var yyc4566 bool
	if yyl4566 == 0 {
		if yyv4566 == nil {
			yyv4566 = []OwnerReference{}
			yyc4566 = true
		} else if len(yyv4566) != 0 {
			yyv4566 = yyv4566[:0]
			yyc4566 = true
		}
	} else if yyl4566 > 0 {
		var yyrr4566, yyrl4566 int
		var yyrt4566 bool
		if yyl4566 > cap(yyv4566) {

			yyrg4566 := len(yyv4566) > 0
			yyv24566 := yyv4566
			yyrl4566, yyrt4566 = z.DecInferLen(yyl4566, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4566 {
				if yyrl4566 <= cap(yyv4566) {
					yyv4566 = yyv4566[:yyrl4566]
				} else {
					yyv4566 = make([]OwnerReference, yyrl4566)
				}
			} else {
				yyv4566 = make([]OwnerReference, yyrl4566)
			}
			yyc4566 = true
			yyrr4566 = len(yyv4566)
			if yyrg4566 {
				copy(yyv4566, yyv24566)
			}
		} else if yyl4566 != len(yyv4566) {
			yyv4566 = yyv4566[:yyl4566]
			yyc4566 = true
		}
		yyj4566 := 0
		for ; yyj4566 < yyrr4566; yyj4566++ {
			yyh4566.ElemContainerState(yyj4566)
			if r.TryDecodeAsNil() {
				yyv4566[yyj4566] = OwnerReference{}
			} else {
				yyv4567 := &yyv4566[yyj4566]
				yyv4567.CodecDecodeSelf(d)
			}

		}
		if yyrt4566 {
			for ; yyj4566 < yyl4566; yyj4566++ {
				yyv4566 = append(yyv4566, OwnerReference{})
				yyh4566.ElemContainerState(yyj4566)
				if r.TryDecodeAsNil() {
					yyv4566[yyj4566] = OwnerReference{}
				} else {
					yyv4568 := &yyv4566[yyj4566]
					yyv4568.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4566 := 0
		for ; !r.CheckBreak(); yyj4566++ {

			if yyj4566 >= len(yyv4566) {
				yyv4566 = append(yyv4566, OwnerReference{}) // var yyz4566 OwnerReference
				yyc4566 = true
			}
			yyh4566.ElemContainerState(yyj4566)
			if yyj4566 < len(yyv4566) {
				if r.TryDecodeAsNil() {
					yyv4566[yyj4566] = OwnerReference{}
				} else {
					yyv4569 := &yyv4566[yyj4566]
					yyv4569.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4566 < len(yyv4566) {
			yyv4566 = yyv4566[:yyj4566]
			yyc4566 = true
		} else if yyj4566 == 0 && yyv4566 == nil {
			yyv4566 = []OwnerReference{}
			yyc4566 = true
		}
	}
	yyh4566.End()
	if yyc4566 {
		*v = yyv4566
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4570 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4570.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4571 := *v
	yyh4571, yyl4571 := z.DecSliceHelperStart()
	var yyc4571 bool
	if yyl4571 == 0 {
		if yyv4571 == nil {
			yyv4571 = []PersistentVolumeAccessMode{}
			yyc4571 = true
		} else if len(yyv4571) != 0 {
			yyv4571 = yyv4571[:0]
			yyc4571 = true
		}
	} else if yyl4571 > 0 {
		var yyrr4571, yyrl4571 int
		var yyrt4571 bool
		if yyl4571 > cap(yyv4571) {

			yyrl4571, yyrt4571 = z.DecInferLen(yyl4571, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4571 {
				if yyrl4571 <= cap(yyv4571) {
					yyv4571 = yyv4571[:yyrl4571]
				} else {
					yyv4571 = make([]PersistentVolumeAccessMode, yyrl4571)
				}
			} else {
				yyv4571 = make([]PersistentVolumeAccessMode, yyrl4571)
			}
			yyc4571 = true
			yyrr4571 = len(yyv4571)
		} else if yyl4571 != len(yyv4571) {
			yyv4571 = yyv4571[:yyl4571]
			yyc4571 = true
		}
		yyj4571 := 0
		for ; yyj4571 < yyrr4571; yyj4571++ {
			yyh4571.ElemContainerState(yyj4571)
			if r.TryDecodeAsNil() {
				yyv4571[yyj4571] = ""
			} else {
				yyv4571[yyj4571] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4571 {
			for ; yyj4571 < yyl4571; yyj4571++ {
				yyv4571 = append(yyv4571, "")
				yyh4571.ElemContainerState(yyj4571)
				if r.TryDecodeAsNil() {
					yyv4571[yyj4571] = ""
				} else {
					yyv4571[yyj4571] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4571 := 0
		for ; !r.CheckBreak(); yyj4571++ {

			if yyj4571 >= len(yyv4571) {
				yyv4571 = append(yyv4571, "") // var yyz4571 PersistentVolumeAccessMode
				yyc4571 = true
			}
			yyh4571.ElemContainerState(yyj4571)
			if yyj4571 < len(yyv4571) {
				if r.TryDecodeAsNil() {
					yyv4571[yyj4571] = ""
				} else {
					yyv4571[yyj4571] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4571 < len(yyv4571) {
			yyv4571 = yyv4571[:yyj4571]
			yyc4571 = true
		} else if yyj4571 == 0 && yyv4571 == nil {
			yyv4571 = []PersistentVolumeAccessMode{}
			yyc4571 = true
		}
	}
	yyh4571.End()
	if yyc4571 {
		*v = yyv4571
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4575 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4576 := &yyv4575
		yy4576.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4577 := *v
	yyh4577, yyl4577 := z.DecSliceHelperStart()
	var yyc4577 bool
	if yyl4577 == 0 {
		if yyv4577 == nil {
			yyv4577 = []PersistentVolume{}
			yyc4577 = true
		} else if len(yyv4577) != 0 {
			yyv4577 = yyv4577[:0]
			yyc4577 = true
		}
	} else if yyl4577 > 0 {
		var yyrr4577, yyrl4577 int
		var yyrt4577 bool
		if yyl4577 > cap(yyv4577) {

			yyrg4577 := len(yyv4577) > 0
			yyv24577 := yyv4577
			yyrl4577, yyrt4577 = z.DecInferLen(yyl4577, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt4577 {
				if yyrl4577 <= cap(yyv4577) {
					yyv4577 = yyv4577[:yyrl4577]
				} else {
					yyv4577 = make([]PersistentVolume, yyrl4577)
				}
			} else {
				yyv4577 = make([]PersistentVolume, yyrl4577)
			}
			yyc4577 = true
			yyrr4577 = len(yyv4577)
			if yyrg4577 {
				copy(yyv4577, yyv24577)
			}
		} else if yyl4577 != len(yyv4577) {
			yyv4577 = yyv4577[:yyl4577]
			yyc4577 = true
		}
		yyj4577 := 0
		for ; yyj4577 < yyrr4577; yyj4577++ {
			yyh4577.ElemContainerState(yyj4577)
			if r.TryDecodeAsNil() {
				yyv4577[yyj4577] = PersistentVolume{}
			} else {
				yyv4578 := &yyv4577[yyj4577]
				yyv4578.CodecDecodeSelf(d)
			}

		}
		if yyrt4577 {
			for ; yyj4577 < yyl4577; yyj4577++ {
				yyv4577 = append(yyv4577, PersistentVolume{})
				yyh4577.ElemContainerState(yyj4577)
				if r.TryDecodeAsNil() {
					yyv4577[yyj4577] = PersistentVolume{}
				} else {
					yyv4579 := &yyv4577[yyj4577]
					yyv4579.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4577 := 0
		for ; !r.CheckBreak(); yyj4577++ {

			if yyj4577 >= len(yyv4577) {
				yyv4577 = append(yyv4577, PersistentVolume{}) // var yyz4577 PersistentVolume
				yyc4577 = true
			}
			yyh4577.ElemContainerState(yyj4577)
			if yyj4577 < len(yyv4577) {
				if r.TryDecodeAsNil() {
					yyv4577[yyj4577] = PersistentVolume{}
				} else {
					yyv4580 := &yyv4577[yyj4577]
					yyv4580.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4577 < len(yyv4577) {
			yyv4577 = yyv4577[:yyj4577]
			yyc4577 = true
		} else if yyj4577 == 0 && yyv4577 == nil {
			yyv4577 = []PersistentVolume{}
			yyc4577 = true
		}
	}
	yyh4577.End()
	if yyc4577 {
		*v = yyv4577
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4581 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4582 := &yyv4581
		yy4582.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4583 := *v
	yyh4583, yyl4583 := z.DecSliceHelperStart()
	var yyc4583 bool
	if yyl4583 == 0 {
		if yyv4583 == nil {
			yyv4583 = []PersistentVolumeClaim{}
			yyc4583 = true
		} else if len(yyv4583) != 0 {
			yyv4583 = yyv4583[:0]
			yyc4583 = true
		}
	} else if yyl4583 > 0 {
		var yyrr4583, yyrl4583 int
		var yyrt4583 bool
		if yyl4583 > cap(yyv4583) {

			yyrg4583 := len(yyv4583) > 0
			yyv24583 := yyv4583
			yyrl4583, yyrt4583 = z.DecInferLen(yyl4583, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4583 {
				if yyrl4583 <= cap(yyv4583) {
					yyv4583 = yyv4583[:yyrl4583]
				} else {
					yyv4583 = make([]PersistentVolumeClaim, yyrl4583)
				}
			} else {
				yyv4583 = make([]PersistentVolumeClaim, yyrl4583)
			}
			yyc4583 = true
			yyrr4583 = len(yyv4583)
			if yyrg4583 {
				copy(yyv4583, yyv24583)
			}
		} else if yyl4583 != len(yyv4583) {
			yyv4583 = yyv4583[:yyl4583]
			yyc4583 = true
		}
		yyj4583 := 0
		for ; yyj4583 < yyrr4583; yyj4583++ {
			yyh4583.ElemContainerState(yyj4583)
			if r.TryDecodeAsNil() {
				yyv4583[yyj4583] = PersistentVolumeClaim{}
			} else {
				yyv4584 := &yyv4583[yyj4583]
				yyv4584.CodecDecodeSelf(d)
			}

		}
		if yyrt4583 {
			for ; yyj4583 < yyl4583; yyj4583++ {
				yyv4583 = append(yyv4583, PersistentVolumeClaim{})
				yyh4583.ElemContainerState(yyj4583)
				if r.TryDecodeAsNil() {
					yyv4583[yyj4583] = PersistentVolumeClaim{}
				} else {
					yyv4585 := &yyv4583[yyj4583]
					yyv4585.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4583 := 0
		for ; !r.CheckBreak(); yyj4583++ {

			if yyj4583 >= len(yyv4583) {
				yyv4583 = append(yyv4583, PersistentVolumeClaim{}) // var yyz4583 PersistentVolumeClaim
				yyc4583 = true
			}
			yyh4583.ElemContainerState(yyj4583)
			if yyj4583 < len(yyv4583) {
				if r.TryDecodeAsNil() {
					yyv4583[yyj4583] = PersistentVolumeClaim{}
				} else {
					yyv4586 := &yyv4583[yyj4583]
					yyv4586.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4583 < len(yyv4583) {
			yyv4583 = yyv4583[:yyj4583]
			yyc4583 = true
		} else if yyj4583 == 0 && yyv4583 == nil {
			yyv4583 = []PersistentVolumeClaim{}
			yyc4583 = true
		}
	}
	yyh4583.End()
	if yyc4583 {
		*v = yyv4583
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4587 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4588 := &yyv4587
		yy4588.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4589 := *v
	yyh4589, yyl4589 := z.DecSliceHelperStart()
	var yyc4589 bool
	if yyl4589 == 0 {
		if yyv4589 == nil {
			yyv4589 = []KeyToPath{}
			yyc4589 = true
		} else if len(yyv4589) != 0 {
			yyv4589 = yyv4589[:0]
			yyc4589 = true
		}
	} else if yyl4589 > 0 {
		var yyrr4589, yyrl4589 int
		var yyrt4589 bool
		if yyl4589 > cap(yyv4589) {

			yyrg4589 := len(yyv4589) > 0
			yyv24589 := yyv4589
			yyrl4589, yyrt4589 = z.DecInferLen(yyl4589, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4589 {
				if yyrl4589 <= cap(yyv4589) {
					yyv4589 = yyv4589[:yyrl4589]
				} else {
					yyv4589 = make([]KeyToPath, yyrl4589)
				}
			} else {
				yyv4589 = make([]KeyToPath, yyrl4589)
			}
			yyc4589 = true
			yyrr4589 = len(yyv4589)
			if yyrg4589 {
				copy(yyv4589, yyv24589)
			}
		} else if yyl4589 != len(yyv4589) {
			yyv4589 = yyv4589[:yyl4589]
			yyc4589 = true
		}
		yyj4589 := 0
		for ; yyj4589 < yyrr4589; yyj4589++ {
			yyh4589.ElemContainerState(yyj4589)
			if r.TryDecodeAsNil() {
				yyv4589[yyj4589] = KeyToPath{}
			} else {
				yyv4590 := &yyv4589[yyj4589]
				yyv4590.CodecDecodeSelf(d)
			}

		}
		if yyrt4589 {
			for ; yyj4589 < yyl4589; yyj4589++ {
				yyv4589 = append(yyv4589, KeyToPath{})
				yyh4589.ElemContainerState(yyj4589)
				if r.TryDecodeAsNil() {
					yyv4589[yyj4589] = KeyToPath{}
				} else {
					yyv4591 := &yyv4589[yyj4589]
					yyv4591.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4589 := 0
		for ; !r.CheckBreak(); yyj4589++ {

			if yyj4589 >= len(yyv4589) {
				yyv4589 = append(yyv4589, KeyToPath{}) // var yyz4589 KeyToPath
				yyc4589 = true
			}
			yyh4589.ElemContainerState(yyj4589)
			if yyj4589 < len(yyv4589) {
				if r.TryDecodeAsNil() {
					yyv4589[yyj4589] = KeyToPath{}
				} else {
					yyv4592 := &yyv4589[yyj4589]
					yyv4592.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4589 < len(yyv4589) {
			yyv4589 = yyv4589[:yyj4589]
			yyc4589 = true
		} else if yyj4589 == 0 && yyv4589 == nil {
			yyv4589 = []KeyToPath{}
			yyc4589 = true
		}
	}
	yyh4589.End()
	if yyc4589 {
		*v = yyv4589
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4593 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4594 := &yyv4593
		yy4594.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4595 := *v
	yyh4595, yyl4595 := z.DecSliceHelperStart()
	var yyc4595 bool
	if yyl4595 == 0 {
		if yyv4595 == nil {
			yyv4595 = []DownwardAPIVolumeFile{}
			yyc4595 = true
		} else if len(yyv4595) != 0 {
			yyv4595 = yyv4595[:0]
			yyc4595 = true
		}
	} else if yyl4595 > 0 {
		var yyrr4595, yyrl4595 int
		var yyrt4595 bool
		if yyl4595 > cap(yyv4595) {

			yyrg4595 := len(yyv4595) > 0
			yyv24595 := yyv4595
			yyrl4595, yyrt4595 = z.DecInferLen(yyl4595, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4595 {
				if yyrl4595 <= cap(yyv4595) {
					yyv4595 = yyv4595[:yyrl4595]
				} else {
					yyv4595 = make([]DownwardAPIVolumeFile, yyrl4595)
				}
			} else {
				yyv4595 = make([]DownwardAPIVolumeFile, yyrl4595)
			}
			yyc4595 = true
			yyrr4595 = len(yyv4595)
			if yyrg4595 {
				copy(yyv4595, yyv24595)
			}
		} else if yyl4595 != len(yyv4595) {
			yyv4595 = yyv4595[:yyl4595]
			yyc4595 = true
		}
		yyj4595 := 0
		for ; yyj4595 < yyrr4595; yyj4595++ {
			yyh4595.ElemContainerState(yyj4595)
			if r.TryDecodeAsNil() {
				yyv4595[yyj4595] = DownwardAPIVolumeFile{}
			} else {
				yyv4596 := &yyv4595[yyj4595]
				yyv4596.CodecDecodeSelf(d)
			}

		}
		if yyrt4595 {
			for ; yyj4595 < yyl4595; yyj4595++ {
				yyv4595 = append(yyv4595, DownwardAPIVolumeFile{})
				yyh4595.ElemContainerState(yyj4595)
				if r.TryDecodeAsNil() {
					yyv4595[yyj4595] = DownwardAPIVolumeFile{}
				} else {
					yyv4597 := &yyv4595[yyj4595]
					yyv4597.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4595 := 0
		for ; !r.CheckBreak(); yyj4595++ {

			if yyj4595 >= len(yyv4595) {
				yyv4595 = append(yyv4595, DownwardAPIVolumeFile{}) // var yyz4595 DownwardAPIVolumeFile
				yyc4595 = true
			}
			yyh4595.ElemContainerState(yyj4595)
			if yyj4595 < len(yyv4595) {
				if r.TryDecodeAsNil() {
					yyv4595[yyj4595] = DownwardAPIVolumeFile{}
				} else {
					yyv4598 := &yyv4595[yyj4595]
					yyv4598.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4595 < len(yyv4595) {
			yyv4595 = yyv4595[:yyj4595]
			yyc4595 = true
		} else if yyj4595 == 0 && yyv4595 == nil {
			yyv4595 = []DownwardAPIVolumeFile{}
			yyc4595 = true
		}
	}
	yyh4595.End()
	if yyc4595 {
		*v = yyv4595
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4599 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4600 := &yyv4599
		yy4600.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4601 := *v
	yyh4601, yyl4601 := z.DecSliceHelperStart()
	var yyc4601 bool
	if yyl4601 == 0 {
		if yyv4601 == nil {
			yyv4601 = []HTTPHeader{}
			yyc4601 = true
		} else if len(yyv4601) != 0 {
			yyv4601 = yyv4601[:0]
			yyc4601 = true
		}
	} else if yyl4601 > 0 {
		var yyrr4601, yyrl4601 int
		var yyrt4601 bool
		if yyl4601 > cap(yyv4601) {

			yyrg4601 := len(yyv4601) > 0
			yyv24601 := yyv4601
			yyrl4601, yyrt4601 = z.DecInferLen(yyl4601, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4601 {
				if yyrl4601 <= cap(yyv4601) {
					yyv4601 = yyv4601[:yyrl4601]
				} else {
					yyv4601 = make([]HTTPHeader, yyrl4601)
				}
			} else {
				yyv4601 = make([]HTTPHeader, yyrl4601)
			}
			yyc4601 = true
			yyrr4601 = len(yyv4601)
			if yyrg4601 {
				copy(yyv4601, yyv24601)
			}
		} else if yyl4601 != len(yyv4601) {
			yyv4601 = yyv4601[:yyl4601]
			yyc4601 = true
		}
		yyj4601 := 0
		for ; yyj4601 < yyrr4601; yyj4601++ {
			yyh4601.ElemContainerState(yyj4601)
			if r.TryDecodeAsNil() {
				yyv4601[yyj4601] = HTTPHeader{}
			} else {
				yyv4602 := &yyv4601[yyj4601]
				yyv4602.CodecDecodeSelf(d)
			}

		}
		if yyrt4601 {
			for ; yyj4601 < yyl4601; yyj4601++ {
				yyv4601 = append(yyv4601, HTTPHeader{})
				yyh4601.ElemContainerState(yyj4601)
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = HTTPHeader{}
				} else {
					yyv4603 := &yyv4601[yyj4601]
					yyv4603.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4601 := 0
		for ; !r.CheckBreak(); yyj4601++ {

			if yyj4601 >= len(yyv4601) {
				yyv4601 = append(yyv4601, HTTPHeader{}) // var yyz4601 HTTPHeader
				yyc4601 = true
			}
			yyh4601.ElemContainerState(yyj4601)
			if yyj4601 < len(yyv4601) {
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = HTTPHeader{}
				} else {
					yyv4604 := &yyv4601[yyj4601]
					yyv4604.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4601 < len(yyv4601) {
			yyv4601 = yyv4601[:yyj4601]
			yyc4601 = true
		} else if yyj4601 == 0 && yyv4601 == nil {
			yyv4601 = []HTTPHeader{}
			yyc4601 = true
		}
	}
	yyh4601.End()
	if yyc4601 {
		*v = yyv4601
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4605 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4605.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4606 := *v
	yyh4606, yyl4606 := z.DecSliceHelperStart()
	var yyc4606 bool
	if yyl4606 == 0 {
		if yyv4606 == nil {
			yyv4606 = []Capability{}
			yyc4606 = true
		} else if len(yyv4606) != 0 {
			yyv4606 = yyv4606[:0]
			yyc4606 = true
		}
	} else if yyl4606 > 0 {
		var yyrr4606, yyrl4606 int
		var yyrt4606 bool
		if yyl4606 > cap(yyv4606) {

			yyrl4606, yyrt4606 = z.DecInferLen(yyl4606, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4606 {
				if yyrl4606 <= cap(yyv4606) {
					yyv4606 = yyv4606[:yyrl4606]
				} else {
					yyv4606 = make([]Capability, yyrl4606)
				}
			} else {
				yyv4606 = make([]Capability, yyrl4606)
			}
			yyc4606 = true
			yyrr4606 = len(yyv4606)
		} else if yyl4606 != len(yyv4606) {
			yyv4606 = yyv4606[:yyl4606]
			yyc4606 = true
		}
		yyj4606 := 0
		for ; yyj4606 < yyrr4606; yyj4606++ {
			yyh4606.ElemContainerState(yyj4606)
			if r.TryDecodeAsNil() {
				yyv4606[yyj4606] = ""
			} else {
				yyv4606[yyj4606] = Capability(r.DecodeString())
			}

		}
		if yyrt4606 {
			for ; yyj4606 < yyl4606; yyj4606++ {
				yyv4606 = append(yyv4606, "")
				yyh4606.ElemContainerState(yyj4606)
				if r.TryDecodeAsNil() {
					yyv4606[yyj4606] = ""
				} else {
					yyv4606[yyj4606] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4606 := 0
		for ; !r.CheckBreak(); yyj4606++ {

			if yyj4606 >= len(yyv4606) {
				yyv4606 = append(yyv4606, "") // var yyz4606 Capability
				yyc4606 = true
			}
			yyh4606.ElemContainerState(yyj4606)
			if yyj4606 < len(yyv4606) {
				if r.TryDecodeAsNil() {
					yyv4606[yyj4606] = ""
				} else {
					yyv4606[yyj4606] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4606 < len(yyv4606) {
			yyv4606 = yyv4606[:yyj4606]
			yyc4606 = true
		} else if yyj4606 == 0 && yyv4606 == nil {
			yyv4606 = []Capability{}
			yyc4606 = true
		}
	}
	yyh4606.End()
	if yyc4606 {
		*v = yyv4606
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4610 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4611 := &yyv4610
		yy4611.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4612 := *v
	yyh4612, yyl4612 := z.DecSliceHelperStart()
	var yyc4612 bool
	if yyl4612 == 0 {
		if yyv4612 == nil {
			yyv4612 = []ContainerPort{}
			yyc4612 = true
		} else if len(yyv4612) != 0 {
			yyv4612 = yyv4612[:0]
			yyc4612 = true
		}
	} else if yyl4612 > 0 {
		var yyrr4612, yyrl4612 int
		var yyrt4612 bool
		if yyl4612 > cap(yyv4612) {

			yyrg4612 := len(yyv4612) > 0
			yyv24612 := yyv4612
			yyrl4612, yyrt4612 = z.DecInferLen(yyl4612, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4612 {
				if yyrl4612 <= cap(yyv4612) {
					yyv4612 = yyv4612[:yyrl4612]
				} else {
					yyv4612 = make([]ContainerPort, yyrl4612)
				}
			} else {
				yyv4612 = make([]ContainerPort, yyrl4612)
			}
			yyc4612 = true
			yyrr4612 = len(yyv4612)
			if yyrg4612 {
				copy(yyv4612, yyv24612)
			}
		} else if yyl4612 != len(yyv4612) {
			yyv4612 = yyv4612[:yyl4612]
			yyc4612 = true
		}
		yyj4612 := 0
		for ; yyj4612 < yyrr4612; yyj4612++ {
			yyh4612.ElemContainerState(yyj4612)
			if r.TryDecodeAsNil() {
				yyv4612[yyj4612] = ContainerPort{}
			} else {
				yyv4613 := &yyv4612[yyj4612]
				yyv4613.CodecDecodeSelf(d)
			}

		}
		if yyrt4612 {
			for ; yyj4612 < yyl4612; yyj4612++ {
				yyv4612 = append(yyv4612, ContainerPort{})
				yyh4612.ElemContainerState(yyj4612)
				if r.TryDecodeAsNil() {
					yyv4612[yyj4612] = ContainerPort{}
				} else {
					yyv4614 := &yyv4612[yyj4612]
					yyv4614.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4612 := 0
		for ; !r.CheckBreak(); yyj4612++ {

			if yyj4612 >= len(yyv4612) {
				yyv4612 = append(yyv4612, ContainerPort{}) // var yyz4612 ContainerPort
				yyc4612 = true
			}
			yyh4612.ElemContainerState(yyj4612)
			if yyj4612 < len(yyv4612) {
				if r.TryDecodeAsNil() {
					yyv4612[yyj4612] = ContainerPort{}
				} else {
					yyv4615 := &yyv4612[yyj4612]
					yyv4615.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4612 < len(yyv4612) {
			yyv4612 = yyv4612[:yyj4612]
			yyc4612 = true
		} else if yyj4612 == 0 && yyv4612 == nil {
			yyv4612 = []ContainerPort{}
			yyc4612 = true
		}
	}
	yyh4612.End()
	if yyc4612 {
		*v = yyv4612
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4616 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4617 := &yyv4616
		yy4617.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4618 := *v
	yyh4618, yyl4618 := z.DecSliceHelperStart()
	var yyc4618 bool
	if yyl4618 == 0 {
		if yyv4618 == nil {
			yyv4618 = []EnvVar{}
			yyc4618 = true
		} else if len(yyv4618) != 0 {
			yyv4618 = yyv4618[:0]
			yyc4618 = true
		}
	} else if yyl4618 > 0 {
		var yyrr4618, yyrl4618 int
		var yyrt4618 bool
		if yyl4618 > cap(yyv4618) {

			yyrg4618 := len(yyv4618) > 0
			yyv24618 := yyv4618
			yyrl4618, yyrt4618 = z.DecInferLen(yyl4618, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4618 {
				if yyrl4618 <= cap(yyv4618) {
					yyv4618 = yyv4618[:yyrl4618]
				} else {
					yyv4618 = make([]EnvVar, yyrl4618)
				}
			} else {
				yyv4618 = make([]EnvVar, yyrl4618)
			}
			yyc4618 = true
			yyrr4618 = len(yyv4618)
			if yyrg4618 {
				copy(yyv4618, yyv24618)
			}
		} else if yyl4618 != len(yyv4618) {
			yyv4618 = yyv4618[:yyl4618]
			yyc4618 = true
		}
		yyj4618 := 0
		for ; yyj4618 < yyrr4618; yyj4618++ {
			yyh4618.ElemContainerState(yyj4618)
			if r.TryDecodeAsNil() {
				yyv4618[yyj4618] = EnvVar{}
			} else {
				yyv4619 := &yyv4618[yyj4618]
				yyv4619.CodecDecodeSelf(d)
			}

		}
		if yyrt4618 {
			for ; yyj4618 < yyl4618; yyj4618++ {
				yyv4618 = append(yyv4618, EnvVar{})
				yyh4618.ElemContainerState(yyj4618)
				if r.TryDecodeAsNil() {
					yyv4618[yyj4618] = EnvVar{}
				} else {
					yyv4620 := &yyv4618[yyj4618]
					yyv4620.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4618 := 0
		for ; !r.CheckBreak(); yyj4618++ {

			if yyj4618 >= len(yyv4618) {
				yyv4618 = append(yyv4618, EnvVar{}) // var yyz4618 EnvVar
				yyc4618 = true
			}
			yyh4618.ElemContainerState(yyj4618)
			if yyj4618 < len(yyv4618) {
				if r.TryDecodeAsNil() {
					yyv4618[yyj4618] = EnvVar{}
				} else {
					yyv4621 := &yyv4618[yyj4618]
					yyv4621.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4618 < len(yyv4618) {
			yyv4618 = yyv4618[:yyj4618]
			yyc4618 = true
		} else if yyj4618 == 0 && yyv4618 == nil {
			yyv4618 = []EnvVar{}
			yyc4618 = true
		}
	}
	yyh4618.End()
	if yyc4618 {
		*v = yyv4618
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4622 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4623 := &yyv4622
		yy4623.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4624 := *v
	yyh4624, yyl4624 := z.DecSliceHelperStart()
	var yyc4624 bool
	if yyl4624 == 0 {
		if yyv4624 == nil {
			yyv4624 = []VolumeMount{}
			yyc4624 = true
		} else if len(yyv4624) != 0 {
			yyv4624 = yyv4624[:0]
			yyc4624 = true
		}
	} else if yyl4624 > 0 {
		var yyrr4624, yyrl4624 int
		var yyrt4624 bool
		if yyl4624 > cap(yyv4624) {

			yyrg4624 := len(yyv4624) > 0
			yyv24624 := yyv4624
			yyrl4624, yyrt4624 = z.DecInferLen(yyl4624, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4624 {
				if yyrl4624 <= cap(yyv4624) {
					yyv4624 = yyv4624[:yyrl4624]
				} else {
					yyv4624 = make([]VolumeMount, yyrl4624)
				}
			} else {
				yyv4624 = make([]VolumeMount, yyrl4624)
			}
			yyc4624 = true
			yyrr4624 = len(yyv4624)
			if yyrg4624 {
				copy(yyv4624, yyv24624)
			}
		} else if yyl4624 != len(yyv4624) {
			yyv4624 = yyv4624[:yyl4624]
			yyc4624 = true
		}
		yyj4624 := 0
		for ; yyj4624 < yyrr4624; yyj4624++ {
			yyh4624.ElemContainerState(yyj4624)
			if r.TryDecodeAsNil() {
				yyv4624[yyj4624] = VolumeMount{}
			} else {
				yyv4625 := &yyv4624[yyj4624]
				yyv4625.CodecDecodeSelf(d)
			}

		}
		if yyrt4624 {
			for ; yyj4624 < yyl4624; yyj4624++ {
				yyv4624 = append(yyv4624, VolumeMount{})
				yyh4624.ElemContainerState(yyj4624)
				if r.TryDecodeAsNil() {
					yyv4624[yyj4624] = VolumeMount{}
				} else {
					yyv4626 := &yyv4624[yyj4624]
					yyv4626.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4624 := 0
		for ; !r.CheckBreak(); yyj4624++ {

			if yyj4624 >= len(yyv4624) {
				yyv4624 = append(yyv4624, VolumeMount{}) // var yyz4624 VolumeMount
				yyc4624 = true
			}
			yyh4624.ElemContainerState(yyj4624)
			if yyj4624 < len(yyv4624) {
				if r.TryDecodeAsNil() {
					yyv4624[yyj4624] = VolumeMount{}
				} else {
					yyv4627 := &yyv4624[yyj4624]
					yyv4627.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4624 < len(yyv4624) {
			yyv4624 = yyv4624[:yyj4624]
			yyc4624 = true
		} else if yyj4624 == 0 && yyv4624 == nil {
			yyv4624 = []VolumeMount{}
			yyc4624 = true
		}
	}
	yyh4624.End()
	if yyc4624 {
		*v = yyv4624
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4628 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4629 := &yyv4628
		yy4629.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4630 := *v
	yyh4630, yyl4630 := z.DecSliceHelperStart()
	var yyc4630 bool
	if yyl4630 == 0 {
		if yyv4630 == nil {
			yyv4630 = []Pod{}
			yyc4630 = true
		} else if len(yyv4630) != 0 {
			yyv4630 = yyv4630[:0]
			yyc4630 = true
		}
	} else if yyl4630 > 0 {
		var yyrr4630, yyrl4630 int
		var yyrt4630 bool
		if yyl4630 > cap(yyv4630) {

			yyrg4630 := len(yyv4630) > 0
			yyv24630 := yyv4630
			yyrl4630, yyrt4630 = z.DecInferLen(yyl4630, z.DecBasicHandle().MaxInitLen, 640)
			if yyrt4630 {
				if yyrl4630 <= cap(yyv4630) {
					yyv4630 = yyv4630[:yyrl4630]
				} else {
					yyv4630 = make([]Pod, yyrl4630)
				}
			} else {
				yyv4630 = make([]Pod, yyrl4630)
			}
			yyc4630 = true
			yyrr4630 = len(yyv4630)
			if yyrg4630 {
				copy(yyv4630, yyv24630)
			}
		} else if yyl4630 != len(yyv4630) {
			yyv4630 = yyv4630[:yyl4630]
			yyc4630 = true
		}
		yyj4630 := 0
		for ; yyj4630 < yyrr4630; yyj4630++ {
			yyh4630.ElemContainerState(yyj4630)
			if r.TryDecodeAsNil() {
				yyv4630[yyj4630] = Pod{}
			} else {
				yyv4631 := &yyv4630[yyj4630]
				yyv4631.CodecDecodeSelf(d)
			}

		}
		if yyrt4630 {
			for ; yyj4630 < yyl4630; yyj4630++ {
				yyv4630 = append(yyv4630, Pod{})
				yyh4630.ElemContainerState(yyj4630)
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = Pod{}
				} else {
					yyv4632 := &yyv4630[yyj4630]
					yyv4632.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4630 := 0
		for ; !r.CheckBreak(); yyj4630++ {

			if yyj4630 >= len(yyv4630) {
				yyv4630 = append(yyv4630, Pod{}) // var yyz4630 Pod
				yyc4630 = true
			}
			yyh4630.ElemContainerState(yyj4630)
			if yyj4630 < len(yyv4630) {
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = Pod{}
				} else {
					yyv4633 := &yyv4630[yyj4630]
					yyv4633.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4630 < len(yyv4630) {
			yyv4630 = yyv4630[:yyj4630]
			yyc4630 = true
		} else if yyj4630 == 0 && yyv4630 == nil {
			yyv4630 = []Pod{}
			yyc4630 = true
		}
	}
	yyh4630.End()
	if yyc4630 {
		*v = yyv4630
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4634 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4635 := &yyv4634
		yy4635.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4636 := *v
	yyh4636, yyl4636 := z.DecSliceHelperStart()
	var yyc4636 bool
	if yyl4636 == 0 {
		if yyv4636 == nil {
			yyv4636 = []NodeSelectorTerm{}
			yyc4636 = true
		} else if len(yyv4636) != 0 {
			yyv4636 = yyv4636[:0]
			yyc4636 = true
		}
	} else if yyl4636 > 0 {
		var yyrr4636, yyrl4636 int
		var yyrt4636 bool
		if yyl4636 > cap(yyv4636) {

			yyrg4636 := len(yyv4636) > 0
			yyv24636 := yyv4636
			yyrl4636, yyrt4636 = z.DecInferLen(yyl4636, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4636 {
				if yyrl4636 <= cap(yyv4636) {
					yyv4636 = yyv4636[:yyrl4636]
				} else {
					yyv4636 = make([]NodeSelectorTerm, yyrl4636)
				}
			} else {
				yyv4636 = make([]NodeSelectorTerm, yyrl4636)
			}
			yyc4636 = true
			yyrr4636 = len(yyv4636)
			if yyrg4636 {
				copy(yyv4636, yyv24636)
			}
		} else if yyl4636 != len(yyv4636) {
			yyv4636 = yyv4636[:yyl4636]
			yyc4636 = true
		}
		yyj4636 := 0
		for ; yyj4636 < yyrr4636; yyj4636++ {
			yyh4636.ElemContainerState(yyj4636)
			if r.TryDecodeAsNil() {
				yyv4636[yyj4636] = NodeSelectorTerm{}
			} else {
				yyv4637 := &yyv4636[yyj4636]
				yyv4637.CodecDecodeSelf(d)
			}

		}
		if yyrt4636 {
			for ; yyj4636 < yyl4636; yyj4636++ {
				yyv4636 = append(yyv4636, NodeSelectorTerm{})
				yyh4636.ElemContainerState(yyj4636)
				if r.TryDecodeAsNil() {
					yyv4636[yyj4636] = NodeSelectorTerm{}
				} else {
					yyv4638 := &yyv4636[yyj4636]
					yyv4638.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4636 := 0
		for ; !r.CheckBreak(); yyj4636++ {

			if yyj4636 >= len(yyv4636) {
				yyv4636 = append(yyv4636, NodeSelectorTerm{}) // var yyz4636 NodeSelectorTerm
				yyc4636 = true
			}
			yyh4636.ElemContainerState(yyj4636)
			if yyj4636 < len(yyv4636) {
				if r.TryDecodeAsNil() {
					yyv4636[yyj4636] = NodeSelectorTerm{}
				} else {
					yyv4639 := &yyv4636[yyj4636]
					yyv4639.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4636 < len(yyv4636) {
			yyv4636 = yyv4636[:yyj4636]
			yyc4636 = true
		} else if yyj4636 == 0 && yyv4636 == nil {
			yyv4636 = []NodeSelectorTerm{}
			yyc4636 = true
		}
	}
	yyh4636.End()
	if yyc4636 {
		*v = yyv4636
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4640 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4641 := &yyv4640
		yy4641.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4642 := *v
	yyh4642, yyl4642 := z.DecSliceHelperStart()
	var yyc4642 bool
	if yyl4642 == 0 {
		if yyv4642 == nil {
			yyv4642 = []NodeSelectorRequirement{}
			yyc4642 = true
		} else if len(yyv4642) != 0 {
			yyv4642 = yyv4642[:0]
			yyc4642 = true
		}
	} else if yyl4642 > 0 {
		var yyrr4642, yyrl4642 int
		var yyrt4642 bool
		if yyl4642 > cap(yyv4642) {

			yyrg4642 := len(yyv4642) > 0
			yyv24642 := yyv4642
			yyrl4642, yyrt4642 = z.DecInferLen(yyl4642, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4642 {
				if yyrl4642 <= cap(yyv4642) {
					yyv4642 = yyv4642[:yyrl4642]
				} else {
					yyv4642 = make([]NodeSelectorRequirement, yyrl4642)
				}
			} else {
				yyv4642 = make([]NodeSelectorRequirement, yyrl4642)
			}
			yyc4642 = true
			yyrr4642 = len(yyv4642)
			if yyrg4642 {
				copy(yyv4642, yyv24642)
			}
		} else if yyl4642 != len(yyv4642) {
			yyv4642 = yyv4642[:yyl4642]
			yyc4642 = true
		}
		yyj4642 := 0
		for ; yyj4642 < yyrr4642; yyj4642++ {
			yyh4642.ElemContainerState(yyj4642)
			if r.TryDecodeAsNil() {
				yyv4642[yyj4642] = NodeSelectorRequirement{}
			} else {
				yyv4643 := &yyv4642[yyj4642]
				yyv4643.CodecDecodeSelf(d)
			}

		}
		if yyrt4642 {
			for ; yyj4642 < yyl4642; yyj4642++ {
				yyv4642 = append(yyv4642, NodeSelectorRequirement{})
				yyh4642.ElemContainerState(yyj4642)
				if r.TryDecodeAsNil() {
					yyv4642[yyj4642] = NodeSelectorRequirement{}
				} else {
					yyv4644 := &yyv4642[yyj4642]
					yyv4644.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4642 := 0
		for ; !r.CheckBreak(); yyj4642++ {

			if yyj4642 >= len(yyv4642) {
				yyv4642 = append(yyv4642, NodeSelectorRequirement{}) // var yyz4642 NodeSelectorRequirement
				yyc4642 = true
			}
			yyh4642.ElemContainerState(yyj4642)
			if yyj4642 < len(yyv4642) {
				if r.TryDecodeAsNil() {
					yyv4642[yyj4642] = NodeSelectorRequirement{}
				} else {
					yyv4645 := &yyv4642[yyj4642]
					yyv4645.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4642 < len(yyv4642) {
			yyv4642 = yyv4642[:yyj4642]
			yyc4642 = true
		} else if yyj4642 == 0 && yyv4642 == nil {
			yyv4642 = []NodeSelectorRequirement{}
			yyc4642 = true
		}
	}
	yyh4642.End()
	if yyc4642 {
		*v = yyv4642
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4646 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4647 := &yyv4646
		yy4647.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4648 := *v
	yyh4648, yyl4648 := z.DecSliceHelperStart()
	var yyc4648 bool
	if yyl4648 == 0 {
		if yyv4648 == nil {
			yyv4648 = []PodAffinityTerm{}
			yyc4648 = true
		} else if len(yyv4648) != 0 {
			yyv4648 = yyv4648[:0]
			yyc4648 = true
		}
	} else if yyl4648 > 0 {
		var yyrr4648, yyrl4648 int
		var yyrt4648 bool
		if yyl4648 > cap(yyv4648) {

			yyrg4648 := len(yyv4648) > 0
			yyv24648 := yyv4648
			yyrl4648, yyrt4648 = z.DecInferLen(yyl4648, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4648 {
				if yyrl4648 <= cap(yyv4648) {
					yyv4648 = yyv4648[:yyrl4648]
				} else {
					yyv4648 = make([]PodAffinityTerm, yyrl4648)
				}
			} else {
				yyv4648 = make([]PodAffinityTerm, yyrl4648)
			}
			yyc4648 = true
			yyrr4648 = len(yyv4648)
			if yyrg4648 {
				copy(yyv4648, yyv24648)
			}
		} else if yyl4648 != len(yyv4648) {
			yyv4648 = yyv4648[:yyl4648]
			yyc4648 = true
		}
		yyj4648 := 0
		for ; yyj4648 < yyrr4648; yyj4648++ {
			yyh4648.ElemContainerState(yyj4648)
			if r.TryDecodeAsNil() {
				yyv4648[yyj4648] = PodAffinityTerm{}
			} else {
				yyv4649 := &yyv4648[yyj4648]
				yyv4649.CodecDecodeSelf(d)
			}

		}
		if yyrt4648 {
			for ; yyj4648 < yyl4648; yyj4648++ {
				yyv4648 = append(yyv4648, PodAffinityTerm{})
				yyh4648.ElemContainerState(yyj4648)
				if r.TryDecodeAsNil() {
					yyv4648[yyj4648] = PodAffinityTerm{}
				} else {
					yyv4650 := &yyv4648[yyj4648]
					yyv4650.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4648 := 0
		for ; !r.CheckBreak(); yyj4648++ {

			if yyj4648 >= len(yyv4648) {
				yyv4648 = append(yyv4648, PodAffinityTerm{}) // var yyz4648 PodAffinityTerm
				yyc4648 = true
			}
			yyh4648.ElemContainerState(yyj4648)
			if yyj4648 < len(yyv4648) {
				if r.TryDecodeAsNil() {
					yyv4648[yyj4648] = PodAffinityTerm{}
				} else {
					yyv4651 := &yyv4648[yyj4648]
					yyv4651.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4648 < len(yyv4648) {
			yyv4648 = yyv4648[:yyj4648]
			yyc4648 = true
		} else if yyj4648 == 0 && yyv4648 == nil {
			yyv4648 = []PodAffinityTerm{}
			yyc4648 = true
		}
	}
	yyh4648.End()
	if yyc4648 {
		*v = yyv4648
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4652 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4653 := &yyv4652
		yy4653.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4654 := *v
	yyh4654, yyl4654 := z.DecSliceHelperStart()
	var yyc4654 bool
	if yyl4654 == 0 {
		if yyv4654 == nil {
			yyv4654 = []WeightedPodAffinityTerm{}
			yyc4654 = true
		} else if len(yyv4654) != 0 {
			yyv4654 = yyv4654[:0]
			yyc4654 = true
		}
	} else if yyl4654 > 0 {
		var yyrr4654, yyrl4654 int
		var yyrt4654 bool
		if yyl4654 > cap(yyv4654) {

			yyrg4654 := len(yyv4654) > 0
			yyv24654 := yyv4654
			yyrl4654, yyrt4654 = z.DecInferLen(yyl4654, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4654 {
				if yyrl4654 <= cap(yyv4654) {
					yyv4654 = yyv4654[:yyrl4654]
				} else {
					yyv4654 = make([]WeightedPodAffinityTerm, yyrl4654)
				}
			} else {
				yyv4654 = make([]WeightedPodAffinityTerm, yyrl4654)
			}
			yyc4654 = true
			yyrr4654 = len(yyv4654)
			if yyrg4654 {
				copy(yyv4654, yyv24654)
			}
		} else if yyl4654 != len(yyv4654) {
			yyv4654 = yyv4654[:yyl4654]
			yyc4654 = true
		}
		yyj4654 := 0
		for ; yyj4654 < yyrr4654; yyj4654++ {
			yyh4654.ElemContainerState(yyj4654)
			if r.TryDecodeAsNil() {
				yyv4654[yyj4654] = WeightedPodAffinityTerm{}
			} else {
				yyv4655 := &yyv4654[yyj4654]
				yyv4655.CodecDecodeSelf(d)
			}

		}
		if yyrt4654 {
			for ; yyj4654 < yyl4654; yyj4654++ {
				yyv4654 = append(yyv4654, WeightedPodAffinityTerm{})
				yyh4654.ElemContainerState(yyj4654)
				if r.TryDecodeAsNil() {
					yyv4654[yyj4654] = WeightedPodAffinityTerm{}
				} else {
					yyv4656 := &yyv4654[yyj4654]
					yyv4656.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4654 := 0
		for ; !r.CheckBreak(); yyj4654++ {

			if yyj4654 >= len(yyv4654) {
				yyv4654 = append(yyv4654, WeightedPodAffinityTerm{}) // var yyz4654 WeightedPodAffinityTerm
				yyc4654 = true
			}
			yyh4654.ElemContainerState(yyj4654)
			if yyj4654 < len(yyv4654) {
				if r.TryDecodeAsNil() {
					yyv4654[yyj4654] = WeightedPodAffinityTerm{}
				} else {
					yyv4657 := &yyv4654[yyj4654]
					yyv4657.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4654 < len(yyv4654) {
			yyv4654 = yyv4654[:yyj4654]
			yyc4654 = true
		} else if yyj4654 == 0 && yyv4654 == nil {
			yyv4654 = []WeightedPodAffinityTerm{}
			yyc4654 = true
		}
	}
	yyh4654.End()
	if yyc4654 {
		*v = yyv4654
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4658 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4659 := &yyv4658
		yy4659.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4660 := *v
	yyh4660, yyl4660 := z.DecSliceHelperStart()
	var yyc4660 bool
	if yyl4660 == 0 {
		if yyv4660 == nil {
			yyv4660 = []PreferredSchedulingTerm{}
			yyc4660 = true
		} else if len(yyv4660) != 0 {
			yyv4660 = yyv4660[:0]
			yyc4660 = true
		}
	} else if yyl4660 > 0 {
		var yyrr4660, yyrl4660 int
		var yyrt4660 bool
		if yyl4660 > cap(yyv4660) {

			yyrg4660 := len(yyv4660) > 0
			yyv24660 := yyv4660
			yyrl4660, yyrt4660 = z.DecInferLen(yyl4660, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4660 {
				if yyrl4660 <= cap(yyv4660) {
					yyv4660 = yyv4660[:yyrl4660]
				} else {
					yyv4660 = make([]PreferredSchedulingTerm, yyrl4660)
				}
			} else {
				yyv4660 = make([]PreferredSchedulingTerm, yyrl4660)
			}
			yyc4660 = true
			yyrr4660 = len(yyv4660)
			if yyrg4660 {
				copy(yyv4660, yyv24660)
			}
		} else if yyl4660 != len(yyv4660) {
			yyv4660 = yyv4660[:yyl4660]
			yyc4660 = true
		}
		yyj4660 := 0
		for ; yyj4660 < yyrr4660; yyj4660++ {
			yyh4660.ElemContainerState(yyj4660)
			if r.TryDecodeAsNil() {
				yyv4660[yyj4660] = PreferredSchedulingTerm{}
			} else {
				yyv4661 := &yyv4660[yyj4660]
				yyv4661.CodecDecodeSelf(d)
			}

		}
		if yyrt4660 {
			for ; yyj4660 < yyl4660; yyj4660++ {
				yyv4660 = append(yyv4660, PreferredSchedulingTerm{})
				yyh4660.ElemContainerState(yyj4660)
				if r.TryDecodeAsNil() {
					yyv4660[yyj4660] = PreferredSchedulingTerm{}
				} else {
					yyv4662 := &yyv4660[yyj4660]
					yyv4662.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4660 := 0
		for ; !r.CheckBreak(); yyj4660++ {

			if yyj4660 >= len(yyv4660) {
				yyv4660 = append(yyv4660, PreferredSchedulingTerm{}) // var yyz4660 PreferredSchedulingTerm
				yyc4660 = true
			}
			yyh4660.ElemContainerState(yyj4660)
			if yyj4660 < len(yyv4660) {
				if r.TryDecodeAsNil() {
					yyv4660[yyj4660] = PreferredSchedulingTerm{}
				} else {
					yyv4663 := &yyv4660[yyj4660]
					yyv4663.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4660 < len(yyv4660) {
			yyv4660 = yyv4660[:yyj4660]
			yyc4660 = true
		} else if yyj4660 == 0 && yyv4660 == nil {
			yyv4660 = []PreferredSchedulingTerm{}
			yyc4660 = true
		}
	}
	yyh4660.End()
	if yyc4660 {
		*v = yyv4660
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4664 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4665 := &yyv4664
		yy4665.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4666 := *v
	yyh4666, yyl4666 := z.DecSliceHelperStart()
	var yyc4666 bool
	if yyl4666 == 0 {
		if yyv4666 == nil {
			yyv4666 = []Volume{}
			yyc4666 = true
		} else if len(yyv4666) != 0 {
			yyv4666 = yyv4666[:0]
			yyc4666 = true
		}
	} else if yyl4666 > 0 {
		var yyrr4666, yyrl4666 int
		var yyrt4666 bool
		if yyl4666 > cap(yyv4666) {

			yyrg4666 := len(yyv4666) > 0
			yyv24666 := yyv4666
			yyrl4666, yyrt4666 = z.DecInferLen(yyl4666, z.DecBasicHandle().MaxInitLen, 200)
			if yyrt4666 {
				if yyrl4666 <= cap(yyv4666) {
					yyv4666 = yyv4666[:yyrl4666]
				} else {
					yyv4666 = make([]Volume, yyrl4666)
				}
			} else {
				yyv4666 = make([]Volume, yyrl4666)
			}
			yyc4666 = true
			yyrr4666 = len(yyv4666)
			if yyrg4666 {
				copy(yyv4666, yyv24666)
			}
		} else if yyl4666 != len(yyv4666) {
			yyv4666 = yyv4666[:yyl4666]
			yyc4666 = true
		}
		yyj4666 := 0
		for ; yyj4666 < yyrr4666; yyj4666++ {
			yyh4666.ElemContainerState(yyj4666)
			if r.TryDecodeAsNil() {
				yyv4666[yyj4666] = Volume{}
			} else {
				yyv4667 := &yyv4666[yyj4666]
				yyv4667.CodecDecodeSelf(d)
			}

		}
		if yyrt4666 {
			for ; yyj4666 < yyl4666; yyj4666++ {
				yyv4666 = append(yyv4666, Volume{})
				yyh4666.ElemContainerState(yyj4666)
				if r.TryDecodeAsNil() {
					yyv4666[yyj4666] = Volume{}
				} else {
					yyv4668 := &yyv4666[yyj4666]
					yyv4668.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4666 := 0
		for ; !r.CheckBreak(); yyj4666++ {

			if yyj4666 >= len(yyv4666) {
				yyv4666 = append(yyv4666, Volume{}) // var yyz4666 Volume
				yyc4666 = true
			}
			yyh4666.ElemContainerState(yyj4666)
			if yyj4666 < len(yyv4666) {
				if r.TryDecodeAsNil() {
					yyv4666[yyj4666] = Volume{}
				} else {
					yyv4669 := &yyv4666[yyj4666]
					yyv4669.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4666 < len(yyv4666) {
			yyv4666 = yyv4666[:yyj4666]
			yyc4666 = true
		} else if yyj4666 == 0 && yyv4666 == nil {
			yyv4666 = []Volume{}
			yyc4666 = true
		}
	}
	yyh4666.End()
	if yyc4666 {
		*v = yyv4666
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4670 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4671 := &yyv4670
		yy4671.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4672 := *v
	yyh4672, yyl4672 := z.DecSliceHelperStart()
	var yyc4672 bool
	if yyl4672 == 0 {
		if yyv4672 == nil {
			yyv4672 = []Container{}
			yyc4672 = true
		} else if len(yyv4672) != 0 {
			yyv4672 = yyv4672[:0]
			yyc4672 = true
		}
	} else if yyl4672 > 0 {
		var yyrr4672, yyrl4672 int
		var yyrt4672 bool
		if yyl4672 > cap(yyv4672) {

			yyrg4672 := len(yyv4672) > 0
			yyv24672 := yyv4672
			yyrl4672, yyrt4672 = z.DecInferLen(yyl4672, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4672 {
				if yyrl4672 <= cap(yyv4672) {
					yyv4672 = yyv4672[:yyrl4672]
				} else {
					yyv4672 = make([]Container, yyrl4672)
				}
			} else {
				yyv4672 = make([]Container, yyrl4672)
			}
			yyc4672 = true
			yyrr4672 = len(yyv4672)
			if yyrg4672 {
				copy(yyv4672, yyv24672)
			}
		} else if yyl4672 != len(yyv4672) {
			yyv4672 = yyv4672[:yyl4672]
			yyc4672 = true
		}
		yyj4672 := 0
		for ; yyj4672 < yyrr4672; yyj4672++ {
			yyh4672.ElemContainerState(yyj4672)
			if r.TryDecodeAsNil() {
				yyv4672[yyj4672] = Container{}
			} else {
				yyv4673 := &yyv4672[yyj4672]
				yyv4673.CodecDecodeSelf(d)
			}

		}
		if yyrt4672 {
			for ; yyj4672 < yyl4672; yyj4672++ {
				yyv4672 = append(yyv4672, Container{})
				yyh4672.ElemContainerState(yyj4672)
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = Container{}
				} else {
					yyv4674 := &yyv4672[yyj4672]
					yyv4674.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4672 := 0
		for ; !r.CheckBreak(); yyj4672++ {

			if yyj4672 >= len(yyv4672) {
				yyv4672 = append(yyv4672, Container{}) // var yyz4672 Container
				yyc4672 = true
			}
			yyh4672.ElemContainerState(yyj4672)
			if yyj4672 < len(yyv4672) {
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = Container{}
				} else {
					yyv4675 := &yyv4672[yyj4672]
					yyv4675.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4672 < len(yyv4672) {
			yyv4672 = yyv4672[:yyj4672]
			yyc4672 = true
		} else if yyj4672 == 0 && yyv4672 == nil {
			yyv4672 = []Container{}
			yyc4672 = true
		}
	}
	yyh4672.End()
	if yyc4672 {
		*v = yyv4672
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4676 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4677 := &yyv4676
		yy4677.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4678 := *v
	yyh4678, yyl4678 := z.DecSliceHelperStart()
	var yyc4678 bool
	if yyl4678 == 0 {
		if yyv4678 == nil {
			yyv4678 = []LocalObjectReference{}
			yyc4678 = true
		} else if len(yyv4678) != 0 {
			yyv4678 = yyv4678[:0]
			yyc4678 = true
		}
	} else if yyl4678 > 0 {
		var yyrr4678, yyrl4678 int
		var yyrt4678 bool
		if yyl4678 > cap(yyv4678) {

			yyrg4678 := len(yyv4678) > 0
			yyv24678 := yyv4678
			yyrl4678, yyrt4678 = z.DecInferLen(yyl4678, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4678 {
				if yyrl4678 <= cap(yyv4678) {
					yyv4678 = yyv4678[:yyrl4678]
				} else {
					yyv4678 = make([]LocalObjectReference, yyrl4678)
				}
			} else {
				yyv4678 = make([]LocalObjectReference, yyrl4678)
			}
			yyc4678 = true
			yyrr4678 = len(yyv4678)
			if yyrg4678 {
				copy(yyv4678, yyv24678)
			}
		} else if yyl4678 != len(yyv4678) {
			yyv4678 = yyv4678[:yyl4678]
			yyc4678 = true
		}
		yyj4678 := 0
		for ; yyj4678 < yyrr4678; yyj4678++ {
			yyh4678.ElemContainerState(yyj4678)
			if r.TryDecodeAsNil() {
				yyv4678[yyj4678] = LocalObjectReference{}
			} else {
				yyv4679 := &yyv4678[yyj4678]
				yyv4679.CodecDecodeSelf(d)
			}

		}
		if yyrt4678 {
			for ; yyj4678 < yyl4678; yyj4678++ {
				yyv4678 = append(yyv4678, LocalObjectReference{})
				yyh4678.ElemContainerState(yyj4678)
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = LocalObjectReference{}
				} else {
					yyv4680 := &yyv4678[yyj4678]
					yyv4680.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4678 := 0
		for ; !r.CheckBreak(); yyj4678++ {

			if yyj4678 >= len(yyv4678) {
				yyv4678 = append(yyv4678, LocalObjectReference{}) // var yyz4678 LocalObjectReference
				yyc4678 = true
			}
			yyh4678.ElemContainerState(yyj4678)
			if yyj4678 < len(yyv4678) {
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = LocalObjectReference{}
				} else {
					yyv4681 := &yyv4678[yyj4678]
					yyv4681.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4678 < len(yyv4678) {
			yyv4678 = yyv4678[:yyj4678]
			yyc4678 = true
		} else if yyj4678 == 0 && yyv4678 == nil {
			yyv4678 = []LocalObjectReference{}
			yyc4678 = true
		}
	}
	yyh4678.End()
	if yyc4678 {
		*v = yyv4678
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4682 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4683 := &yyv4682
		yy4683.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4684 := *v
	yyh4684, yyl4684 := z.DecSliceHelperStart()
	var yyc4684 bool
	if yyl4684 == 0 {
		if yyv4684 == nil {
			yyv4684 = []PodCondition{}
			yyc4684 = true
		} else if len(yyv4684) != 0 {
			yyv4684 = yyv4684[:0]
			yyc4684 = true
		}
	} else if yyl4684 > 0 {
		var yyrr4684, yyrl4684 int
		var yyrt4684 bool
		if yyl4684 > cap(yyv4684) {

			yyrg4684 := len(yyv4684) > 0
			yyv24684 := yyv4684
			yyrl4684, yyrt4684 = z.DecInferLen(yyl4684, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4684 {
				if yyrl4684 <= cap(yyv4684) {
					yyv4684 = yyv4684[:yyrl4684]
				} else {
					yyv4684 = make([]PodCondition, yyrl4684)
				}
			} else {
				yyv4684 = make([]PodCondition, yyrl4684)
			}
			yyc4684 = true
			yyrr4684 = len(yyv4684)
			if yyrg4684 {
				copy(yyv4684, yyv24684)
			}
		} else if yyl4684 != len(yyv4684) {
			yyv4684 = yyv4684[:yyl4684]
			yyc4684 = true
		}
		yyj4684 := 0
		for ; yyj4684 < yyrr4684; yyj4684++ {
			yyh4684.ElemContainerState(yyj4684)
			if r.TryDecodeAsNil() {
				yyv4684[yyj4684] = PodCondition{}
			} else {
				yyv4685 := &yyv4684[yyj4684]
				yyv4685.CodecDecodeSelf(d)
			}

		}
		if yyrt4684 {
			for ; yyj4684 < yyl4684; yyj4684++ {
				yyv4684 = append(yyv4684, PodCondition{})
				yyh4684.ElemContainerState(yyj4684)
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = PodCondition{}
				} else {
					yyv4686 := &yyv4684[yyj4684]
					yyv4686.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4684 := 0
		for ; !r.CheckBreak(); yyj4684++ {

			if yyj4684 >= len(yyv4684) {
				yyv4684 = append(yyv4684, PodCondition{}) // var yyz4684 PodCondition
				yyc4684 = true
			}
			yyh4684.ElemContainerState(yyj4684)
			if yyj4684 < len(yyv4684) {
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = PodCondition{}
				} else {
					yyv4687 := &yyv4684[yyj4684]
					yyv4687.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4684 < len(yyv4684) {
			yyv4684 = yyv4684[:yyj4684]
			yyc4684 = true
		} else if yyj4684 == 0 && yyv4684 == nil {
			yyv4684 = []PodCondition{}
			yyc4684 = true
		}
	}
	yyh4684.End()
	if yyc4684 {
		*v = yyv4684
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4688 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4689 := &yyv4688
		yy4689.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4690 := *v
	yyh4690, yyl4690 := z.DecSliceHelperStart()
	var yyc4690 bool
	if yyl4690 == 0 {
		if yyv4690 == nil {
			yyv4690 = []ContainerStatus{}
			yyc4690 = true
		} else if len(yyv4690) != 0 {
			yyv4690 = yyv4690[:0]
			yyc4690 = true
		}
	} else if yyl4690 > 0 {
		var yyrr4690, yyrl4690 int
		var yyrt4690 bool
		if yyl4690 > cap(yyv4690) {

			yyrg4690 := len(yyv4690) > 0
			yyv24690 := yyv4690
			yyrl4690, yyrt4690 = z.DecInferLen(yyl4690, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4690 {
				if yyrl4690 <= cap(yyv4690) {
					yyv4690 = yyv4690[:yyrl4690]
				} else {
					yyv4690 = make([]ContainerStatus, yyrl4690)
				}
			} else {
				yyv4690 = make([]ContainerStatus, yyrl4690)
			}
			yyc4690 = true
			yyrr4690 = len(yyv4690)
			if yyrg4690 {
				copy(yyv4690, yyv24690)
			}
		} else if yyl4690 != len(yyv4690) {
			yyv4690 = yyv4690[:yyl4690]
			yyc4690 = true
		}
		yyj4690 := 0
		for ; yyj4690 < yyrr4690; yyj4690++ {
			yyh4690.ElemContainerState(yyj4690)
			if r.TryDecodeAsNil() {
				yyv4690[yyj4690] = ContainerStatus{}
			} else {
				yyv4691 := &yyv4690[yyj4690]
				yyv4691.CodecDecodeSelf(d)
			}

		}
		if yyrt4690 {
			for ; yyj4690 < yyl4690; yyj4690++ {
				yyv4690 = append(yyv4690, ContainerStatus{})
				yyh4690.ElemContainerState(yyj4690)
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = ContainerStatus{}
				} else {
					yyv4692 := &yyv4690[yyj4690]
					yyv4692.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4690 := 0
		for ; !r.CheckBreak(); yyj4690++ {

			if yyj4690 >= len(yyv4690) {
				yyv4690 = append(yyv4690, ContainerStatus{}) // var yyz4690 ContainerStatus
				yyc4690 = true
			}
			yyh4690.ElemContainerState(yyj4690)
			if yyj4690 < len(yyv4690) {
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = ContainerStatus{}
				} else {
					yyv4693 := &yyv4690[yyj4690]
					yyv4693.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4690 < len(yyv4690) {
			yyv4690 = yyv4690[:yyj4690]
			yyc4690 = true
		} else if yyj4690 == 0 && yyv4690 == nil {
			yyv4690 = []ContainerStatus{}
			yyc4690 = true
		}
	}
	yyh4690.End()
	if yyc4690 {
		*v = yyv4690
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4694 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4695 := &yyv4694
		yy4695.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4696 := *v
	yyh4696, yyl4696 := z.DecSliceHelperStart()
	var yyc4696 bool
	if yyl4696 == 0 {
		if yyv4696 == nil {
			yyv4696 = []PodTemplate{}
			yyc4696 = true
		} else if len(yyv4696) != 0 {
			yyv4696 = yyv4696[:0]
			yyc4696 = true
		}
	} else if yyl4696 > 0 {
		var yyrr4696, yyrl4696 int
		var yyrt4696 bool
		if yyl4696 > cap(yyv4696) {

			yyrg4696 := len(yyv4696) > 0
			yyv24696 := yyv4696
			yyrl4696, yyrt4696 = z.DecInferLen(yyl4696, z.DecBasicHandle().MaxInitLen, 704)
			if yyrt4696 {
				if yyrl4696 <= cap(yyv4696) {
					yyv4696 = yyv4696[:yyrl4696]
				} else {
					yyv4696 = make([]PodTemplate, yyrl4696)
				}
			} else {
				yyv4696 = make([]PodTemplate, yyrl4696)
			}
			yyc4696 = true
			yyrr4696 = len(yyv4696)
			if yyrg4696 {
				copy(yyv4696, yyv24696)
			}
		} else if yyl4696 != len(yyv4696) {
			yyv4696 = yyv4696[:yyl4696]
			yyc4696 = true
		}
		yyj4696 := 0
		for ; yyj4696 < yyrr4696; yyj4696++ {
			yyh4696.ElemContainerState(yyj4696)
			if r.TryDecodeAsNil() {
				yyv4696[yyj4696] = PodTemplate{}
			} else {
				yyv4697 := &yyv4696[yyj4696]
				yyv4697.CodecDecodeSelf(d)
			}

		}
		if yyrt4696 {
			for ; yyj4696 < yyl4696; yyj4696++ {
				yyv4696 = append(yyv4696, PodTemplate{})
				yyh4696.ElemContainerState(yyj4696)
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = PodTemplate{}
				} else {
					yyv4698 := &yyv4696[yyj4696]
					yyv4698.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4696 := 0
		for ; !r.CheckBreak(); yyj4696++ {

			if yyj4696 >= len(yyv4696) {
				yyv4696 = append(yyv4696, PodTemplate{}) // var yyz4696 PodTemplate
				yyc4696 = true
			}
			yyh4696.ElemContainerState(yyj4696)
			if yyj4696 < len(yyv4696) {
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = PodTemplate{}
				} else {
					yyv4699 := &yyv4696[yyj4696]
					yyv4699.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4696 < len(yyv4696) {
			yyv4696 = yyv4696[:yyj4696]
			yyc4696 = true
		} else if yyj4696 == 0 && yyv4696 == nil {
			yyv4696 = []PodTemplate{}
			yyc4696 = true
		}
	}
	yyh4696.End()
	if yyc4696 {
		*v = yyv4696
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4700 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4701 := &yyv4700
		yy4701.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4702 := *v
	yyh4702, yyl4702 := z.DecSliceHelperStart()
	var yyc4702 bool
	if yyl4702 == 0 {
		if yyv4702 == nil {
			yyv4702 = []ReplicationController{}
			yyc4702 = true
		} else if len(yyv4702) != 0 {
			yyv4702 = yyv4702[:0]
			yyc4702 = true
		}
	} else if yyl4702 > 0 {
		var yyrr4702, yyrl4702 int
		var yyrt4702 bool
		if yyl4702 > cap(yyv4702) {

			yyrg4702 := len(yyv4702) > 0
			yyv24702 := yyv4702
			yyrl4702, yyrt4702 = z.DecInferLen(yyl4702, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4702 {
				if yyrl4702 <= cap(yyv4702) {
					yyv4702 = yyv4702[:yyrl4702]
				} else {
					yyv4702 = make([]ReplicationController, yyrl4702)
				}
			} else {
				yyv4702 = make([]ReplicationController, yyrl4702)
			}
			yyc4702 = true
			yyrr4702 = len(yyv4702)
			if yyrg4702 {
				copy(yyv4702, yyv24702)
			}
		} else if yyl4702 != len(yyv4702) {
			yyv4702 = yyv4702[:yyl4702]
			yyc4702 = true
		}
		yyj4702 := 0
		for ; yyj4702 < yyrr4702; yyj4702++ {
			yyh4702.ElemContainerState(yyj4702)
			if r.TryDecodeAsNil() {
				yyv4702[yyj4702] = ReplicationController{}
			} else {
				yyv4703 := &yyv4702[yyj4702]
				yyv4703.CodecDecodeSelf(d)
			}

		}
		if yyrt4702 {
			for ; yyj4702 < yyl4702; yyj4702++ {
				yyv4702 = append(yyv4702, ReplicationController{})
				yyh4702.ElemContainerState(yyj4702)
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = ReplicationController{}
				} else {
					yyv4704 := &yyv4702[yyj4702]
					yyv4704.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4702 := 0
		for ; !r.CheckBreak(); yyj4702++ {

			if yyj4702 >= len(yyv4702) {
				yyv4702 = append(yyv4702, ReplicationController{}) // var yyz4702 ReplicationController
				yyc4702 = true
			}
			yyh4702.ElemContainerState(yyj4702)
			if yyj4702 < len(yyv4702) {
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = ReplicationController{}
				} else {
					yyv4705 := &yyv4702[yyj4702]
					yyv4705.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4702 < len(yyv4702) {
			yyv4702 = yyv4702[:yyj4702]
			yyc4702 = true
		} else if yyj4702 == 0 && yyv4702 == nil {
			yyv4702 = []ReplicationController{}
			yyc4702 = true
		}
	}
	yyh4702.End()
	if yyc4702 {
		*v = yyv4702
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4706 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4707 := &yyv4706
		yy4707.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4708 := *v
	yyh4708, yyl4708 := z.DecSliceHelperStart()
	var yyc4708 bool
	if yyl4708 == 0 {
		if yyv4708 == nil {
			yyv4708 = []Service{}
			yyc4708 = true
		} else if len(yyv4708) != 0 {
			yyv4708 = yyv4708[:0]
			yyc4708 = true
		}
	} else if yyl4708 > 0 {
		var yyrr4708, yyrl4708 int
		var yyrt4708 bool
		if yyl4708 > cap(yyv4708) {

			yyrg4708 := len(yyv4708) > 0
			yyv24708 := yyv4708
			yyrl4708, yyrt4708 = z.DecInferLen(yyl4708, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4708 {
				if yyrl4708 <= cap(yyv4708) {
					yyv4708 = yyv4708[:yyrl4708]
				} else {
					yyv4708 = make([]Service, yyrl4708)
				}
			} else {
				yyv4708 = make([]Service, yyrl4708)
			}
			yyc4708 = true
			yyrr4708 = len(yyv4708)
			if yyrg4708 {
				copy(yyv4708, yyv24708)
			}
		} else if yyl4708 != len(yyv4708) {
			yyv4708 = yyv4708[:yyl4708]
			yyc4708 = true
		}
		yyj4708 := 0
		for ; yyj4708 < yyrr4708; yyj4708++ {
			yyh4708.ElemContainerState(yyj4708)
			if r.TryDecodeAsNil() {
				yyv4708[yyj4708] = Service{}
			} else {
				yyv4709 := &yyv4708[yyj4708]
				yyv4709.CodecDecodeSelf(d)
			}

		}
		if yyrt4708 {
			for ; yyj4708 < yyl4708; yyj4708++ {
				yyv4708 = append(yyv4708, Service{})
				yyh4708.ElemContainerState(yyj4708)
				if r.TryDecodeAsNil() {
					yyv4708[yyj4708] = Service{}
				} else {
					yyv4710 := &yyv4708[yyj4708]
					yyv4710.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4708 := 0
		for ; !r.CheckBreak(); yyj4708++ {

			if yyj4708 >= len(yyv4708) {
				yyv4708 = append(yyv4708, Service{}) // var yyz4708 Service
				yyc4708 = true
			}
			yyh4708.ElemContainerState(yyj4708)
			if yyj4708 < len(yyv4708) {
				if r.TryDecodeAsNil() {
					yyv4708[yyj4708] = Service{}
				} else {
					yyv4711 := &yyv4708[yyj4708]
					yyv4711.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4708 < len(yyv4708) {
			yyv4708 = yyv4708[:yyj4708]
			yyc4708 = true
		} else if yyj4708 == 0 && yyv4708 == nil {
			yyv4708 = []Service{}
			yyc4708 = true
		}
	}
	yyh4708.End()
	if yyc4708 {
		*v = yyv4708
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4712 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4713 := &yyv4712
		yy4713.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4714 := *v
	yyh4714, yyl4714 := z.DecSliceHelperStart()
	var yyc4714 bool
	if yyl4714 == 0 {
		if yyv4714 == nil {
			yyv4714 = []LoadBalancerIngress{}
			yyc4714 = true
		} else if len(yyv4714) != 0 {
			yyv4714 = yyv4714[:0]
			yyc4714 = true
		}
	} else if yyl4714 > 0 {
		var yyrr4714, yyrl4714 int
		var yyrt4714 bool
		if yyl4714 > cap(yyv4714) {

			yyrg4714 := len(yyv4714) > 0
			yyv24714 := yyv4714
			yyrl4714, yyrt4714 = z.DecInferLen(yyl4714, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4714 {
				if yyrl4714 <= cap(yyv4714) {
					yyv4714 = yyv4714[:yyrl4714]
				} else {
					yyv4714 = make([]LoadBalancerIngress, yyrl4714)
				}
			} else {
				yyv4714 = make([]LoadBalancerIngress, yyrl4714)
			}
			yyc4714 = true
			yyrr4714 = len(yyv4714)
			if yyrg4714 {
				copy(yyv4714, yyv24714)
			}
		} else if yyl4714 != len(yyv4714) {
			yyv4714 = yyv4714[:yyl4714]
			yyc4714 = true
		}
		yyj4714 := 0
		for ; yyj4714 < yyrr4714; yyj4714++ {
			yyh4714.ElemContainerState(yyj4714)
			if r.TryDecodeAsNil() {
				yyv4714[yyj4714] = LoadBalancerIngress{}
			} else {
				yyv4715 := &yyv4714[yyj4714]
				yyv4715.CodecDecodeSelf(d)
			}

		}
		if yyrt4714 {
			for ; yyj4714 < yyl4714; yyj4714++ {
				yyv4714 = append(yyv4714, LoadBalancerIngress{})
				yyh4714.ElemContainerState(yyj4714)
				if r.TryDecodeAsNil() {
					yyv4714[yyj4714] = LoadBalancerIngress{}
				} else {
					yyv4716 := &yyv4714[yyj4714]
					yyv4716.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4714 := 0
		for ; !r.CheckBreak(); yyj4714++ {

			if yyj4714 >= len(yyv4714) {
				yyv4714 = append(yyv4714, LoadBalancerIngress{}) // var yyz4714 LoadBalancerIngress
				yyc4714 = true
			}
			yyh4714.ElemContainerState(yyj4714)
			if yyj4714 < len(yyv4714) {
				if r.TryDecodeAsNil() {
					yyv4714[yyj4714] = LoadBalancerIngress{}
				} else {
					yyv4717 := &yyv4714[yyj4714]
					yyv4717.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4714 < len(yyv4714) {
			yyv4714 = yyv4714[:yyj4714]
			yyc4714 = true
		} else if yyj4714 == 0 && yyv4714 == nil {
			yyv4714 = []LoadBalancerIngress{}
			yyc4714 = true
		}
	}
	yyh4714.End()
	if yyc4714 {
		*v = yyv4714
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4718 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4719 := &yyv4718
		yy4719.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4720 := *v
	yyh4720, yyl4720 := z.DecSliceHelperStart()
	var yyc4720 bool
	if yyl4720 == 0 {
		if yyv4720 == nil {
			yyv4720 = []ServicePort{}
			yyc4720 = true
		} else if len(yyv4720) != 0 {
			yyv4720 = yyv4720[:0]
			yyc4720 = true
		}
	} else if yyl4720 > 0 {
		var yyrr4720, yyrl4720 int
		var yyrt4720 bool
		if yyl4720 > cap(yyv4720) {

			yyrg4720 := len(yyv4720) > 0
			yyv24720 := yyv4720
			yyrl4720, yyrt4720 = z.DecInferLen(yyl4720, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4720 {
				if yyrl4720 <= cap(yyv4720) {
					yyv4720 = yyv4720[:yyrl4720]
				} else {
					yyv4720 = make([]ServicePort, yyrl4720)
				}
			} else {
				yyv4720 = make([]ServicePort, yyrl4720)
			}
			yyc4720 = true
			yyrr4720 = len(yyv4720)
			if yyrg4720 {
				copy(yyv4720, yyv24720)
			}
		} else if yyl4720 != len(yyv4720) {
			yyv4720 = yyv4720[:yyl4720]
			yyc4720 = true
		}
		yyj4720 := 0
		for ; yyj4720 < yyrr4720; yyj4720++ {
			yyh4720.ElemContainerState(yyj4720)
			if r.TryDecodeAsNil() {
				yyv4720[yyj4720] = ServicePort{}
			} else {
				yyv4721 := &yyv4720[yyj4720]
				yyv4721.CodecDecodeSelf(d)
			}

		}
		if yyrt4720 {
			for ; yyj4720 < yyl4720; yyj4720++ {
				yyv4720 = append(yyv4720, ServicePort{})
				yyh4720.ElemContainerState(yyj4720)
				if r.TryDecodeAsNil() {
					yyv4720[yyj4720] = ServicePort{}
				} else {
					yyv4722 := &yyv4720[yyj4720]
					yyv4722.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4720 := 0
		for ; !r.CheckBreak(); yyj4720++ {

			if yyj4720 >= len(yyv4720) {
				yyv4720 = append(yyv4720, ServicePort{}) // var yyz4720 ServicePort
				yyc4720 = true
			}
			yyh4720.ElemContainerState(yyj4720)
			if yyj4720 < len(yyv4720) {
				if r.TryDecodeAsNil() {
					yyv4720[yyj4720] = ServicePort{}
				} else {
					yyv4723 := &yyv4720[yyj4720]
					yyv4723.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4720 < len(yyv4720) {
			yyv4720 = yyv4720[:yyj4720]
			yyc4720 = true
		} else if yyj4720 == 0 && yyv4720 == nil {
			yyv4720 = []ServicePort{}
			yyc4720 = true
		}
	}
	yyh4720.End()
	if yyc4720 {
		*v = yyv4720
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4724 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4725 := &yyv4724
		yy4725.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4726 := *v
	yyh4726, yyl4726 := z.DecSliceHelperStart()
	var yyc4726 bool
	if yyl4726 == 0 {
		if yyv4726 == nil {
			yyv4726 = []ObjectReference{}
			yyc4726 = true
		} else if len(yyv4726) != 0 {
			yyv4726 = yyv4726[:0]
			yyc4726 = true
		}
	} else if yyl4726 > 0 {
		var yyrr4726, yyrl4726 int
		var yyrt4726 bool
		if yyl4726 > cap(yyv4726) {

			yyrg4726 := len(yyv4726) > 0
			yyv24726 := yyv4726
			yyrl4726, yyrt4726 = z.DecInferLen(yyl4726, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4726 {
				if yyrl4726 <= cap(yyv4726) {
					yyv4726 = yyv4726[:yyrl4726]
				} else {
					yyv4726 = make([]ObjectReference, yyrl4726)
				}
			} else {
				yyv4726 = make([]ObjectReference, yyrl4726)
			}
			yyc4726 = true
			yyrr4726 = len(yyv4726)
			if yyrg4726 {
				copy(yyv4726, yyv24726)
			}
		} else if yyl4726 != len(yyv4726) {
			yyv4726 = yyv4726[:yyl4726]
			yyc4726 = true
		}
		yyj4726 := 0
		for ; yyj4726 < yyrr4726; yyj4726++ {
			yyh4726.ElemContainerState(yyj4726)
			if r.TryDecodeAsNil() {
				yyv4726[yyj4726] = ObjectReference{}
			} else {
				yyv4727 := &yyv4726[yyj4726]
				yyv4727.CodecDecodeSelf(d)
			}

		}
		if yyrt4726 {
			for ; yyj4726 < yyl4726; yyj4726++ {
				yyv4726 = append(yyv4726, ObjectReference{})
				yyh4726.ElemContainerState(yyj4726)
				if r.TryDecodeAsNil() {
					yyv4726[yyj4726] = ObjectReference{}
				} else {
					yyv4728 := &yyv4726[yyj4726]
					yyv4728.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4726 := 0
		for ; !r.CheckBreak(); yyj4726++ {

			if yyj4726 >= len(yyv4726) {
				yyv4726 = append(yyv4726, ObjectReference{}) // var yyz4726 ObjectReference
				yyc4726 = true
			}
			yyh4726.ElemContainerState(yyj4726)
			if yyj4726 < len(yyv4726) {
				if r.TryDecodeAsNil() {
					yyv4726[yyj4726] = ObjectReference{}
				} else {
					yyv4729 := &yyv4726[yyj4726]
					yyv4729.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4726 < len(yyv4726) {
			yyv4726 = yyv4726[:yyj4726]
			yyc4726 = true
		} else if yyj4726 == 0 && yyv4726 == nil {
			yyv4726 = []ObjectReference{}
			yyc4726 = true
		}
	}
	yyh4726.End()
	if yyc4726 {
		*v = yyv4726
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4730 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4731 := &yyv4730
		yy4731.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4732 := *v
	yyh4732, yyl4732 := z.DecSliceHelperStart()
	var yyc4732 bool
	if yyl4732 == 0 {
		if yyv4732 == nil {
			yyv4732 = []ServiceAccount{}
			yyc4732 = true
		} else if len(yyv4732) != 0 {
			yyv4732 = yyv4732[:0]
			yyc4732 = true
		}
	} else if yyl4732 > 0 {
		var yyrr4732, yyrl4732 int
		var yyrt4732 bool
		if yyl4732 > cap(yyv4732) {

			yyrg4732 := len(yyv4732) > 0
			yyv24732 := yyv4732
			yyrl4732, yyrt4732 = z.DecInferLen(yyl4732, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4732 {
				if yyrl4732 <= cap(yyv4732) {
					yyv4732 = yyv4732[:yyrl4732]
				} else {
					yyv4732 = make([]ServiceAccount, yyrl4732)
				}
			} else {
				yyv4732 = make([]ServiceAccount, yyrl4732)
			}
			yyc4732 = true
			yyrr4732 = len(yyv4732)
			if yyrg4732 {
				copy(yyv4732, yyv24732)
			}
		} else if yyl4732 != len(yyv4732) {
			yyv4732 = yyv4732[:yyl4732]
			yyc4732 = true
		}
		yyj4732 := 0
		for ; yyj4732 < yyrr4732; yyj4732++ {
			yyh4732.ElemContainerState(yyj4732)
			if r.TryDecodeAsNil() {
				yyv4732[yyj4732] = ServiceAccount{}
			} else {
				yyv4733 := &yyv4732[yyj4732]
				yyv4733.CodecDecodeSelf(d)
			}

		}
		if yyrt4732 {
			for ; yyj4732 < yyl4732; yyj4732++ {
				yyv4732 = append(yyv4732, ServiceAccount{})
				yyh4732.ElemContainerState(yyj4732)
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = ServiceAccount{}
				} else {
					yyv4734 := &yyv4732[yyj4732]
					yyv4734.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4732 := 0
		for ; !r.CheckBreak(); yyj4732++ {

			if yyj4732 >= len(yyv4732) {
				yyv4732 = append(yyv4732, ServiceAccount{}) // var yyz4732 ServiceAccount
				yyc4732 = true
			}
			yyh4732.ElemContainerState(yyj4732)
			if yyj4732 < len(yyv4732) {
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = ServiceAccount{}
				} else {
					yyv4735 := &yyv4732[yyj4732]
					yyv4735.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4732 < len(yyv4732) {
			yyv4732 = yyv4732[:yyj4732]
			yyc4732 = true
		} else if yyj4732 == 0 && yyv4732 == nil {
			yyv4732 = []ServiceAccount{}
			yyc4732 = true
		}
	}
	yyh4732.End()
	if yyc4732 {
		*v = yyv4732
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4736 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4737 := &yyv4736
		yy4737.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4738 := *v
	yyh4738, yyl4738 := z.DecSliceHelperStart()
	var yyc4738 bool
	if yyl4738 == 0 {
		if yyv4738 == nil {
			yyv4738 = []EndpointSubset{}
			yyc4738 = true
		} else if len(yyv4738) != 0 {
			yyv4738 = yyv4738[:0]
			yyc4738 = true
		}
	} else if yyl4738 > 0 {
		var yyrr4738, yyrl4738 int
		var yyrt4738 bool
		if yyl4738 > cap(yyv4738) {

			yyrg4738 := len(yyv4738) > 0
			yyv24738 := yyv4738
			yyrl4738, yyrt4738 = z.DecInferLen(yyl4738, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4738 {
				if yyrl4738 <= cap(yyv4738) {
					yyv4738 = yyv4738[:yyrl4738]
				} else {
					yyv4738 = make([]EndpointSubset, yyrl4738)
				}
			} else {
				yyv4738 = make([]EndpointSubset, yyrl4738)
			}
			yyc4738 = true
			yyrr4738 = len(yyv4738)
			if yyrg4738 {
				copy(yyv4738, yyv24738)
			}
		} else if yyl4738 != len(yyv4738) {
			yyv4738 = yyv4738[:yyl4738]
			yyc4738 = true
		}
		yyj4738 := 0
		for ; yyj4738 < yyrr4738; yyj4738++ {
			yyh4738.ElemContainerState(yyj4738)
			if r.TryDecodeAsNil() {
				yyv4738[yyj4738] = EndpointSubset{}
			} else {
				yyv4739 := &yyv4738[yyj4738]
				yyv4739.CodecDecodeSelf(d)
			}

		}
		if yyrt4738 {
			for ; yyj4738 < yyl4738; yyj4738++ {
				yyv4738 = append(yyv4738, EndpointSubset{})
				yyh4738.ElemContainerState(yyj4738)
				if r.TryDecodeAsNil() {
					yyv4738[yyj4738] = EndpointSubset{}
				} else {
					yyv4740 := &yyv4738[yyj4738]
					yyv4740.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4738 := 0
		for ; !r.CheckBreak(); yyj4738++ {

			if yyj4738 >= len(yyv4738) {
				yyv4738 = append(yyv4738, EndpointSubset{}) // var yyz4738 EndpointSubset
				yyc4738 = true
			}
			yyh4738.ElemContainerState(yyj4738)
			if yyj4738 < len(yyv4738) {
				if r.TryDecodeAsNil() {
					yyv4738[yyj4738] = EndpointSubset{}
				} else {
					yyv4741 := &yyv4738[yyj4738]
					yyv4741.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4738 < len(yyv4738) {
			yyv4738 = yyv4738[:yyj4738]
			yyc4738 = true
		} else if yyj4738 == 0 && yyv4738 == nil {
			yyv4738 = []EndpointSubset{}
			yyc4738 = true
		}
	}
	yyh4738.End()
	if yyc4738 {
		*v = yyv4738
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4742 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4743 := &yyv4742
		yy4743.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4744 := *v
	yyh4744, yyl4744 := z.DecSliceHelperStart()
	var yyc4744 bool
	if yyl4744 == 0 {
		if yyv4744 == nil {
			yyv4744 = []EndpointAddress{}
			yyc4744 = true
		} else if len(yyv4744) != 0 {
			yyv4744 = yyv4744[:0]
			yyc4744 = true
		}
	} else if yyl4744 > 0 {
		var yyrr4744, yyrl4744 int
		var yyrt4744 bool
		if yyl4744 > cap(yyv4744) {

			yyrg4744 := len(yyv4744) > 0
			yyv24744 := yyv4744
			yyrl4744, yyrt4744 = z.DecInferLen(yyl4744, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4744 {
				if yyrl4744 <= cap(yyv4744) {
					yyv4744 = yyv4744[:yyrl4744]
				} else {
					yyv4744 = make([]EndpointAddress, yyrl4744)
				}
			} else {
				yyv4744 = make([]EndpointAddress, yyrl4744)
			}
			yyc4744 = true
			yyrr4744 = len(yyv4744)
			if yyrg4744 {
				copy(yyv4744, yyv24744)
			}
		} else if yyl4744 != len(yyv4744) {
			yyv4744 = yyv4744[:yyl4744]
			yyc4744 = true
		}
		yyj4744 := 0
		for ; yyj4744 < yyrr4744; yyj4744++ {
			yyh4744.ElemContainerState(yyj4744)
			if r.TryDecodeAsNil() {
				yyv4744[yyj4744] = EndpointAddress{}
			} else {
				yyv4745 := &yyv4744[yyj4744]
				yyv4745.CodecDecodeSelf(d)
			}

		}
		if yyrt4744 {
			for ; yyj4744 < yyl4744; yyj4744++ {
				yyv4744 = append(yyv4744, EndpointAddress{})
				yyh4744.ElemContainerState(yyj4744)
				if r.TryDecodeAsNil() {
					yyv4744[yyj4744] = EndpointAddress{}
				} else {
					yyv4746 := &yyv4744[yyj4744]
					yyv4746.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4744 := 0
		for ; !r.CheckBreak(); yyj4744++ {

			if yyj4744 >= len(yyv4744) {
				yyv4744 = append(yyv4744, EndpointAddress{}) // var yyz4744 EndpointAddress
				yyc4744 = true
			}
			yyh4744.ElemContainerState(yyj4744)
			if yyj4744 < len(yyv4744) {
				if r.TryDecodeAsNil() {
					yyv4744[yyj4744] = EndpointAddress{}
				} else {
					yyv4747 := &yyv4744[yyj4744]
					yyv4747.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4744 < len(yyv4744) {
			yyv4744 = yyv4744[:yyj4744]
			yyc4744 = true
		} else if yyj4744 == 0 && yyv4744 == nil {
			yyv4744 = []EndpointAddress{}
			yyc4744 = true
		}
	}
	yyh4744.End()
	if yyc4744 {
		*v = yyv4744
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4748 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4749 := &yyv4748
		yy4749.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4750 := *v
	yyh4750, yyl4750 := z.DecSliceHelperStart()
	var yyc4750 bool
	if yyl4750 == 0 {
		if yyv4750 == nil {
			yyv4750 = []EndpointPort{}
			yyc4750 = true
		} else if len(yyv4750) != 0 {
			yyv4750 = yyv4750[:0]
			yyc4750 = true
		}
	} else if yyl4750 > 0 {
		var yyrr4750, yyrl4750 int
		var yyrt4750 bool
		if yyl4750 > cap(yyv4750) {

			yyrg4750 := len(yyv4750) > 0
			yyv24750 := yyv4750
			yyrl4750, yyrt4750 = z.DecInferLen(yyl4750, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4750 {
				if yyrl4750 <= cap(yyv4750) {
					yyv4750 = yyv4750[:yyrl4750]
				} else {
					yyv4750 = make([]EndpointPort, yyrl4750)
				}
			} else {
				yyv4750 = make([]EndpointPort, yyrl4750)
			}
			yyc4750 = true
			yyrr4750 = len(yyv4750)
			if yyrg4750 {
				copy(yyv4750, yyv24750)
			}
		} else if yyl4750 != len(yyv4750) {
			yyv4750 = yyv4750[:yyl4750]
			yyc4750 = true
		}
		yyj4750 := 0
		for ; yyj4750 < yyrr4750; yyj4750++ {
			yyh4750.ElemContainerState(yyj4750)
			if r.TryDecodeAsNil() {
				yyv4750[yyj4750] = EndpointPort{}
			} else {
				yyv4751 := &yyv4750[yyj4750]
				yyv4751.CodecDecodeSelf(d)
			}

		}
		if yyrt4750 {
			for ; yyj4750 < yyl4750; yyj4750++ {
				yyv4750 = append(yyv4750, EndpointPort{})
				yyh4750.ElemContainerState(yyj4750)
				if r.TryDecodeAsNil() {
					yyv4750[yyj4750] = EndpointPort{}
				} else {
					yyv4752 := &yyv4750[yyj4750]
					yyv4752.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4750 := 0
		for ; !r.CheckBreak(); yyj4750++ {

			if yyj4750 >= len(yyv4750) {
				yyv4750 = append(yyv4750, EndpointPort{}) // var yyz4750 EndpointPort
				yyc4750 = true
			}
			yyh4750.ElemContainerState(yyj4750)
			if yyj4750 < len(yyv4750) {
				if r.TryDecodeAsNil() {
					yyv4750[yyj4750] = EndpointPort{}
				} else {
					yyv4753 := &yyv4750[yyj4750]
					yyv4753.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4750 < len(yyv4750) {
			yyv4750 = yyv4750[:yyj4750]
			yyc4750 = true
		} else if yyj4750 == 0 && yyv4750 == nil {
			yyv4750 = []EndpointPort{}
			yyc4750 = true
		}
	}
	yyh4750.End()
	if yyc4750 {
		*v = yyv4750
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4754 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4755 := &yyv4754
		yy4755.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4756 := *v
	yyh4756, yyl4756 := z.DecSliceHelperStart()
	var yyc4756 bool
	if yyl4756 == 0 {
		if yyv4756 == nil {
			yyv4756 = []Endpoints{}
			yyc4756 = true
		} else if len(yyv4756) != 0 {
			yyv4756 = yyv4756[:0]
			yyc4756 = true
		}
	} else if yyl4756 > 0 {
		var yyrr4756, yyrl4756 int
		var yyrt4756 bool
		if yyl4756 > cap(yyv4756) {

			yyrg4756 := len(yyv4756) > 0
			yyv24756 := yyv4756
			yyrl4756, yyrt4756 = z.DecInferLen(yyl4756, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4756 {
				if yyrl4756 <= cap(yyv4756) {
					yyv4756 = yyv4756[:yyrl4756]
				} else {
					yyv4756 = make([]Endpoints, yyrl4756)
				}
			} else {
				yyv4756 = make([]Endpoints, yyrl4756)
			}
			yyc4756 = true
			yyrr4756 = len(yyv4756)
			if yyrg4756 {
				copy(yyv4756, yyv24756)
			}
		} else if yyl4756 != len(yyv4756) {
			yyv4756 = yyv4756[:yyl4756]
			yyc4756 = true
		}
		yyj4756 := 0
		for ; yyj4756 < yyrr4756; yyj4756++ {
			yyh4756.ElemContainerState(yyj4756)
			if r.TryDecodeAsNil() {
				yyv4756[yyj4756] = Endpoints{}
			} else {
				yyv4757 := &yyv4756[yyj4756]
				yyv4757.CodecDecodeSelf(d)
			}

		}
		if yyrt4756 {
			for ; yyj4756 < yyl4756; yyj4756++ {
				yyv4756 = append(yyv4756, Endpoints{})
				yyh4756.ElemContainerState(yyj4756)
				if r.TryDecodeAsNil() {
					yyv4756[yyj4756] = Endpoints{}
				} else {
					yyv4758 := &yyv4756[yyj4756]
					yyv4758.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4756 := 0
		for ; !r.CheckBreak(); yyj4756++ {

			if yyj4756 >= len(yyv4756) {
				yyv4756 = append(yyv4756, Endpoints{}) // var yyz4756 Endpoints
				yyc4756 = true
			}
			yyh4756.ElemContainerState(yyj4756)
			if yyj4756 < len(yyv4756) {
				if r.TryDecodeAsNil() {
					yyv4756[yyj4756] = Endpoints{}
				} else {
					yyv4759 := &yyv4756[yyj4756]
					yyv4759.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4756 < len(yyv4756) {
			yyv4756 = yyv4756[:yyj4756]
			yyc4756 = true
		} else if yyj4756 == 0 && yyv4756 == nil {
			yyv4756 = []Endpoints{}
			yyc4756 = true
		}
	}
	yyh4756.End()
	if yyc4756 {
		*v = yyv4756
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4760 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4761 := &yyv4760
		yy4761.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4762 := *v
	yyh4762, yyl4762 := z.DecSliceHelperStart()
	var yyc4762 bool
	if yyl4762 == 0 {
		if yyv4762 == nil {
			yyv4762 = []NodeCondition{}
			yyc4762 = true
		} else if len(yyv4762) != 0 {
			yyv4762 = yyv4762[:0]
			yyc4762 = true
		}
	} else if yyl4762 > 0 {
		var yyrr4762, yyrl4762 int
		var yyrt4762 bool
		if yyl4762 > cap(yyv4762) {

			yyrg4762 := len(yyv4762) > 0
			yyv24762 := yyv4762
			yyrl4762, yyrt4762 = z.DecInferLen(yyl4762, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4762 {
				if yyrl4762 <= cap(yyv4762) {
					yyv4762 = yyv4762[:yyrl4762]
				} else {
					yyv4762 = make([]NodeCondition, yyrl4762)
				}
			} else {
				yyv4762 = make([]NodeCondition, yyrl4762)
			}
			yyc4762 = true
			yyrr4762 = len(yyv4762)
			if yyrg4762 {
				copy(yyv4762, yyv24762)
			}
		} else if yyl4762 != len(yyv4762) {
			yyv4762 = yyv4762[:yyl4762]
			yyc4762 = true
		}
		yyj4762 := 0
		for ; yyj4762 < yyrr4762; yyj4762++ {
			yyh4762.ElemContainerState(yyj4762)
			if r.TryDecodeAsNil() {
				yyv4762[yyj4762] = NodeCondition{}
			} else {
				yyv4763 := &yyv4762[yyj4762]
				yyv4763.CodecDecodeSelf(d)
			}

		}
		if yyrt4762 {
			for ; yyj4762 < yyl4762; yyj4762++ {
				yyv4762 = append(yyv4762, NodeCondition{})
				yyh4762.ElemContainerState(yyj4762)
				if r.TryDecodeAsNil() {
					yyv4762[yyj4762] = NodeCondition{}
				} else {
					yyv4764 := &yyv4762[yyj4762]
					yyv4764.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4762 := 0
		for ; !r.CheckBreak(); yyj4762++ {

			if yyj4762 >= len(yyv4762) {
				yyv4762 = append(yyv4762, NodeCondition{}) // var yyz4762 NodeCondition
				yyc4762 = true
			}
			yyh4762.ElemContainerState(yyj4762)
			if yyj4762 < len(yyv4762) {
				if r.TryDecodeAsNil() {
					yyv4762[yyj4762] = NodeCondition{}
				} else {
					yyv4765 := &yyv4762[yyj4762]
					yyv4765.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4762 < len(yyv4762) {
			yyv4762 = yyv4762[:yyj4762]
			yyc4762 = true
		} else if yyj4762 == 0 && yyv4762 == nil {
			yyv4762 = []NodeCondition{}
			yyc4762 = true
		}
	}
	yyh4762.End()
	if yyc4762 {
		*v = yyv4762
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4766 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4767 := &yyv4766
		yy4767.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4768 := *v
	yyh4768, yyl4768 := z.DecSliceHelperStart()
	var yyc4768 bool
	if yyl4768 == 0 {
		if yyv4768 == nil {
			yyv4768 = []NodeAddress{}
			yyc4768 = true
		} else if len(yyv4768) != 0 {
			yyv4768 = yyv4768[:0]
			yyc4768 = true
		}
	} else if yyl4768 > 0 {
		var yyrr4768, yyrl4768 int
		var yyrt4768 bool
		if yyl4768 > cap(yyv4768) {

			yyrg4768 := len(yyv4768) > 0
			yyv24768 := yyv4768
			yyrl4768, yyrt4768 = z.DecInferLen(yyl4768, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4768 {
				if yyrl4768 <= cap(yyv4768) {
					yyv4768 = yyv4768[:yyrl4768]
				} else {
					yyv4768 = make([]NodeAddress, yyrl4768)
				}
			} else {
				yyv4768 = make([]NodeAddress, yyrl4768)
			}
			yyc4768 = true
			yyrr4768 = len(yyv4768)
			if yyrg4768 {
				copy(yyv4768, yyv24768)
			}
		} else if yyl4768 != len(yyv4768) {
			yyv4768 = yyv4768[:yyl4768]
			yyc4768 = true
		}
		yyj4768 := 0
		for ; yyj4768 < yyrr4768; yyj4768++ {
			yyh4768.ElemContainerState(yyj4768)
			if r.TryDecodeAsNil() {
				yyv4768[yyj4768] = NodeAddress{}
			} else {
				yyv4769 := &yyv4768[yyj4768]
				yyv4769.CodecDecodeSelf(d)
			}

		}
		if yyrt4768 {
			for ; yyj4768 < yyl4768; yyj4768++ {
				yyv4768 = append(yyv4768, NodeAddress{})
				yyh4768.ElemContainerState(yyj4768)
				if r.TryDecodeAsNil() {
					yyv4768[yyj4768] = NodeAddress{}
				} else {
					yyv4770 := &yyv4768[yyj4768]
					yyv4770.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4768 := 0
		for ; !r.CheckBreak(); yyj4768++ {

			if yyj4768 >= len(yyv4768) {
				yyv4768 = append(yyv4768, NodeAddress{}) // var yyz4768 NodeAddress
				yyc4768 = true
			}
			yyh4768.ElemContainerState(yyj4768)
			if yyj4768 < len(yyv4768) {
				if r.TryDecodeAsNil() {
					yyv4768[yyj4768] = NodeAddress{}
				} else {
					yyv4771 := &yyv4768[yyj4768]
					yyv4771.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4768 < len(yyv4768) {
			yyv4768 = yyv4768[:yyj4768]
			yyc4768 = true
		} else if yyj4768 == 0 && yyv4768 == nil {
			yyv4768 = []NodeAddress{}
			yyc4768 = true
		}
	}
	yyh4768.End()
	if yyc4768 {
		*v = yyv4768
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4772 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4773 := &yyv4772
		yy4773.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4774 := *v
	yyh4774, yyl4774 := z.DecSliceHelperStart()
	var yyc4774 bool
	if yyl4774 == 0 {
		if yyv4774 == nil {
			yyv4774 = []ContainerImage{}
			yyc4774 = true
		} else if len(yyv4774) != 0 {
			yyv4774 = yyv4774[:0]
			yyc4774 = true
		}
	} else if yyl4774 > 0 {
		var yyrr4774, yyrl4774 int
		var yyrt4774 bool
		if yyl4774 > cap(yyv4774) {

			yyrg4774 := len(yyv4774) > 0
			yyv24774 := yyv4774
			yyrl4774, yyrt4774 = z.DecInferLen(yyl4774, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4774 {
				if yyrl4774 <= cap(yyv4774) {
					yyv4774 = yyv4774[:yyrl4774]
				} else {
					yyv4774 = make([]ContainerImage, yyrl4774)
				}
			} else {
				yyv4774 = make([]ContainerImage, yyrl4774)
			}
			yyc4774 = true
			yyrr4774 = len(yyv4774)
			if yyrg4774 {
				copy(yyv4774, yyv24774)
			}
		} else if yyl4774 != len(yyv4774) {
			yyv4774 = yyv4774[:yyl4774]
			yyc4774 = true
		}
		yyj4774 := 0
		for ; yyj4774 < yyrr4774; yyj4774++ {
			yyh4774.ElemContainerState(yyj4774)
			if r.TryDecodeAsNil() {
				yyv4774[yyj4774] = ContainerImage{}
			} else {
				yyv4775 := &yyv4774[yyj4774]
				yyv4775.CodecDecodeSelf(d)
			}

		}
		if yyrt4774 {
			for ; yyj4774 < yyl4774; yyj4774++ {
				yyv4774 = append(yyv4774, ContainerImage{})
				yyh4774.ElemContainerState(yyj4774)
				if r.TryDecodeAsNil() {
					yyv4774[yyj4774] = ContainerImage{}
				} else {
					yyv4776 := &yyv4774[yyj4774]
					yyv4776.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4774 := 0
		for ; !r.CheckBreak(); yyj4774++ {

			if yyj4774 >= len(yyv4774) {
				yyv4774 = append(yyv4774, ContainerImage{}) // var yyz4774 ContainerImage
				yyc4774 = true
			}
			yyh4774.ElemContainerState(yyj4774)
			if yyj4774 < len(yyv4774) {
				if r.TryDecodeAsNil() {
					yyv4774[yyj4774] = ContainerImage{}
				} else {
					yyv4777 := &yyv4774[yyj4774]
					yyv4777.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4774 < len(yyv4774) {
			yyv4774 = yyv4774[:yyj4774]
			yyc4774 = true
		} else if yyj4774 == 0 && yyv4774 == nil {
			yyv4774 = []ContainerImage{}
			yyc4774 = true
		}
	}
	yyh4774.End()
	if yyc4774 {
		*v = yyv4774
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4778 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4778.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4779 := *v
	yyh4779, yyl4779 := z.DecSliceHelperStart()
	var yyc4779 bool
	if yyl4779 == 0 {
		if yyv4779 == nil {
			yyv4779 = []UniqueVolumeName{}
			yyc4779 = true
		} else if len(yyv4779) != 0 {
			yyv4779 = yyv4779[:0]
			yyc4779 = true
		}
	} else if yyl4779 > 0 {
		var yyrr4779, yyrl4779 int
		var yyrt4779 bool
		if yyl4779 > cap(yyv4779) {

			yyrl4779, yyrt4779 = z.DecInferLen(yyl4779, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4779 {
				if yyrl4779 <= cap(yyv4779) {
					yyv4779 = yyv4779[:yyrl4779]
				} else {
					yyv4779 = make([]UniqueVolumeName, yyrl4779)
				}
			} else {
				yyv4779 = make([]UniqueVolumeName, yyrl4779)
			}
			yyc4779 = true
			yyrr4779 = len(yyv4779)
		} else if yyl4779 != len(yyv4779) {
			yyv4779 = yyv4779[:yyl4779]
			yyc4779 = true
		}
		yyj4779 := 0
		for ; yyj4779 < yyrr4779; yyj4779++ {
			yyh4779.ElemContainerState(yyj4779)
			if r.TryDecodeAsNil() {
				yyv4779[yyj4779] = ""
			} else {
				yyv4779[yyj4779] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4779 {
			for ; yyj4779 < yyl4779; yyj4779++ {
				yyv4779 = append(yyv4779, "")
				yyh4779.ElemContainerState(yyj4779)
				if r.TryDecodeAsNil() {
					yyv4779[yyj4779] = ""
				} else {
					yyv4779[yyj4779] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4779 := 0
		for ; !r.CheckBreak(); yyj4779++ {

			if yyj4779 >= len(yyv4779) {
				yyv4779 = append(yyv4779, "") // var yyz4779 UniqueVolumeName
				yyc4779 = true
			}
			yyh4779.ElemContainerState(yyj4779)
			if yyj4779 < len(yyv4779) {
				if r.TryDecodeAsNil() {
					yyv4779[yyj4779] = ""
				} else {
					yyv4779[yyj4779] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4779 < len(yyv4779) {
			yyv4779 = yyv4779[:yyj4779]
			yyc4779 = true
		} else if yyj4779 == 0 && yyv4779 == nil {
			yyv4779 = []UniqueVolumeName{}
			yyc4779 = true
		}
	}
	yyh4779.End()
	if yyc4779 {
		*v = yyv4779
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4783 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4784 := &yyv4783
		yy4784.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4785 := *v
	yyh4785, yyl4785 := z.DecSliceHelperStart()
	var yyc4785 bool
	if yyl4785 == 0 {
		if yyv4785 == nil {
			yyv4785 = []AttachedVolume{}
			yyc4785 = true
		} else if len(yyv4785) != 0 {
			yyv4785 = yyv4785[:0]
			yyc4785 = true
		}
	} else if yyl4785 > 0 {
		var yyrr4785, yyrl4785 int
		var yyrt4785 bool
		if yyl4785 > cap(yyv4785) {

			yyrg4785 := len(yyv4785) > 0
			yyv24785 := yyv4785
			yyrl4785, yyrt4785 = z.DecInferLen(yyl4785, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4785 {
				if yyrl4785 <= cap(yyv4785) {
					yyv4785 = yyv4785[:yyrl4785]
				} else {
					yyv4785 = make([]AttachedVolume, yyrl4785)
				}
			} else {
				yyv4785 = make([]AttachedVolume, yyrl4785)
			}
			yyc4785 = true
			yyrr4785 = len(yyv4785)
			if yyrg4785 {
				copy(yyv4785, yyv24785)
			}
		} else if yyl4785 != len(yyv4785) {
			yyv4785 = yyv4785[:yyl4785]
			yyc4785 = true
		}
		yyj4785 := 0
		for ; yyj4785 < yyrr4785; yyj4785++ {
			yyh4785.ElemContainerState(yyj4785)
			if r.TryDecodeAsNil() {
				yyv4785[yyj4785] = AttachedVolume{}
			} else {
				yyv4786 := &yyv4785[yyj4785]
				yyv4786.CodecDecodeSelf(d)
			}

		}
		if yyrt4785 {
			for ; yyj4785 < yyl4785; yyj4785++ {
				yyv4785 = append(yyv4785, AttachedVolume{})
				yyh4785.ElemContainerState(yyj4785)
				if r.TryDecodeAsNil() {
					yyv4785[yyj4785] = AttachedVolume{}
				} else {
					yyv4787 := &yyv4785[yyj4785]
					yyv4787.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4785 := 0
		for ; !r.CheckBreak(); yyj4785++ {

			if yyj4785 >= len(yyv4785) {
				yyv4785 = append(yyv4785, AttachedVolume{}) // var yyz4785 AttachedVolume
				yyc4785 = true
			}
			yyh4785.ElemContainerState(yyj4785)
			if yyj4785 < len(yyv4785) {
				if r.TryDecodeAsNil() {
					yyv4785[yyj4785] = AttachedVolume{}
				} else {
					yyv4788 := &yyv4785[yyj4785]
					yyv4788.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4785 < len(yyv4785) {
			yyv4785 = yyv4785[:yyj4785]
			yyc4785 = true
		} else if yyj4785 == 0 && yyv4785 == nil {
			yyv4785 = []AttachedVolume{}
			yyc4785 = true
		}
	}
	yyh4785.End()
	if yyc4785 {
		*v = yyv4785
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4789 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4790 := &yyv4789
		yy4790.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4791 := *v
	yyh4791, yyl4791 := z.DecSliceHelperStart()
	var yyc4791 bool
	if yyl4791 == 0 {
		if yyv4791 == nil {
			yyv4791 = []PreferAvoidPodsEntry{}
			yyc4791 = true
		} else if len(yyv4791) != 0 {
			yyv4791 = yyv4791[:0]
			yyc4791 = true
		}
	} else if yyl4791 > 0 {
		var yyrr4791, yyrl4791 int
		var yyrt4791 bool
		if yyl4791 > cap(yyv4791) {

			yyrg4791 := len(yyv4791) > 0
			yyv24791 := yyv4791
			yyrl4791, yyrt4791 = z.DecInferLen(yyl4791, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4791 {
				if yyrl4791 <= cap(yyv4791) {
					yyv4791 = yyv4791[:yyrl4791]
				} else {
					yyv4791 = make([]PreferAvoidPodsEntry, yyrl4791)
				}
			} else {
				yyv4791 = make([]PreferAvoidPodsEntry, yyrl4791)
			}
			yyc4791 = true
			yyrr4791 = len(yyv4791)
			if yyrg4791 {
				copy(yyv4791, yyv24791)
			}
		} else if yyl4791 != len(yyv4791) {
			yyv4791 = yyv4791[:yyl4791]
			yyc4791 = true
		}
		yyj4791 := 0
		for ; yyj4791 < yyrr4791; yyj4791++ {
			yyh4791.ElemContainerState(yyj4791)
			if r.TryDecodeAsNil() {
				yyv4791[yyj4791] = PreferAvoidPodsEntry{}
			} else {
				yyv4792 := &yyv4791[yyj4791]
				yyv4792.CodecDecodeSelf(d)
			}

		}
		if yyrt4791 {
			for ; yyj4791 < yyl4791; yyj4791++ {
				yyv4791 = append(yyv4791, PreferAvoidPodsEntry{})
				yyh4791.ElemContainerState(yyj4791)
				if r.TryDecodeAsNil() {
					yyv4791[yyj4791] = PreferAvoidPodsEntry{}
				} else {
					yyv4793 := &yyv4791[yyj4791]
					yyv4793.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4791 := 0
		for ; !r.CheckBreak(); yyj4791++ {

			if yyj4791 >= len(yyv4791) {
				yyv4791 = append(yyv4791, PreferAvoidPodsEntry{}) // var yyz4791 PreferAvoidPodsEntry
				yyc4791 = true
			}
			yyh4791.ElemContainerState(yyj4791)
			if yyj4791 < len(yyv4791) {
				if r.TryDecodeAsNil() {
					yyv4791[yyj4791] = PreferAvoidPodsEntry{}
				} else {
					yyv4794 := &yyv4791[yyj4791]
					yyv4794.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4791 < len(yyv4791) {
			yyv4791 = yyv4791[:yyj4791]
			yyc4791 = true
		} else if yyj4791 == 0 && yyv4791 == nil {
			yyv4791 = []PreferAvoidPodsEntry{}
			yyc4791 = true
		}
	}
	yyh4791.End()
	if yyc4791 {
		*v = yyv4791
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4795, yyv4795 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4795.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4796 := &yyv4795
		yym4797 := z.EncBinary()
		_ = yym4797
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4796) {
		} else if !yym4797 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4796)
		} else {
			z.EncFallback(yy4796)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4798 := *v
	yyl4798 := r.ReadMapStart()
	yybh4798 := z.DecBasicHandle()
	if yyv4798 == nil {
		yyrl4798, _ := z.DecInferLen(yyl4798, yybh4798.MaxInitLen, 72)
		yyv4798 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4798)
		*v = yyv4798
	}
	var yymk4798 ResourceName
	var yymv4798 pkg3_resource.Quantity
	var yymg4798 bool
	if yybh4798.MapValueReset {
		yymg4798 = true
	}
	if yyl4798 > 0 {
		for yyj4798 := 0; yyj4798 < yyl4798; yyj4798++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4798 = ""
			} else {
				yymk4798 = ResourceName(r.DecodeString())
			}

			if yymg4798 {
				yymv4798 = yyv4798[yymk4798]
			} else {
				yymv4798 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4798 = pkg3_resource.Quantity{}
			} else {
				yyv4800 := &yymv4798
				yym4801 := z.DecBinary()
				_ = yym4801
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4800) {
				} else if !yym4801 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4800)
				} else {
					z.DecFallback(yyv4800, false)
				}
			}

			if yyv4798 != nil {
				yyv4798[yymk4798] = yymv4798
			}
		}
	} else if yyl4798 < 0 {
		for yyj4798 := 0; !r.CheckBreak(); yyj4798++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4798 = ""
			} else {
				yymk4798 = ResourceName(r.DecodeString())
			}

			if yymg4798 {
				yymv4798 = yyv4798[yymk4798]
			} else {
				yymv4798 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4798 = pkg3_resource.Quantity{}
			} else {
				yyv4803 := &yymv4798
				yym4804 := z.DecBinary()
				_ = yym4804
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4803) {
				} else if !yym4804 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4803)
				} else {
					z.DecFallback(yyv4803, false)
				}
			}

			if yyv4798 != nil {
				yyv4798[yymk4798] = yymv4798
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4805 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4806 := &yyv4805
		yy4806.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4807 := *v
	yyh4807, yyl4807 := z.DecSliceHelperStart()
	var yyc4807 bool
	if yyl4807 == 0 {
		if yyv4807 == nil {
			yyv4807 = []Node{}
			yyc4807 = true
		} else if len(yyv4807) != 0 {
			yyv4807 = yyv4807[:0]
			yyc4807 = true
		}
	} else if yyl4807 > 0 {
		var yyrr4807, yyrl4807 int
		var yyrt4807 bool
		if yyl4807 > cap(yyv4807) {

			yyrg4807 := len(yyv4807) > 0
			yyv24807 := yyv4807
			yyrl4807, yyrt4807 = z.DecInferLen(yyl4807, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4807 {
				if yyrl4807 <= cap(yyv4807) {
					yyv4807 = yyv4807[:yyrl4807]
				} else {
					yyv4807 = make([]Node, yyrl4807)
				}
			} else {
				yyv4807 = make([]Node, yyrl4807)
			}
			yyc4807 = true
			yyrr4807 = len(yyv4807)
			if yyrg4807 {
				copy(yyv4807, yyv24807)
			}
		} else if yyl4807 != len(yyv4807) {
			yyv4807 = yyv4807[:yyl4807]
			yyc4807 = true
		}
		yyj4807 := 0
		for ; yyj4807 < yyrr4807; yyj4807++ {
			yyh4807.ElemContainerState(yyj4807)
			if r.TryDecodeAsNil() {
				yyv4807[yyj4807] = Node{}
			} else {
				yyv4808 := &yyv4807[yyj4807]
				yyv4808.CodecDecodeSelf(d)
			}

		}
		if yyrt4807 {
			for ; yyj4807 < yyl4807; yyj4807++ {
				yyv4807 = append(yyv4807, Node{})
				yyh4807.ElemContainerState(yyj4807)
				if r.TryDecodeAsNil() {
					yyv4807[yyj4807] = Node{}
				} else {
					yyv4809 := &yyv4807[yyj4807]
					yyv4809.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4807 := 0
		for ; !r.CheckBreak(); yyj4807++ {

			if yyj4807 >= len(yyv4807) {
				yyv4807 = append(yyv4807, Node{}) // var yyz4807 Node
				yyc4807 = true
			}
			yyh4807.ElemContainerState(yyj4807)
			if yyj4807 < len(yyv4807) {
				if r.TryDecodeAsNil() {
					yyv4807[yyj4807] = Node{}
				} else {
					yyv4810 := &yyv4807[yyj4807]
					yyv4810.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4807 < len(yyv4807) {
			yyv4807 = yyv4807[:yyj4807]
			yyc4807 = true
		} else if yyj4807 == 0 && yyv4807 == nil {
			yyv4807 = []Node{}
			yyc4807 = true
		}
	}
	yyh4807.End()
	if yyc4807 {
		*v = yyv4807
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4811 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4811.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4812 := *v
	yyh4812, yyl4812 := z.DecSliceHelperStart()
	var yyc4812 bool
	if yyl4812 == 0 {
		if yyv4812 == nil {
			yyv4812 = []FinalizerName{}
			yyc4812 = true
		} else if len(yyv4812) != 0 {
			yyv4812 = yyv4812[:0]
			yyc4812 = true
		}
	} else if yyl4812 > 0 {
		var yyrr4812, yyrl4812 int
		var yyrt4812 bool
		if yyl4812 > cap(yyv4812) {

			yyrl4812, yyrt4812 = z.DecInferLen(yyl4812, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4812 {
				if yyrl4812 <= cap(yyv4812) {
					yyv4812 = yyv4812[:yyrl4812]
				} else {
					yyv4812 = make([]FinalizerName, yyrl4812)
				}
			} else {
				yyv4812 = make([]FinalizerName, yyrl4812)
			}
			yyc4812 = true
			yyrr4812 = len(yyv4812)
		} else if yyl4812 != len(yyv4812) {
			yyv4812 = yyv4812[:yyl4812]
			yyc4812 = true
		}
		yyj4812 := 0
		for ; yyj4812 < yyrr4812; yyj4812++ {
			yyh4812.ElemContainerState(yyj4812)
			if r.TryDecodeAsNil() {
				yyv4812[yyj4812] = ""
			} else {
				yyv4812[yyj4812] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4812 {
			for ; yyj4812 < yyl4812; yyj4812++ {
				yyv4812 = append(yyv4812, "")
				yyh4812.ElemContainerState(yyj4812)
				if r.TryDecodeAsNil() {
					yyv4812[yyj4812] = ""
				} else {
					yyv4812[yyj4812] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4812 := 0
		for ; !r.CheckBreak(); yyj4812++ {

			if yyj4812 >= len(yyv4812) {
				yyv4812 = append(yyv4812, "") // var yyz4812 FinalizerName
				yyc4812 = true
			}
			yyh4812.ElemContainerState(yyj4812)
			if yyj4812 < len(yyv4812) {
				if r.TryDecodeAsNil() {
					yyv4812[yyj4812] = ""
				} else {
					yyv4812[yyj4812] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4812 < len(yyv4812) {
			yyv4812 = yyv4812[:yyj4812]
			yyc4812 = true
		} else if yyj4812 == 0 && yyv4812 == nil {
			yyv4812 = []FinalizerName{}
			yyc4812 = true
		}
	}
	yyh4812.End()
	if yyc4812 {
		*v = yyv4812
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4816 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4817 := &yyv4816
		yy4817.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4818 := *v
	yyh4818, yyl4818 := z.DecSliceHelperStart()
	var yyc4818 bool
	if yyl4818 == 0 {
		if yyv4818 == nil {
			yyv4818 = []Namespace{}
			yyc4818 = true
		} else if len(yyv4818) != 0 {
			yyv4818 = yyv4818[:0]
			yyc4818 = true
		}
	} else if yyl4818 > 0 {
		var yyrr4818, yyrl4818 int
		var yyrt4818 bool
		if yyl4818 > cap(yyv4818) {

			yyrg4818 := len(yyv4818) > 0
			yyv24818 := yyv4818
			yyrl4818, yyrt4818 = z.DecInferLen(yyl4818, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4818 {
				if yyrl4818 <= cap(yyv4818) {
					yyv4818 = yyv4818[:yyrl4818]
				} else {
					yyv4818 = make([]Namespace, yyrl4818)
				}
			} else {
				yyv4818 = make([]Namespace, yyrl4818)
			}
			yyc4818 = true
			yyrr4818 = len(yyv4818)
			if yyrg4818 {
				copy(yyv4818, yyv24818)
			}
		} else if yyl4818 != len(yyv4818) {
			yyv4818 = yyv4818[:yyl4818]
			yyc4818 = true
		}
		yyj4818 := 0
		for ; yyj4818 < yyrr4818; yyj4818++ {
			yyh4818.ElemContainerState(yyj4818)
			if r.TryDecodeAsNil() {
				yyv4818[yyj4818] = Namespace{}
			} else {
				yyv4819 := &yyv4818[yyj4818]
				yyv4819.CodecDecodeSelf(d)
			}

		}
		if yyrt4818 {
			for ; yyj4818 < yyl4818; yyj4818++ {
				yyv4818 = append(yyv4818, Namespace{})
				yyh4818.ElemContainerState(yyj4818)
				if r.TryDecodeAsNil() {
					yyv4818[yyj4818] = Namespace{}
				} else {
					yyv4820 := &yyv4818[yyj4818]
					yyv4820.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4818 := 0
		for ; !r.CheckBreak(); yyj4818++ {

			if yyj4818 >= len(yyv4818) {
				yyv4818 = append(yyv4818, Namespace{}) // var yyz4818 Namespace
				yyc4818 = true
			}
			yyh4818.ElemContainerState(yyj4818)
			if yyj4818 < len(yyv4818) {
				if r.TryDecodeAsNil() {
					yyv4818[yyj4818] = Namespace{}
				} else {
					yyv4821 := &yyv4818[yyj4818]
					yyv4821.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4818 < len(yyv4818) {
			yyv4818 = yyv4818[:yyj4818]
			yyc4818 = true
		} else if yyj4818 == 0 && yyv4818 == nil {
			yyv4818 = []Namespace{}
			yyc4818 = true
		}
	}
	yyh4818.End()
	if yyc4818 {
		*v = yyv4818
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4822 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4823 := &yyv4822
		yy4823.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4824 := *v
	yyh4824, yyl4824 := z.DecSliceHelperStart()
	var yyc4824 bool
	if yyl4824 == 0 {
		if yyv4824 == nil {
			yyv4824 = []Event{}
			yyc4824 = true
		} else if len(yyv4824) != 0 {
			yyv4824 = yyv4824[:0]
			yyc4824 = true
		}
	} else if yyl4824 > 0 {
		var yyrr4824, yyrl4824 int
		var yyrt4824 bool
		if yyl4824 > cap(yyv4824) {

			yyrg4824 := len(yyv4824) > 0
			yyv24824 := yyv4824
			yyrl4824, yyrt4824 = z.DecInferLen(yyl4824, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4824 {
				if yyrl4824 <= cap(yyv4824) {
					yyv4824 = yyv4824[:yyrl4824]
				} else {
					yyv4824 = make([]Event, yyrl4824)
				}
			} else {
				yyv4824 = make([]Event, yyrl4824)
			}
			yyc4824 = true
			yyrr4824 = len(yyv4824)
			if yyrg4824 {
				copy(yyv4824, yyv24824)
			}
		} else if yyl4824 != len(yyv4824) {
			yyv4824 = yyv4824[:yyl4824]
			yyc4824 = true
		}
		yyj4824 := 0
		for ; yyj4824 < yyrr4824; yyj4824++ {
			yyh4824.ElemContainerState(yyj4824)
			if r.TryDecodeAsNil() {
				yyv4824[yyj4824] = Event{}
			} else {
				yyv4825 := &yyv4824[yyj4824]
				yyv4825.CodecDecodeSelf(d)
			}

		}
		if yyrt4824 {
			for ; yyj4824 < yyl4824; yyj4824++ {
				yyv4824 = append(yyv4824, Event{})
				yyh4824.ElemContainerState(yyj4824)
				if r.TryDecodeAsNil() {
					yyv4824[yyj4824] = Event{}
				} else {
					yyv4826 := &yyv4824[yyj4824]
					yyv4826.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4824 := 0
		for ; !r.CheckBreak(); yyj4824++ {

			if yyj4824 >= len(yyv4824) {
				yyv4824 = append(yyv4824, Event{}) // var yyz4824 Event
				yyc4824 = true
			}
			yyh4824.ElemContainerState(yyj4824)
			if yyj4824 < len(yyv4824) {
				if r.TryDecodeAsNil() {
					yyv4824[yyj4824] = Event{}
				} else {
					yyv4827 := &yyv4824[yyj4824]
					yyv4827.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4824 < len(yyv4824) {
			yyv4824 = yyv4824[:yyj4824]
			yyc4824 = true
		} else if yyj4824 == 0 && yyv4824 == nil {
			yyv4824 = []Event{}
			yyc4824 = true
		}
	}
	yyh4824.End()
	if yyc4824 {
		*v = yyv4824
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4828 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4828 == nil {
			r.EncodeNil()
		} else {
			yym4829 := z.EncBinary()
			_ = yym4829
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4828) {
			} else {
				z.EncFallback(yyv4828)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4830 := *v
	yyh4830, yyl4830 := z.DecSliceHelperStart()
	var yyc4830 bool
	if yyl4830 == 0 {
		if yyv4830 == nil {
			yyv4830 = []pkg7_runtime.Object{}
			yyc4830 = true
		} else if len(yyv4830) != 0 {
			yyv4830 = yyv4830[:0]
			yyc4830 = true
		}
	} else if yyl4830 > 0 {
		var yyrr4830, yyrl4830 int
		var yyrt4830 bool
		if yyl4830 > cap(yyv4830) {

			yyrg4830 := len(yyv4830) > 0
			yyv24830 := yyv4830
			yyrl4830, yyrt4830 = z.DecInferLen(yyl4830, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4830 {
				if yyrl4830 <= cap(yyv4830) {
					yyv4830 = yyv4830[:yyrl4830]
				} else {
					yyv4830 = make([]pkg7_runtime.Object, yyrl4830)
				}
			} else {
				yyv4830 = make([]pkg7_runtime.Object, yyrl4830)
			}
			yyc4830 = true
			yyrr4830 = len(yyv4830)
			if yyrg4830 {
				copy(yyv4830, yyv24830)
			}
		} else if yyl4830 != len(yyv4830) {
			yyv4830 = yyv4830[:yyl4830]
			yyc4830 = true
		}
		yyj4830 := 0
		for ; yyj4830 < yyrr4830; yyj4830++ {
			yyh4830.ElemContainerState(yyj4830)
			if r.TryDecodeAsNil() {
				yyv4830[yyj4830] = nil
			} else {
				yyv4831 := &yyv4830[yyj4830]
				yym4832 := z.DecBinary()
				_ = yym4832
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4831) {
				} else {
					z.DecFallback(yyv4831, true)
				}
			}

		}
		if yyrt4830 {
			for ; yyj4830 < yyl4830; yyj4830++ {
				yyv4830 = append(yyv4830, nil)
				yyh4830.ElemContainerState(yyj4830)
				if r.TryDecodeAsNil() {
					yyv4830[yyj4830] = nil
				} else {
					yyv4833 := &yyv4830[yyj4830]
					yym4834 := z.DecBinary()
					_ = yym4834
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4833) {
					} else {
						z.DecFallback(yyv4833, true)
					}
				}

			}
		}

	} else {
		yyj4830 := 0
		for ; !r.CheckBreak(); yyj4830++ {

			if yyj4830 >= len(yyv4830) {
				yyv4830 = append(yyv4830, nil) // var yyz4830 pkg7_runtime.Object
				yyc4830 = true
			}
			yyh4830.ElemContainerState(yyj4830)
			if yyj4830 < len(yyv4830) {
				if r.TryDecodeAsNil() {
					yyv4830[yyj4830] = nil
				} else {
					yyv4835 := &yyv4830[yyj4830]
					yym4836 := z.DecBinary()
					_ = yym4836
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4835) {
					} else {
						z.DecFallback(yyv4835, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4830 < len(yyv4830) {
			yyv4830 = yyv4830[:yyj4830]
			yyc4830 = true
		} else if yyj4830 == 0 && yyv4830 == nil {
			yyv4830 = []pkg7_runtime.Object{}
			yyc4830 = true
		}
	}
	yyh4830.End()
	if yyc4830 {
		*v = yyv4830
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4837 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4838 := &yyv4837
		yy4838.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4839 := *v
	yyh4839, yyl4839 := z.DecSliceHelperStart()
	var yyc4839 bool
	if yyl4839 == 0 {
		if yyv4839 == nil {
			yyv4839 = []LimitRangeItem{}
			yyc4839 = true
		} else if len(yyv4839) != 0 {
			yyv4839 = yyv4839[:0]
			yyc4839 = true
		}
	} else if yyl4839 > 0 {
		var yyrr4839, yyrl4839 int
		var yyrt4839 bool
		if yyl4839 > cap(yyv4839) {

			yyrg4839 := len(yyv4839) > 0
			yyv24839 := yyv4839
			yyrl4839, yyrt4839 = z.DecInferLen(yyl4839, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4839 {
				if yyrl4839 <= cap(yyv4839) {
					yyv4839 = yyv4839[:yyrl4839]
				} else {
					yyv4839 = make([]LimitRangeItem, yyrl4839)
				}
			} else {
				yyv4839 = make([]LimitRangeItem, yyrl4839)
			}
			yyc4839 = true
			yyrr4839 = len(yyv4839)
			if yyrg4839 {
				copy(yyv4839, yyv24839)
			}
		} else if yyl4839 != len(yyv4839) {
			yyv4839 = yyv4839[:yyl4839]
			yyc4839 = true
		}
		yyj4839 := 0
		for ; yyj4839 < yyrr4839; yyj4839++ {
			yyh4839.ElemContainerState(yyj4839)
			if r.TryDecodeAsNil() {
				yyv4839[yyj4839] = LimitRangeItem{}
			} else {
				yyv4840 := &yyv4839[yyj4839]
				yyv4840.CodecDecodeSelf(d)
			}

		}
		if yyrt4839 {
			for ; yyj4839 < yyl4839; yyj4839++ {
				yyv4839 = append(yyv4839, LimitRangeItem{})
				yyh4839.ElemContainerState(yyj4839)
				if r.TryDecodeAsNil() {
					yyv4839[yyj4839] = LimitRangeItem{}
				} else {
					yyv4841 := &yyv4839[yyj4839]
					yyv4841.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4839 := 0
		for ; !r.CheckBreak(); yyj4839++ {

			if yyj4839 >= len(yyv4839) {
				yyv4839 = append(yyv4839, LimitRangeItem{}) // var yyz4839 LimitRangeItem
				yyc4839 = true
			}
			yyh4839.ElemContainerState(yyj4839)
			if yyj4839 < len(yyv4839) {
				if r.TryDecodeAsNil() {
					yyv4839[yyj4839] = LimitRangeItem{}
				} else {
					yyv4842 := &yyv4839[yyj4839]
					yyv4842.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4839 < len(yyv4839) {
			yyv4839 = yyv4839[:yyj4839]
			yyc4839 = true
		} else if yyj4839 == 0 && yyv4839 == nil {
			yyv4839 = []LimitRangeItem{}
			yyc4839 = true
		}
	}
	yyh4839.End()
	if yyc4839 {
		*v = yyv4839
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4843 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4844 := &yyv4843
		yy4844.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4845 := *v
	yyh4845, yyl4845 := z.DecSliceHelperStart()
	var yyc4845 bool
	if yyl4845 == 0 {
		if yyv4845 == nil {
			yyv4845 = []LimitRange{}
			yyc4845 = true
		} else if len(yyv4845) != 0 {
			yyv4845 = yyv4845[:0]
			yyc4845 = true
		}
	} else if yyl4845 > 0 {
		var yyrr4845, yyrl4845 int
		var yyrt4845 bool
		if yyl4845 > cap(yyv4845) {

			yyrg4845 := len(yyv4845) > 0
			yyv24845 := yyv4845
			yyrl4845, yyrt4845 = z.DecInferLen(yyl4845, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4845 {
				if yyrl4845 <= cap(yyv4845) {
					yyv4845 = yyv4845[:yyrl4845]
				} else {
					yyv4845 = make([]LimitRange, yyrl4845)
				}
			} else {
				yyv4845 = make([]LimitRange, yyrl4845)
			}
			yyc4845 = true
			yyrr4845 = len(yyv4845)
			if yyrg4845 {
				copy(yyv4845, yyv24845)
			}
		} else if yyl4845 != len(yyv4845) {
			yyv4845 = yyv4845[:yyl4845]
			yyc4845 = true
		}
		yyj4845 := 0
		for ; yyj4845 < yyrr4845; yyj4845++ {
			yyh4845.ElemContainerState(yyj4845)
			if r.TryDecodeAsNil() {
				yyv4845[yyj4845] = LimitRange{}
			} else {
				yyv4846 := &yyv4845[yyj4845]
				yyv4846.CodecDecodeSelf(d)
			}

		}
		if yyrt4845 {
			for ; yyj4845 < yyl4845; yyj4845++ {
				yyv4845 = append(yyv4845, LimitRange{})
				yyh4845.ElemContainerState(yyj4845)
				if r.TryDecodeAsNil() {
					yyv4845[yyj4845] = LimitRange{}
				} else {
					yyv4847 := &yyv4845[yyj4845]
					yyv4847.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4845 := 0
		for ; !r.CheckBreak(); yyj4845++ {

			if yyj4845 >= len(yyv4845) {
				yyv4845 = append(yyv4845, LimitRange{}) // var yyz4845 LimitRange
				yyc4845 = true
			}
			yyh4845.ElemContainerState(yyj4845)
			if yyj4845 < len(yyv4845) {
				if r.TryDecodeAsNil() {
					yyv4845[yyj4845] = LimitRange{}
				} else {
					yyv4848 := &yyv4845[yyj4845]
					yyv4848.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4845 < len(yyv4845) {
			yyv4845 = yyv4845[:yyj4845]
			yyc4845 = true
		} else if yyj4845 == 0 && yyv4845 == nil {
			yyv4845 = []LimitRange{}
			yyc4845 = true
		}
	}
	yyh4845.End()
	if yyc4845 {
		*v = yyv4845
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4849 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4849.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4850 := *v
	yyh4850, yyl4850 := z.DecSliceHelperStart()
	var yyc4850 bool
	if yyl4850 == 0 {
		if yyv4850 == nil {
			yyv4850 = []ResourceQuotaScope{}
			yyc4850 = true
		} else if len(yyv4850) != 0 {
			yyv4850 = yyv4850[:0]
			yyc4850 = true
		}
	} else if yyl4850 > 0 {
		var yyrr4850, yyrl4850 int
		var yyrt4850 bool
		if yyl4850 > cap(yyv4850) {

			yyrl4850, yyrt4850 = z.DecInferLen(yyl4850, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4850 {
				if yyrl4850 <= cap(yyv4850) {
					yyv4850 = yyv4850[:yyrl4850]
				} else {
					yyv4850 = make([]ResourceQuotaScope, yyrl4850)
				}
			} else {
				yyv4850 = make([]ResourceQuotaScope, yyrl4850)
			}
			yyc4850 = true
			yyrr4850 = len(yyv4850)
		} else if yyl4850 != len(yyv4850) {
			yyv4850 = yyv4850[:yyl4850]
			yyc4850 = true
		}
		yyj4850 := 0
		for ; yyj4850 < yyrr4850; yyj4850++ {
			yyh4850.ElemContainerState(yyj4850)
			if r.TryDecodeAsNil() {
				yyv4850[yyj4850] = ""
			} else {
				yyv4850[yyj4850] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4850 {
			for ; yyj4850 < yyl4850; yyj4850++ {
				yyv4850 = append(yyv4850, "")
				yyh4850.ElemContainerState(yyj4850)
				if r.TryDecodeAsNil() {
					yyv4850[yyj4850] = ""
				} else {
					yyv4850[yyj4850] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4850 := 0
		for ; !r.CheckBreak(); yyj4850++ {

			if yyj4850 >= len(yyv4850) {
				yyv4850 = append(yyv4850, "") // var yyz4850 ResourceQuotaScope
				yyc4850 = true
			}
			yyh4850.ElemContainerState(yyj4850)
			if yyj4850 < len(yyv4850) {
				if r.TryDecodeAsNil() {
					yyv4850[yyj4850] = ""
				} else {
					yyv4850[yyj4850] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4850 < len(yyv4850) {
			yyv4850 = yyv4850[:yyj4850]
			yyc4850 = true
		} else if yyj4850 == 0 && yyv4850 == nil {
			yyv4850 = []ResourceQuotaScope{}
			yyc4850 = true
		}
	}
	yyh4850.End()
	if yyc4850 {
		*v = yyv4850
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4854 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4855 := &yyv4854
		yy4855.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4856 := *v
	yyh4856, yyl4856 := z.DecSliceHelperStart()
	var yyc4856 bool
	if yyl4856 == 0 {
		if yyv4856 == nil {
			yyv4856 = []ResourceQuota{}
			yyc4856 = true
		} else if len(yyv4856) != 0 {
			yyv4856 = yyv4856[:0]
			yyc4856 = true
		}
	} else if yyl4856 > 0 {
		var yyrr4856, yyrl4856 int
		var yyrt4856 bool
		if yyl4856 > cap(yyv4856) {

			yyrg4856 := len(yyv4856) > 0
			yyv24856 := yyv4856
			yyrl4856, yyrt4856 = z.DecInferLen(yyl4856, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4856 {
				if yyrl4856 <= cap(yyv4856) {
					yyv4856 = yyv4856[:yyrl4856]
				} else {
					yyv4856 = make([]ResourceQuota, yyrl4856)
				}
			} else {
				yyv4856 = make([]ResourceQuota, yyrl4856)
			}
			yyc4856 = true
			yyrr4856 = len(yyv4856)
			if yyrg4856 {
				copy(yyv4856, yyv24856)
			}
		} else if yyl4856 != len(yyv4856) {
			yyv4856 = yyv4856[:yyl4856]
			yyc4856 = true
		}
		yyj4856 := 0
		for ; yyj4856 < yyrr4856; yyj4856++ {
			yyh4856.ElemContainerState(yyj4856)
			if r.TryDecodeAsNil() {
				yyv4856[yyj4856] = ResourceQuota{}
			} else {
				yyv4857 := &yyv4856[yyj4856]
				yyv4857.CodecDecodeSelf(d)
			}

		}
		if yyrt4856 {
			for ; yyj4856 < yyl4856; yyj4856++ {
				yyv4856 = append(yyv4856, ResourceQuota{})
				yyh4856.ElemContainerState(yyj4856)
				if r.TryDecodeAsNil() {
					yyv4856[yyj4856] = ResourceQuota{}
				} else {
					yyv4858 := &yyv4856[yyj4856]
					yyv4858.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4856 := 0
		for ; !r.CheckBreak(); yyj4856++ {

			if yyj4856 >= len(yyv4856) {
				yyv4856 = append(yyv4856, ResourceQuota{}) // var yyz4856 ResourceQuota
				yyc4856 = true
			}
			yyh4856.ElemContainerState(yyj4856)
			if yyj4856 < len(yyv4856) {
				if r.TryDecodeAsNil() {
					yyv4856[yyj4856] = ResourceQuota{}
				} else {
					yyv4859 := &yyv4856[yyj4856]
					yyv4859.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4856 < len(yyv4856) {
			yyv4856 = yyv4856[:yyj4856]
			yyc4856 = true
		} else if yyj4856 == 0 && yyv4856 == nil {
			yyv4856 = []ResourceQuota{}
			yyc4856 = true
		}
	}
	yyh4856.End()
	if yyc4856 {
		*v = yyv4856
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4860, yyv4860 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4861 := z.EncBinary()
		_ = yym4861
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4860))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4860 == nil {
			r.EncodeNil()
		} else {
			yym4862 := z.EncBinary()
			_ = yym4862
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4860))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4863 := *v
	yyl4863 := r.ReadMapStart()
	yybh4863 := z.DecBasicHandle()
	if yyv4863 == nil {
		yyrl4863, _ := z.DecInferLen(yyl4863, yybh4863.MaxInitLen, 40)
		yyv4863 = make(map[string][]uint8, yyrl4863)
		*v = yyv4863
	}
	var yymk4863 string
	var yymv4863 []uint8
	var yymg4863 bool
	if yybh4863.MapValueReset {
		yymg4863 = true
	}
	if yyl4863 > 0 {
		for yyj4863 := 0; yyj4863 < yyl4863; yyj4863++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4863 = ""
			} else {
				yymk4863 = string(r.DecodeString())
			}

			if yymg4863 {
				yymv4863 = yyv4863[yymk4863]
			} else {
				yymv4863 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4863 = nil
			} else {
				yyv4865 := &yymv4863
				yym4866 := z.DecBinary()
				_ = yym4866
				if false {
				} else {
					*yyv4865 = r.DecodeBytes(*(*[]byte)(yyv4865), false, false)
				}
			}

			if yyv4863 != nil {
				yyv4863[yymk4863] = yymv4863
			}
		}
	} else if yyl4863 < 0 {
		for yyj4863 := 0; !r.CheckBreak(); yyj4863++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4863 = ""
			} else {
				yymk4863 = string(r.DecodeString())
			}

			if yymg4863 {
				yymv4863 = yyv4863[yymk4863]
			} else {
				yymv4863 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4863 = nil
			} else {
				yyv4868 := &yymv4863
				yym4869 := z.DecBinary()
				_ = yym4869
				if false {
				} else {
					*yyv4868 = r.DecodeBytes(*(*[]byte)(yyv4868), false, false)
				}
			}

			if yyv4863 != nil {
				yyv4863[yymk4863] = yymv4863
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4870 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4871 := &yyv4870
		yy4871.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4872 := *v
	yyh4872, yyl4872 := z.DecSliceHelperStart()
	var yyc4872 bool
	if yyl4872 == 0 {
		if yyv4872 == nil {
			yyv4872 = []Secret{}
			yyc4872 = true
		} else if len(yyv4872) != 0 {
			yyv4872 = yyv4872[:0]
			yyc4872 = true
		}
	} else if yyl4872 > 0 {
		var yyrr4872, yyrl4872 int
		var yyrt4872 bool
		if yyl4872 > cap(yyv4872) {

			yyrg4872 := len(yyv4872) > 0
			yyv24872 := yyv4872
			yyrl4872, yyrt4872 = z.DecInferLen(yyl4872, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4872 {
				if yyrl4872 <= cap(yyv4872) {
					yyv4872 = yyv4872[:yyrl4872]
				} else {
					yyv4872 = make([]Secret, yyrl4872)
				}
			} else {
				yyv4872 = make([]Secret, yyrl4872)
			}
			yyc4872 = true
			yyrr4872 = len(yyv4872)
			if yyrg4872 {
				copy(yyv4872, yyv24872)
			}
		} else if yyl4872 != len(yyv4872) {
			yyv4872 = yyv4872[:yyl4872]
			yyc4872 = true
		}
		yyj4872 := 0
		for ; yyj4872 < yyrr4872; yyj4872++ {
			yyh4872.ElemContainerState(yyj4872)
			if r.TryDecodeAsNil() {
				yyv4872[yyj4872] = Secret{}
			} else {
				yyv4873 := &yyv4872[yyj4872]
				yyv4873.CodecDecodeSelf(d)
			}

		}
		if yyrt4872 {
			for ; yyj4872 < yyl4872; yyj4872++ {
				yyv4872 = append(yyv4872, Secret{})
				yyh4872.ElemContainerState(yyj4872)
				if r.TryDecodeAsNil() {
					yyv4872[yyj4872] = Secret{}
				} else {
					yyv4874 := &yyv4872[yyj4872]
					yyv4874.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4872 := 0
		for ; !r.CheckBreak(); yyj4872++ {

			if yyj4872 >= len(yyv4872) {
				yyv4872 = append(yyv4872, Secret{}) // var yyz4872 Secret
				yyc4872 = true
			}
			yyh4872.ElemContainerState(yyj4872)
			if yyj4872 < len(yyv4872) {
				if r.TryDecodeAsNil() {
					yyv4872[yyj4872] = Secret{}
				} else {
					yyv4875 := &yyv4872[yyj4872]
					yyv4875.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4872 < len(yyv4872) {
			yyv4872 = yyv4872[:yyj4872]
			yyc4872 = true
		} else if yyj4872 == 0 && yyv4872 == nil {
			yyv4872 = []Secret{}
			yyc4872 = true
		}
	}
	yyh4872.End()
	if yyc4872 {
		*v = yyv4872
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4876 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4877 := &yyv4876
		yy4877.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4878 := *v
	yyh4878, yyl4878 := z.DecSliceHelperStart()
	var yyc4878 bool
	if yyl4878 == 0 {
		if yyv4878 == nil {
			yyv4878 = []ConfigMap{}
			yyc4878 = true
		} else if len(yyv4878) != 0 {
			yyv4878 = yyv4878[:0]
			yyc4878 = true
		}
	} else if yyl4878 > 0 {
		var yyrr4878, yyrl4878 int
		var yyrt4878 bool
		if yyl4878 > cap(yyv4878) {

			yyrg4878 := len(yyv4878) > 0
			yyv24878 := yyv4878
			yyrl4878, yyrt4878 = z.DecInferLen(yyl4878, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4878 {
				if yyrl4878 <= cap(yyv4878) {
					yyv4878 = yyv4878[:yyrl4878]
				} else {
					yyv4878 = make([]ConfigMap, yyrl4878)
				}
			} else {
				yyv4878 = make([]ConfigMap, yyrl4878)
			}
			yyc4878 = true
			yyrr4878 = len(yyv4878)
			if yyrg4878 {
				copy(yyv4878, yyv24878)
			}
		} else if yyl4878 != len(yyv4878) {
			yyv4878 = yyv4878[:yyl4878]
			yyc4878 = true
		}
		yyj4878 := 0
		for ; yyj4878 < yyrr4878; yyj4878++ {
			yyh4878.ElemContainerState(yyj4878)
			if r.TryDecodeAsNil() {
				yyv4878[yyj4878] = ConfigMap{}
			} else {
				yyv4879 := &yyv4878[yyj4878]
				yyv4879.CodecDecodeSelf(d)
			}

		}
		if yyrt4878 {
			for ; yyj4878 < yyl4878; yyj4878++ {
				yyv4878 = append(yyv4878, ConfigMap{})
				yyh4878.ElemContainerState(yyj4878)
				if r.TryDecodeAsNil() {
					yyv4878[yyj4878] = ConfigMap{}
				} else {
					yyv4880 := &yyv4878[yyj4878]
					yyv4880.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4878 := 0
		for ; !r.CheckBreak(); yyj4878++ {

			if yyj4878 >= len(yyv4878) {
				yyv4878 = append(yyv4878, ConfigMap{}) // var yyz4878 ConfigMap
				yyc4878 = true
			}
			yyh4878.ElemContainerState(yyj4878)
			if yyj4878 < len(yyv4878) {
				if r.TryDecodeAsNil() {
					yyv4878[yyj4878] = ConfigMap{}
				} else {
					yyv4881 := &yyv4878[yyj4878]
					yyv4881.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4878 < len(yyv4878) {
			yyv4878 = yyv4878[:yyj4878]
			yyc4878 = true
		} else if yyj4878 == 0 && yyv4878 == nil {
			yyv4878 = []ConfigMap{}
			yyc4878 = true
		}
	}
	yyh4878.End()
	if yyc4878 {
		*v = yyv4878
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4882 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4883 := &yyv4882
		yy4883.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4884 := *v
	yyh4884, yyl4884 := z.DecSliceHelperStart()
	var yyc4884 bool
	if yyl4884 == 0 {
		if yyv4884 == nil {
			yyv4884 = []ComponentCondition{}
			yyc4884 = true
		} else if len(yyv4884) != 0 {
			yyv4884 = yyv4884[:0]
			yyc4884 = true
		}
	} else if yyl4884 > 0 {
		var yyrr4884, yyrl4884 int
		var yyrt4884 bool
		if yyl4884 > cap(yyv4884) {

			yyrg4884 := len(yyv4884) > 0
			yyv24884 := yyv4884
			yyrl4884, yyrt4884 = z.DecInferLen(yyl4884, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4884 {
				if yyrl4884 <= cap(yyv4884) {
					yyv4884 = yyv4884[:yyrl4884]
				} else {
					yyv4884 = make([]ComponentCondition, yyrl4884)
				}
			} else {
				yyv4884 = make([]ComponentCondition, yyrl4884)
			}
			yyc4884 = true
			yyrr4884 = len(yyv4884)
			if yyrg4884 {
				copy(yyv4884, yyv24884)
			}
		} else if yyl4884 != len(yyv4884) {
			yyv4884 = yyv4884[:yyl4884]
			yyc4884 = true
		}
		yyj4884 := 0
		for ; yyj4884 < yyrr4884; yyj4884++ {
			yyh4884.ElemContainerState(yyj4884)
			if r.TryDecodeAsNil() {
				yyv4884[yyj4884] = ComponentCondition{}
			} else {
				yyv4885 := &yyv4884[yyj4884]
				yyv4885.CodecDecodeSelf(d)
			}

		}
		if yyrt4884 {
			for ; yyj4884 < yyl4884; yyj4884++ {
				yyv4884 = append(yyv4884, ComponentCondition{})
				yyh4884.ElemContainerState(yyj4884)
				if r.TryDecodeAsNil() {
					yyv4884[yyj4884] = ComponentCondition{}
				} else {
					yyv4886 := &yyv4884[yyj4884]
					yyv4886.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4884 := 0
		for ; !r.CheckBreak(); yyj4884++ {

			if yyj4884 >= len(yyv4884) {
				yyv4884 = append(yyv4884, ComponentCondition{}) // var yyz4884 ComponentCondition
				yyc4884 = true
			}
			yyh4884.ElemContainerState(yyj4884)
			if yyj4884 < len(yyv4884) {
				if r.TryDecodeAsNil() {
					yyv4884[yyj4884] = ComponentCondition{}
				} else {
					yyv4887 := &yyv4884[yyj4884]
					yyv4887.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4884 < len(yyv4884) {
			yyv4884 = yyv4884[:yyj4884]
			yyc4884 = true
		} else if yyj4884 == 0 && yyv4884 == nil {
			yyv4884 = []ComponentCondition{}
			yyc4884 = true
		}
	}
	yyh4884.End()
	if yyc4884 {
		*v = yyv4884
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4888 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4889 := &yyv4888
		yy4889.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4890 := *v
	yyh4890, yyl4890 := z.DecSliceHelperStart()
	var yyc4890 bool
	if yyl4890 == 0 {
		if yyv4890 == nil {
			yyv4890 = []ComponentStatus{}
			yyc4890 = true
		} else if len(yyv4890) != 0 {
			yyv4890 = yyv4890[:0]
			yyc4890 = true
		}
	} else if yyl4890 > 0 {
		var yyrr4890, yyrl4890 int
		var yyrt4890 bool
		if yyl4890 > cap(yyv4890) {

			yyrg4890 := len(yyv4890) > 0
			yyv24890 := yyv4890
			yyrl4890, yyrt4890 = z.DecInferLen(yyl4890, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4890 {
				if yyrl4890 <= cap(yyv4890) {
					yyv4890 = yyv4890[:yyrl4890]
				} else {
					yyv4890 = make([]ComponentStatus, yyrl4890)
				}
			} else {
				yyv4890 = make([]ComponentStatus, yyrl4890)
			}
			yyc4890 = true
			yyrr4890 = len(yyv4890)
			if yyrg4890 {
				copy(yyv4890, yyv24890)
			}
		} else if yyl4890 != len(yyv4890) {
			yyv4890 = yyv4890[:yyl4890]
			yyc4890 = true
		}
		yyj4890 := 0
		for ; yyj4890 < yyrr4890; yyj4890++ {
			yyh4890.ElemContainerState(yyj4890)
			if r.TryDecodeAsNil() {
				yyv4890[yyj4890] = ComponentStatus{}
			} else {
				yyv4891 := &yyv4890[yyj4890]
				yyv4891.CodecDecodeSelf(d)
			}

		}
		if yyrt4890 {
			for ; yyj4890 < yyl4890; yyj4890++ {
				yyv4890 = append(yyv4890, ComponentStatus{})
				yyh4890.ElemContainerState(yyj4890)
				if r.TryDecodeAsNil() {
					yyv4890[yyj4890] = ComponentStatus{}
				} else {
					yyv4892 := &yyv4890[yyj4890]
					yyv4892.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4890 := 0
		for ; !r.CheckBreak(); yyj4890++ {

			if yyj4890 >= len(yyv4890) {
				yyv4890 = append(yyv4890, ComponentStatus{}) // var yyz4890 ComponentStatus
				yyc4890 = true
			}
			yyh4890.ElemContainerState(yyj4890)
			if yyj4890 < len(yyv4890) {
				if r.TryDecodeAsNil() {
					yyv4890[yyj4890] = ComponentStatus{}
				} else {
					yyv4893 := &yyv4890[yyj4890]
					yyv4893.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4890 < len(yyv4890) {
			yyv4890 = yyv4890[:yyj4890]
			yyc4890 = true
		} else if yyj4890 == 0 && yyv4890 == nil {
			yyv4890 = []ComponentStatus{}
			yyc4890 = true
		}
	}
	yyh4890.End()
	if yyc4890 {
		*v = yyv4890
	}
}
